; -*- mode: scheme -*-

(FPCore (re im)
 :name "math.abs on complex"
 (sqrt (+ (* re re) (* im im))))

(FPCore (x)
 :name "math.cube on real"
 :herbie-target (pow x 3)
 (* (* x x) x))

(FPCore (x.re x.im)
 :name "math.cube on complex, real part"
 (-
  (* (- (* x.re x.re) (* x.im x.im)) x.re)
  (* (+ (* x.re x.im) (* x.im x.re)) x.im)))

(FPCore (x.re x.im)
 :name "math.cube on complex, imaginary part"
 (+
  (* (- (* x.re x.re) (* x.im x.im)) x.im)
  (* (+ (* x.re x.im) (* x.im x.re)) x.re)))

(FPCore (x.re x.im y.re y.im)
 :name "_divideComplex, real part"
 (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))))

(FPCore (x.re x.im y.re y.im)
 :name "_divideComplex, imaginary part"
 (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))))

(FPCore (re im)
 :name "math.exp on complex, real part"
 (* (exp re) (cos im)))

(FPCore (re im)
 :name "math.exp on complex, imaginary part"
 (* (exp re) (sin im)))

(FPCore (re im)
 :name "math.log/1 on complex, real part"
 (log (sqrt (+ (* re re) (* im im)))))

(FPCore (re im)
 :name "math.log/1 on complex, imaginary part"
 (atan2 im re))

(FPCore (re im base)
 :name "math.log/2 on complex, real part"
 (/
  (+ (* (log (sqrt (+ (* re re) (* im im)))) (log base)) (* (atan2 im re) 0))
  (+ (* (log base) (log base)) (* 0 0))))

(FPCore (re im base)
 :name "math.log/2 on complex, imaginary part"
 (/
  (- (* (atan2 im re) (log base)) (* (log (sqrt (+ (* re re) (* im im)))) 0))
  (+ (* (log base) (log base)) (* 0 0))))

(FPCore (re im)
 :name "math.log10 on complex, real part"
 (/ (log (sqrt (+ (* re re) (* im im)))) (log 10)))

(FPCore (re im)
 :name "math.log10 on complex, imaginary part"
 (/ (atan2 im re) (log 10)))

(FPCore (x.re x.im y.re y.im)
 :name "_multiplyComplex, real part"
 (- (* x.re y.re) (* x.im y.im)))

(FPCore (x.re x.im y.re y.im)
 :name "_multiplyComplex, imaginary part"
 (+ (* x.re y.im) (* x.im y.re)))

(FPCore (x.re x.im y.re y.im)
 :name "powComplex, real part"
 (*
  (exp
   (-
    (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re)
    (* (atan2 x.im x.re) y.im)))
  (cos
   (+
    (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im)
    (* (atan2 x.im x.re) y.re)))))

(FPCore (x.re x.im y.re y.im)
 :name "powComplex, imaginary part"
 (*
  (exp
   (-
    (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re)
    (* (atan2 x.im x.re) y.im)))
  (sin
   (+
    (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im)
    (* (atan2 x.im x.re) y.re)))))

(FPCore (re im)
 :name "math.sqrt on complex, real part"
 :herbie-target
 (if (< re 0)
   (* 0.5 (* (sqrt 2) (sqrt (/ (* im im) (- (sqrt (+ (* re re) (* im im))) re)))))
   (* 0.5 (sqrt (* 2.0 (+ (sqrt (+ (* re re) (* im im))) re)))))
 (* 0.5 (sqrt (* 2.0 (+ (sqrt (+ (* re re) (* im im))) re)))))

(FPCore (re im)
 :name "math.sqrt on complex, imaginary part, im greater than 0 branch"
 (* 0.5 (sqrt (* 2.0 (+ (sqrt (- (* re re) (* im im))) re)))))

(FPCore (re im)
 :name "math.square on complex, real part"
 (- (* re re) (* im im)))

(FPCore (re im)
 :name "math.square on complex, imaginary part"
 (+ (* re im) (* im re)))
