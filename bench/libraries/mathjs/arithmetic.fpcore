; -*- mode: scheme -*-

(FPCore modulus (re im)
 :name "math.abs on complex"
 (sqrt (+ (* re re) (* im im))))

(FPCore modulus_sqr (re im)
 :name "math.abs on complex (squared)"
 (+ (* re re) (* im im)))

(FPCore re_sqr (re im)
 :name "math.square on complex, real part"
 (- (* re re) (* im im)))

(FPCore im_sqr (re im)
 :name "math.square on complex, imaginary part"
 (+ (* re im) (* im re)))

(FPCore (x)
 :name "math.cube on real"
 :alt 
 (! :description (platform libm) (pow x 3))
 (* (* x x) x))

(FPCore (x.re x.im)
 :name "math.cube on complex, real part"
 :alt 
 (! :description (platform libm)
  (+ (* (* x.re x.re) (- x.re x.im))
    (* (* x.re x.im) (- x.re (* 3 x.im)))))

 (-
  (* (re_sqr x.re x.im) x.re)
  (* (im_sqr x.re x.im) x.im)))

(FPCore (x.re x.im)
 :name "math.cube on complex, imaginary part"
 :alt 
 (! :description (platform libm)
  (+
   (* (* x.re x.im) (* 2 x.re))
   (* (* x.im (- x.re x.im)) (+ x.re x.im))))

 (+
  (* (re_sqr x.re x.im) x.im)
  (* (im_sqr x.re x.im) x.re)))

(FPCore (x.re x.im y.re y.im)
 :name "_divideComplex, real part"
 (/ (+ (* x.re y.re) (* x.im y.im)) (modulus_sqr y.re y.im)))

(FPCore (x.re x.im y.re y.im)
 :name "_divideComplex, imaginary part"
 (/ (- (* x.im y.re) (* x.re y.im)) (modulus_sqr y.re y.im)))

(FPCore (re im)
 :name "math.exp on complex, real part"
 (* (exp re) (cos im)))

(FPCore (re im)
 :name "math.exp on complex, imaginary part"
 (* (exp re) (sin im)))

(FPCore (re im)
 :name "math.log/1 on complex, real part"
 (log (modulus re im)))

(FPCore (re im)
 :name "math.log/1 on complex, imaginary part"
 (atan2 im re))

(FPCore (re im base)
 :name "math.log/2 on complex, real part"
 (/
  (+ (* (log (modulus re im)) (log base)) (* (atan2 im re) 0))
  (+ (* (log base) (log base)) (* 0 0))))

(FPCore (re im base)
 :name "math.log/2 on complex, imaginary part"
 (/
  (- (* (atan2 im re) (log base)) (* (log (modulus re im)) 0))
  (+ (* (log base) (log base)) (* 0 0))))

(FPCore (re im)
 :name "math.log10 on complex, real part"
 (/ (log (modulus re im)) (log 10)))

(FPCore (re im)
 :name "math.log10 on complex, imaginary part"
 (/ (atan2 im re) (log 10)))

(FPCore (x.re x.im y.re y.im)
 :name "_multiplyComplex, real part"
 (- (* x.re y.re) (* x.im y.im)))

(FPCore (x.re x.im y.re y.im)
 :name "_multiplyComplex, imaginary part"
 (+ (* x.re y.im) (* x.im y.re)))

(FPCore (x.re x.im y.re y.im)
 :name "powComplex, real part"
 (*
  (exp
   (-
    (* (log (modulus x.re x.im)) y.re)
    (* (atan2 x.im x.re) y.im)))
  (cos
   (+
    (* (log (modulus x.re x.im)) y.im)
    (* (atan2 x.im x.re) y.re)))))

(FPCore (x.re x.im y.re y.im)
 :name "powComplex, imaginary part"
 (*
  (exp
   (-
    (* (log (modulus x.re x.im)) y.re)
    (* (atan2 x.im x.re) y.im)))
  (sin
   (+
    (* (log (modulus x.re x.im)) y.im)
    (* (atan2 x.im x.re) y.re)))))

(FPCore (re im)
 :name "math.sqrt on complex, real part"
 :alt 
 (! :description (platform libm)
  (if (< re 0)
   (* 0.5 (* (sqrt 2) (sqrt (/ (* im im) (- (modulus re im) re)))))
   (* 0.5 (sqrt (* 2.0 (+ (modulus re im) re))))))
   
 (* 0.5 (sqrt (* 2.0 (+ (modulus re im) re)))))

(FPCore (re im)
 :name "math.sqrt on complex, imaginary part, im greater than 0 branch"
 :pre (> im 0)
 (* 0.5 (sqrt (* 2.0 (- (modulus re im) re)))))
