;; from racket/gui https://github.com/racket/gui/commit/e8decf79852b9dac06ebd91a9aae5c0c3b215c34

;; Robby simplifies this to just (/ (* 4 F) (pow (* x-scale y-scale) 2))
(FPCore (a b angle x-scale y-scale)
  :name "Simplification of discriminant from scale-rotated-ellipse"
  (let* ([θ (* (/ angle 180) PI)]
         [F (* (* b a) (* b (- a)))]
         [A (/ (/ (+ (pow (* a (sin θ)) 2) (pow (* b (cos θ)) 2))
                x-scale) x-scale)]
         [B (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin θ)) (cos θ))
                x-scale) y-scale)]
         [C (/ (/ (+ (pow (* a (cos θ)) 2) (pow (* b (sin θ)) 2))
                y-scale) y-scale)])
        (- (* B B) (* (* 4 A) C))))


(FPCore (a b angle x-scale y-scale)
  :name "raw-angle from scale-rotated-ellipse"
  (let* ([θ (* (/ angle 180) PI)]
         [F (* (* b a) (* b (- a)))]
         [A (/ (/ (+ (pow (* a (sin θ)) 2) (pow (* b (cos θ)) 2))
                x-scale) x-scale)]
         [B (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin θ)) (cos θ))
                x-scale) y-scale)]
         [C (/ (/ (+ (pow (* a (cos θ)) 2) (pow (* b (sin θ)) 2))
                y-scale) y-scale)]
         [B^2-4AC (/ (* 4 F) (pow (* x-scale y-scale) 2))]
         [q (* (* 2 B^2-4AC) F)]
         [r (sqrt (+ (pow (- A C) 2) (pow B 2)))])
        (* 180 (/ (atan (/ (- (- C A) r) B)) PI))))

(FPCore (a b angle x-scale y-scale)
  :name "a from scale-rotated-ellipse"
  (let* ([θ (* (/ angle 180) PI)]
         [F (* (* b a) (* b (- a)))]
         [A (/ (/ (+ (pow (* a (sin θ)) 2) (pow (* b (cos θ)) 2))
                x-scale) x-scale)]
         [B (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin θ)) (cos θ))
                x-scale) y-scale)]
         [C (/ (/ (+ (pow (* a (cos θ)) 2) (pow (* b (sin θ)) 2))
                y-scale) y-scale)]
         [B^2-4AC (/ (* 4 F) (pow (* x-scale y-scale) 2))]
         [q (* (* 2 B^2-4AC) F)]
         [r (sqrt (+ (pow (- A C) 2) (pow B 2)))])
        (/ (- (sqrt (* q (+ (+ A C) r))))
         B^2-4AC)))

(FPCore (a b angle x-scale y-scale)
  :name "b from scale-rotated-ellipse"
  (let* ([θ (* (/ angle 180) PI)]
         [F (* (* b a) (* b (- a)))]
         [A (/ (/ (+ (pow (* a (sin θ)) 2) (pow (* b (cos θ)) 2))
                x-scale) x-scale)]
         [B (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin θ)) (cos θ))
                x-scale) y-scale)]
         [C (/ (/ (+ (pow (* a (cos θ)) 2) (pow (* b (sin θ)) 2))
                y-scale) y-scale)]
         [B^2-4AC (/ (* 4 F) (pow (* x-scale y-scale) 2))]
         [q (* (* 2 B^2-4AC) F)]
         [r (sqrt (+ (pow (- A C) 2) (pow B 2)))])
        (/ (- (sqrt (* q (- (+ A C) r))))
       B^2-4AC)))


;; the following 7 are broken-down versions of the three above
(FPCore (a b angle)
  :name "ab-angle->ABCF A"
  (+ (pow (* a (sin (* (/ angle 180) PI))) 2) (pow (* b (cos (* (/ angle 180) PI))) 2)))

(FPCore (a b angle)
  :name "ab-angle->ABCF B"
  (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* PI (/ angle 180)))) (cos (* PI (/ angle 180)))))

(FPCore (a b angle)
  :name "ab-angle->ABCF C"
  (+  (pow (* a (cos (* PI (/ angle 180)))) 2) (pow (* b (sin (* PI (/ angle 180)))) 2)))

(FPCore (a b)
  :name "ab-angle->ABCF D"
  (- (* (* (* a a) b) b)))


(FPCore (A B C)
  :name "ABCF->ab-angle angle"
  (let ([r (sqrt (+ (pow (- A C) 2) (pow B 2)))])
    (* 180
      (/ (atan (* (/ 1 B) (- (- C A) r))) PI))))

(FPCore (A B C F)
  :name "ABCF->ab-angle a"
  (let* ([B2-4AC (- (pow B 2) (* (* 4 A) C))]
         [q (* 2 (* B2-4AC F))]
         [r (sqrt (+ (pow (- A C) 2) (pow B 2)))])
         (/ (- (sqrt (* q (+ (+ A C) r))))
            B2-4AC)))


(FPCore (A B C F)
  :name "ABCF->ab-angle b"
  (let* ([B2-4AC (- (pow B 2) (* (* 4 A) C))]
         [q (* 2 (* B2-4AC F))]
         [r (sqrt (+ (pow (- A C) 2) (pow B 2)))])
         (/ (- (sqrt (* q (- (+ A C) r))))
            B2-4AC)))

(FPCore (eh ew t )
 :name "Example from Robby"
 (let ([t1 (atan (/ (/ eh ew) (tan t)))])
  (fabs (+ (* (* ew (sin t)) (cos t1)) (* (* eh (cos t)) (sin t1))))))

(FPCore (eh ew t)
  :name "Example 2 from Robby"
  (let ([t2 (atan (/ (* (- eh) (tan t)) ew))])
    (fabs (- (* (* ew (cos t)) (cos t2)) (* (* eh (sin t)) (sin t2))))))
  
