; -*- mode: scheme -*-

(FPCore (R lambda1 lambda2 phi1 phi2)
 :name "Distance on a great circle"
 (let ((dlambda (- lambda1 lambda2)))
   (let ((dphi (- phi1 phi2)))
     (let ((a
            (+
             (pow (sin (/ dphi 2)) 2)
             (*
              (cos phi1)
              (cos phi2)
              (sin (/ dlambda 2))
              (sin (/ dlambda 2))))))
       (let ((c (* 2 (atan2 (sqrt a) (sqrt (- 1 a))))))
         (let ((d (* R c)))
           d))))))

(FPCore (R lambda1 lambda2 phi1 phi2)
 :name "Spherical law of cosines"
 (* (acos (+ (* (sin phi1) (sin phi2))
             (* (cos phi1) (cos phi2) (cos (- lambda1 lambda2))))) R))

(FPCore (R lambda1 lambda2 phi1 phi2)
 :name "Equirectangular approximation to distance on a great circle"
 (let ((x (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))))
   (let ((y (- phi1 phi2)))
     (let ((d (* R (sqrt (+ (* x x) (* y y))))))
       d))))

(FPCore (lambda1 lambda2 phi1 phi2)
 :name "Bearing on a great circle"
 (atan2
  (* (sin (- lambda1 lambda2)) (cos phi2))
  (-
   (* (cos phi1) (sin phi2))
   (* (sin phi1) (cos phi2) (cos (- lambda1 lambda2))))))

(FPCore (lambda1 lambda2 phi1 phi2)
 :name "Midpoint on a great circle"
 (let ((dlambda (- lambda1 lambda2)))
   (let ((Bx (* (cos phi2) (cos dlambda))) (By (* (cos phi2) (sin dlambda))))
     (let ((phim
            (atan2
             (+ (sin phi1) (sin phi2))
             (sqrt (+ (pow (+ (cos phi1) Bx) 2) (* By By)))))
           (lambdam (+ lambda1 (atan2 By (+ (cos phi1) Bx)))))
       lambdam))))

(FPCore (lambda1 phi1 phi2 delta theta)
 :name "Destination given bearing on a great circle"
 (let ((phi2
        (asin
         (+
          (* (sin phi1) (cos delta))
          (* (cos phi1) (sin delta) (cos theta))))))
   (let ((lambda2
          (+
           lambda1
           (atan2
            (* (sin theta) (sin delta) (cos phi1))
            (- (cos delta) (* (sin phi1) (sin phi2)))))))
     lambda2)))
