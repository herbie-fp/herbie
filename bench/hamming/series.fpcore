; -*- mode: scheme -*-

(FPCore (x)
 :name "expm1 (example 3.7)"
 :pre (< -0.00017 x)
 :herbie-target
 (* x (+ 1 (/ x 2) (/ (* x x) 6)))

 (- (exp x) 1))

(FPCore (n)
 :name "logs (example 3.8)"
 :pre (> n 6.8e+15)
 :herbie-target
 (- (log (+ n 1)) (- (/ 1 (* 2 n)) (- (/ 1 (* 3 (* n n))) (/ 4 (pow n 3)))))

 (- (* (+ n 1) (log (+ n 1))) (* n (log n)) 1))

(FPCore (x)
 :name "invcot (example 3.9)"
 :pre (and (< -0.026 x) (< x 0.026))
 :herbie-target
 (if (< (fabs x) 0.026)
     (* (/ x 3) (+ 1 (/ (* x x) 15)))
     (- (/ 1 x) (/ 1 (tan x))))

 (- (/ 1 x) (/ 1 (tan x))))

(FPCore (x)
 :name "qlog (example 3.10)"
 :pre (and (< -1 x) (< x 1))
 :herbie-target
 (- (+ 1 x (/ (* x x) 2) (* 5/12 (pow x 3))))

 (/ (log (- 1 x)) (log (+ 1 x))))

(FPCore (x)
 :name "cos2 (problem 3.4.1)"
 (/ (- 1 (cos x)) (* x x)))

(FPCore (a b eps)
 :name "expq3 (problem 3.4.2)"
 :pre (and (< -1 eps) (< eps 1))
 :herbie-target
 (/ (+ a b) (* a b))

 (/
  (* eps (- (exp (* (+ a b) eps)) 1))
  (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))

(FPCore (eps)
 :name "logq (problem 3.4.3)"
 :herbie-target
 (* -2 (+ eps (/ (pow eps 3) 3) (/ (pow eps 5) 5)))

 (log (/ (- 1 eps) (+ 1 eps))))

(FPCore (x)
 :name "sqrtexp (problem 3.4.4)"
 (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))

(FPCore (x)
 :name "sintan (problem 3.4.5)"
 (/ (- x (sin x)) (- x (tan x))))

(FPCore (x n)
 :name "2nthrt (problem 3.4.6)"
 (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))))
