; -*- mode: scheme -*-

(FPCore (x)
 :name "expm1 (example 3.7)"
 ; We want to sample around 0 according to Hamming. We can sample more inputs closer to zero by shrinking the range to +/- 1
 :pre (<= (fabs x) 1)
 ; Hamming suggests taylor series expansion but we have libm functions in FPCore for the default platform
 :alt 
 (! :description (platform libm) (expm1 x))

 (- (exp x) 1))

(FPCore (n)
 :name "logs (example 3.8)"
 :pre (> n 6.8e+15)
 :alt 
 (! :description (platform libm)
  (- (log (+ n 1)) (- (/ 1 (* 2 n)) (- (/ 1 (* 3 (* n n))) (/ 4 (pow n 3))))))

 (- (* (+ n 1) (log (+ n 1))) (* n (log n)) 1))

(FPCore (x)
 :name "invcot (example 3.9)"
 :pre (and (< -0.026 x) (< x 0.026))
 :alt 
 (! :description (platform libm)
  (if (< (fabs x) 0.026)
     (* (/ x 3) (+ 1 (/ (* x x) 15)))
     (- (/ 1 x) (/ 1 (tan x)))))

 (- (/ 1 x) (/ 1 (tan x))))

(FPCore (x)
 :name "qlog (example 3.10)"
 ; We want to sample small x according to Hamming. We can sample more inputs closer to zero by shrinking the range to +/- 1
 :pre (<= (fabs x) 1)
 ; Hamming suggests using Taylor expansion but until we have platforms, we will use FPCore's access to libm functions.
 :alt 
 (! :description (platform libm)
  (/ (log1p (- x)) (log1p x)))

 (/ (log (- 1 x)) (log (+ 1 x))))

(FPCore (x)
 :name "cos2 (problem 3.4.1)"
 (/ (- 1 (cos x)) (* x x)))

(FPCore (a b eps)
 :name "expq3 (problem 3.4.2)"
 :pre (and (<= (fabs a) 710) (<= (fabs b) 710) (<= (* 1e-27 (fmin (fabs a) (fabs b))) eps (fmin (fabs a) (fabs b))))
 ; We want epsilon small compared to a and b according to Hamming. In the precondition we force eps to be smaller in magnitude
 ; than the smaller between a and b but don't force one to be smaller than the other in order to test to see if Herbie can figure it out. 
 ; Bound by 710 to avoid sampling infinite values since we have an exponential.
 ; Chose a multiplicative factor of 1e-27 compared to a in order to not sample epsilon to close to 0 which eliminates the exponent.
 
 ; Hammings' rewrite, page 48
 :alt 
 (! :description (platform libm)
  (+ (/ 1 a) (/ 1 b)))

 (/
  (* eps (- (exp (* (+ a b) eps)) 1))
  (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))

(FPCore (eps)
 :name "logq (problem 3.4.3)"
 ; Using previous notions of small epsilon, simply < +/- 1
 :pre (< (fabs eps) 1)
 ; Hamming suggests using Taylor expansion but FPCore has libm which is contained on the "default" platform.
 :alt 
 (! :description (platform libm)
  (- (log1p (- eps)) (log1p eps)))

 (log (/ (- 1 eps) (+ 1 eps))))

(FPCore (x)
 :name "sqrtexp (problem 3.4.4)"
 (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))

(FPCore (x n)
 :name "2nthrt (problem 3.4.6)"
 (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))))
