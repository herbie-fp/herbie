; Benchmarks from growlibm/HelmholtzEOSMixtureBackend.cpp capturing cancellation near tau-delta coupling and saturation-property differences.

(FPCore (R tau delta dar_dDelta d2ar_dDelta_dTau d2ar_dDelta2 d2ar_dTau2 d2a0_dTau2)
 :pre (and (> R 0)
           (> tau 0)
           (!= (+ 1 (+ (* 2 (* delta dar_dDelta))
                        (* (pow delta 2) d2ar_dDelta2)))
               0))
 (let ((mix (+ 1 (+ (* delta dar_dDelta)
                    (* -1 (* (* delta tau) d2ar_dDelta_dTau)))))
       (den (+ 1 (+ (* 2 (* delta dar_dDelta))
                    (* (pow delta 2) d2ar_dDelta2)))))
   (* R (+ (* -1 (* (pow tau 2) (+ d2ar_dTau2 d2a0_dTau2)))
           (/ (pow mix 2) den)))))

(FPCore (R T mm tau delta dar_dDelta d2ar_dDelta_dTau d2ar_dDelta2 d2ar_dTau2 d2a0_dTau2)
 :pre (and (> R 0)
           (> T 0)
           (> mm 0)
           (> tau 0)
           (!= (* (pow tau 2) (+ d2ar_dTau2 d2a0_dTau2)) 0)
           (>= (- (+ 1 (+ (* 2 (* delta dar_dDelta))
                           (* (pow delta 2) d2ar_dDelta2)))
                  (/ (pow (+ 1 (+ (* delta dar_dDelta)
                                    (* -1 (* (* delta tau) d2ar_dDelta_dTau))))
                          2)
                     (* (pow tau 2) (+ d2ar_dTau2 d2a0_dTau2))))
               0))
 (let ((mix (+ 1 (+ (* delta dar_dDelta)
                    (* -1 (* (* delta tau) d2ar_dDelta_dTau)))))
       (den (+ 1 (+ (* 2 (* delta dar_dDelta))
                    (* (pow delta 2) d2ar_dDelta2))))
       (heat (+ d2ar_dTau2 d2a0_dTau2)))
   (let ((rad (- den (/ (pow mix 2) (* (pow tau 2) heat)))))
     (sqrt (* (/ (* R T) mm) rad)))))

(FPCore (R tau delta d2a0_dTau2 d2ar_dTau2 dar_dDelta d2ar_dDelta_dTau)
 :pre (and (> R 0)
           (> tau 0)
           (>= delta 0))
 (let ((curv (+ d2a0_dTau2 d2ar_dTau2))
       (corr (+ 1 (+ (* delta dar_dDelta)
                     (* -1 (* (* tau delta) d2ar_dDelta_dTau)))))
       (tau2 (pow tau 2)))
   (* R (+ (* -1 (* tau2 curv))
           corr))))

(FPCore (T R rho tau delta d2ar_dDelta_dTau dar_dDelta d2ar_dDelta2)
 :pre (and (> T 0)
           (> R 0)
           (!= rho 0)
           (> tau 0)
           (>= delta 0))
 (let ((term1 (* tau (* delta d2ar_dDelta_dTau)))
       (term2 (* delta dar_dDelta))
       (term3 (* (pow delta 2) d2ar_dDelta2)))
   (let ((sum (+ term1 (+ term2 term3))))
     (* (/ (* T R) rho) sum))))

(FPCore (delta_h T dDeltaV_dT deltaV dDeltaH_dT)
 :pre (and (> T 0)
           (!= (pow delta_h 2) 0))
 (/ (- (* delta_h (+ (* T dDeltaV_dT) deltaV))
       (* T (* deltaV dDeltaH_dT)))
    (pow delta_h 2)))

(FPCore (delta_h T dDeltaV_dp deltaV dDeltaH_dp)
 :pre (and (> T 0)
           (!= (pow delta_h 2) 0))
 (/ (- (* delta_h (* T dDeltaV_dp))
       (* T (* deltaV dDeltaH_dp)))
    (pow delta_h 2)))

(FPCore (denominator numerator dnumerator ddenominator)
 :pre (!= (pow denominator 2) 0)
 (/ (- (* denominator dnumerator)
       (* numerator ddenominator))
    (pow denominator 2)))

(FPCore (rho d2p_dT_drho dp_dT_drho d2p_drho2_T dp_drho_T)
 :pre (and (> rho 0)
           (!= dp_dT_drho 0)
           (!= dp_drho_T 0))
 (- 2
    (* rho (- (/ d2p_dT_drho dp_dT_drho)
              (/ d2p_drho2_T dp_drho_T)))))

(FPCore (rho rhoV rhoL hV hL)
 :pre (and (> rho 0)
           (!= rhoV 0)
           (!= rhoL 0)
           (!= (- hV hL) 0))
 (let ((diff (- (/ 1 rhoV)
                (/ 1 rhoL)))
       (deltaH (- hV hL))
       (rho2 (pow rho 2)))
   (let ((numer (* (* -1 rho2) diff)))
     (/ numer deltaH))))
