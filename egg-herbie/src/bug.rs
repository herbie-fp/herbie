use crate::{ConstantFold, IterData, Math};
use egg::*;

use std::{slice, sync::atomic::Ordering};

pub type RecExpr = egg::RecExpr<Math>;
pub type Pattern = egg::Pattern<Math>;
pub type EGraph = egg::EGraph<Math, ConstantFold>;
pub type Rewrite = egg::Rewrite<Math, ConstantFold>;
pub type Runner = egg::Runner<Math, ConstantFold, IterData>;
pub type Iteration = egg::Iteration<IterData>;

#[test]
fn repro() {
    let strs = vec![
        "(- 1 (cbrt $h0))",
"(- (+ 1 (* 1/3 $h0)) (cbrt $h0))",
"(- (+ 1 (* $h0 (+ 1/3 (* -1/9 $h0)))) (cbrt $h0))",
"(- (+ 1 (* $h0 (+ 1/3 (* $h0 (- (* 5/81 $h0) 1/9))))) (cbrt $h0))",
"(* 1/3 (cbrt (/ 1 (pow $h0 2))))",
"(/ (+ (* -1/9 (cbrt $h0)) (* 1/3 (cbrt (pow $h0 4)))) (pow $h0 2))",
"(/ (+ (* -1/9 (cbrt $h0)) (+ (* 5/81 (cbrt (/ 1 (pow $h0 2)))) (* 1/3 (cbrt (pow $h0 4))))) (pow $h0 2))",
"(/ (+ (* -1/9 (cbrt $h0)) (+ (* -10/243 (cbrt (/ 1 (pow $h0 5)))) (+ (* 5/81 (cbrt (/ 1 (pow $h0 2)))) (* 1/3 (cbrt (pow $h0 4)))))) (pow $h0 2))",
"(* 1/3 (* (cbrt (/ 1 (pow $h0 2))) (/ 1 (pow (cbrt -1) 2))))",
"(/ (+ (* 1/9 (* (cbrt $h0) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow $h0 4)) (/ 1 (pow (cbrt -1) 2))))) (pow $h0 2))",
"(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow $h0 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow $h0 7)) (/ 1 (pow (cbrt -1) 8))))) (pow $h0 3))) (* 1/3 (* (cbrt (pow $h0 4)) (/ 1 (pow (cbrt -1) 2))))) (pow $h0 2))",
"(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow $h0 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow $h0 16)) (/ 1 (pow (cbrt -1) 8))))) (pow $h0 3))) (* -1/9 (* (cbrt (pow $h0 10)) (/ 1 (pow (cbrt -1) 5))))) (pow $h0 3))) (* 1/3 (* (cbrt (pow $h0 4)) (/ 1 (pow (cbrt -1) 2))))) (pow $h0 2))",
"1",
"(+ 1 (* 1/3 $h0))",
"(+ 1 (* $h0 (+ 1/3 (* -1/9 $h0))))",
"(+ 1 (* $h0 (+ 1/3 (* $h0 (- (* 5/81 $h0) 1/9)))))",
"(cbrt $h0)",
"(* $h0 (+ (cbrt (/ 1 (pow $h0 2))) (* 1/3 (cbrt (/ 1 (pow $h0 5))))))",
"(* $h0 (+ (cbrt (/ 1 (pow $h0 2))) (+ (* -1/9 (cbrt (/ 1 (pow $h0 8)))) (* 1/3 (cbrt (/ 1 (pow $h0 5)))))))",
"(* $h0 (+ (cbrt (/ 1 (pow $h0 2))) (+ (* -1/9 (cbrt (/ 1 (pow $h0 8)))) (+ (* 5/81 (cbrt (/ 1 (pow $h0 11)))) (* 1/3 (cbrt (/ 1 (pow $h0 5))))))))",
"(* -1 (* (cbrt $h0) (cbrt -1)))",
"(* -1 (* $h0 (+ (* -1/3 (* (cbrt (/ 1 (pow $h0 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow $h0 2))) (cbrt -1)))))",
"(* -1 (* $h0 (+ (* -1 (/ (+ (* 1/9 (* (cbrt $h0) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow $h0 4)) (/ 1 (pow (cbrt -1) 2))))) (pow $h0 3))) (* (cbrt (/ 1 (pow $h0 2))) (cbrt -1)))))",
"(* -1 (* $h0 (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow $h0 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow $h0 7)) (/ 1 (pow (cbrt -1) 8))))) (pow $h0 3))) (* 1/3 (* (cbrt (pow $h0 4)) (/ 1 (pow (cbrt -1) 2))))) (pow $h0 3))) (* (cbrt (/ 1 (pow $h0 2))) (cbrt -1)))))",
"1",
"(+ 1 $h0)",
"(+ 1 $h0)",
"(+ 1 $h0)",
"$h0",
"(* $h0 (+ 1 (/ 1 $h0)))",
"(* $h0 (+ 1 (/ 1 $h0)))",
"(* $h0 (+ 1 (/ 1 $h0)))",
"$h0",
"(* $h0 (+ 1 (/ 1 $h0)))",
"(* $h0 (+ 1 (/ 1 $h0)))",
"(* $h0 (+ 1 (/ 1 $h0)))",
"(cbrt $h0)",
"(cbrt $h0)",
"(cbrt $h0)",
"(cbrt $h0)",
"(cbrt $h0)",
"(cbrt $h0)",
"(cbrt $h0)",
"(cbrt $h0)",
"(* -1 (* (cbrt $h0) (cbrt -1)))",
"(* -1 (* (cbrt $h0) (cbrt -1)))",
"(* -1 (* (cbrt $h0) (cbrt -1)))",
"(* -1 (* (cbrt $h0) (cbrt -1)))"
    ];

    let rules: Vec<Rewrite> = vec![
        rewrite!("not-true"; "(not (TRUE))" => "(FALSE)"),
        rewrite!("not-false"; "(not (FALSE))" => "(TRUE)"),
        rewrite!("not-not"; "(not (not ?a))" => "?a"),
        rewrite!("not-and"; "(not (and ?a ?b))" => "(or (not ?a) (not ?b))"),
        rewrite!("not-or"; "(not (or ?a ?b))" => "(and (not ?a) (not ?b))"),
        rewrite!("and-true-l"; "(and (TRUE) ?a)" => "?a"),
        rewrite!("and-true-r"; "(and ?a (TRUE))" => "?a"),
        rewrite!("and-false-l"; "(and (FALSE) ?a)" => "(FALSE)"),
        rewrite!("and-false-r"; "(and ?a (FALSE))" => "(FALSE)"),
        rewrite!("and-same"; "(and ?a ?a)" => "?a"),
        rewrite!("or-true-l"; "(or (TRUE) ?a)" => "(TRUE)"),
        rewrite!("or-true-r"; "(or ?a (TRUE))" => "(TRUE)"),
        rewrite!("or-false-l"; "(or (FALSE) ?a)" => "?a"),
        rewrite!("or-false-r"; "(or ?a (FALSE))" => "?a"),
        rewrite!("or-same"; "(or ?a ?a)" => "?a"),
        rewrite!("if-true"; "(if (TRUE) ?x ?y)" => "?x"),
        rewrite!("if-false"; "(if (FALSE) ?x ?y)" => "?y"),
        rewrite!("if-same"; "(if ?a ?x ?x)" => "?x"),
        rewrite!("if-not"; "(if (not ?a) ?x ?y)" => "(if ?a ?y ?x)"),
        rewrite!("if-if-or"; "(if ?a ?x (if ?b ?x ?y))" => "(if (or ?a ?b) ?x ?y)"),
        rewrite!("if-if-or-not"; "(if ?a ?x (if ?b ?y ?x))" => "(if (or ?a (not ?b)) ?x ?y)"),
        rewrite!("if-if-and"; "(if ?a (if ?b ?x ?y) ?y)" => "(if (and ?a ?b) ?x ?y)"),
        rewrite!("if-if-and-not"; "(if ?a (if ?b ?y ?x) ?y)" => "(if (and ?a (not ?b)) ?x ?y)"),
        rewrite!("lt-same"; "(< ?x ?x)" => "(FALSE)"),
        rewrite!("gt-same"; "(> ?x ?x)" => "(FALSE)"),
        rewrite!("lte-same"; "(<= ?x ?x)" => "(TRUE)"),
        rewrite!("gte-same"; "(>= ?x ?x)" => "(TRUE)"),
        rewrite!("not-lt"; "(not (< ?x ?y))" => "(>= ?x ?y)"),
        rewrite!("not-gt"; "(not (> ?x ?y))" => "(<= ?x ?y)"),
        rewrite!("not-lte"; "(not (<= ?x ?y))" => "(> ?x ?y)"),
        rewrite!("not-gte"; "(not (>= ?x ?y))" => "(< ?x ?y)"),
        rewrite!("erf-odd"; "(erf (neg ?x))" => "(neg (erf ?x))"),
        rewrite!("sinh-def"; "(sinh ?x)" => "(/ (- (exp ?x) (exp (neg ?x))) 2)"),
        rewrite!("cosh-def"; "(cosh ?x)" => "(/ (+ (exp ?x) (exp (neg ?x))) 2)"),
        rewrite!("tanh-def-a"; "(tanh ?x)" => "(/ (- (exp ?x) (exp (neg ?x))) (+ (exp ?x) (exp (neg ?x))))"),
        rewrite!("tanh-def-b"; "(tanh ?x)" => "(/ (- (exp (* 2 ?x)) 1) (+ (exp (* 2 ?x)) 1))"),
        rewrite!("tanh-def-c"; "(tanh ?x)" => "(/ (- 1 (exp (* -2 ?x))) (+ 1 (exp (* -2 ?x))))"),
        rewrite!("sinh-cosh"; "(- (* (cosh ?x) (cosh ?x)) (* (sinh ?x) (sinh ?x)))" => "1"),
        rewrite!("sinh-+-cosh"; "(+ (cosh ?x) (sinh ?x))" => "(exp ?x)"),
        rewrite!("sinh---cosh"; "(- (cosh ?x) (sinh ?x))" => "(exp (neg ?x))"),
        rewrite!("cos-sin-sum"; "(+ (* (cos ?a) (cos ?a)) (* (sin ?a) (sin ?a)))" => "1"),
        rewrite!("1-sub-cos"; "(- 1 (* (cos ?a) (cos ?a)))" => "(* (sin ?a) (sin ?a))"),
        rewrite!("1-sub-sin"; "(- 1 (* (sin ?a) (sin ?a)))" => "(* (cos ?a) (cos ?a))"),
        rewrite!("-1-add-cos"; "(+ (* (cos ?a) (cos ?a)) -1)" => "(neg (* (sin ?a) (sin ?a)))"),
        rewrite!("-1-add-sin"; "(+ (* (sin ?a) (sin ?a)) -1)" => "(neg (* (cos ?a) (cos ?a)))"),
        rewrite!("sub-1-cos"; "(- (* (cos ?a) (cos ?a)) 1)" => "(neg (* (sin ?a) (sin ?a)))"),
        rewrite!("sub-1-sin"; "(- (* (sin ?a) (sin ?a)) 1)" => "(neg (* (cos ?a) (cos ?a)))"),
        rewrite!("sin-PI/6"; "(sin (/ (PI) 6))" => "1/2"),
        rewrite!("sin-PI/4"; "(sin (/ (PI) 4))" => "(/ (sqrt 2) 2)"),
        rewrite!("sin-PI/3"; "(sin (/ (PI) 3))" => "(/ (sqrt 3) 2)"),
        rewrite!("sin-PI/2"; "(sin (/ (PI) 2))" => "1"),
        rewrite!("sin-PI"; "(sin (PI))" => "0"),
        rewrite!("sin-+PI"; "(sin (+ ?x (PI)))" => "(neg (sin ?x))"),
        rewrite!("sin-+PI/2"; "(sin (+ ?x (/ (PI) 2)))" => "(cos ?x)"),
        rewrite!("cos-PI/6"; "(cos (/ (PI) 6))" => "(/ (sqrt 3) 2)"),
        rewrite!("cos-PI/4"; "(cos (/ (PI) 4))" => "(/ (sqrt 2) 2)"),
        rewrite!("cos-PI/3"; "(cos (/ (PI) 3))" => "1/2"),
        rewrite!("cos-PI/2"; "(cos (/ (PI) 2))" => "0"),
        rewrite!("cos-PI"; "(cos (PI))" => "-1"),
        rewrite!("cos-+PI"; "(cos (+ ?x (PI)))" => "(neg (cos ?x))"),
        rewrite!("cos-+PI/2"; "(cos (+ ?x (/ (PI) 2)))" => "(neg (sin ?x))"),
        rewrite!("tan-PI/6"; "(tan (/ (PI) 6))" => "(/ 1 (sqrt 3))"),
        rewrite!("tan-PI/4"; "(tan (/ (PI) 4))" => "1"),
        rewrite!("tan-PI/3"; "(tan (/ (PI) 3))" => "(sqrt 3)"),
        rewrite!("tan-PI"; "(tan (PI))" => "0"),
        rewrite!("tan-+PI"; "(tan (+ ?x (PI)))" => "(tan ?x)"),
        rewrite!("hang-0p-tan"; "(/ (sin ?a) (+ 1 (cos ?a)))" => "(tan (/ ?a 2))"),
        rewrite!("hang-0m-tan"; "(/ (neg (sin ?a)) (+ 1 (cos ?a)))" => "(tan (/ (neg ?a) 2))"),
        rewrite!("hang-p0-tan"; "(/ (- 1 (cos ?a)) (sin ?a))" => "(tan (/ ?a 2))"),
        rewrite!("hang-m0-tan"; "(/ (- 1 (cos ?a)) (neg (sin ?a)))" => "(tan (/ (neg ?a) 2))"),
        rewrite!("hang-p-tan"; "(/ (+ (sin ?a) (sin ?b)) (+ (cos ?a) (cos ?b)))" => "(tan (/ (+ ?a ?b) 2))"),
        rewrite!("hang-m-tan"; "(/ (- (sin ?a) (sin ?b)) (+ (cos ?a) (cos ?b)))" => "(tan (/ (- ?a ?b) 2))"),
        rewrite!("sin-neg"; "(sin (neg ?x))" => "(neg (sin ?x))"),
        rewrite!("cos-neg"; "(cos (neg ?x))" => "(cos ?x)"),
        rewrite!("tan-neg"; "(tan (neg ?x))" => "(neg (tan ?x))"),
        rewrite!("sin-0"; "(sin 0)" => "0"),
        rewrite!("cos-0"; "(cos 0)" => "1"),
        rewrite!("tan-0"; "(tan 0)" => "0"),
        rewrite!("log-rec"; "(log (/ 1 ?a))" => "(neg (log ?a))"),
        rewrite!("log-E"; "(log (E))" => "1"),
        rewrite!("pow-base-0"; "(pow 0 ?a)" => "0"),
        rewrite!("exp-to-pow"; "(exp (* (log ?a) ?b))" => "(pow ?a ?b)"),
        rewrite!("unpow1/2"; "(pow ?a 1/2)" => "(sqrt ?a)"),
        rewrite!("unpow2"; "(pow ?a 2)" => "(* ?a ?a)"),
        rewrite!("unpow3"; "(pow ?a 3)" => "(* (* ?a ?a) ?a)"),
        rewrite!("unpow1/3"; "(pow ?a 1/3)" => "(cbrt ?a)"),
        rewrite!("pow-plus"; "(* (pow ?a ?b) ?a)" => "(pow ?a (+ ?b 1))"),
        rewrite!("unpow0"; "(pow ?a 0)" => "1"),
        rewrite!("pow-base-1"; "(pow 1 ?a)" => "1"),
        rewrite!("unpow1"; "(pow ?a 1)" => "?a"),
        rewrite!("unpow-1"; "(pow ?a -1)" => "(/ 1 ?a)"),
        rewrite!("prod-exp"; "(* (exp ?a) (exp ?b))" => "(exp (+ ?a ?b))"),
        rewrite!("rec-exp"; "(/ 1 (exp ?a))" => "(exp (neg ?a))"),
        rewrite!("div-exp"; "(/ (exp ?a) (exp ?b))" => "(exp (- ?a ?b))"),
        rewrite!("exp-prod"; "(exp (* ?a ?b))" => "(pow (exp ?a) ?b)"),
        rewrite!("exp-sqrt"; "(exp (/ ?a 2))" => "(sqrt (exp ?a))"),
        rewrite!("exp-cbrt"; "(exp (/ ?a 3))" => "(cbrt (exp ?a))"),
        rewrite!("exp-lft-sqr"; "(exp (* ?a 2))" => "(* (exp ?a) (exp ?a))"),
        rewrite!("exp-lft-cube"; "(exp (* ?a 3))" => "(pow (exp ?a) 3)"),
        rewrite!("exp-sum"; "(exp (+ ?a ?b))" => "(* (exp ?a) (exp ?b))"),
        rewrite!("exp-neg"; "(exp (neg ?a))" => "(/ 1 (exp ?a))"),
        rewrite!("exp-diff"; "(exp (- ?a ?b))" => "(/ (exp ?a) (exp ?b))"),
        rewrite!("exp-0"; "(exp 0)" => "1"),
        rewrite!("exp-1-e"; "(exp 1)" => "(E)"),
        rewrite!("1-exp"; "1" => "(exp 0)"),
        rewrite!("e-exp-1"; "(E)" => "(exp 1)"),
        rewrite!("rem-exp-log"; "(exp (log ?x))" => "?x"),
        rewrite!("rem-log-exp"; "(log (exp ?x))" => "?x"),
        rewrite!("cube-unmult"; "(* ?x (* ?x ?x))" => "(pow ?x 3)"),
        rewrite!("cube-prod"; "(pow (* ?x ?y) 3)" => "(* (pow ?x 3) (pow ?y 3))"),
        rewrite!("cube-div"; "(pow (/ ?x ?y) 3)" => "(/ (pow ?x 3) (pow ?y 3))"),
        rewrite!("cube-mult"; "(pow ?x 3)" => "(* ?x (* ?x ?x))"),
        rewrite!("rem-cube-cbrt"; "(pow (cbrt ?x) 3)" => "?x"),
        rewrite!("rem-cbrt-cube"; "(cbrt (pow ?x 3))" => "?x"),
        rewrite!("rem-3cbrt-lft"; "(* (* (cbrt ?x) (cbrt ?x)) (cbrt ?x))" => "?x"),
        rewrite!("rem-3cbrt-rft"; "(* (cbrt ?x) (* (cbrt ?x) (cbrt ?x)))" => "?x"),
        rewrite!("cube-neg"; "(pow (neg ?x) 3)" => "(neg (pow ?x 3))"),
        rewrite!("fabs-fabs"; "(fabs (fabs ?x))" => "(fabs ?x)"),
        rewrite!("fabs-sub"; "(fabs (- ?a ?b))" => "(fabs (- ?b ?a))"),
        rewrite!("fabs-neg"; "(fabs (neg ?x))" => "(fabs ?x)"),
        rewrite!("fabs-sqr"; "(fabs (* ?x ?x))" => "(* ?x ?x)"),
        rewrite!("fabs-mul"; "(fabs (* ?a ?b))" => "(* (fabs ?a) (fabs ?b))"),
        rewrite!("fabs-div"; "(fabs (/ ?a ?b))" => "(/ (fabs ?a) (fabs ?b))"),
        rewrite!("sqr-neg"; "(* (neg ?x) (neg ?x))" => "(* ?x ?x)"),
        rewrite!("sqr-abs"; "(* (fabs ?x) (fabs ?x))" => "(* ?x ?x)"),
        rewrite!("rem-square-sqrt"; "(* (sqrt ?x) (sqrt ?x))" => "?x"),
        rewrite!("rem-sqrt-square"; "(sqrt (* ?x ?x))" => "(fabs ?x)"),
        rewrite!("div-sub"; "(/ (- ?a ?b) ?c)" => "(- (/ ?a ?c) (/ ?b ?c))"),
        rewrite!("times-frac"; "(/ (* ?a ?b) (* ?c ?d))" => "(* (/ ?a ?c) (/ ?b ?d))"),
        rewrite!("sub-neg"; "(- ?a ?b)" => "(+ ?a (neg ?b))"),
        rewrite!("unsub-neg"; "(+ ?a (neg ?b))" => "(- ?a ?b)"),
        rewrite!("neg-sub0"; "(neg ?b)" => "(- 0 ?b)"),
        rewrite!("neg-mul-1"; "(neg ?a)" => "(* -1 ?a)"),
        rewrite!("+-lft-identity"; "(+ 0 ?a)" => "?a"),
        rewrite!("+-rgt-identity"; "(+ ?a 0)" => "?a"),
        rewrite!("--rgt-identity"; "(- ?a 0)" => "?a"),
        rewrite!("sub0-neg"; "(- 0 ?a)" => "(neg ?a)"),
        rewrite!("remove-double-neg"; "(neg (neg ?a))" => "?a"),
        rewrite!("*-lft-identity"; "(* 1 ?a)" => "?a"),
        rewrite!("*-rgt-identity"; "(* ?a 1)" => "?a"),
        rewrite!("/-rgt-identity"; "(/ ?a 1)" => "?a"),
        rewrite!("mul-1-neg"; "(* -1 ?a)" => "(neg ?a)"),
        rewrite!("+-inverses"; "(- ?a ?a)" => "0"),
        rewrite!("div0"; "(/ 0 ?a)" => "0"),
        rewrite!("mul0-lft"; "(* 0 ?a)" => "0"),
        rewrite!("mul0-rgt"; "(* ?a 0)" => "0"),
        rewrite!("*-inverses"; "(/ ?a ?a)" => "1"),
        rewrite!("remove-double-div"; "(/ 1 (/ 1 ?a))" => "?a"),
        rewrite!("rgt-mult-inverse"; "(* ?a (/ 1 ?a))" => "1"),
        rewrite!("lft-mult-inverse"; "(* (/ 1 ?a) ?a)" => "1"),
        rewrite!("swap-sqr"; "(* (* ?a ?b) (* ?a ?b))" => "(* (* ?a ?a) (* ?b ?b))"),
        rewrite!("unswap-sqr"; "(* (* ?a ?a) (* ?b ?b))" => "(* (* ?a ?b) (* ?a ?b))"),
        rewrite!("difference-of-squares"; "(- (* ?a ?a) (* ?b ?b))" => "(* (+ ?a ?b) (- ?a ?b))"),
        rewrite!("difference-of-sqr-1"; "(- (* ?a ?a) 1)" => "(* (+ ?a 1) (- ?a 1))"),
        rewrite!("difference-of-sqr--1"; "(+ (* ?a ?a) -1)" => "(* (+ ?a 1) (- ?a 1))"),
        rewrite!("pow-sqr"; "(* (pow ?a ?b) (pow ?a ?b))" => "(pow ?a (* 2 ?b))"),
        rewrite!("cancel-sign-sub"; "(- ?a (* (neg ?b) ?c))" => "(+ ?a (* ?b ?c))"),
        rewrite!("cancel-sign-sub-inv"; "(- ?a (* ?b ?c))" => "(+ ?a (* (neg ?b) ?c))"),
        rewrite!("distribute-lft-neg-in"; "(neg (* ?a ?b))" => "(* (neg ?a) ?b)"),
        rewrite!("distribute-rgt-neg-in"; "(neg (* ?a ?b))" => "(* ?a (neg ?b))"),
        rewrite!("distribute-lft-neg-out"; "(* (neg ?a) ?b)" => "(neg (* ?a ?b))"),
        rewrite!("distribute-rgt-neg-out"; "(* ?a (neg ?b))" => "(neg (* ?a ?b))"),
        rewrite!("distribute-neg-in"; "(neg (+ ?a ?b))" => "(+ (neg ?a) (neg ?b))"),
        rewrite!("distribute-neg-out"; "(+ (neg ?a) (neg ?b))" => "(neg (+ ?a ?b))"),
        rewrite!("distribute-frac-neg"; "(/ (neg ?a) ?b)" => "(neg (/ ?a ?b))"),
        rewrite!("distribute-frac-neg2"; "(/ ?a (neg ?b))" => "(neg (/ ?a ?b))"),
        rewrite!("distribute-neg-frac"; "(neg (/ ?a ?b))" => "(/ (neg ?a) ?b)"),
        rewrite!("distribute-neg-frac2"; "(neg (/ ?a ?b))" => "(/ ?a (neg ?b))"),
        rewrite!("distribute-lft-in"; "(* ?a (+ ?b ?c))" => "(+ (* ?a ?b) (* ?a ?c))"),
        rewrite!("distribute-rgt-in"; "(* ?a (+ ?b ?c))" => "(+ (* ?b ?a) (* ?c ?a))"),
        rewrite!("distribute-lft-out"; "(+ (* ?a ?b) (* ?a ?c))" => "(* ?a (+ ?b ?c))"),
        rewrite!("distribute-lft-out--"; "(- (* ?a ?b) (* ?a ?c))" => "(* ?a (- ?b ?c))"),
        rewrite!("distribute-rgt-out"; "(+ (* ?b ?a) (* ?c ?a))" => "(* ?a (+ ?b ?c))"),
        rewrite!("distribute-rgt-out--"; "(- (* ?b ?a) (* ?c ?a))" => "(* ?a (- ?b ?c))"),
        rewrite!("distribute-lft1-in"; "(+ (* ?b ?a) ?a)" => "(* (+ ?b 1) ?a)"),
        rewrite!("distribute-rgt1-in"; "(+ ?a (* ?c ?a))" => "(* (+ ?c 1) ?a)"),
        rewrite!("count-2"; "(+ ?x ?x)" => "(* 2 ?x)"),
        rewrite!("associate-+r+"; "(+ ?a (+ ?b ?c))" => "(+ (+ ?a ?b) ?c)"),
        rewrite!("associate-+l+"; "(+ (+ ?a ?b) ?c)" => "(+ ?a (+ ?b ?c))"),
        rewrite!("associate-+r-"; "(+ ?a (- ?b ?c))" => "(- (+ ?a ?b) ?c)"),
        rewrite!("associate-+l-"; "(+ (- ?a ?b) ?c)" => "(- ?a (- ?b ?c))"),
        rewrite!("associate--r+"; "(- ?a (+ ?b ?c))" => "(- (- ?a ?b) ?c)"),
        rewrite!("associate--l+"; "(- (+ ?a ?b) ?c)" => "(+ ?a (- ?b ?c))"),
        rewrite!("associate--l-"; "(- (- ?a ?b) ?c)" => "(- ?a (+ ?b ?c))"),
        rewrite!("associate--r-"; "(- ?a (- ?b ?c))" => "(+ (- ?a ?b) ?c)"),
        rewrite!("associate-*r*"; "(* ?a (* ?b ?c))" => "(* (* ?a ?b) ?c)"),
        rewrite!("associate-*l*"; "(* (* ?a ?b) ?c)" => "(* ?a (* ?b ?c))"),
        rewrite!("associate-*r/"; "(* ?a (/ ?b ?c))" => "(/ (* ?a ?b) ?c)"),
        rewrite!("associate-*l/"; "(* (/ ?a ?b) ?c)" => "(/ (* ?a ?c) ?b)"),
        rewrite!("associate-/r*"; "(/ ?a (* ?b ?c))" => "(/ (/ ?a ?b) ?c)"),
        rewrite!("associate-/r/"; "(/ ?a (/ ?b ?c))" => "(* (/ ?a ?b) ?c)"),
        rewrite!("associate-/l/"; "(/ (/ ?b ?c) ?a)" => "(/ ?b (* ?a ?c))"),
        rewrite!("associate-/l*"; "(/ (* ?b ?c) ?a)" => "(* ?b (/ ?c ?a))"),
        rewrite!("+-commutative"; "(+ ?a ?b)" => "(+ ?b ?a)"),
        rewrite!("*-commutative"; "(* ?a ?b)" => "(* ?b ?a)"),
    ];

    let _ = env_logger::try_init();

    let mut runner = Runner::new(Default::default()).with_explanations_enabled();
    let exprs: Vec<RecExpr> = strs.iter().map(|s| s.parse().unwrap()).collect();
    for expr in &exprs {
        runner = runner.with_expr(expr);
    }

   runner
        .with_node_limit(8000)
        .with_hook(|r| {
            if r.egraph.analysis.unsound.load(Ordering::SeqCst) {
                Err("Unsoundness detected".into())
            } else {
                Ok(())
            }
        })
        .run(&rules);
}
