((-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a x)) (*.f64 a x))
((expm1.f64 (*.f64 x a)) (*.f64 x a) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (- (exp (* a x)) 1) (*.f64 x a)) #s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x) (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) (*.f64 (*.f64 a a) x) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))
(#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x)) (*.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x) (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) (*.f64 (*.f64 a x) a) #s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)) x)) (*.f64 #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)) x) #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) a) #s(literal 1/2 binary64) x) a)) (*.f64 (fma.f64 (*.f64 (*.f64 x x) a) #s(literal 1/2 binary64) x) a) (fma.f64 (*.f64 (*.f64 x x) a) #s(literal 1/2 binary64) x) (*.f64 (*.f64 x x) a) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) a x) a)) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) a x) a) (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) a x) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))) #s(literal 1 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64)) (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a x) (*.f64 #s(literal 1/6 binary64) x))
((fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) a) x (*.f64 x a)) #s(approx (- (exp (* a x)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) a) x (*.f64 x a))) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) a) (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) x) a)) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) x) a) (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) x) (*.f64 x a) (*.f64 #s(literal 1/6 binary64) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)))
((-.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64))) (exp.f64 x))
((/.f64 (exp.f64 x) (expm1.f64 x)) (exp.f64 x) (expm1.f64 x) #s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (fma.f64 #s(literal 1/12 binary64) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 (exp.f64 x) (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))) (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (expm1.f64 (+.f64 x x)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))
(#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) (*.f64 x x) #s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (- (/ 1 x) -1/2)) (*.f64 #s(literal 1/12 binary64) x))) #s(approx (+ (* 1/12 x) (- (/ 1 x) -1/2)) (*.f64 #s(literal 1/12 binary64) x)) (*.f64 #s(literal 1/12 binary64) x) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (- (/ 1 x) -1/2) #s(literal 1/2 binary64)))) (fma.f64 #s(literal 1/12 binary64) x #s(approx (- (/ 1 x) -1/2) #s(literal 1/2 binary64))) #s(approx (- (/ 1 x) -1/2) #s(literal 1/2 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) x) #s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))
((*.f64 #s(approx (/ (exp x) (- (exp (+ x x)) 1)) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -31/30240 binary64) (-.f64 (*.f64 #s(literal 7/720 binary64) (*.f64 x x)) #s(literal 1/12 binary64))) x (/.f64 #s(literal 1/2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(approx (/ (exp x) (- (exp (+ x x)) 1)) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -31/30240 binary64) (-.f64 (*.f64 #s(literal 7/720 binary64) (*.f64 x x)) #s(literal 1/12 binary64))) x (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -31/30240 binary64) (-.f64 (*.f64 #s(literal 7/720 binary64) (*.f64 x x)) #s(literal 1/12 binary64))) x (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -31/30240 binary64) (-.f64 (*.f64 #s(literal 7/720 binary64) (*.f64 x x)) #s(literal 1/12 binary64))) (/.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) (expm1.f64 x)) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 #s(literal 7/720 binary64) (*.f64 x x)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 x))
((+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))
((+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (/.f64 (neg.f64 b) a) (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))
((+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (+ (/ (/ (neg b) a) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) (* 2 a))) #s(literal 0 binary64)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) b)) (*.f64 #s(literal 2 binary64) a)) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) b)) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) b) (*.f64 (*.f64 #s(literal -2 binary64) a) c) (/.f64 (+.f64 (neg.f64 b) #s(approx (sqrt (+ (* (* -4 c) a) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b))) (*.f64 #s(literal 2 binary64) a)) (+.f64 (neg.f64 b) #s(approx (sqrt (+ (* (* -4 c) a) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b))) (neg.f64 b) #s(approx (sqrt (+ (* (* -4 c) a) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (/.f64 (/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b)))
((/.f64 (/.f64 #s(approx (- (+ (* (* a c) -4) (* b b)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 #s(approx (- (+ (* (* a c) -4) (* b b)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b))) #s(approx (- (+ (* (* a c) -4) (* b b)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)) (/.f64 (neg.f64 c) b) (neg.f64 c) (*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b)) (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (+ (* (* -4 c) a) (* b b)))) (* 2 a)) (*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))) (/.f64 c (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 2 binary64)) (neg.f64 b)) (/.f64 #s(approx (+ (neg b) (sqrt (+ (* (* -4 c) a) (* b b)))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 2 binary64)) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (+ (neg b) (sqrt (+ (* (* -4 c) a) (* b b)))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 2 binary64)) (neg.f64 b))) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 a #s(literal -2 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 (*.f64 a #s(literal -2 binary64)) #s(literal 2 binary64)) a)) (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 a #s(literal -2 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 a #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 b #s(literal 2 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))
((-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 c (neg.f64 b)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)) (fma.f64 (/.f64 c b) a (neg.f64 b)) (/.f64 c b) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b))) (/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b)) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (/.f64 (*.f64 c c) b) (*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a))))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b))) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)) (/.f64 c b) (/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c) (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (*.f64 (/.f64 a b) c) (/.f64 c b) c) (neg.f64 b))) (/.f64 (fma.f64 (*.f64 (/.f64 a b) c) (/.f64 c b) c) (neg.f64 b)) (fma.f64 (*.f64 (/.f64 a b) c) (/.f64 c b) c) (*.f64 (/.f64 a b) c) (-.f64 (*.f64 b b) (fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))) (/.f64 (-.f64 (*.f64 b b) (fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 b b) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))) (neg.f64 b)))
((exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 1/2 binary64))) (/.f64 (-.f64 (neg.f64 b) (exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 b) (exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 1/2 binary64)))) (neg.f64 b) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (/.f64 (neg.f64 b) a) (/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (* (* (/ a b) -2) c) (*.f64 #s(literal -2 binary64) (*.f64 a (/.f64 c b))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (* (* (/ a b) -2) c) (*.f64 #s(literal -2 binary64) (*.f64 a (/.f64 c b))))) #s(approx (* (* (/ a b) -2) c) (*.f64 #s(literal -2 binary64) (*.f64 a (/.f64 c b)))) (*.f64 #s(literal -2 binary64) (*.f64 a (/.f64 c b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (*.f64 c c) (/.f64 a (*.f64 b b)) c) (neg.f64 b))) (/.f64 (fma.f64 (*.f64 c c) (/.f64 a (*.f64 b b)) c) (neg.f64 b)) (fma.f64 (*.f64 c c) (/.f64 a (*.f64 b b)) c) (*.f64 c c) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (fma.f64 (/.f64 a b) (/.f64 c b) #s(literal 1 binary64)) b) c (/.f64 (neg.f64 b) a))) (fma.f64 (/.f64 (fma.f64 (/.f64 a b) (/.f64 c b) #s(literal 1 binary64)) b) c (/.f64 (neg.f64 b) a)) (/.f64 (fma.f64 (/.f64 a b) (/.f64 c b) #s(literal 1 binary64)) b) (fma.f64 (/.f64 a b) (/.f64 c b) #s(literal 1 binary64)) (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 a (/.f64 c b)) (/.f64 a (*.f64 b b)))
((/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))) (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))
((/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a) (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (/.f64 c b_2) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (*.f64 a a)) (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (*.f64 (neg.f64 b_2) a) (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (/.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) a) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2)) (/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 a (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))
((-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) a)) (/.f64 (neg.f64 b_2) a) (neg.f64 b_2) (/.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) (/.f64 c b_2) (-.f64 (neg.f64 b_2) b_2) (/.f64 #s(approx (- (* (neg b_2) a) (* a (sqrt (+ (* (neg a) c) (* b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) b_2) a)) (*.f64 a a)) #s(approx (- (* (neg b_2) a) (* a (sqrt (+ (* (neg a) c) (* b_2 b_2))))) (*.f64 (-.f64 (neg.f64 b_2) b_2) a)) (*.f64 (-.f64 (neg.f64 b_2) b_2) a) (/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 c) a))))) (*.f64 a a)) (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 c) a))))) (*.f64 (neg.f64 b_2) a) (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal 1/2 binary64) c))) #s(approx (/ (- (neg b_2) (sqrt (+ (* (neg a) c) (* b_2 b_2)))) a) (/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal 1/2 binary64) c))) b_2)) (/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal 1/2 binary64) c))) b_2) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (*.f64 a a) #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 c) a)) (sqrt.f64 #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 c) a))) (/.f64 (*.f64 c c) b_2))
((/.f64 (/.f64 #s(approx (- (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (*.f64 c a)) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) a) (/.f64 #s(approx (- (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (*.f64 c a)) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) #s(approx (- (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (*.f64 c a)) (*.f64 c a) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a) #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) (*.f64 #s(literal -2 binary64) b_2) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) a)) a) #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) a)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) (/.f64 (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 a) c))))) (*.f64 a a)) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 a) c))))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 a) c)))) (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 (/.f64 c b_2) c) (*.f64 #s(literal -1/2 binary64) c)) #s(approx (/ (- (neg b_2) (sqrt (+ (* (neg a) c) (* b_2 b_2)))) a) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 (/.f64 c b_2) c) (*.f64 #s(literal -1/2 binary64) c)) b_2)) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 (/.f64 c b_2) c) (*.f64 #s(literal -1/2 binary64) c)) b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2)) #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 a) c)) (sqrt.f64 #s(approx (+ (* (neg a) c) (* b_2 b_2)) (*.f64 (neg.f64 a) c))) (*.f64 (/.f64 c b_2) c))
((/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))) (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))
((+.f64 (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a) (/.f64 (neg.f64 b_2) a)) (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) (/.f64 c b_2) (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a) (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (/.f64 (fma.f64 (neg.f64 b_2) a (*.f64 a (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (*.f64 a a)) (fma.f64 (neg.f64 b_2) a (*.f64 a (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (*.f64 a (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)) (*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c) (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) (*.f64 c #s(literal -1/8 binary64)) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))))
((/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a) #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) (*.f64 #s(literal -2 binary64) b_2) #s(approx (/ (+ (* (neg b_2) a) (* a (sqrt (+ (* (neg a) c) (* b_2 b_2))))) (* a a)) #s(literal 0 binary64)) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a) #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(approx (+ (* (* c -1/8) (/ a (pow b_2 3))) (/ -1/2 b_2)) (/.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) b_2)) c)) (*.f64 #s(approx (+ (* (* c -1/8) (/ a (pow b_2 3))) (/ -1/2 b_2)) (/.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) b_2)) c) #s(approx (+ (* (* c -1/8) (/ a (pow b_2 3))) (/ -1/2 b_2)) (/.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) b_2)) (/.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) b_2) (/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a)) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))) (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (*.f64 a (/.f64 c (*.f64 b_2 b_2))) (/.f64 c (*.f64 b_2 b_2)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))
((*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)) (neg.f64 b_2)) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)) (neg.f64 b_2))) a) #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)) (neg.f64 b_2))) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(approx (+ (* (* c -1/8) (/ a (pow b_2 3))) (/ -1/2 b_2)) (/.f64 #s(literal -1/2 binary64) b_2)) c)) (*.f64 #s(approx (+ (* (* c -1/8) (/ a (pow b_2 3))) (/ -1/2 b_2)) (/.f64 #s(literal -1/2 binary64) b_2)) c) #s(approx (+ (* (* c -1/8) (/ a (pow b_2 3))) (/ -1/2 b_2)) (/.f64 #s(literal -1/2 binary64) b_2)) (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c)) a) #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c)) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c) (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) (*.f64 (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b_2)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b_2))) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)) (/.f64 c (*.f64 b_2 b_2)) (/.f64 (fma.f64 (neg.f64 b_2) a (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))) (*.f64 a a)) (fma.f64 (neg.f64 b_2) a (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))) (neg.f64 b_2) (*.f64 a (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) (*.f64 (/.f64 c b_2) a) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a))))
((-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))
(#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) x))
(#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x) (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 #s(literal 1/2 binary64) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x) #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (-.f64 (-.f64 x #s(literal -1 binary64)) x) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (-.f64 x #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))
((-.f64 (-.f64 x #s(literal -1 binary64)) x) (*.f64 (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) x) (sqrt.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x)))) (+.f64 (-.f64 x #s(literal -1 binary64)) x) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x)))
((-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 x) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (sqrt.f64 x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (*.f64 x x))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (sqrt.f64 x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (*.f64 x x)) (*.f64 #s(literal -1/2 binary64) (-.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (sqrt.f64 x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (-.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (sqrt.f64 x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64))))) (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64)))) (sqrt.f64 x))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (- (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt x)) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (neg (sqrt (/ 1 x)))))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x))) #s(approx (/ (* -1/2 (- (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt x)) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (neg (sqrt (/ 1 x)))))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x) (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 x) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) x) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) x)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) x)) #s(literal 1/2 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) x)) #s(approx (/ (- (sqrt (- x -1)) (sqrt x)) (sqrt (* x (- x -1)))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 (-.f64 x #s(literal -1 binary64)) x) (/.f64 (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64))))) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (-.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64)))))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/2 binary64))) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)) #s(approx (/ (- (sqrt (- x -1)) (sqrt x)) (sqrt (* x (- x -1)))) (/.f64 #s(approx (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))) (/.f64 #s(approx (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)) #s(approx (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 x)) #s(literal 1/2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 x)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 x)) #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(approx (- (sqrt (- x -1)) (sqrt x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64))))) #s(approx (- (sqrt (- x -1)) (sqrt x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (*.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)) (sqrt.f64 x) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))
((-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))
((-.f64 x (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) x) (/.f64 (-.f64 x (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) (-.f64 x #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) x) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) x) (-.f64 #s(approx (/ 1 (+ x 1)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(approx (/ 1 (+ x 1)) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)) (/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x) (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x))
((/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x) (-.f64 x #s(literal -1 binary64)) #s(approx (/ (- x (- x -1)) (* (- x -1) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) x) (/.f64 #s(approx (- x (- x -1)) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) #s(approx (- x (- x -1)) #s(literal -1 binary64)) #s(approx (/ (- x (- x -1)) (* (- x -1) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)) (/.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) (*.f64 x x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (-.f64 (/.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (/.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x))
((/.f64 #s(approx (- x (- x -1)) #s(literal -1 binary64)) (fma.f64 x x x)) #s(approx (- x (- x -1)) #s(literal -1 binary64)) (fma.f64 x x x) (/.f64 #s(approx (- x (- x -1)) #s(literal -1 binary64)) #s(approx (* (- x -1) x) (*.f64 x x))) #s(approx (* (- x -1) x) (*.f64 x x)) (*.f64 x x) (*.f64 (*.f64 x x) x) #s(approx (/ (- x (- x -1)) (* (- x -1) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)) (-.f64 #s(literal 1 binary64) x) #s(approx (/ (- x (- x -1)) (* (- x -1) x)) (/.f64 #s(approx (- 1 x) (neg.f64 x)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(approx (- 1 x) (neg.f64 x)) (pow.f64 x #s(literal 3 binary64))) #s(approx (- 1 x) (neg.f64 x)) (neg.f64 x) #s(approx (/ (- x (- x -1)) (* (- x -1) x)) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (-.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))
((+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))
(#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x)) (/.f64 #s(literal -2 binary64) x) (+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) #s(approx (- x 1) #s(literal -1 binary64)))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))) (+.f64 (-.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (-.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) #s(approx (- x 1) #s(literal -1 binary64)))
((/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)) (/.f64 #s(literal 2 binary64) (*.f64 x x)) (*.f64 x x) (*.f64 (*.f64 x x) x) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))) (/.f64 #s(literal 2 binary64) x) (/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal -1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) x))) (fma.f64 #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal -1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) (*.f64 (-.f64 x #s(literal -1 binary64)) x) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 2 binary64) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 3/2 binary64)) (-.f64 x (*.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))))
((/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)) (/.f64 (/.f64 #s(literal 2 binary64) x) x) (/.f64 #s(literal 2 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) (*.f64 (-.f64 x #s(literal -1 binary64)) x) (/.f64 #s(approx (+ (* 1 (* (- x -1) x)) (* (- x 1) (- x (* (- x -1) 2)))) #s(literal 2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal -1 binary64)) x))) #s(approx (+ (* 1 (* (- x -1) x)) (* (- x 1) (- x (* (- x -1) 2)))) #s(literal 2 binary64)))
((-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x)) (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) (cbrt.f64 x))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64)) (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (/.f64 #s(literal 1 binary64) x) x) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x) (-.f64 #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (cbrt.f64 x)) #s(approx (cbrt (+ x 1)) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64))) (fma.f64 #s(literal 1/3 binary64) x #s(literal 1 binary64)) (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/3 binary64))) (cbrt.f64 x)) (*.f64 (log1p.f64 x) #s(literal 1/3 binary64)) (log1p.f64 x) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64))) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))) (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 1/6 binary64)))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64)) (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal 1/3 binary64)) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64))) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64))) (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (cbrt.f64 x))) (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (cbrt.f64 x)) (/.f64 #s(literal 1 binary64) (cbrt.f64 x)) (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (*.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (cbrt.f64 (neg.f64 x)) (pow.f64 x #s(literal 1/6 binary64)))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 #s(approx (/ 1 (cbrt x)) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) #s(literal 1/3 binary64)) (cbrt.f64 x))) (/.f64 (*.f64 #s(approx (/ 1 (cbrt x)) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) #s(literal 1/3 binary64)) (cbrt.f64 x)) (*.f64 #s(approx (/ 1 (cbrt x)) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) #s(literal 1/3 binary64)) #s(approx (/ 1 (cbrt x)) (cbrt.f64 (/.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 0 binary64) x) #s(approx (+ (* (pow (- x -1) 1/6) (pow (- x -1) 1/6)) (* (neg (neg (pow x 1/6))) (neg (pow x 1/6)))) (*.f64 #s(literal 0 binary64) x)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) (cbrt.f64 x) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x))) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (*.f64 x x)) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))) (/.f64 (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 x x)) (fma.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 5/81 binary64) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)))) (*.f64 #s(literal -1/9 binary64) (cbrt.f64 x)) (cbrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 x x)))
((log.f64 (+.f64 N #s(literal 1 binary64))) (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) (+.f64 N #s(literal 1 binary64)) (log.f64 N))
(#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N) (-.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N)) (/.f64 #s(literal 1 binary64) N) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) (*.f64 N N))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) (*.f64 N N)) (+.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) (-.f64 (log1p.f64 N) (log.f64 N)) (log1p.f64 N) (log.f64 N) (-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/3 binary64) N) (*.f64 N N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))
((-.f64 (/.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) N) (/.f64 #s(literal -1 binary64) N)) #s(approx (- (log (+ N 1)) (log N)) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) N) (/.f64 #s(literal -1 binary64) N))) (/.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) N) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) (*.f64 N N))) (/.f64 (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) (*.f64 N N)) (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) N) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1/2 binary64) N) (*.f64 N N))) (/.f64 (/.f64 #s(literal 1/3 binary64) N) (*.f64 N N)) #s(approx (- (log (+ N 1)) (log N)) (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) N) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1/2 binary64) N) (*.f64 N N)))) (/.f64 #s(literal 1/3 binary64) N) #s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (+ (- (/ 1/3 N) 1/2) N) (* N N)) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))))) #s(approx (/ (+ (- (/ 1/3 N) 1/2) N) (* N N)) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (log1p.f64 N) (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) (*.f64 N N) (/.f64 (-.f64 #s(literal 1/2 binary64) N) (*.f64 N N)) (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))
((-.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (*.f64 N N)) (/.f64 #s(literal -1 binary64) N)) #s(approx (- (log (+ N 1)) (log N)) (-.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (*.f64 N N)) (/.f64 #s(literal -1 binary64) N))) (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (*.f64 N N)) (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (/.f64 (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) N) N)) (/.f64 (/.f64 (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) N) N) (/.f64 (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) N) (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) (-.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) N) (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal -1 binary64))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) N) (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal -1 binary64))) N)) (/.f64 (-.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) N) (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal -1 binary64))) N) (/.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) N) (-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (exp.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (exp.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log.f64 (pow.f64 (/.f64 (-.f64 N #s(literal -1 binary64)) N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (log.f64 (pow.f64 (/.f64 (-.f64 N #s(literal -1 binary64)) N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (pow.f64 (/.f64 (-.f64 N #s(literal -1 binary64)) N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (-.f64 N #s(literal -1 binary64)) N) (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)))
((+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) (exp.f64 (neg.f64 x)))
(#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x)) (*.f64 x x) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) x)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (pow.f64 x #s(literal 3 binary64)) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)))
((fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) x x) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) x x) x)) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) x x) x) (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) x x) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) x x) x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) x x) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x x)) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)) (*.f64 x x) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)))
((fma.f64 (*.f64 #s(approx (+ (* 1/360 (* x x)) 1/12) #s(literal 1/12 binary64)) (*.f64 x x)) x x) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* 1/360 (* x x)) 1/12) #s(literal 1/12 binary64)) (*.f64 x x)) x x) x)) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* 1/360 (* x x)) 1/12) #s(literal 1/12 binary64)) (*.f64 x x)) x x) x) (*.f64 #s(approx (+ (* 1/360 (* x x)) 1/12) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/360 binary64) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/360 binary64) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/360 binary64) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/360 binary64) #s(literal 1/12 binary64)) #s(approx (+ (* 1/360 (* x x)) 1/12) #s(literal 1/12 binary64)) (*.f64 x x))
((-.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))
((expm1.f64 x) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))
((*.f64 #s(literal 1 binary64) x) #s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x (*.f64 #s(literal 1 binary64) x))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x (*.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)) #s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 #s(literal 1/2 binary64) x) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) #s(approx (- (exp x) 1) (fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))
(#s(approx (- (exp x) 1) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x) (*.f64 x x) (*.f64 #s(literal 1 binary64) x) #s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x (*.f64 #s(literal 1 binary64) x))) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x (*.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(approx (- (exp x) 1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))
((-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) (log.f64 (+.f64 n #s(literal 1 binary64))) (-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)) (log.f64 n))
(#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64))) #s(literal 1 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64))) (-.f64 (log.f64 n) #s(literal -1 binary64)) (log.f64 n))
(#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n)) (log.f64 n))
((-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)) (tan.f64 x))
(#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x)) (*.f64 #s(literal 1/3 binary64) x) #s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (*.f64 x x))
((pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) x) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64)))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) x) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64))) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) x) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) x) #s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 x #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) x))) (fma.f64 x #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) x)) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/27 binary64)) x) (/.f64 (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/27 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))) (*.f64 (*.f64 x x) #s(literal 1/135 binary64)))
((pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/27 binary64)) x) #s(approx (- (+ (pow (* 1/45 (* x x)) 2) 1/9) (* (* x x) 1/135)) (fma.f64 #s(literal -1/135 binary64) (*.f64 x x) #s(literal 1/9 binary64))))) (/.f64 (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/27 binary64)) x) #s(approx (- (+ (pow (* 1/45 (* x x)) 2) 1/9) (* (* x x) 1/135)) (fma.f64 #s(literal -1/135 binary64) (*.f64 x x) #s(literal 1/9 binary64)))) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/27 binary64)) x) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(approx (* (- (pow (* 1/45 (* x x)) 2) 1/9) x) (*.f64 #s(literal -1/9 binary64) x)) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64)))) (/.f64 #s(approx (* (- (pow (* 1/45 (* x x)) 2) 1/9) x) (*.f64 #s(literal -1/9 binary64) x)) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64))) #s(approx (* (- (pow (* 1/45 (* x x)) 2) 1/9) x) (*.f64 #s(literal -1/9 binary64) x)) (*.f64 #s(literal -1/9 binary64) x) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/27 binary64)) x) #s(approx (- (+ (pow (* 1/45 (* x x)) 2) 1/9) (* (* x x) 1/135)) #s(literal 1/9 binary64)))) (/.f64 (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/27 binary64)) x) #s(approx (- (+ (pow (* 1/45 (* x x)) 2) 1/9) (* (* x x) 1/135)) #s(literal 1/9 binary64))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (-.f64 (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (-.f64 (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 (neg.f64 x) x) #s(literal 1/135 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal 1/9 binary64))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 (neg.f64 x) x) #s(literal 1/135 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal 1/9 binary64)))))) (*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 (neg.f64 x) x) #s(literal 1/135 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal 1/9 binary64))))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal -1/135 binary64) (*.f64 x x) #s(literal 1/9 binary64)) (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64)) #s(approx (- (+ (pow (* 1/45 (* x x)) 2) 1/9) (* (* x x) 1/135)) #s(literal 1/9 binary64)) (/.f64 x (-.f64 (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)) (/.f64 x (fma.f64 (*.f64 (neg.f64 x) x) #s(literal 1/135 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal 1/9 binary64)))))
((log.f64 (+.f64 #s(literal 1 binary64) x)) (log.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x))
(#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)))
(#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x)) (-.f64 #s(literal -1 binary64) x))
((/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x) (*.f64 x x))
((/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (sin.f64 x) (sin.f64 x)) (sin.f64 x) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)) (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(approx (cos x) #s(literal 1 binary64)) (*.f64 x x) (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)) (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 x x) (cos.f64 x)))
((*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (/.f64 (/.f64 (sin.f64 x) x) x) (/.f64 (sin.f64 x) x) (sin.f64 x) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)) (/.f64 #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)) (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (cos.f64 x) x) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) x) x))) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (cos.f64 (*.f64 #s(literal 2 binary64) x)) (tan.f64 (/.f64 x #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (cos.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64)))
((/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (sin.f64 x) (*.f64 (*.f64 x x) (*.f64 x x)) (/.f64 #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)) (*.f64 (*.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (/.f64 (cos.f64 x) x) x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 x x) (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (/.f64 #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (*.f64 x x)) (*.f64 x x)) (/.f64 #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (*.f64 x x)) #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(approx (/ (* (sin x) (sin x)) (* (+ (cos x) 1) (* x x))) (*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)) (sin.f64 x))) (*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)) (sin.f64 x)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) (/.f64 (cos.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))
((-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)) (/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a)) (/.f64 (/.f64 (+.f64 b a) b) a) (/.f64 (+.f64 b a) b) (+.f64 b a) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)) (/.f64 #s(literal 1 binary64) a) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) (/.f64 #s(literal 1 binary64) b) (/.f64 (*.f64 (*.f64 (+.f64 b a) #s(literal 1/2 binary64)) (fma.f64 (*.f64 b a) b (*.f64 (*.f64 b a) a))) (*.f64 (*.f64 (*.f64 b a) a) b)) (fma.f64 (*.f64 b a) b (*.f64 (*.f64 b a) a)) (*.f64 (*.f64 (+.f64 b a) #s(literal 1/2 binary64)) (fma.f64 (*.f64 b a) b (*.f64 (*.f64 b a) a))) (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (*.f64 (*.f64 (+.f64 b a) #s(literal 1/2 binary64)) (fma.f64 (*.f64 b a) b (*.f64 (*.f64 b a) a))) (*.f64 (*.f64 (*.f64 b a) a) b))) (/.f64 (fma.f64 (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64))) b #s(literal 1 binary64)) b) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64))) b #s(literal 1 binary64)) b)) (fma.f64 (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64))) b #s(literal 1 binary64)) (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 #s(approx (- (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (* (* (+ b a) 1/2) (+ (* (* b a) b) (* (* b a) a))) (* (* (* b a) a) b))) #s(literal 0 binary64)) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))) (fma.f64 #s(approx (- (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (* (* (+ b a) 1/2) (+ (* (* b a) b) (* (* b a) a))) (* (* (* b a) a) b))) #s(literal 0 binary64)) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))) #s(approx (- (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (* (* (+ b a) 1/2) (+ (* (* b a) b) (* (* b a) a))) (* (* (* b a) a) b))) #s(literal 0 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a))) (/.f64 (+.f64 b a) (*.f64 b a)) (+.f64 b a) (*.f64 b a) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 (/.f64 a b) #s(literal 1 binary64)) a)) (/.f64 (+.f64 (/.f64 a b) #s(literal 1 binary64)) a) (+.f64 (/.f64 a b) #s(literal 1 binary64)) (/.f64 a b) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b)) (/.f64 (/.f64 (+.f64 b a) a) b) (/.f64 (+.f64 b a) a) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 #s(approx (* eps (- (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) 1/2)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) a))) b #s(literal 1 binary64)) b)) (/.f64 (fma.f64 #s(approx (* eps (- (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) 1/2)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) a))) b #s(literal 1 binary64)) b) (fma.f64 #s(approx (* eps (- (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) 1/2)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) a))) b #s(literal 1 binary64)) #s(approx (* eps (- (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) 1/2)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) a))) (/.f64 #s(literal 1 binary64) a) (*.f64 a #s(literal 1/12 binary64)) (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 (/.f64 b a) #s(literal 1 binary64)) b)) (/.f64 (+.f64 (/.f64 b a) #s(literal 1 binary64)) b) (+.f64 (/.f64 b a) #s(literal 1 binary64)) (/.f64 b a) (/.f64 (fma.f64 (/.f64 a b) a a) (*.f64 a a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 #s(approx (- (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (* (* (+ b a) 1/2) (+ (* (* b a) b) (* (* b a) a))) (* (* (* b a) a) b))) #s(literal 0 binary64)) eps (/.f64 (fma.f64 (/.f64 a b) a a) (*.f64 a a)))) (fma.f64 #s(approx (- (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (* (* (+ b a) 1/2) (+ (* (* b a) b) (* (* b a) a))) (* (* (* b a) a) b))) #s(literal 0 binary64)) eps (/.f64 (fma.f64 (/.f64 a b) a a) (*.f64 a a))) #s(approx (- (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (* (* (+ b a) 1/2) (+ (* (* b a) b) (* (* b a) a))) (* (* (* b a) a) b))) #s(literal 0 binary64)) (fma.f64 (/.f64 a b) a a))
((log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))) (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)) (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))
(#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps)) (*.f64 #s(literal -2 binary64) eps) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps) (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) (*.f64 eps eps) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)))
((fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) (*.f64 eps eps) (*.f64 #s(literal -2 binary64) eps))
((/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)) (sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))) (exp.f64 x))
((sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (sqrt.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 x #s(literal 2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (expm1.f64 x))
((/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (expm1.f64 (+.f64 x x)) (+.f64 x x) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (-.f64 x #s(literal -2 binary64)))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (-.f64 x #s(literal -2 binary64))) (-.f64 x #s(literal -2 binary64)) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ (+ (* 3/16 x) 1/2) (sqrt 2)) x) (sqrt 2)) (*.f64 (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x))) #s(approx (+ (* (/ (+ (* 3/16 x) 1/2) (sqrt 2)) x) (sqrt 2)) (*.f64 (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x)) (*.f64 (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x) (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (expm1.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))
((+.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))) (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64)) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ (+ (* 3/16 x) 1/2) (sqrt 2)) x) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))) #s(approx (+ (* (/ (+ (* 3/16 x) 1/2) (sqrt 2)) x) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))
((-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))
((fma.f64 #s(literal 1 binary64) (log1p.f64 x) (-.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n) (log.f64 x))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 #s(literal 1 binary64) (log1p.f64 x) (-.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n) (log.f64 x))) n)) (/.f64 (fma.f64 #s(literal 1 binary64) (log1p.f64 x) (-.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n) (log.f64 x))) n) (log1p.f64 x) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (/.f64 #s(literal 1 binary64) n) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (fma.f64 (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)) (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x) (/.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))
(#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n) (log.f64 x)) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 x) (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n) (log.f64 x))) n))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n) (log.f64 x)) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 x) (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n) (log.f64 x))) n)) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n) (log.f64 x)) #s(literal 2 binary64))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 (/.f64 #s(literal 1 binary64) n) x))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 (/.f64 #s(literal 1 binary64) n) x)) (/.f64 (/.f64 #s(literal 1 binary64) n) x) (/.f64 #s(literal 1 binary64) n) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(approx (+ (* (+ (* (/ (+ -1/2 (/ 1/2 n)) n) x) (/ 1 n)) x) 1) (*.f64 (/.f64 (*.f64 x x) n) (/.f64 #s(literal 1/2 binary64) n)))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) #s(approx (+ (* (+ (* (/ (+ -1/2 (/ 1/2 n)) n) x) (/ 1 n)) x) 1) (*.f64 (/.f64 (*.f64 x x) n) (/.f64 #s(literal 1/2 binary64) n)))) #s(approx (+ (* (+ (* (/ (+ -1/2 (/ 1/2 n)) n) x) (/ 1 n)) x) 1) (*.f64 (/.f64 (*.f64 x x) n) (/.f64 #s(literal 1/2 binary64) n))) (*.f64 (/.f64 (*.f64 x x) n) (/.f64 #s(literal 1/2 binary64) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) n)) (/.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) n) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x) (exp.f64 (/.f64 (log.f64 x) n)) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (+.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64))) (/.f64 #s(literal -11/24 binary64) (*.f64 n n))) (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) #s(literal 1/4 binary64)) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (*.f64 x x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64))) (/.f64 #s(literal -11/24 binary64) (*.f64 n n))) (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) #s(literal 1/4 binary64)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x) (exp.f64 (/.f64 (log.f64 x) n)) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (+.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64))) (/.f64 #s(literal -11/24 binary64) (*.f64 n n))) (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) #s(literal 1/4 binary64)) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (*.f64 x x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) x)) (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x) (exp.f64 (/.f64 (log.f64 x) n)) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (+.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64))) (/.f64 #s(literal -11/24 binary64) (*.f64 n n))) (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) #s(literal 1/4 binary64)) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (*.f64 x x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) x) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 (*.f64 x x) n) (/.f64 (log.f64 x) n) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (+.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64))) (/.f64 #s(literal -11/24 binary64) (*.f64 n n))) (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 n n)) #s(literal 1/4 binary64)) n)) x) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (*.f64 x x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)))
((/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1/6 binary64) n))) n) (log.f64 x)) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (-.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1/6 binary64) n))) n) (log.f64 x)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1/6 binary64) n))) n) (log.f64 x)) #s(literal 2 binary64))) n) (-.f64 (log1p.f64 x) (-.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1/6 binary64) n))) n) (log.f64 x))))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1/6 binary64) n))) n) (log.f64 x)) #s(literal 2 binary64))) n) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1/6 binary64) n))) n) (log.f64 x)) #s(literal 2 binary64))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 #s(literal 1 binary64) (*.f64 n x)))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 #s(literal 1 binary64) (*.f64 n x))) (/.f64 #s(literal 1 binary64) (*.f64 n x)) (*.f64 n x) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(approx (+ (* (+ (* (/ (+ -1/2 (/ 1/2 n)) n) x) (/ 1 n)) x) 1) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 n n)))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (pow (+ x 1) (/ 1 n)) #s(approx (+ (* (+ (* (/ (+ -1/2 (/ 1/2 n)) n) x) (/ 1 n)) x) 1) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 n n)))) #s(approx (+ (* (+ (* (/ (+ -1/2 (/ 1/2 n)) n) x) (/ 1 n)) x) 1) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 n n))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 n n)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) #s(approx (pow x (/ 1 n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)))) #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (fma.f64 (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64)) (fma.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (/.f64 (fma.f64 (fma.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1/6 binary64))) (*.f64 n n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* 1 (log (+ 1 x))) (- (/ (+ (* 1/6 (/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) n)) (* (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) 1/2)) n) (log x))) (/.f64 (fma.f64 (fma.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1/6 binary64))) (*.f64 n n))) n)) (/.f64 #s(approx (+ (* 1 (log (+ 1 x))) (- (/ (+ (* 1/6 (/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) n)) (* (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) 1/2)) n) (log x))) (/.f64 (fma.f64 (fma.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1/6 binary64))) (*.f64 n n))) n) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(approx (pow x (/ 1 n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (-.f64 (log1p.f64 x) (log.f64 x)))
((-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 (+.f64 x eps)) (+.f64 x eps) (sin.f64 x))
((+.f64 #s(literal 0 binary64) eps) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)) (*.f64 (*.f64 (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) #s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps)) (sin.f64 eps) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps)) (*.f64 (cos.f64 x) eps) (cos.f64 x) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (cos.f64 x)) eps) (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (sin.f64 x) eps) (fma.f64 (sin.f64 eps) (cos.f64 x) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x))) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)) (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64))) (*.f64 (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 eps) (sin.f64 x)) (cos.f64 eps))
(#s(approx (* (* (sin (/ (+ 0 eps) 2)) 2) (cos (/ (+ (* 2 x) eps) -2))) (*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(literal 2 binary64)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps) #s(approx (cos x) #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x eps)) #s(literal 1/2 binary64)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x eps)) #s(literal 1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x eps)) #s(literal 1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps) #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x eps)) #s(literal 1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) eps) (*.f64 x eps)) #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 (fma.f64 #s(approx (* (sin x) eps) (*.f64 x eps)) #s(literal -1/2 binary64) (cos.f64 x)) eps) (fma.f64 #s(approx (* (sin x) eps) (*.f64 x eps)) #s(literal -1/2 binary64) (cos.f64 x)) #s(approx (* (sin x) eps) (*.f64 x eps)) (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)) (*.f64 (*.f64 #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) (*.f64 #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 #s(literal 1/12 binary64) (*.f64 x eps)) (fma.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x eps)) #s(literal 1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))) (*.f64 #s(literal 1/2 binary64) eps))
((neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) #s(approx (* (* (sin (/ (+ 0 eps) 2)) 2) (cos (/ (+ (* 2 x) eps) -2))) (*.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 x))) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 x))) #s(literal 2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 x))) #s(literal 2 binary64)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 #s(approx (+ (* (- (* 1/12 (* x eps)) 1/2) x) (* -1/2 eps)) (*.f64 #s(literal -1/2 binary64) x)) x #s(literal 1 binary64))) eps)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 #s(approx (+ (* (- (* 1/12 (* x eps)) 1/2) x) (* -1/2 eps)) (*.f64 #s(literal -1/2 binary64) x)) x #s(literal 1 binary64))) eps) #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 #s(approx (+ (* (- (* 1/12 (* x eps)) 1/2) x) (* -1/2 eps)) (*.f64 #s(literal -1/2 binary64) x)) x #s(literal 1 binary64))) (fma.f64 #s(approx (+ (* (- (* 1/12 (* x eps)) 1/2) x) (* -1/2 eps)) (*.f64 #s(literal -1/2 binary64) x)) x #s(literal 1 binary64)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 x eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 x eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps) #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 x eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 x eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64)) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)) eps)) (*.f64 (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)) eps) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x) (sin.f64 (+.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64)))) (+.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))) (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (sin.f64 (+.f64 (/.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))))) (*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 x)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 x))) #s(approx (+ (* (- (* 1/12 (* x eps)) 1/2) x) (* -1/2 eps)) (*.f64 #s(literal -1/2 binary64) x)) (fma.f64 (fma.f64 (*.f64 x eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) (PI.f64) #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 #s(literal 1/2 binary64) eps)))
((-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 (+.f64 x eps)) (+.f64 x eps) (cos.f64 x))
((fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps) (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) #s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 eps) (-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))) (cos.f64 (+.f64 x eps)) (+.f64 x eps) #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (sin.f64 x)) (neg.f64 eps))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (sin.f64 x)) (neg.f64 eps)) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (sin.f64 x)) (*.f64 (cos.f64 x) eps) (-.f64 (+.f64 eps x) x) (/.f64 (+.f64 (+.f64 eps x) x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x) (*.f64 (*.f64 (sin.f64 (/.f64 (+.f64 (+.f64 eps x) x) #s(literal 2 binary64))) (sin.f64 (/.f64 (-.f64 (+.f64 eps x) x) #s(literal 2 binary64)))) #s(literal -2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)) (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) (*.f64 x x) (cos.f64 x) (*.f64 (sin.f64 (/.f64 (+.f64 (+.f64 eps x) x) #s(literal 2 binary64))) (sin.f64 (/.f64 (-.f64 (+.f64 eps x) x) #s(literal 2 binary64)))) (sin.f64 (/.f64 (+.f64 (+.f64 eps x) x) #s(literal 2 binary64))))
((*.f64 #s(approx (* (sin (/ (+ (+ eps x) x) 2)) (sin (/ (- (+ eps x) x) 2))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64)) #s(approx (* (sin (/ (+ (+ eps x) x) 2)) (sin (/ (- (+ eps x) x) 2))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) 1/2) (sin x)) (neg eps)) (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps)))) #s(approx (* (+ (* (* (cos x) eps) 1/2) (sin x)) (neg eps)) (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps))) (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) (*.f64 eps eps) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* (cos x) eps) 1/2) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x (*.f64 #s(literal -1/4 binary64) eps)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps))) (*.f64 #s(approx (+ (* (* (cos x) eps) 1/2) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x (*.f64 #s(literal -1/4 binary64) eps)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps)) #s(approx (+ (* (* (cos x) eps) 1/2) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x (*.f64 #s(literal -1/4 binary64) eps)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x (*.f64 #s(literal -1/4 binary64) eps)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps)) (-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64))) (cos.f64 (+.f64 x eps)) (+.f64 x eps) #s(approx (cos x) #s(literal 1 binary64)) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)))) eps) (sin.f64 x)) eps)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)))) eps) (sin.f64 x)) eps) (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)))) eps) (sin.f64 x)) (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)))) eps) (fma.f64 #s(literal -1/6 binary64) x (*.f64 #s(literal -1/4 binary64) eps)) #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)))) (*.f64 #s(literal 1/6 binary64) eps) (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)))
((*.f64 #s(approx (* (sin (/ (+ (+ eps x) x) 2)) (sin (/ (- (+ eps x) x) 2))) (*.f64 (fma.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64)) #s(approx (* (sin (/ (+ (+ eps x) x) 2)) (sin (/ (- (+ eps x) x) 2))) (*.f64 (fma.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) (*.f64 (fma.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (fma.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 x) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 x))) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) 1/2) (sin x)) (neg eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps))) #s(approx (* (+ (* (* (cos x) eps) 1/2) (sin x)) (neg eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps) (*.f64 #s(literal -1/2 binary64) eps) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* (cos x) eps) 1/2) (sin x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/6 x) (* -1/4 eps)) (*.f64 #s(literal -1/6 binary64) x)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps))) (*.f64 #s(approx (+ (* (* (cos x) eps) 1/2) (sin x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/6 x) (* -1/4 eps)) (*.f64 #s(literal -1/6 binary64) x)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps))) (neg.f64 eps)) #s(approx (+ (* (* (cos x) eps) 1/2) (sin x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/6 x) (* -1/4 eps)) (*.f64 #s(literal -1/6 binary64) x)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps))) (fma.f64 (fma.f64 #s(approx (+ (* -1/6 x) (* -1/4 eps)) (*.f64 #s(literal -1/6 binary64) x)) x #s(literal 1 binary64)) x (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) x (*.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps) eps)) x (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 1 binary64)) eps)) (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) x (*.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps) eps)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 1 binary64)) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)) eps) eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) x (*.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps) eps)) x (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 1 binary64)) eps)) x)))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* (cos x) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal 1/2 binary64) (sin.f64 x)) (neg.f64 eps))) (*.f64 (fma.f64 #s(approx (* (cos x) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal 1/2 binary64) (sin.f64 x)) (neg.f64 eps)) (fma.f64 #s(approx (* (cos x) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal 1/2 binary64) (sin.f64 x)) #s(approx (* (cos x) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 x)) #s(approx (+ (* -1/6 x) (* -1/4 eps)) (*.f64 #s(literal -1/6 binary64) x)) (*.f64 #s(literal -1/6 binary64) x) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)) eps) eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) x (*.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps) eps)) x (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 1 binary64)) eps)) x))) (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)))
((-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (tan.f64 (+.f64 x eps)) (+.f64 x eps) (tan.f64 x))
((fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64))) (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) #s(literal -1/6 binary64)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps) (cos.f64 eps) (-.f64 (tan.f64 (+.f64 x eps)) (/.f64 (sin.f64 x) (cos.f64 x))) (tan.f64 (+.f64 x eps)) (+.f64 x eps) (/.f64 (sin.f64 x) (cos.f64 x)) #s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 eps x))) (/.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (cos.f64 (+.f64 eps x)))) (-.f64 (+.f64 (/.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 eps x))) (/.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (cos.f64 (+.f64 eps x)))) (tan.f64 x)) (/.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 eps x))) (*.f64 (sin.f64 eps) (cos.f64 x)) #s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) #s(literal -1/6 binary64)) eps) eps (/.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (cos.f64 x))) eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64) #s(literal -1/6 binary64)) eps) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (cos.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (cos.f64 (+.f64 eps x)) (tan.f64 x))
((fma.f64 (/.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (sin.f64 eps) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 eps)) (tan.f64 x))) (/.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (cos.f64 (+.f64 eps x)) #s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps) #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) (*.f64 x x) (tan.f64 (+.f64 eps (PI.f64))) #s(approx (- (tan (+ x eps)) (tan x)) (tan.f64 (+.f64 eps (PI.f64)))) (+.f64 eps (PI.f64)) (PI.f64) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) #s(literal 1 binary64)) #s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) #s(literal 1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) #s(literal 1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) #s(literal 1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (*.f64 #s(literal 2 binary64) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x))))) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)))) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x) (-.f64 (*.f64 (/.f64 (sin.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 eps)) (tan.f64 x)) (tan.f64 x) (*.f64 (/.f64 (sin.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 eps)) #s(approx (pow (cos x) 2) (fma.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) #s(literal 1 binary64)) (*.f64 x x) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) (*.f64 (*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x) #s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)))))) eps eps)) (cos.f64 (*.f64 #s(literal 2 binary64) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x))))
((fma.f64 (/.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (sin.f64 eps) #s(approx (- (* (/ (sin x) (cos (+ eps x))) (cos eps)) (tan x)) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (cos.f64 (+.f64 eps x)) #s(approx (- (tan (+ x eps)) (tan x)) #s(approx (tan (+ eps (PI))) eps)) #s(approx (tan (+ eps (PI))) eps) #s(approx (- (tan (+ x eps)) (tan x)) (tan.f64 eps)) (tan.f64 eps) (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (*.f64 (-.f64 x eps) (-.f64 x eps))) (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (-.f64 (tan.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (*.f64 (-.f64 x eps) (-.f64 x eps)))) (tan.f64 x)) (tan.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (*.f64 (-.f64 x eps) (-.f64 x eps)))) (/.f64 (sin.f64 (+.f64 (PI.f64) (+.f64 eps x))) (neg.f64 (cos.f64 (+.f64 eps x)))) (sin.f64 (+.f64 (PI.f64) (+.f64 eps x))) (-.f64 (/.f64 (sin.f64 (+.f64 (PI.f64) (+.f64 eps x))) (neg.f64 (cos.f64 (+.f64 eps x)))) (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (PI.f64) (+.f64 eps x)) #s(approx (- (* (/ (sin x) (cos (+ eps x))) (cos eps)) (tan x)) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 x eps) (-.f64 x eps)))
((/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x) (sin.f64 x))
((/.f64 (sin.f64 (/.f64 x #s(literal 2 binary64))) (cos.f64 (/.f64 x #s(literal 2 binary64)))) (sin.f64 (/.f64 x #s(literal 2 binary64))) (/.f64 x #s(literal 2 binary64)) (cos.f64 (/.f64 x #s(literal 2 binary64))) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 #s(literal 1/2 binary64) x) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (sin.f64 x) (/.f64 (cos.f64 x) (sin.f64 x)) (cos.f64 x))
(#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 #s(literal 1/2 binary64) x) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) (*.f64 x x) (/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))
((*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (sin.f64 x)) (pow.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 x) (fma.f64 (*.f64 x (neg.f64 x)) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x (neg.f64 x)) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (*.f64 x (neg.f64 x)) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x) (*.f64 x (neg.f64 x)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 #s(literal 1 binary64) (sin.f64 x)) (sin.f64 x) (/.f64 (cos.f64 x) (sin.f64 x)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (neg.f64 x) (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))
((-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N)) (atan.f64 (+.f64 N #s(literal 1 binary64))) (+.f64 N #s(literal 1 binary64)) (atan.f64 N))
((-.f64 (-.f64 N #s(literal -1 binary64)) N) (atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (-.f64 N #s(literal -1 binary64)) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))
((atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) #s(approx (- (- N -1) N) #s(literal 1 binary64)) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)) (-.f64 N #s(literal -1 binary64)))
((atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))) #s(approx (- (- N -1) N) #s(literal 1 binary64)) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N)) (*.f64 N N) (atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64))) (-.f64 N #s(literal -1 binary64)) (atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N)) (fma.f64 N N N) (fma.f64 (/.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 N N (fma.f64 #s(literal -1 binary64) N #s(literal 1 binary64)))) N #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) N #s(literal 1 binary64)) (atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) (fma.f64 (/.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 N N (fma.f64 #s(literal -1 binary64) N #s(literal 1 binary64)))) N #s(literal 1 binary64))) (/.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 N N (fma.f64 #s(literal -1 binary64) N #s(literal 1 binary64)))))
((/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps))) (-.f64 eps (sin.f64 eps)) (sin.f64 eps) (-.f64 eps (tan.f64 eps)) (tan.f64 eps))
(#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64)) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -27/2800 binary64) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64)))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -27/2800 binary64) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64))) (pow.f64 eps #s(literal 4 binary64)) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64)))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)))
(#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)))
