; -*- mode: scheme -*-

; Herbie cannot properly sample points for this FPCore
;
; (FPCore (a b c)
;  :pre (and (< 0 a) (< 0 b) (< 0 c))
;  :name "Area of a triangle"
;  :precision posit16
;  :herbie-expected 16
;  (let ([s (/ (+ (+ a b) c) 2)])
;    (sqrt (* s (- s a) (- s b) (- s c)))))

(FPCore (a b c)
 :name "quadp (p42, positive)"
 :precision posit16
 :herbie-expected 16
 (let ([d (sqrt (- (* b b) (* 4 (* a c))))])
   (/ (+ (- b) d) (* 2 a))))

(FPCore (a b c)
 :name "quadm (p42, negative)"
 :precision posit16
 :herbie-expected 16
 (let ([d (sqrt (- (* b b) (* 4 (* a c))))])
   (/ (- (- b) d) (* 2 a))))

(FPCore (a b_2 c)
 :name "quad2m (problem 3.2.1, negative)"
 :precision posit16
 :herbie-expected 16
 (let ([d (sqrt (- (* b_2 b_2) (* a c)))])
   (/ (- (- b_2) d) a)))

(FPCore (a b_2 c)
 :name "quad2p (problem 3.2.1, positive)"
 :precision posit16
 :herbie-expected 16
 (let ([d (sqrt (- (* b_2 b_2) (* a c)))])
   (/ (+ (- b_2) d) a)))

(FPCore (x)
 :name "2sqrt (example 3.1)"
 :precision posit16
 :herbie-expected 16
 (- (sqrt (+ x 1)) (sqrt x)))

(FPCore (x)
 :name "2isqrt (example 3.6)"
 :precision posit16
 :herbie-expected 16
 (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))))

(FPCore (x)
 :name "2frac (problem 3.3.1)"
 :precision posit16
 :herbie-expected 16
 (- (/ 1 (+ x 1)) (/ 1 x)))

(FPCore (x)
 :name "3frac (problem 3.3.3)"
 :precision posit16
 :herbie-expected 16
 (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))))

(FPCore (re im)
 :name "math.abs on complex"
 :precision posit16
 :herbie-expected 16
 (sqrt (+ (* re re) (* im im))))

(FPCore (x.re x.im)
 :name "math.cube on complex, real part"
 :precision posit16
 :herbie-expected 16
 (-
  (* (- (* x.re x.re) (* x.im x.im)) x.re)
  (* (+ (* x.re x.im) (* x.im x.re)) x.im)))

(FPCore (x.re x.im)
 :name "math.cube on complex, imaginary part"
 :precision posit16
 :herbie-expected 16
 (+
  (* (- (* x.re x.re) (* x.im x.im)) x.im)
  (* (+ (* x.re x.im) (* x.im x.re)) x.re)))

(FPCore (x.re x.im y.re y.im)
 :name "_divideComplex, real part"
 :precision posit16
 :herbie-expected 16
 (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))))

(FPCore (x.re x.im y.re y.im)
 :name "_divideComplex, imaginary part"
 :precision posit16
 :herbie-expected 16
 (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))))

(FPCore (x.re x.im y.re y.im)
 :name "_multiplyComplex, real part"
 :precision posit16
 :herbie-expected 16
 (- (* x.re y.re) (* x.im y.im)))

(FPCore (x.re x.im y.re y.im)
 :name "_multiplyComplex, imaginary part"
 :precision posit16
 :herbie-expected 16
 (+ (* x.re y.im) (* x.im y.re)))

(FPCore (re im)
 :name "math.sqrt on complex, real part"
 :precision posit16
 :herbie-expected 16
 (* 0.5 (sqrt (* 2.0 (+ (sqrt (+ (* re re) (* im im))) re)))))

(FPCore (re im)
 :name "math.sqrt on complex, imaginary part, im greater than 0 branch"
 :precision posit16
 :herbie-expected 16
 (* 0.5 (sqrt (* 2.0 (- (sqrt (+ (* re re) (* im im))) re)))))

(FPCore (re im)
 :name "math.square on complex, real part"
 :precision posit16
 :herbie-expected 16
 (- (* re re) (* im im)))

(FPCore (re im)
 :name "math.square on complex, imaginary part"
 :precision posit16
 :herbie-expected 16
 (+ (* re im) (* im re)))

(FPCore (alpha beta)
 :pre (and (> alpha -1) (> beta -1))
 :name "Octave 3.8, jcobi/1"
 :precision posit16
 :herbie-expected 16
 (let ((ab (+ alpha beta)) (ad (- beta alpha)) (ap (* beta alpha)))
   (/ (+ (/ ad (+ ab 2.0)) 1.0) 2.0)))

(FPCore (alpha beta i)
 :pre (and (> alpha -1) (> beta -1) (> i 0))
 :name "Octave 3.8, jcobi/2"
 :precision posit16
 :herbie-expected 16
 (let ((ab (+ alpha beta)) (ad (- beta alpha)) (ap (* beta alpha)))
   (let ((z (+ ab (* 2 i))))
     (/ (+ (/ (* ab ad) z (+ z 2.0)) 1.0) 2.0))))

(FPCore (alpha beta)
 :pre (and (> alpha -1) (> beta -1))
 :name "Octave 3.8, jcobi/3"
 :precision posit16
 :herbie-expected 16
 (let ((i 1) (ab (+ alpha beta)) (ad (- beta alpha)) (ap (* beta alpha)))
   (let ((z1 i))
     (let ((z (+ ab (* 2 z1))))
       (/ (+ ab ap 1.0) z z (+ z 1.0))))))

(FPCore (alpha beta i) ; TODO: i should be an integer
 :pre (and (> alpha -1) (> beta -1) (> i 1))
 :name "Octave 3.8, jcobi/4"
 :precision posit16
 :herbie-expected 16
 (let ((ab (+ alpha beta)) (ad (- beta alpha)) (ap (* beta alpha)))
   (let ((z (+ ab (* 2 i))))
     (let ((z* (* z z)) (y (* i (+ ab i))))
       (let ((y* (* y (+ ap y))))
         (/ y* z* (- z* 1.0)))))))

(FPCore (i)
 :pre (and (> i 0))
 :name "Octave 3.8, jcobi/4, as called"
 :precision posit16
 :herbie-expected 16
 (let ((z (* 2 i)))
   (let ((z* (* z z)) (y (* i i)))
     (let ((y* (* y y))) (/ y* z* (- z* 1.0))))))

(FPCore (a rand)
 :name "Octave 3.8, oct_fill_randg"
 :precision posit16
 :herbie-expected 16
 (let ((d (- a (/ 1.0 3.0))))
   (let ((c (/ 1 (sqrt (* 9 d)))) (x rand))
     (let ((v (+ 1 (* c x))))
       (let ((v* (* v (* v v))) (xsq (* x x)))
         (* d v))))))

(FPCore (d1 d2 d3)
 :name "FastMath dist"
 :precision posit16
 :herbie-expected 16
 (+ (* d1 d2) (* d1 d3)))

(FPCore (d)
 :name "FastMath test1"
 :precision posit16
 :herbie-expected 16
 (+ (* d 10) (* d 20)))

(FPCore (d1 d2)
 :name "FastMath test2"
 :precision posit16
 :herbie-expected 16
 (+ (* d1 10) (* d1 d2) (* d1 20)))

(FPCore (d1 d2 d3)
 :name "FastMath dist3"
 :precision posit16
 :herbie-expected 16
 (+ (* d1 d2) (* (+ d3 5) d1) (* d1 32)))

(FPCore (d1 d2 d3 d4)
 :name "FastMath dist4"
 :precision posit16
 :herbie-expected 16
 (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)))

(FPCore (d1 d2 d3)
 :name "FastMath test3"
 :precision posit16
 :herbie-expected 16
 (+ (* d1 3) (* d1 d2) (* d1 d3)))

(FPCore (d1)
 :name "FastMath repmul"
 :precision posit16
 :herbie-expected 16
 (* d1 d1 d1 d1))

(FPCore (x)
 :name "Jmat.Real.dawson"
 :precision posit16
 :herbie-expected 16
 (let ((p1 0.1049934947) (p2 0.0424060604) (p3 0.0072644182)
       (p4 0.0005064034) (p5 0.0001789971) (q1 0.7715471019)
       (q2 0.2909738639) (q3 0.0694555761) (q4 0.0140005442)
       (q5 0.0008327945))
   (let ((x2 (* x x)))
     (let ((x4 (* x2 x2)))
       (let ((x6 (* x4 x2)))
         (let ((x8 (* x6 x2)))
           (let ((x10 (* x8 x2)))
             (let ((x12 (* x10 x2)))
               (*
                (/ (+ 1 (* p1 x2) (* p2 x4) (* p3 x6) (* p4 x8) (* p5 x10))
                   (+ 1 (* q1 x2) (* q2 x4) (* q3 x6) (* q4 x8) (* q5 x10) (* 2 p5 x12)))
                x)))))))))