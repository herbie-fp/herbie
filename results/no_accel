((/.f64 (-.f64 x lo) (-.f64 hi lo)))
(#s(approx (/ (- x lo) (- hi lo)) (-.f64 (*.f64 (+.f64 (/.f64 hi lo) #s(literal 1 binary64)) (/.f64 (-.f64 hi x) lo)) #s(literal -1 binary64))) #s(approx (/ (- x lo) (- hi lo)) #s(literal 1 binary64)) (/.f64 (-.f64 x lo) #s(approx (- hi lo) hi)) #s(approx (/ (- x lo) (- hi lo)) (/.f64 (*.f64 (-.f64 x lo) (-.f64 #s(literal -1 binary64) (/.f64 lo hi))) (neg.f64 hi))) #s(approx (/ (- x lo) (- hi lo)) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 x lo) hi) (+.f64 (*.f64 lo (/.f64 lo hi)) lo)) (-.f64 lo x)) hi)))
(#s(approx (/ (- x lo) (- hi lo)) #s(approx (- (* (+ (/ hi lo) 1) (/ (- hi x) lo)) -1) (*.f64 hi (/.f64 (/.f64 hi lo) lo)))) (/.f64 #s(approx (- x lo) (neg.f64 lo)) #s(approx (- hi lo) hi)) #s(approx (/ (- x lo) (- hi lo)) (/.f64 #s(approx (* (- x lo) (- -1 (/ lo hi))) (*.f64 (+.f64 (/.f64 lo hi) #s(literal 1 binary64)) lo)) (neg.f64 hi))) #s(approx (/ (- x lo) (- hi lo)) (/.f64 #s(approx (- (* (/ (- x lo) hi) (+ (* lo (/ lo hi)) lo)) (- lo x)) (*.f64 (*.f64 (/.f64 (-.f64 x lo) hi) lo) (/.f64 lo hi))) hi)) #s(approx (/ (- x lo) (- hi lo)) #s(approx (- (* (+ (/ hi lo) 1) (/ (- hi x) lo)) -1) (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 hi (/.f64 (/.f64 (+.f64 hi lo) lo) lo)) #s(literal 1 binary64)) x) (/.f64 (+.f64 (/.f64 (neg.f64 hi) lo) #s(literal -1 binary64)) lo)) x))))
(#s(approx (/ (- x lo) (- hi lo)) #s(approx (- (* (+ (/ hi lo) 1) (/ (- hi x) lo)) -1) (*.f64 (/.f64 hi lo) (/.f64 hi lo)))) #s(approx (/ (- x lo) (- hi lo)) (-.f64 #s(literal 1 binary64) (/.f64 x lo))) #s(approx (/ (- x lo) (- hi lo)) (-.f64 #s(approx (* (+ (/ hi lo) 1) (/ (- hi x) lo)) (*.f64 hi (/.f64 (/.f64 (+.f64 hi lo) lo) lo))) #s(literal -1 binary64))) #s(approx (/ (- x lo) (- hi lo)) (/.f64 (-.f64 (*.f64 (/.f64 #s(approx (- x lo) (neg.f64 lo)) hi) (+.f64 (*.f64 lo (/.f64 lo hi)) lo)) (-.f64 lo x)) hi)) #s(approx (/ (- x lo) (- hi lo)) (+.f64 (*.f64 (-.f64 (/.f64 (+.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) lo) (/.f64 x (*.f64 lo lo))) hi) #s(literal 1 binary64)) lo) (/.f64 x (*.f64 lo lo))) hi) (/.f64 (-.f64 x lo) (neg.f64 lo)))))
((/.f64 x (+.f64 (*.f64 x x) #s(literal 1 binary64))))
((*.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (-.f64 (*.f64 x x) #s(literal 1 binary64))) #s(approx (/ x (+ (* x x) 1)) x) #s(approx (/ x (+ (* x x) 1)) (/.f64 #s(literal 1 binary64) x)) #s(approx (/ x (+ (* x x) 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x)) #s(approx (/ x (+ (* x x) 1)) (-.f64 x (pow.f64 x #s(literal 3 binary64)))))
(#s(approx (/ x (+ (* x x) 1)) (-.f64 x (*.f64 (*.f64 x x) x))) #s(approx (/ x (+ (* x x) 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x))) x)) (*.f64 (/.f64 x (-.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1 binary64))) (-.f64 (*.f64 x x) #s(literal 1 binary64))))
(x)
((/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))
((/.f64 (sin.f64 (/.f64 x #s(literal 2 binary64))) (cos.f64 (/.f64 x #s(literal 2 binary64)))) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 x))))
(#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) x)) (-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (sin.f64 x)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))
((/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (-.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64)) #s(approx (/ (- (pow (sin x) 3) (* (pow (sin x) 2) (* (cos x) (sin x)))) (* (pow (sin x) 2) (pow (sin x) 2))) (/.f64 (*.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (sin.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (*.f64 (cos.f64 x) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))) (*.f64 (cos.f64 x) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))) (+.f64 (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64))) (*.f64 (cos.f64 x) (*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))))))
((+.f64 x (-.f64 (tan.f64 (+.f64 y z)) (tan.f64 a))))
((+.f64 x (-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 z) (tan.f64 y)) (cos.f64 a)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 z) (tan.f64 y))) (cos.f64 a))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 z) (tan.f64 y))) (sin.f64 a)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 z) (tan.f64 y))) (cos.f64 a))))) #s(approx (+ x (- (tan (+ y z)) (tan a))) x) (+.f64 x (-.f64 (tan.f64 (+.f64 (+.f64 (PI.f64) (+.f64 z y)) (PI.f64))) (tan.f64 a))) #s(approx (+ x (- (tan (+ y z)) (tan a))) (-.f64 (+.f64 (/.f64 (sin.f64 y) (cos.f64 y)) x) (/.f64 (sin.f64 a) (cos.f64 a)))) (/.f64 (-.f64 (pow.f64 (+.f64 (tan.f64 (+.f64 z y)) x) #s(literal 2 binary64)) (pow.f64 (tan.f64 a) #s(literal 2 binary64))) (+.f64 (tan.f64 (+.f64 z y)) (+.f64 x (tan.f64 a)))))
((+.f64 x (-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 z) (tan.f64 y)) (cos.f64 a)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 z) (sin.f64 y)) (*.f64 (cos.f64 z) (cos.f64 y)))) (cos.f64 a))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 z) (tan.f64 y))) (sin.f64 a)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 z) (tan.f64 y))) (cos.f64 a))))) (+.f64 x (-.f64 (tan.f64 (+.f64 y z)) #s(approx (tan a) a))) #s(approx (+ x (- (tan (+ y z)) (tan a))) (-.f64 (+.f64 #s(approx (/ (sin y) (cos y)) y) x) (/.f64 (sin.f64 a) (cos.f64 a)))) (+.f64 x (/.f64 (-.f64 (*.f64 (cos.f64 a) (tan.f64 (+.f64 y z))) (*.f64 (sin.f64 a) #s(literal 1 binary64))) (cos.f64 a))) (+.f64 x (/.f64 (-.f64 (*.f64 (sin.f64 (+.f64 y z)) (cos.f64 a)) (*.f64 (cos.f64 (+.f64 y z)) (sin.f64 a))) (*.f64 (cos.f64 (+.f64 y z)) (cos.f64 a)))))
((+.f64 x (-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 z) (tan.f64 y)) (cos.f64 a)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sin.f64 z) (sin.f64 y)) (*.f64 (cos.f64 z) (cos.f64 y)))) (cos.f64 a))) (tan.f64 a))) #s(approx (+ x (- (tan (+ y z)) (tan a))) (-.f64 (+.f64 #s(approx (/ (sin y) (cos y)) y) x) #s(approx (/ (sin a) (cos a)) a))) (+.f64 x (-.f64 (tan.f64 (+.f64 y z)) (tan.f64 (+.f64 (+.f64 (PI.f64) a) (PI.f64))))) #s(approx (+ x (/ (- (* (sin (+ y z)) (cos a)) (* (cos (+ y z)) (sin a))) (* (cos (+ y z)) (cos a)))) (-.f64 (+.f64 (/.f64 (sin.f64 z) (cos.f64 z)) x) (/.f64 (sin.f64 a) (cos.f64 a)))) (+.f64 x (-.f64 (/.f64 (+.f64 (tan.f64 z) (tan.f64 y)) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 z) (tan.f64 y)))) (tan.f64 a))))
((log.f64 (+.f64 (exp.f64 a) (exp.f64 b))))
(#s(approx (log (+ (exp a) (exp b))) (+.f64 (/.f64 b (-.f64 (exp.f64 a) #s(literal -1 binary64))) (log.f64 (-.f64 (exp.f64 a) #s(literal -1 binary64))))) (log.f64 (+.f64 #s(approx (exp a) #s(literal 1 binary64)) (exp.f64 b))) (log.f64 (+.f64 #s(approx (exp a) (-.f64 a #s(literal -1 binary64))) (exp.f64 b))) (log.f64 #s(approx (+ (exp a) (exp b)) (-.f64 (-.f64 (+.f64 (exp.f64 a) b) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) b) b)))) (log.f64 #s(approx (+ (exp a) (exp b)) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 1/6 binary64) a) #s(literal 1/2 binary64)) a) #s(literal -1 binary64)) a) (-.f64 (exp.f64 b) #s(literal -1 binary64))))))
(#s(approx (log (+ (exp a) (exp b))) #s(approx (+ (/ b (- (exp a) -1)) (log (- (exp a) -1))) (/.f64 b (-.f64 (exp.f64 a) #s(literal -1 binary64))))) (log.f64 (+.f64 #s(approx (exp a) #s(literal 1 binary64)) #s(approx (exp b) #s(literal 1 binary64)))) (log.f64 #s(approx (+ (exp a) (exp b)) #s(approx (- (- (+ (exp a) b) -1) (* (* -1/2 b) b)) (*.f64 (*.f64 b b) #s(literal 1/2 binary64))))) (log.f64 #s(approx (+ (exp a) (exp b)) #s(approx (+ (* (- (* (+ (* 1/6 a) 1/2) a) -1) a) (- (exp b) -1)) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) a) #s(literal -1/2 binary64)) a) #s(literal -1 binary64)) a) #s(literal -2 binary64))))) #s(approx (log (+ (exp a) (exp b))) (+.f64 #s(approx (/ b (- (exp a) -1)) (*.f64 #s(literal 1/2 binary64) b)) (log.f64 (-.f64 (exp.f64 a) #s(literal -1 binary64))))))
((log.f64 (+.f64 (exp.f64 a) #s(approx (exp b) #s(literal 1 binary64)))) #s(approx (log (+ (exp a) (exp b))) #s(approx (+ (/ b (- (exp a) -1)) (log (- (exp a) -1))) #s(approx (/ b (- (exp a) -1)) (*.f64 #s(literal 1/2 binary64) b)))) (log.f64 #s(approx (+ (exp a) (exp b)) #s(approx (+ (* (- (* (+ (* 1/6 a) 1/2) a) -1) a) (- (exp b) -1)) #s(approx (- (* (- (* (- (* 1/6 a) -1/2) a) -1) a) -2) (-.f64 a #s(literal -2 binary64)))))) (log.f64 #s(approx (+ (exp a) (exp b)) #s(approx (+ (* (- (* (+ (* 1/6 a) 1/2) a) -1) a) (- (exp b) -1)) #s(approx (- (* (- (* (- (* 1/6 a) -1/2) a) -1) a) -2) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 1 binary64)) a) #s(literal -2 binary64)))))) #s(approx (log (+ (exp a) (exp b))) (+.f64 #s(approx (/ b (- (exp a) -1)) (*.f64 #s(literal 1/2 binary64) b)) #s(approx (log (- (exp a) -1)) (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) a) #s(literal -1/2 binary64)) a) (log.f64 #s(literal 2 binary64)))))))
((/.f64 (neg.f64 (+.f64 f n)) (-.f64 f n)))
((/.f64 (neg.f64 (+.f64 f n)) #s(approx (- f n) (*.f64 (-.f64 (/.f64 f n) #s(literal 1 binary64)) n))) #s(approx (/ (neg (+ f n)) (- f n)) #s(literal -1 binary64)) (/.f64 (neg.f64 #s(approx (+ f n) f)) (-.f64 f n)) (/.f64 (neg.f64 (+.f64 f n)) #s(approx (- f n) (neg.f64 n))) #s(approx (/ (neg (+ f n)) (- f n)) (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) n) f) #s(literal -1 binary64))))
(#s(approx (/ (neg (+ f n)) (- f n)) #s(approx (- (* (/ 2 n) f) -1) #s(literal 1 binary64))) #s(approx (/ (neg (+ f n)) (- f n)) (-.f64 (*.f64 (/.f64 #s(literal -2 binary64) f) n) #s(literal 1 binary64))) (/.f64 (neg.f64 #s(approx (+ f n) n)) (-.f64 f n)))
((sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))))
((sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (-.f64 (*.f64 (/.f64 (-.f64 x #s(literal -2 binary64)) #s(literal 2 binary64)) x) #s(literal -2 binary64)))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal -3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x) (sqrt.f64 #s(literal 2 binary64)))))
((/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (-.f64 #s(approx (* (/ (- x -2) 2) x) x) #s(literal -2 binary64)))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (- (* (/ (- x -2) 2) x) -2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)) x) #s(literal -2 binary64)))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (/.f64 (*.f64 (-.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal -1/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))))
((/.f64 #s(literal 1 binary64) #s(approx (pow (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) -1/2) (sqrt.f64 #s(literal 1/2 binary64)))) (sqrt.f64 (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (/ (* (- (* 3/16 x) -1/2) x) (sqrt 2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x) #s(literal -2 binary64)))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (*.f64 #s(approx (/ (+ (* (- (* 7/192 x) -3/16) x) 1/2) (sqrt 2)) (*.f64 (-.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal -3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) x) (sqrt.f64 #s(literal 2 binary64)))))
((*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))
(#s(approx (* (sqrt (- x 1)) (sqrt x)) x) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))
((-.f64 (/.f64 x x) (*.f64 (/.f64 #s(literal 1 binary64) x) (sqrt.f64 (*.f64 x x)))))
(#s(approx (- (/ x x) (* (/ 1 x) (sqrt (* x x)))) #s(literal 0 binary64)) #s(approx (- (/ x x) (* (/ 1 x) (sqrt (* x x)))) #s(literal 2 binary64)))
((sqrt.f64 (+.f64 (pow.f64 x #s(literal 2 binary64)) (pow.f64 x #s(literal 2 binary64)))))
(#s(approx (sqrt (+ (pow x 2) (pow x 2))) (*.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(approx (sqrt (+ (pow x 2) (pow x 2))) (*.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 #s(approx (+ (pow x 2) (pow x 2)) (*.f64 (*.f64 x x) #s(literal 2 binary64)))))
(#s(approx (sqrt (+ (pow x 2) (pow x 2))) (*.f64 x (exp.f64 (*.f64 (log.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(approx (sqrt (+ (pow x 2) (pow x 2))) (*.f64 (neg.f64 x) (exp.f64 (*.f64 (log.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))))) (*.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 #s(literal 2 binary64) x))))
(#s(approx (sqrt (+ (pow x 2) (pow x 2))) (+.f64 (*.f64 (neg.f64 x) (cosh.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (neg.f64 x) (sinh.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))))))) (*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x))) (*.f64 (*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (sqrt.f64 (*.f64 #s(literal 2 binary64) x))))
((sqrt.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 2 binary64)))))
(#s(approx (sqrt (* 2 (pow x 2))) (*.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64)))) (exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (sqrt.f64 (*.f64 x (+.f64 x x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) x))
(#s(approx (sqrt (* 2 (pow x 2))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(approx (sqrt (* 2 (pow x 2))) (*.f64 (neg.f64 x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))))) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) x))
(#s(approx (sqrt (* 2 (pow x 2))) (*.f64 (*.f64 (neg.f64 x) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) x)))
((sqrt.f64 (*.f64 #s(literal 2 binary64) (*.f64 x x))))
(#s(approx (sqrt (* 2 (* x x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 (*.f64 x #s(literal 2 binary64))) (sqrt.f64 x)) (*.f64 (pow.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1/2 binary64)) (pow.f64 x #s(literal 1/2 binary64))))
(#s(approx (sqrt (* 2 (* x x))) (*.f64 (exp.f64 (*.f64 (log.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) x)) (*.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 x)) (*.f64 (pow.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x)))
(#s(approx (sqrt (* 2 (* x x))) (*.f64 (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) #s(literal 2 binary64)) x)))
((sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) x)))
(#s(approx (sqrt (* (* 2 x) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 (*.f64 (+.f64 x x) x)) (*.f64 (sqrt.f64 (*.f64 x #s(literal 2 binary64))) (sqrt.f64 x)))
(#s(approx (sqrt (* (* 2 x) x)) (*.f64 (exp.f64 (*.f64 (log.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) x)) (sqrt.f64 #s(literal 2 binary64)))
((sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x))))
(#s(approx (sqrt (+ (* x x) (* x x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 (*.f64 (*.f64 x x) #s(literal 2 binary64))) (*.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 #s(literal 2 binary64) x))))
((*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 #s(literal 2 binary64)))) #s(approx (sqrt (+ (* x x) (* x x))) (*.f64 (exp.f64 (*.f64 (log.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) x)) (*.f64 (*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (sqrt.f64 (*.f64 #s(literal 2 binary64) x))))
((*.f64 (*.f64 (sqrt.f64 x) (sqrt.f64 x)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal 1/4 binary64)) (*.f64 (pow.f64 x #s(literal 1/8 binary64)) (pow.f64 x #s(literal 1/8 binary64)))) (sqrt.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64)) (sqrt.f64 (+.f64 x x))))
((/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))
(#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64)))
((*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b)))))
((*.f64 r (/.f64 (sin.f64 b) (-.f64 (*.f64 (cos.f64 b) (cos.f64 a)) (*.f64 (sin.f64 a) (sin.f64 b))))) #s(approx (* r (/ (sin b) (cos (+ a b)))) (*.f64 (/.f64 r (cos.f64 a)) b)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b))) (*.f64 r (/.f64 (sin.f64 b) #s(approx (cos (+ a b)) (-.f64 (cos.f64 a) (*.f64 (sin.f64 a) b))))) (*.f64 r (/.f64 (sin.f64 b) (+.f64 (*.f64 (sin.f64 (/.f64 (*.f64 (+.f64 a b) (*.f64 (-.f64 a b) #s(literal 2 binary64))) (*.f64 (-.f64 a b) #s(literal 2 binary64)))) (cos.f64 (/.f64 (*.f64 (-.f64 a b) (PI.f64)) (*.f64 (-.f64 a b) #s(literal 2 binary64))))) (*.f64 (cos.f64 (/.f64 (*.f64 (+.f64 a b) (*.f64 (-.f64 a b) #s(literal 2 binary64))) (*.f64 (-.f64 a b) #s(literal 2 binary64)))) (sin.f64 (/.f64 (*.f64 (-.f64 a b) (PI.f64)) (*.f64 (-.f64 a b) #s(literal 2 binary64)))))))))
(#s(approx (* r (/ (sin b) (- (* (cos b) (cos a)) (* (sin a) (sin b))))) (/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))) #s(approx (* r (/ (sin b) (cos (+ a b)))) (*.f64 #s(approx (/ r (cos a)) r) b)) (/.f64 (*.f64 #s(approx (sin b) b) r) (cos.f64 (+.f64 a b))) (*.f64 r (/.f64 #s(approx (sin b) b) #s(approx (cos (+ a b)) (-.f64 (cos.f64 a) (*.f64 (sin.f64 a) b))))) (*.f64 r #s(approx (/ (sin b) (- (* (cos b) (cos a)) (* (sin a) (sin b)))) (*.f64 (/.f64 (+.f64 (/.f64 (*.f64 (sin.f64 a) b) (cos.f64 a)) #s(literal 1 binary64)) (cos.f64 a)) b))))
((*.f64 r (/.f64 (sin.f64 b) (-.f64 (*.f64 (cos.f64 b) (+.f64 (*.f64 (sin.f64 a) (cos.f64 (/.f64 (PI.f64) #s(literal 2 binary64)))) (*.f64 (cos.f64 a) (sin.f64 (/.f64 (PI.f64) #s(literal 2 binary64)))))) (*.f64 (sin.f64 a) (sin.f64 b))))) (*.f64 r #s(approx (/ (sin b) (- (* (cos b) (cos a)) (* (sin a) (sin b)))) #s(approx (* (/ (+ (/ (* (sin a) b) (cos a)) 1) (cos a)) b) (+.f64 (*.f64 (*.f64 b b) a) b)))) (*.f64 (/.f64 r (cos.f64 (+.f64 a b))) #s(approx (sin b) b)) (*.f64 r (/.f64 (sin.f64 (+.f64 (neg.f64 b) (PI.f64))) (cos.f64 (+.f64 a b)))) (/.f64 (*.f64 #s(approx (sin b) b) r) (/.f64 (*.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cos.f64 (-.f64 b a)))))
((/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))
((/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 b) (cos.f64 a)) (*.f64 (sin.f64 a) (sin.f64 b)))) #s(approx (/ (* r (sin b)) (cos (+ a b))) (*.f64 (/.f64 r (cos.f64 a)) b)) (*.f64 (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))) r) (/.f64 (*.f64 r (sin.f64 b)) #s(approx (cos (+ a b)) (-.f64 (cos.f64 a) (*.f64 (sin.f64 a) b)))) (/.f64 (*.f64 r (sin.f64 b)) (/.f64 (*.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cos.f64 (-.f64 b a)))))
((/.f64 (*.f64 r (sin.f64 b)) (/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (cos.f64 (-.f64 a b))) (*.f64 (*.f64 (neg.f64 (sin.f64 a)) (sin.f64 b)) (cos.f64 (-.f64 a b)))) (cos.f64 (-.f64 b a)))) #s(approx (/ (* r (sin b)) (cos (+ a b))) (*.f64 #s(approx (/ r (cos a)) r) b)) #s(approx (/ (* r (sin b)) (/ (* (cos (- b a)) (cos (+ a b))) (cos (- b a)))) (*.f64 (sin.f64 b) (/.f64 r (cos.f64 b)))) (*.f64 #s(approx (/ (sin b) (cos (+ a b))) (*.f64 (/.f64 (+.f64 (/.f64 (*.f64 (sin.f64 a) b) (cos.f64 a)) #s(literal 1 binary64)) (cos.f64 a)) b)) r) (/.f64 (*.f64 r (sin.f64 b)) (/.f64 (*.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sin.f64 (-.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) b) a)))))
((/.f64 (*.f64 r (sin.f64 b)) (+.f64 (/.f64 (*.f64 (*.f64 (sin.f64 b) (cos.f64 (-.f64 b a))) (neg.f64 (sin.f64 a))) (cos.f64 (-.f64 b a))) (/.f64 (*.f64 (*.f64 (cos.f64 (-.f64 b a)) (cos.f64 a)) (cos.f64 b)) (cos.f64 (-.f64 b a))))) (*.f64 #s(approx (/ (sin b) (cos (+ a b))) #s(approx (* (/ (+ (/ (* (sin a) b) (cos a)) 1) (cos a)) b) (+.f64 (*.f64 (*.f64 b b) a) b))) r) #s(approx (/ (* r (sin b)) (/ (* (cos (- b a)) (cos (+ a b))) (cos (- b a)))) (*.f64 #s(approx (sin b) (*.f64 (+.f64 (*.f64 (*.f64 b b) #s(literal -1/6 binary64)) #s(literal 1 binary64)) b)) (/.f64 r (cos.f64 b)))) (/.f64 (*.f64 r (sin.f64 b)) #s(approx (/ (* (cos (- b a)) (cos (+ a b))) (cos (- b a))) (-.f64 (cos.f64 b) (*.f64 (sin.f64 b) a)))) (/.f64 (*.f64 r (sin.f64 b)) (/.f64 (*.f64 (cos.f64 (-.f64 b a)) (sin.f64 (+.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) b) a))) (sin.f64 (-.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) b) a)))))
((*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 (/.f64 (-.f64 (-.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale)) (sqrt.f64 (+.f64 (pow.f64 (-.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale)) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale) #s(literal 2 binary64))))) (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale))) (PI.f64))))
((*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (+.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 b b)) (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 a a)))) y-scale) (*.f64 (*.f64 x-scale (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle)))) (*.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) (*.f64 (+.f64 b a) (-.f64 b a))))) #s(literal -1/2 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 (*.f64 (/.f64 x-scale angle) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (/.f64 (*.f64 a a) (*.f64 y-scale y-scale)) (/.f64 (*.f64 b b) (*.f64 x-scale x-scale)))) y-scale) (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (PI.f64)))) #s(literal 90 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 (/.f64 (*.f64 (*.f64 x-scale y-scale) (-.f64 (-.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 y-scale y-scale)) (sqrt.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 y-scale y-scale))) #s(literal 2 binary64)) (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 y-scale x-scale) (*.f64 y-scale x-scale)))))))) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)))) (*.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))))) #s(literal -1/2 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 (*.f64 (/.f64 (-.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 y-scale y-scale)) (/.f64 (+.f64 (pow.f64 (*.f64 b (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 x-scale x-scale))) (sqrt.f64 (+.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (sin.f64 (*.f64 #s(literal 2 binary64) (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))))) (*.f64 x-scale y-scale)) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 b (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 x-scale x-scale)) (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 y-scale y-scale))) #s(literal 2 binary64))))) (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (sin.f64 (*.f64 #s(literal 2 binary64) (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))))) (*.f64 x-scale y-scale))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 (/.f64 (-.f64 (-.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a #s(approx (sin (* (/ angle 180) (PI))) (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale)) (sqrt.f64 (+.f64 (pow.f64 (-.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale)) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale) #s(literal 2 binary64))))) (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale))) (PI.f64))))
((*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 #s(approx (/ (* (* 2 (+ (* (pow (cos (* -1/180 (* (PI) angle))) 2) (* b b)) (* (pow (sin (* (* (PI) angle) 1/180)) 2) (* a a)))) y-scale) (* (* x-scale (cos (* -1/180 (* (PI) angle)))) (* (sin (* (* (PI) angle) 1/180)) (* (+ b a) (- b a))))) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 y-scale x-scale) (/.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 angle (PI.f64)))))))) #s(literal -1/2 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 #s(approx (* (/ x-scale angle) (/ (* (* 2 (- (/ (* a a) (* y-scale y-scale)) (/ (* b b) (* x-scale x-scale)))) y-scale) (* (* (+ b a) (- b a)) (PI)))) (*.f64 #s(literal -2 binary64) (/.f64 x-scale (*.f64 angle (*.f64 y-scale (PI.f64)))))) #s(literal 90 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 #s(literal 90 binary64) (*.f64 (/.f64 x-scale angle) (/.f64 (*.f64 y-scale (*.f64 #s(literal 2 binary64) (-.f64 (*.f64 (/.f64 a y-scale) (/.f64 a y-scale)) (*.f64 (/.f64 b x-scale) (/.f64 b x-scale))))) (*.f64 (PI.f64) (*.f64 (+.f64 b a) (-.f64 b a)))))))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 (/.f64 #s(approx (* (* 2 (+ (* (pow (cos (* -1/180 (* (PI) angle))) 2) (* b b)) (* (pow (sin (* (* (PI) angle) 1/180)) 2) (* a a)))) y-scale) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (*.f64 y-scale (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))))) (*.f64 (*.f64 x-scale (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle)))) (*.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) (*.f64 (+.f64 b a) (-.f64 b a))))) #s(literal -1/2 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 (*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle)))) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) x-scale) (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))))) (/.f64 y-scale (*.f64 (-.f64 b a) (+.f64 b a)))) #s(literal -1/2 binary64)))) (PI.f64))))
((*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 #s(approx (/ (* (* 2 (+ (* (pow (cos (* -1/180 (* (PI) angle))) 2) (* b b)) (* (pow (sin (* (* (PI) angle) 1/180)) 2) (* a a)))) y-scale) (* (* x-scale (cos (* -1/180 (* (PI) angle)))) (* (sin (* (* (PI) angle) 1/180)) (* (+ b a) (- b a))))) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 y-scale x-scale) (/.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(approx (cos (* -1/180 (* angle (PI)))) #s(literal 1 binary64)))))) #s(literal -1/2 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 #s(approx (* (/ x-scale angle) (/ (* (* 2 (- (/ (* a a) (* y-scale y-scale)) (/ (* b b) (* x-scale x-scale)))) y-scale) (* (* (+ b a) (- b a)) (PI)))) (*.f64 #s(literal -2 binary64) (/.f64 y-scale (*.f64 angle (*.f64 x-scale (PI.f64)))))) #s(literal 90 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 (*.f64 #s(approx (/ (* (+ (pow (* a (sin (* 1/180 (* (PI) angle)))) 2) (pow (* b (cos (* 1/180 (* (PI) angle)))) 2)) 2) (* (* (cos (* 1/180 (* (PI) angle))) x-scale) (sin (* 1/180 (* (PI) angle))))) (/.f64 (*.f64 #s(literal 360 binary64) (*.f64 b b)) (*.f64 angle (*.f64 x-scale (PI.f64))))) (/.f64 y-scale (*.f64 (-.f64 b a) (+.f64 b a)))) #s(literal -1/2 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 (*.f64 (/.f64 #s(approx (- (- (/ (+ (pow (* (sin (* (PI) (/ angle 180))) b) 2) (pow (* (cos (* (PI) (/ angle 180))) a) 2)) (* y-scale y-scale)) (/ (+ (pow (* b (cos (* (PI) (/ angle 180)))) 2) (pow (* (sin (* (PI) (/ angle 180))) a) 2)) (* x-scale x-scale))) (sqrt (+ (pow (/ (* (* (+ b a) (- b a)) (sin (* 2 (* (PI) (/ angle 180))))) (* x-scale y-scale)) 2) (pow (- (/ (+ (pow (* b (cos (* (PI) (/ angle 180)))) 2) (pow (* (sin (* (PI) (/ angle 180))) a) 2)) (* x-scale x-scale)) (/ (+ (pow (* (sin (* (PI) (/ angle 180))) b) 2) (pow (* (cos (* (PI) (/ angle 180))) a) 2)) (* y-scale y-scale))) 2)))) (*.f64 #s(literal 2 binary64) (-.f64 (*.f64 (/.f64 a y-scale) (/.f64 a y-scale)) (*.f64 (/.f64 b x-scale) (/.f64 b x-scale))))) (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (sin.f64 (*.f64 #s(literal 2 binary64) (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))))) (*.f64 x-scale y-scale))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (/ (- (- (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale) (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2)))) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (*.f64 #s(approx (/ (* (* 2 (+ (* (pow (cos (* -1/180 (* (PI) angle))) 2) (* b b)) (* (pow (sin (* (* (PI) angle) 1/180)) 2) (* a a)))) y-scale) (* (* x-scale (cos (* -1/180 (* (PI) angle)))) (* (sin (* (* (PI) angle) 1/180)) (* (+ b a) (- b a))))) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 y-scale x-scale) (/.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) (+.f64 (*.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal -1/180 binary64))) (cos.f64 (/.f64 (PI.f64) #s(literal 2 binary64)))) (*.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) (sin.f64 (/.f64 (PI.f64) #s(literal 2 binary64))))))))) #s(literal -1/2 binary64)))) (PI.f64))))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) (+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (-.f64 (*.f64 b b) (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64))))) (*.f64 #s(literal 2 binary64) a))))
((+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (- (* b b) (- (* b b) (* (* c a) 4))) (* (- (neg b) (sqrt (- (* b b) (* (* c a) 4)))) (* 2 a))) (/.f64 (neg.f64 b) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (* b b) (- (* b b) (* (* c a) 4))) (* (- (neg b) (sqrt (- (* b b) (* (* c a) 4)))) (* 2 a))) (*.f64 (+.f64 (/.f64 (neg.f64 c) (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (+.f64 (/.f64 (/.f64 c (neg.f64 b)) b) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))))
((/.f64 (/.f64 (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))))) #s(approx (/ (- (* b b) (- (* b b) (* (* c a) 4))) (* (- (neg b) (sqrt (- (* b b) (* (* c a) 4)))) (* 2 a))) #s(approx (* (+ (/ (/ c (neg b)) b) (/ 1 a)) (neg b)) (/.f64 c b))) #s(approx (/ (- (* b b) (- (* b b) (* (* c a) 4))) (* (- (neg b) (sqrt (- (* b b) (* (* c a) 4)))) (* 2 a))) (*.f64 #s(approx (+ (/ (/ c (neg b)) b) (/ 1 a)) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))) #s(approx (/ (- (* b b) (- (* b b) (* (* c a) 4))) (* (- (neg b) (sqrt (- (* b b) (* (* c a) 4)))) (* 2 a))) #s(approx (* (+ (/ (/ c (neg b)) b) (/ 1 a)) (neg b)) (/.f64 (+.f64 (/.f64 (*.f64 c a) b) (neg.f64 b)) a))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/.f64 (*.f64 (*.f64 a #s(literal -2 binary64)) c) b)) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 (*.f64 c a) b) b) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 1 binary64)) b) c) (/.f64 (neg.f64 b) a))))
((-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 #s(literal 4 binary64) a)))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (- (/ (* c a) b) b) a) (/.f64 c b))) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* (* a 4) c)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* a 4) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b))) b)) (/.f64 (-.f64 (*.f64 b b) (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (*.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (-.f64 (neg.f64 b) (*.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 #s(literal 4 binary64) a))) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 #s(literal 4 binary64) a))) #s(literal 1/4 binary64)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (* b b) (- (* b b) (* (* c a) 4))) (* (+ (sqrt (- (* b b) (* (* c a) 4))) (neg b)) (* 2 a))) (/.f64 (neg.f64 b) a)) (/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* a 4) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (*.f64 (*.f64 c c) (/.f64 a (*.f64 b b)))) b)) (/.f64 #s(approx (- (* b b) (- (* b b) (* (* c a) 4))) (*.f64 (*.f64 c a) #s(literal 4 binary64))) (*.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a))
((+.f64 (/.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) a) (/.f64 (neg.f64 b_2) a)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)))) a) (/.f64 (/.f64 (-.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) (neg.f64 b_2))) a))
((/.f64 (/.f64 #s(approx (- (- (* b_2 b_2) (* c a)) (* b_2 b_2)) (*.f64 (neg.f64 c) a)) (-.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) (neg.f64 b_2))) a) #s(approx (/ (/ (- (- (* b_2 b_2) (* c a)) (* b_2 b_2)) (- (sqrt (- (* b_2 b_2) (* c a))) (neg b_2))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) (/.f64 #s(approx (/ (- (- (* b_2 b_2) (* c a)) (* b_2 b_2)) (- (sqrt (- (* b_2 b_2) (* c a))) (neg b_2))) (*.f64 (/.f64 (*.f64 a c) b_2) #s(literal -1/2 binary64))) a) (+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* c a)) (*.f64 (neg.f64 c) a))) a) (/.f64 (neg.f64 b_2) a)) (/.f64 (-.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))) (neg.f64 b_2)) a)))
((/.f64 (/.f64 #s(approx (- (- (* b_2 b_2) (* c a)) (* b_2 b_2)) (*.f64 (neg.f64 c) a)) a) (-.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))) (neg.f64 b_2))) #s(approx (/ (/ (- (- (* b_2 b_2) (* c a)) (* b_2 b_2)) (- (sqrt (- (* b_2 b_2) (* c a))) (neg b_2))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c)) a) #s(approx (/ (/ (- (- (* b_2 b_2) (* c a)) (* b_2 b_2)) (- (sqrt (- (* b_2 b_2) (* c a))) (neg b_2))) a) (*.f64 (-.f64 (/.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c (*.f64 b_2 b_2)))) (neg.f64 b_2))) (/.f64 (+.f64 (*.f64 (neg.f64 b_2) a) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* c a)) (*.f64 (neg.f64 c) a))) a)) (*.f64 a a)))
((/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a))
((-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (neg.f64 b_2))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))) (/.f64 (-.f64 (*.f64 b_2 b_2) (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) (*.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) (neg.f64 b_2)) a)))
((/.f64 (/.f64 (+.f64 #s(literal 0 binary64) (*.f64 c a)) a) (+.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (- (* (/ c b_2) 1/2) (* 2 (/ b_2 a))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) a) (*.f64 b_2 (*.f64 #s(literal 2 binary64) b_2))) (*.f64 b_2 a))) #s(approx (/ (- (* b_2 b_2) (- (* b_2 b_2) (* c a))) (* (+ (sqrt (- (* b_2 b_2) (* c a))) (neg b_2)) a)) (/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2)) (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))))
((/.f64 #s(approx (/ (+ 0 (* c a)) a) c) (+.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (- (* (/ c b_2) 1/2) (* 2 (/ b_2 a))) (*.f64 c (/.f64 #s(literal 1/2 binary64) b_2)))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (- (* (* 1/2 c) a) (* b_2 (* 2 b_2))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (*.f64 b_2 a))) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 c) a)))) a) (/.f64 (/.f64 (*.f64 c a) a) (+.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a))) (neg.f64 b_2))))
((/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x))))
(#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -5/12 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64))) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64)) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 (neg.f64 x) #s(literal 1 binary64))) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 #s(approx (log (- 1 x)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x))))
((/.f64 #s(approx (log (- 1 x)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x))))
((*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) (cos.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.im) (*.f64 (atan2.f64 x.im x.re) y.re)))))
((*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) #s(approx (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) (cos.f64 (*.f64 (atan2.f64 x.im x.re) y.re)))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (cos.f64 (*.f64 (atan2.f64 x.im x.re) y.re)) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re))) (*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) #s(approx (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) (cos.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re)))) y.im)))) (*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) (cos.f64 (+.f64 (*.f64 (log.f64 #s(approx (sqrt (+ (* x.re x.re) (* x.im x.im))) (neg.f64 x.im))) y.im) (*.f64 (atan2.f64 x.im x.re) y.re)))) (*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (+.f64 (*.f64 (atan2.f64 x.im x.re) y.re) (*.f64 y.im (log.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))))))))))
((*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) #s(approx (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) #s(approx (cos (* (atan2 x.im x.re) y.re)) #s(literal 1 binary64)))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) #s(approx (* (cos (* (atan2 x.im x.re) y.re)) (pow (sqrt (+ (* x.im x.im) (* x.re x.re))) y.re)) #s(literal 1 binary64))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 #s(approx (cos (* (atan2 x.im x.re) y.re)) (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 y.re y.re)) (pow.f64 (atan2.f64 x.im x.re) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re))) (*.f64 #s(approx (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re)) (cos.f64 (+.f64 (*.f64 (log.f64 #s(approx (sqrt (+ (* x.re x.re) (* x.im x.im))) (neg.f64 x.im))) y.im) (*.f64 (atan2.f64 x.im x.re) y.re)))) (*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) #s(approx (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) #s(approx (cos (* (log (sqrt (+ (* x.im x.im) (* x.re x.re)))) y.im)) (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 y.im y.im)) (pow.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re)))) #s(literal 2 binary64))) #s(literal 1 binary64))))))
((*.f64 #s(approx (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (pow.f64 (exp.f64 (neg.f64 y.im)) (atan2.f64 x.im x.re))) #s(approx (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) #s(approx (cos (* (atan2 x.im x.re) y.re)) #s(literal 1 binary64)))) (*.f64 #s(approx (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re)) #s(approx (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) #s(approx (cos (* (atan2 x.im x.re) y.re)) #s(literal 1 binary64)))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) #s(approx (* (cos (* (atan2 x.im x.re) y.re)) (pow (sqrt (+ (* x.im x.im) (* x.re x.re))) y.re)) (*.f64 (pow.f64 x.im y.re) (cos.f64 (*.f64 (atan2.f64 x.im x.re) y.re))))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 #s(approx (cos (* (atan2 x.im x.re) y.re)) #s(approx (+ (* (* -1/2 (* y.re y.re)) (pow (atan2 x.im x.re) 2)) 1) (*.f64 (pow.f64 (atan2.f64 x.im x.re) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 y.re y.re))))) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re))) (*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) #s(approx (cos (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) #s(approx (cos (* (log (sqrt (+ (* x.im x.im) (* x.re x.re)))) y.im)) (cos.f64 (*.f64 (log.f64 x.im) y.im))))))
((*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) (sin.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.im) (*.f64 (atan2.f64 x.im x.re) y.re)))))
((*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) #s(approx (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) (sin.f64 (*.f64 (atan2.f64 x.im x.re) y.re)))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (sin.f64 (*.f64 (atan2.f64 x.im x.re) y.re)) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (sin.f64 (+.f64 (*.f64 (neg.f64 y.im) (neg.f64 (log.f64 x.im))) (*.f64 (atan2.f64 x.im x.re) y.re))) (exp.f64 (-.f64 (*.f64 (neg.f64 y.re) (neg.f64 (log.f64 x.im))) (*.f64 (atan2.f64 x.im x.re) y.im))))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (sin.f64 (+.f64 (*.f64 (neg.f64 y.im) (log.f64 (/.f64 #s(literal -1 binary64) x.im))) (*.f64 (atan2.f64 x.im x.re) y.re))) (exp.f64 (-.f64 (*.f64 (neg.f64 y.re) (log.f64 (/.f64 #s(literal -1 binary64) x.im))) (*.f64 (atan2.f64 x.im x.re) y.im))))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (sin.f64 (+.f64 (*.f64 (atan2.f64 x.im x.re) y.re) (*.f64 (log.f64 x.im) y.im))) (/.f64 (pow.f64 x.im y.re) (pow.f64 (exp.f64 y.im) (atan2.f64 x.im x.re))))))
((*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) #s(approx (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re))) (+.f64 (*.f64 (*.f64 y.im (cos.f64 (*.f64 (atan2.f64 x.im x.re) y.re))) (log.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))))) (sin.f64 (*.f64 (atan2.f64 x.im x.re) y.re))))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) #s(approx (* (sin (* (atan2 x.im x.re) y.re)) (pow (sqrt (+ (* x.im x.im) (* x.re x.re))) y.re)) (*.f64 (atan2.f64 x.im x.re) y.re))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (sin.f64 (*.f64 (atan2.f64 x.im x.re) y.re)) (pow.f64 #s(approx (sqrt (+ (* x.im x.im) (* x.re x.re))) (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) x.im) (/.f64 (*.f64 x.re x.re) x.im))) x.im)) y.re))) (*.f64 #s(approx (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re)) (sin.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.im) (*.f64 (atan2.f64 x.im x.re) y.re)))) (*.f64 (exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)))) y.re) (*.f64 (atan2.f64 x.im x.re) y.im))) (sin.f64 (+.f64 (*.f64 (log.f64 #s(approx (sqrt (+ (* x.re x.re) (* x.im x.im))) (*.f64 (neg.f64 x.re) (+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x.re) (/.f64 (*.f64 x.im x.im) x.re)) #s(literal 1 binary64))))) y.im) (*.f64 (atan2.f64 x.im x.re) y.re)))))
(#s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (sin.f64 (*.f64 (atan2.f64 x.im x.re) y.re)) (pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (pow.f64 x.im #s(literal 4 binary64))) (*.f64 x.re x.re))) y.re))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 #s(approx (sin (* (atan2 x.im x.re) y.re)) (*.f64 (atan2.f64 x.im x.re) y.re)) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) #s(approx (* (sin (* (atan2 x.im x.re) y.re)) (pow (sqrt (+ (* x.im x.im) (* x.re x.re))) y.re)) (*.f64 (+.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re)))) (atan2.f64 x.im x.re)) y.re) (atan2.f64 x.im x.re)) y.re))) (*.f64 #s(approx (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) y.re)) (sin.f64 (+.f64 (*.f64 (log.f64 #s(approx (sqrt (+ (* x.re x.re) (* x.im x.im))) (*.f64 (neg.f64 x.re) (+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x.re) (/.f64 (*.f64 x.im x.im) x.re)) #s(literal 1 binary64))))) y.im) (*.f64 (atan2.f64 x.im x.re) y.re)))) #s(approx (* (exp (- (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.re) (* (atan2 x.im x.re) y.im))) (sin (+ (* (log (sqrt (+ (* x.re x.re) (* x.im x.im)))) y.im) (* (atan2 x.im x.re) y.re)))) (*.f64 (sin.f64 (+.f64 (*.f64 (atan2.f64 x.im x.re) y.re) (*.f64 (log.f64 x.im) y.im))) (/.f64 (pow.f64 x.im y.re) (pow.f64 #s(approx (exp y.im) (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) y.im) #s(literal 1 binary64)) y.im) #s(literal 1 binary64))) (atan2.f64 x.im x.re))))))
((+.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (log.f64 u1)) #s(literal 1/2 binary64))) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)))
((+.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)) #s(approx (pow (* -2 (log u1)) 1/2) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 (neg.f64 (log.f64 u1)))))) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)) (+.f64 #s(approx (* (* (/ 1 6) (pow (* -2 (log u1)) 1/2)) (cos (* (* 2 (PI)) u2))) (*.f64 (*.f64 #s(literal 1/6 binary64) (sqrt.f64 #s(literal -2 binary64))) (sqrt.f64 (log.f64 u1)))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64))) #s(literal 1/6 binary64)) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)) (exp.f64 (*.f64 (log.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64))) #s(literal 1/2 binary64)))) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64)) #s(literal 1/4 binary64)) #s(literal 1/6 binary64))) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)))
((+.f64 (*.f64 #s(approx (* (pow (* (log u1) -2) 1/4) (* (pow (* (log u1) -2) 1/4) 1/6)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/6 binary64)) (sqrt.f64 (neg.f64 (log.f64 u1))))) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)) (+.f64 #s(approx (* (* (/ 1 6) (pow (* -2 (log u1)) 1/2)) (cos (* (* 2 (PI)) u2))) (*.f64 (sqrt.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64))) #s(literal 1/6 binary64))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)) #s(approx (pow (* -2 (log u1)) 1/2) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 (neg.f64 (log.f64 u1)))))) #s(approx (cos (* (* 2 (PI)) u2)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) u2) (*.f64 #s(literal 2 binary64) u2))))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)) (exp.f64 (*.f64 (log.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64))) #s(literal 1/2 binary64)))) #s(approx (cos (* (* 2 (PI)) u2)) #s(literal 1 binary64))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64)))) #s(literal 1/6 binary64)) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)))
((+.f64 (*.f64 #s(approx (* (pow (* (log u1) -2) 1/4) (* (pow (* (log u1) -2) 1/4) 1/6)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log.f64 u1))) #s(literal 1/6 binary64)) (sqrt.f64 #s(literal 2 binary64)))) (cos.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) u2))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64))) #s(literal 1/6 binary64)) #s(approx (cos (* (* 2 (PI)) u2)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) u2) (*.f64 #s(literal 2 binary64) u2))))) #s(literal 1/2 binary64)) (+.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) #s(approx (pow (* -2 (log u1)) 1/2) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 (neg.f64 (log.f64 u1)))))) #s(approx (cos (* (* 2 (PI)) u2)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) u2) (*.f64 #s(literal 2 binary64) u2))))) #s(literal 1/2 binary64)) (+.f64 #s(approx (* (* (/ 1 6) (pow (* -2 (log u1)) 1/2)) (cos (* (* 2 (PI)) u2))) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) #s(literal 1/6 binary64))) #s(literal 1/2 binary64)) (+.f64 #s(approx (* (* (/ 1 6) (pow (* -2 (log u1)) 1/2)) (cos (* (* 2 (PI)) u2))) (*.f64 (pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log.f64 (*.f64 (log.f64 u1) #s(literal -2 binary64)))) #s(literal 1/6 binary64))) #s(literal 1/2 binary64)))
((neg.f64 (log.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))))
(#s(approx (neg (log (- (/ 1 x) 1))) (log.f64 x)) #s(approx (neg (log (- (/ 1 x) 1))) (+.f64 (log.f64 x) x)))
(#s(approx (neg (log (- (/ 1 x) 1))) #s(approx (+ (log x) x) x)))
((/.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) (*.f64 (pow.f64 c #s(literal 2 binary64)) (*.f64 (*.f64 x (pow.f64 s #s(literal 2 binary64))) x))))
(#s(approx (/ (cos (* 2 x)) (* (pow c 2) (* (* x (pow s 2)) x))) (/.f64 (/.f64 (/.f64 (cos.f64 (*.f64 #s(literal -2 binary64) x)) (*.f64 (*.f64 c c) x)) (*.f64 s x)) s)) #s(approx (/ (cos (* 2 x)) (* (pow c 2) (* (* x (pow s 2)) x))) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 c c) x) x)) s) s)) (/.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) x) x) s) s))) (/.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) (*.f64 (*.f64 (*.f64 (*.f64 c c) x) (*.f64 s s)) x)) (/.f64 (/.f64 (cos.f64 (*.f64 #s(literal -2 binary64) x)) (*.f64 (*.f64 (*.f64 c c) x) (*.f64 s s))) x))
((/.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 c (*.f64 (*.f64 c x) (*.f64 s x))) s))) (/.f64 #s(approx (cos (* -2 x)) #s(literal 1 binary64)) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) x) x) s) s))) #s(approx (/ (cos (* 2 x)) (* (pow c 2) (* (* x (pow s 2)) x))) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 c x) c) x)) s) s)) #s(approx (/ (cos (* 2 x)) (* (pow c 2) (* (* x (pow s 2)) x))) (/.f64 (pow.f64 (*.f64 (*.f64 c c) x) #s(literal -1 binary64)) (*.f64 (*.f64 s s) x))) #s(approx (/ (/ (/ (cos (* -2 x)) (* (* c c) x)) (* s x)) s) (/.f64 (/.f64 (cos.f64 (*.f64 #s(literal -2 binary64) x)) (*.f64 (*.f64 c c) x)) (*.f64 (*.f64 s x) s))))
((/.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 (*.f64 (*.f64 c x) s) (*.f64 c x)) s))) (/.f64 #s(approx (cos (* -2 x)) #s(literal 1 binary64)) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 c x) (*.f64 c (*.f64 (*.f64 s s) x))))) (/.f64 #s(approx (cos (* 2 x)) #s(literal 1 binary64)) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 c (*.f64 (*.f64 c x) (*.f64 s x))) s))) (/.f64 #s(approx (cos (* 2 x)) (-.f64 (*.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 c (*.f64 (*.f64 c x) (*.f64 s x))) s))) (/.f64 (cos.f64 (+.f64 x x)) #s(approx (* (pow c 2) (* (* x (pow s 2)) x)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) x) x) s) s))))
((-.f64 (*.f64 re re) (*.f64 im im)))
(#s(approx (- (* re re) (* im im)) (*.f64 re re)) #s(approx (- (* re re) (* im im)) (*.f64 (neg.f64 im) im)) (*.f64 (-.f64 re im) (+.f64 im re)))
((+.f64 (*.f64 re im) (*.f64 im re)))
((*.f64 re (+.f64 im im)))
((*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))))
((*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) (+.f64 #s(approx (sqrt (+ (* re re) (* im im))) im) re)))) #s(approx (* 1/2 (sqrt (* 2 (+ (sqrt (+ (* re re) (* im im))) re)))) (*.f64 (sqrt.f64 re) #s(literal 1 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) (+.f64 #s(approx (sqrt (+ (* re re) (* im im))) (neg.f64 re)) re)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (+ (sqrt (+ (* re re) (* im im))) re)) (-.f64 (/.f64 (*.f64 im im) re) (*.f64 #s(literal -4 binary64) re))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (+ (sqrt (+ (* re re) (* im im))) re)) (-.f64 (*.f64 (+.f64 (/.f64 re im) #s(literal 2 binary64)) re) (*.f64 #s(literal -2 binary64) im))))))
((*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 (+.f64 #s(approx (sqrt (+ (* re re) (* im im))) im) re))) #s(approx (* 1/2 (sqrt (* 2 (+ (sqrt (+ (* re re) (* im im))) re)))) (sqrt.f64 re)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) #s(approx (+ (sqrt (+ (* re re) (* im im))) re) im)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (+ (sqrt (+ (* re re) (* im im))) re)) (*.f64 (neg.f64 im) (/.f64 im re))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (+ (sqrt (+ (* re re) (* im im))) re)) (/.f64 (*.f64 (neg.f64 im) im) re)))))
((*.f64 #s(literal 1/2 binary64) (sqrt.f64 (+.f64 #s(approx (+ (sqrt (+ (* re re) (* im im))) re) im) #s(approx (+ (sqrt (+ (* re re) (* im im))) re) im)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 (+.f64 #s(approx (sqrt (+ (* re re) (* im im))) re) re))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (+ (sqrt (+ (* re re) (* im im))) re)) (-.f64 (*.f64 (/.f64 im re) im) (*.f64 #s(literal -4 binary64) re))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (*.f64 (-.f64 (+.f64 (*.f64 im im) (*.f64 re re)) (*.f64 re re)) #s(literal 2 binary64)) (-.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))) re)))) (*.f64 #s(literal 1/2 binary64) (exp.f64 (*.f64 (log.f64 (*.f64 #s(approx (+ (sqrt (+ (* re re) (* im im))) re) im) #s(literal 2 binary64))) #s(literal 1/2 binary64)))))
((*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) (-.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))))
((*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(approx (sqrt (+ (* re re) (* im im))) im) re)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (- (sqrt (+ (* re re) (* im im))) re)) (*.f64 #s(literal -4 binary64) re)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(approx (sqrt (+ (* re re) (* im im))) re) re)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (- (sqrt (+ (* re re) (* im im))) re)) (-.f64 (*.f64 (-.f64 (/.f64 re im) #s(literal 2 binary64)) re) (*.f64 #s(literal -2 binary64) im))))) #s(approx (* 1/2 (sqrt (* 2 (- (sqrt (+ (* re re) (* im im))) re)))) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 im (sqrt.f64 #s(literal 1/2 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) re)))))
((*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (sqrt (+ (* re re) (* im im))) re) im)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (- (sqrt (+ (* re re) (* im im))) re)) (/.f64 (*.f64 im im) re)))) #s(approx (* 1/2 (sqrt (* 2 (- (sqrt (+ (* re re) (* im im))) re)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) re)) (*.f64 #s(literal 1/2 binary64) im)) (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 #s(literal 1/2 binary64) #s(approx (sqrt (* 2 (- (sqrt (+ (* re re) (* im im))) re))) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) re)) (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) im)) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (* 1/2 (sqrt (* 2 (- (sqrt (+ (* re re) (* im im))) re)))) (*.f64 (*.f64 (pow.f64 re #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) im) #s(literal 1/2 binary64)))))
((*.f64 #s(literal 1/2 binary64) (sqrt.f64 (+.f64 #s(approx (- (sqrt (+ (* re re) (* im im))) re) im) #s(approx (- (sqrt (+ (* re re) (* im im))) re) im)))) #s(approx (* 1/2 (sqrt (* 2 (- (sqrt (+ (* re re) (* im im))) re)))) (*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 re)) im)) #s(approx (* 1/2 (sqrt (* 2 (- (sqrt (+ (* re re) (* im im))) re)))) (/.f64 (*.f64 im #s(literal 1/2 binary64)) (sqrt.f64 re))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(approx (* 2 (- (sqrt (+ (* re re) (* im im))) re)) (*.f64 (neg.f64 re) (+.f64 (*.f64 (/.f64 im re) (/.f64 im re)) #s(literal 4 binary64)))))) #s(approx (* 1/2 (sqrt (* 2 (- (sqrt (+ (* re re) (* im im))) re)))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 re)) (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) im)) (sqrt.f64 #s(literal 2 binary64)))))
((*.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 re)) (+.f64 (exp.f64 (-.f64 #s(literal 0 binary64) im)) (exp.f64 im))))
(#s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) (sin.f64 re)) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) (*.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) im) im) #s(literal 1 binary64)) (sin.f64 re))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 re)) (+.f64 #s(approx (exp (- 0 im)) #s(literal 1 binary64)) (exp.f64 im))) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 im)) (sin.f64 re)) #s(literal 1/2 binary64)))
((*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cosh.f64 im)) #s(approx (sin re) re)) #s(literal 1/2 binary64)) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) #s(approx (sin re) re)) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) (*.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) im) im) #s(literal 1 binary64)) #s(approx (sin re) re))) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) #s(approx (* (+ (* (* 1/2 im) im) 1) (sin re)) (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 re re)) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 im im) #s(literal 1/2 binary64)) #s(literal -1 binary64))) re))) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) #s(approx (* (+ (* (* 1/2 im) im) 1) (sin re)) (*.f64 (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 im im) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal -1/120 binary64) (*.f64 re re)))) (*.f64 re re)) (-.f64 (*.f64 (*.f64 im im) #s(literal 1/2 binary64)) #s(literal -1 binary64))) re))))
((*.f64 #s(literal 1 binary64) (*.f64 #s(approx (sin re) re) (cosh.f64 im))) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) (*.f64 #s(approx (+ (* (* 1/2 im) im) 1) (*.f64 (*.f64 im im) #s(literal 1/2 binary64))) #s(approx (sin re) re))) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) #s(approx (* (+ (* (* 1/2 im) im) 1) (sin re)) (*.f64 #s(approx (* (+ (* -1/6 (* re re)) 1) (- (* (* im im) 1/2) -1)) (*.f64 (*.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 im im))) re) re)) re))) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) #s(approx (* (+ (* (* 1/2 im) im) 1) (sin re)) (*.f64 (-.f64 (*.f64 (*.f64 re re) #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) im) im) #s(literal -1 binary64)) re)))) #s(approx (* (* 1/2 (sin re)) (+ (exp (- 0 im)) (exp im))) #s(approx (* (+ (* (* 1/2 im) im) 1) (sin re)) (*.f64 #s(approx (* (+ (* -1/6 (* re re)) 1) (- (* (* im im) 1/2) -1)) (*.f64 (-.f64 (/.f64 (/.f64 (+.f64 (*.f64 (*.f64 im im) #s(literal 1/2 binary64)) #s(literal 1 binary64)) re) re) (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 im im) #s(literal -1/12 binary64)))) (*.f64 re re))) re))))
((*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 re)) (-.f64 (exp.f64 (-.f64 #s(literal 0 binary64) im)) (exp.f64 im))))
((*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 re)) #s(approx (- (exp (- 0 im)) (exp im)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/2520 binary64) (*.f64 im im)) #s(literal 1/60 binary64)) im) im) #s(literal 1/3 binary64)) (*.f64 im im)) #s(literal 2 binary64)) im))) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (neg.f64 (cos.f64 re)) im)) (*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 re)) #s(approx (- (exp (- 0 im)) (exp im)) (*.f64 (-.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 im im)) #s(literal 2 binary64)) im))) (*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 re)) #s(approx (- (exp (- 0 im)) (exp im)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/60 binary64) (*.f64 im im)) #s(literal 1/3 binary64)) im) im) #s(literal 2 binary64)) im))) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) #s(literal 1/2 binary64))))
(#s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 re) (+.f64 (*.f64 #s(literal -1/120 binary64) (*.f64 im im)) #s(literal -1/6 binary64))) (*.f64 im im)) (cos.f64 re)) im)) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) #s(approx (* (- (exp (neg im)) (exp im)) 1/2) (neg.f64 im))) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) #s(approx (* (neg (cos re)) im) (-.f64 (*.f64 (*.f64 im (-.f64 (*.f64 #s(literal -1/24 binary64) (*.f64 re re)) #s(literal -1/2 binary64))) (*.f64 re re)) im))) (*.f64 #s(approx (* 1/2 (cos re)) (+.f64 (*.f64 (*.f64 re re) #s(literal -1/4 binary64)) #s(literal 1/2 binary64))) #s(approx (- (exp (- 0 im)) (exp im)) (*.f64 (-.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 im im)) #s(literal 2 binary64)) im))) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (-.f64 #s(approx (exp (neg im)) #s(literal 1 binary64)) (exp.f64 im)) #s(literal 1/2 binary64))))
(#s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (-.f64 (*.f64 #s(approx (* (cos re) (+ (* -1/120 (* im im)) -1/6)) (*.f64 #s(literal -1/6 binary64) (cos.f64 re))) (*.f64 im im)) (cos.f64 re)) im)) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (-.f64 #s(approx (exp (neg im)) #s(literal 1 binary64)) #s(approx (exp im) #s(literal 1 binary64))) #s(literal 1/2 binary64))) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 #s(approx (- (* (* (cos re) (+ (* -1/120 (* im im)) -1/6)) (* im im)) (cos re)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 im im) #s(literal -1/120 binary64)) #s(literal 1/6 binary64)) im) im) #s(literal 1 binary64))) im)) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (neg.f64 #s(approx (cos re) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 re re)) #s(literal 1/24 binary64)) re) re) #s(literal 1/2 binary64)) (*.f64 re re)) #s(literal -1 binary64)))) im)) #s(approx (* (* 1/2 (cos re)) (- (exp (- 0 im)) (exp im))) (*.f64 (-.f64 (*.f64 (cos.f64 re) (cos.f64 (PI.f64))) (*.f64 (sin.f64 re) (sin.f64 (PI.f64)))) im)))
((/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 #s(literal 10 binary64))))
((/.f64 (log.f64 #s(approx (sqrt (+ (* re re) (* im im))) im)) (log.f64 #s(literal 10 binary64))) (/.f64 (neg.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))))) (log.f64 #s(literal 1/10 binary64))) (/.f64 (*.f64 #s(literal 1/2 binary64) (log.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (log.f64 #s(literal 10 binary64))))
((/.f64 (neg.f64 (log.f64 #s(approx (sqrt (+ (* re re) (* im im))) im))) (log.f64 #s(literal 1/10 binary64))) (/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 (+.f64 (pow.f64 im #s(literal 6 binary64)) (pow.f64 re #s(literal 6 binary64)))) (log.f64 (-.f64 (+.f64 (pow.f64 re #s(literal 4 binary64)) (pow.f64 im #s(literal 4 binary64))) (pow.f64 (*.f64 re im) #s(literal 2 binary64)))))) (log.f64 #s(literal 10 binary64))) (/.f64 (*.f64 (log.f64 (+.f64 (*.f64 re re) (*.f64 im im))) #s(literal -1/2 binary64)) (log.f64 #s(literal 1/10 binary64))))
((/.f64 (*.f64 #s(literal 1/2 binary64) #s(approx (- (log (+ (pow im 6) (pow re 6))) (log (- (+ (pow re 4) (pow im 4)) (pow (* re im) 2)))) (-.f64 (log.f64 (pow.f64 im #s(literal 6 binary64))) (log.f64 (pow.f64 im #s(literal 4 binary64)))))) (log.f64 #s(literal 10 binary64))))
((/.f64 (atan2.f64 im re) (log.f64 #s(literal 10 binary64))))
((*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (pow.f64 (log.f64 #s(literal 10 binary64)) #s(literal 3 binary64)))) (pow.f64 (log.f64 #s(literal 10 binary64)) #s(literal 2 binary64))) (*.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (log.f64 #s(literal 10 binary64)) (log.f64 #s(literal 1/10 binary64)))) (log.f64 #s(literal 10 binary64))) (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 #s(literal 1/10 binary64)))))
((*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 (log.f64 #s(literal 10 binary64)) (*.f64 (log.f64 #s(literal 1/10 binary64)) (log.f64 #s(literal 10 binary64))))))
((/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) #s(literal 0 binary64))) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 #s(literal 0 binary64) #s(literal 0 binary64)))))
(#s(approx (/ (+ (* (log (sqrt (+ (* re re) (* im im)))) (log base)) (* (atan2 im re) 0)) (+ (* (log base) (log base)) (* 0 0))) (/.f64 (log.f64 im) (log.f64 base))) #s(approx (/ (+ (* (log (sqrt (+ (* re re) (* im im)))) (log base)) (* (atan2 im re) 0)) (+ (* (log base) (log base)) (* 0 0))) (/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (log.f64 base))) (*.f64 (log.f64 base) (/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (pow.f64 (log.f64 base) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))))) (pow.f64 (log.f64 base) #s(literal 4 binary64))) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (/.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 base)) (*.f64 (atan2.f64 im re) #s(literal 0 binary64))) (/.f64 (pow.f64 (log.f64 base) #s(literal 4 binary64)) (pow.f64 (log.f64 base) #s(literal 2 binary64)))))
(#s(approx (/ (+ (* (log (sqrt (+ (* re re) (* im im)))) (log base)) (* (atan2 im re) 0)) (+ (* (log base) (log base)) (* 0 0))) (/.f64 (log.f64 #s(approx (sqrt (+ (* im im) (* re re))) (+.f64 (*.f64 (*.f64 (/.f64 re im) (/.f64 re im)) (*.f64 #s(literal 1/2 binary64) im)) im))) (log.f64 base))) (*.f64 (log.f64 base) (/.f64 (log.f64 #s(approx (sqrt (+ (* im im) (* re re))) im)) (pow.f64 (log.f64 base) #s(literal 2 binary64)))) (*.f64 (log.f64 base) (/.f64 (log.f64 #s(approx (sqrt (+ (* im im) (* re re))) (+.f64 (*.f64 (*.f64 (/.f64 re im) (/.f64 re im)) (*.f64 #s(literal 1/2 binary64) im)) im))) (pow.f64 (log.f64 base) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 (log.f64 base) (log.f64 #s(approx (sqrt (+ (* im im) (* re re))) im))) (pow.f64 (log.f64 base) #s(literal 4 binary64))) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (log.f64 base) (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))))) (pow.f64 (log.f64 base) #s(literal 4 binary64))) (exp.f64 (*.f64 (log.f64 (log.f64 base)) #s(literal 2 binary64)))))
((*.f64 #s(approx (/ (* (log base) (log (sqrt (+ (* im im) (* re re))))) (pow (log base) 4)) (/.f64 (log.f64 im) (pow.f64 (log.f64 base) #s(literal 3 binary64)))) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (/.f64 (*.f64 (log.f64 #s(approx (sqrt (+ (* im im) (* re re))) im)) (log.f64 base)) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (*.f64 (log.f64 base) (/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (exp.f64 (*.f64 (log.f64 (log.f64 base)) #s(literal 2 binary64))))) (/.f64 (*.f64 (*.f64 (log.f64 #s(approx (sqrt (+ (* im im) (* re re))) im)) (log.f64 base)) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (pow.f64 (log.f64 base) #s(literal 4 binary64))) (*.f64 (log.f64 base) (/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (/.f64 (pow.f64 (log.f64 base) #s(literal 4 binary64)) (pow.f64 (log.f64 base) #s(literal 2 binary64))))))
((/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) #s(literal 0 binary64))) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 #s(literal 0 binary64) #s(literal 0 binary64)))))
(#s(approx (/ (- (* (atan2 im re) (log base)) (* (log (sqrt (+ (* re re) (* im im)))) 0)) (+ (* (log base) (log base)) (* 0 0))) (/.f64 (atan2.f64 im re) (log.f64 base))) (*.f64 (log.f64 base) (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) #s(literal 2 binary64)))) (/.f64 (*.f64 (log.f64 base) (atan2.f64 im re)) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (log.f64 base) (atan2.f64 im re)) (pow.f64 (log.f64 base) #s(literal 4 binary64))) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (log.f64 base) (atan2.f64 im re)) (pow.f64 (log.f64 base) #s(literal 2 binary64))) #s(literal 0 binary64)) (pow.f64 (log.f64 base) #s(literal 4 binary64))))
((/.f64 (-.f64 #s(approx (- (* (* (log base) (atan2 im re)) (pow (log base) 2)) 0) (*.f64 (pow.f64 (log.f64 base) #s(literal 3 binary64)) (atan2.f64 im re))) #s(literal 0 binary64)) (pow.f64 (log.f64 base) #s(literal 4 binary64))) (*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) #s(literal 2 binary64)))) (/.f64 (*.f64 (log.f64 base) (atan2.f64 im re)) (log.f64 (pow.f64 base (log.f64 base)))) (*.f64 (*.f64 (log.f64 base) (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) #s(literal 4 binary64)))) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (log.f64 base) (atan2.f64 im re)) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (pow.f64 (log.f64 base) #s(literal 4 binary64))))
((/.f64 #s(approx (- (* (* (log base) (atan2 im re)) (pow (log base) 2)) 0) (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) #s(literal 3 binary64)))) (pow.f64 (log.f64 base) #s(literal 4 binary64))) (*.f64 (atan2.f64 im re) #s(approx (/ (log base) (pow (log base) 2)) (/.f64 #s(literal 1 binary64) (log.f64 base)))) (*.f64 #s(approx (/ (* (log base) (atan2 im re)) (pow (log base) 4)) (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) #s(literal 3 binary64)))) (pow.f64 (log.f64 base) #s(literal 2 binary64))) (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (/.f64 (pow.f64 (log.f64 base) #s(literal 2 binary64)) (pow.f64 (log.f64 base) #s(literal 4 binary64)))) (/.f64 (-.f64 #s(approx (- (* (* (log base) (atan2 im re)) (pow (log base) 2)) 0) (*.f64 (exp.f64 (*.f64 (log.f64 (log.f64 base)) #s(literal 3 binary64))) (atan2.f64 im re))) #s(literal 0 binary64)) (pow.f64 (log.f64 base) #s(literal 4 binary64))))
((log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))))
((log.f64 #s(approx (sqrt (+ (* re re) (* im im))) im)) (*.f64 #s(literal 1/2 binary64) (log.f64 (+.f64 (*.f64 im im) (*.f64 re re)))))
((atan2.f64 im re))
((*.f64 (exp.f64 re) (cos.f64 im)))
((/.f64 (*.f64 #s(literal 1 binary64) (cos.f64 im)) (exp.f64 (neg.f64 re))) #s(approx (* (exp re) (cos im)) (cos.f64 im)) #s(approx (* (exp re) (cos im)) (exp.f64 re)) (*.f64 #s(approx (exp re) (+.f64 #s(literal 1 binary64) re)) (cos.f64 im)) (*.f64 (exp.f64 re) #s(approx (cos im) (+.f64 (*.f64 (*.f64 im im) #s(literal -1/2 binary64)) #s(literal 1 binary64)))))
((/.f64 (cos.f64 im) (exp.f64 (neg.f64 re))) #s(approx (* (exp re) (cos im)) #s(approx (exp re) #s(literal 1 binary64))) #s(approx (* (exp re) (cos im)) #s(approx (exp re) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) re) #s(literal -1 binary64)) re) #s(literal -1 binary64)))) (*.f64 #s(approx (exp re) (-.f64 re #s(literal -1 binary64))) #s(approx (cos im) (+.f64 (*.f64 (*.f64 im im) #s(literal -1/2 binary64)) #s(literal 1 binary64)))) (*.f64 #s(approx (exp re) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) re) #s(literal -1 binary64)) re) #s(literal -1 binary64))) #s(approx (cos im) (+.f64 (*.f64 (*.f64 im im) #s(literal -1/2 binary64)) #s(literal 1 binary64)))))
(#s(approx (* (exp re) (cos im)) (*.f64 (cos.f64 im) (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) re) #s(literal -1/2 binary64)) (*.f64 re re)) (+.f64 #s(literal 1 binary64) re)))) #s(approx (* (exp re) (cos im)) #s(approx (exp re) (-.f64 #s(approx (* (- (* 1/2 re) -1) re) re) #s(literal -1 binary64)))) #s(approx (* (exp re) (cos im)) #s(approx (exp re) #s(approx (- (* (- (* 1/2 re) -1) re) -1) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) re) #s(literal -1 binary64)) re)))) (*.f64 #s(approx (exp re) #s(approx (- (* (- (* 1/2 re) -1) re) -1) #s(literal 1 binary64))) #s(approx (cos im) (+.f64 (*.f64 (*.f64 im im) #s(literal -1/2 binary64)) #s(literal 1 binary64)))) (*.f64 #s(approx (exp re) #s(approx (- (* (- (* 1/2 re) -1) re) -1) (*.f64 (*.f64 re re) #s(literal 1/2 binary64)))) #s(approx (cos im) (+.f64 (*.f64 (*.f64 im im) #s(literal -1/2 binary64)) #s(literal 1 binary64)))))
((*.f64 (exp.f64 re) (sin.f64 im)))
((/.f64 (sin.f64 im) (exp.f64 (neg.f64 re))) #s(approx (* (exp re) (sin im)) (sin.f64 im)) (*.f64 #s(approx (exp re) (+.f64 #s(literal 1 binary64) re)) (sin.f64 im)) #s(approx (* (exp re) (sin im)) (*.f64 (sin.f64 im) (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) re) #s(literal -1/2 binary64)) (*.f64 re re)) (+.f64 #s(literal 1 binary64) re)))) (/.f64 (+.f64 (pow.f64 (*.f64 (sinh.f64 re) (sin.f64 im)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cosh.f64 re) (sin.f64 im)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (sinh.f64 re) (sin.f64 im)) (-.f64 (*.f64 (sinh.f64 re) (sin.f64 im)) (*.f64 (cosh.f64 re) (sin.f64 im)))) (pow.f64 (*.f64 (cosh.f64 re) (sin.f64 im)) #s(literal 2 binary64)))))
((/.f64 (sin.f64 im) #s(approx (exp (neg re)) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) re) #s(literal -1/2 binary64)) re) #s(literal 1 binary64)) re) #s(literal 1 binary64)))) #s(approx (* (exp re) (sin im)) #s(approx (sin im) im)) #s(approx (* (exp re) (sin im)) #s(approx (* (sin im) (+ (* (- (* 1/6 re) -1/2) (* re re)) (+ 1 re))) (*.f64 (+.f64 (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) re) #s(literal -1/2 binary64)) re) #s(literal 1 binary64)) re) #s(literal 1 binary64)) (+.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/120 binary64) (*.f64 im im)))) (*.f64 im im)) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) re) #s(literal -1/2 binary64)) re) re)) (+.f64 #s(literal 1 binary64) re)) im))) (/.f64 (sin.f64 im) #s(approx (exp (neg re)) (-.f64 #s(literal 1 binary64) re))) #s(approx (* (exp re) (sin im)) #s(approx (* (sin im) (+ (* (- (* 1/6 re) -1/2) (* re re)) (+ 1 re))) (*.f64 (neg.f64 (pow.f64 re #s(literal 3 binary64))) (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (neg.f64 (sin.f64 im)) re) (sin.f64 im)) (neg.f64 re)) (*.f64 #s(literal -1/2 binary64) (sin.f64 im))) (neg.f64 re)) (*.f64 #s(literal 1/6 binary64) (sin.f64 im)))))))
((/.f64 (sin.f64 im) #s(approx (exp (neg re)) (+.f64 (*.f64 (-.f64 (/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 re re)) #s(literal 1/4 binary64)) re) (+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -1/6 binary64) re))) #s(literal 1 binary64)) re) #s(literal 1 binary64)))) (*.f64 #s(approx (exp re) (+.f64 #s(literal 1 binary64) re)) #s(approx (sin im) im)) (/.f64 #s(approx (sin im) im) #s(approx (exp (neg re)) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) re) #s(literal -1/2 binary64)) re) #s(literal 1 binary64)) re) #s(literal 1 binary64)))) (*.f64 (exp.f64 re) #s(approx (sin im) im)) (/.f64 (sin.f64 im) #s(approx (exp (neg re)) (+.f64 (*.f64 (-.f64 #s(approx (* (- (* -1/6 re) -1/2) re) (*.f64 (*.f64 re re) #s(literal -1/6 binary64))) #s(literal 1 binary64)) re) #s(literal 1 binary64)))))
((*.f64 (*.f64 x x) x))
((pow.f64 x #s(literal 3 binary64)))
((-.f64 (*.f64 (-.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)) x.re) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.im)))
((-.f64 (*.f64 (+.f64 x.im x.re) (*.f64 (-.f64 x.re x.im) x.re)) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.im)) #s(approx (- (* (- (* x.re x.re) (* x.im x.im)) x.re) (* (+ (* x.re x.im) (* x.im x.re)) x.im)) (*.f64 #s(literal -3 binary64) (*.f64 (*.f64 x.im x.im) x.re))) (-.f64 (*.f64 #s(approx (- (* x.re x.re) (* x.im x.im)) (*.f64 (neg.f64 x.im) x.im)) x.re) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.im)) (-.f64 (*.f64 #s(approx (- (* x.re x.re) (* x.im x.im)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 x.im x.re) x.re) x.im)) (*.f64 x.re x.re))) x.re) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.im)) #s(approx (- (* (- (* x.re x.re) (* x.im x.im)) x.re) (* (+ (* x.re x.im) (* x.im x.re)) x.im)) (-.f64 (pow.f64 x.re #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x.im x.im)) x.re))))
((-.f64 (*.f64 (+.f64 x.im x.re) (*.f64 (-.f64 x.re x.im) x.re)) (*.f64 (*.f64 x.re (+.f64 x.im x.im)) x.im)) #s(approx (- (* (- (* x.re x.re) (* x.im x.im)) x.re) (* (+ (* x.re x.im) (* x.im x.re)) x.im)) #s(approx (* -3 (* (* x.im x.im) x.re)) (*.f64 (*.f64 (*.f64 #s(literal -3 binary64) x.re) x.im) x.im))) #s(approx (- (* (- (* x.re x.re) (* x.im x.im)) x.re) (* (+ (* x.re x.im) (* x.im x.re)) x.im)) (*.f64 (*.f64 #s(literal -3 binary64) x.im) (*.f64 x.re x.im))) #s(approx (- (* (- (* x.re x.re) (* x.im x.im)) x.re) (* (+ (* x.re x.im) (* x.im x.re)) x.im)) (*.f64 x.re (-.f64 (*.f64 x.re x.re) (*.f64 #s(literal 3 binary64) (*.f64 x.im x.im))))) (-.f64 (/.f64 (*.f64 (*.f64 (-.f64 x.re x.im) x.re) (*.f64 (+.f64 x.re x.im) (-.f64 x.im x.re))) (-.f64 x.im x.re)) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.im)))
((-.f64 (*.f64 #s(approx (+ x.im x.re) (*.f64 (+.f64 (/.f64 x.re x.im) #s(literal 1 binary64)) x.im)) (*.f64 (-.f64 x.re x.im) x.re)) (*.f64 (*.f64 x.re (+.f64 x.im x.im)) x.im)) #s(approx (- (* (- (* x.re x.re) (* x.im x.im)) x.re) (* (+ (* x.re x.im) (* x.im x.re)) x.im)) (*.f64 x.re #s(approx (- (* x.re x.re) (* 3 (* x.im x.im))) (*.f64 x.re x.re)))) #s(approx (- (* (- (* x.re x.re) (* x.im x.im)) x.re) (* (+ (* x.re x.im) (* x.im x.re)) x.im)) (*.f64 x.im (*.f64 (*.f64 x.re x.im) #s(literal -3 binary64)))) (-.f64 (*.f64 (*.f64 (+.f64 x.re x.im) x.re) (-.f64 x.re x.im)) (*.f64 #s(literal 2 binary64) x.im)) (-.f64 (*.f64 (+.f64 x.im x.re) #s(approx (* (- x.re x.im) x.re) (*.f64 (-.f64 (*.f64 (/.f64 x.re x.im) x.re) x.re) x.im))) (*.f64 (*.f64 x.re (+.f64 x.im x.im)) x.im)))
((+.f64 (*.f64 (-.f64 (*.f64 x.re x.re) (*.f64 x.im x.im)) x.im) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.re)))
((+.f64 (*.f64 (*.f64 x.im (+.f64 x.im x.re)) (-.f64 x.re x.im)) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.re)) #s(approx (+ (* (- (* x.re x.re) (* x.im x.im)) x.im) (* (+ (* x.re x.im) (* x.im x.re)) x.re)) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x.im) x.re) x.re)) (+.f64 (*.f64 #s(approx (- (* x.re x.re) (* x.im x.im)) (*.f64 x.re x.re)) x.im) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.re)) (+.f64 (*.f64 #s(approx (- (* x.re x.re) (* x.im x.im)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 x.im x.re) x.re) x.im)) (*.f64 x.re x.re))) x.im) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.re)) (+.f64 (/.f64 (*.f64 (-.f64 (pow.f64 x.re #s(literal 4 binary64)) (pow.f64 x.im #s(literal 4 binary64))) x.im) (+.f64 (*.f64 x.im x.im) (*.f64 x.re x.re))) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.re)))
((+.f64 (*.f64 (*.f64 x.im (+.f64 x.im x.re)) (-.f64 x.re x.im)) (*.f64 (*.f64 x.re (+.f64 x.im x.im)) x.re)) #s(approx (+ (* (- (* x.re x.re) (* x.im x.im)) x.im) (* (+ (* x.re x.im) (* x.im x.re)) x.re)) (*.f64 #s(literal 3 binary64) (*.f64 x.im (*.f64 x.re x.re)))) #s(approx (+ (* (- (* x.re x.re) (* x.im x.im)) x.im) (* (+ (* x.re x.im) (* x.im x.re)) x.re)) (*.f64 (*.f64 x.re #s(literal 3 binary64)) (*.f64 x.re x.im))) #s(approx (+ (* (- (* x.re x.re) (* x.im x.im)) x.im) (* (+ (* x.re x.im) (* x.im x.re)) x.re)) (*.f64 (-.f64 (*.f64 (*.f64 x.re x.re) #s(literal 3 binary64)) (*.f64 x.im x.im)) x.im)) (+.f64 (*.f64 #s(approx (* x.im (+ x.im x.re)) (*.f64 (+.f64 (*.f64 (/.f64 x.im x.re) x.im) x.im) x.re)) (-.f64 x.re x.im)) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.re)))
((+.f64 (*.f64 #s(approx (* x.im (+ x.im x.re)) (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 x.im x.re)) (*.f64 x.re x.im))) (-.f64 x.re x.im)) (*.f64 (+.f64 (*.f64 x.re x.im) (*.f64 x.im x.re)) x.re)) #s(approx (+ (* (- (* x.re x.re) (* x.im x.im)) x.im) (* (+ (* x.re x.im) (* x.im x.re)) x.re)) (*.f64 #s(approx (- (* (* x.re x.re) 3) (* x.im x.im)) (*.f64 (neg.f64 x.im) x.im)) x.im)) #s(approx (+ (* (- (* x.re x.re) (* x.im x.im)) x.im) (* (+ (* x.re x.im) (* x.im x.re)) x.re)) (*.f64 (*.f64 (*.f64 x.re x.im) #s(literal 3 binary64)) x.re)) (-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (*.f64 (-.f64 x.re x.im) (+.f64 x.re x.im))) x.im)) (+.f64 (*.f64 (*.f64 x.im #s(approx (+ x.im x.re) (*.f64 (+.f64 (/.f64 x.re x.im) #s(literal 1 binary64)) x.im))) (-.f64 x.re x.im)) (*.f64 (*.f64 x.re (+.f64 x.im x.im)) x.re)))
((*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))
(#s(approx (* (* 1/2 (cos re)) (+ (exp (neg im)) (exp im))) (cos.f64 re)) (*.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 re)) #s(approx (+ (exp (neg im)) (exp im)) (-.f64 (*.f64 im im) #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 re) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (cos.f64 re)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (sin.f64 re) #s(literal 0 binary64)) (*.f64 (sin.f64 re) #s(literal 0 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 re)) (*.f64 #s(literal 1 binary64) (cos.f64 re))) (*.f64 (*.f64 (sin.f64 re) #s(literal 0 binary64)) (*.f64 #s(literal 1 binary64) (cos.f64 re))))))) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (*.f64 #s(literal 1 binary64) (cosh.f64 im)) (cos.f64 re)))
((*.f64 (*.f64 #s(literal 1 binary64) (cosh.f64 im)) #s(approx (cos re) #s(literal 1 binary64))) #s(approx (* (* 1/2 (cos re)) (+ (exp (neg im)) (exp im))) #s(approx (cos re) #s(literal 1 binary64))) (*.f64 #s(approx (* 1/2 (cos re)) #s(literal 1/2 binary64)) #s(approx (+ (exp (neg im)) (exp im)) (-.f64 (*.f64 im im) #s(literal -2 binary64)))) (*.f64 #s(approx (* 1/2 (cos re)) (-.f64 (*.f64 (*.f64 re re) #s(literal -1/4 binary64)) #s(literal -1/2 binary64))) #s(approx (+ (exp (neg im)) (exp im)) (-.f64 (*.f64 im im) #s(literal -2 binary64)))) (*.f64 #s(approx (* 1/2 (cos re)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/48 binary64) (*.f64 re re)) #s(literal 1/4 binary64)) re) re) #s(literal -1/2 binary64))) #s(approx (+ (exp (neg im)) (exp im)) (-.f64 (*.f64 im im) #s(literal -2 binary64)))))
((*.f64 (cosh.f64 im) #s(approx (cos re) #s(literal 1 binary64))) (*.f64 #s(approx (* 1/2 (cos re)) #s(literal 1/2 binary64)) #s(approx (+ (exp (neg im)) (exp im)) #s(approx (- (* im im) -2) (*.f64 im im)))) (*.f64 #s(approx (* 1/2 (cos re)) (-.f64 (*.f64 (*.f64 re re) #s(literal -1/4 binary64)) #s(literal -1/2 binary64))) #s(approx (+ (exp (neg im)) (exp im)) #s(approx (- (* im im) -2) (*.f64 im im)))) (*.f64 #s(approx (* 1/2 (cos re)) #s(literal 1/2 binary64)) #s(approx (+ (exp (neg im)) (exp im)) #s(approx (- (* im im) -2) (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 im im)) #s(literal -1 binary64)) im) im)))) #s(approx (* (* 1/2 (cos re)) (+ (exp (neg im)) (exp im))) #s(approx (cos re) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 re re)) #s(literal -1/24 binary64)) re) re) #s(literal 1/2 binary64)) (*.f64 re re)) #s(literal -1 binary64)))))
((*.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))
((*.f64 (*.f64 (sin.f64 re) (*.f64 #s(literal 2 binary64) (sinh.f64 (neg.f64 im)))) #s(literal 1/2 binary64)) #s(approx (* (* 1/2 (sin re)) (- (exp (neg im)) (exp im))) (*.f64 (neg.f64 (sin.f64 re)) im)) (*.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 re)) #s(approx (- (exp (neg im)) (exp im)) (*.f64 (-.f64 (*.f64 (*.f64 im im) #s(literal -1/3 binary64)) #s(literal 2 binary64)) im))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 re)) #s(approx (- (exp (neg im)) (exp im)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/60 binary64) (*.f64 im im)) #s(literal 1/3 binary64)) im) im) #s(literal 2 binary64)) im))) (*.f64 (*.f64 #s(literal 1/2 binary64) #s(approx (sin re) re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))
((*.f64 #s(approx (* (sin re) (* 2 (sinh (neg im)))) (*.f64 (-.f64 (*.f64 (*.f64 (sin.f64 re) (-.f64 #s(literal -1/3 binary64) (*.f64 #s(literal 1/60 binary64) (*.f64 im im)))) (*.f64 im im)) (*.f64 #s(literal 2 binary64) (sin.f64 re))) im)) #s(literal 1/2 binary64)) #s(approx (* (* 1/2 (sin re)) (- (exp (neg im)) (exp im))) (*.f64 (neg.f64 #s(approx (sin re) re)) im)) (*.f64 (*.f64 #s(literal 1/2 binary64) #s(approx (sin re) re)) #s(approx (- (exp (neg im)) (exp im)) (*.f64 (-.f64 (*.f64 (*.f64 im im) #s(literal -1/3 binary64)) #s(literal 2 binary64)) im))) (*.f64 (*.f64 #s(literal 1/2 binary64) #s(approx (sin re) re)) #s(approx (- (exp (neg im)) (exp im)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/60 binary64) (*.f64 im im)) #s(literal 1/3 binary64)) im) im) #s(literal 2 binary64)) im))) (*.f64 (sinh.f64 (neg.f64 im)) #s(approx (sin re) re)))
((*.f64 #s(approx (* (sin re) (* 2 (sinh (neg im)))) (*.f64 (-.f64 (*.f64 #s(approx (* (sin re) (- -1/3 (* 1/60 (* im im)))) (*.f64 #s(literal -1/3 binary64) (sin.f64 re))) (*.f64 im im)) (*.f64 #s(literal 2 binary64) (sin.f64 re))) im)) #s(literal 1/2 binary64)) #s(approx (* (* 1/2 (sin re)) (- (exp (neg im)) (exp im))) #s(approx (* (neg (sin re)) im) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 im re) re) #s(literal 1/6 binary64)) im) re))) #s(approx (* (* 1/2 (sin re)) (- (exp (neg im)) (exp im))) (*.f64 #s(approx (neg (sin re)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/120 binary64) (*.f64 re re))) re) re) #s(literal 1 binary64)) re)) im)) (*.f64 #s(approx (* (sin re) (* 2 (sinh (neg im)))) (*.f64 #s(approx (- (* (* (sin re) (- -1/3 (* 1/60 (* im im)))) (* im im)) (* 2 (sin re))) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 #s(literal -1/3 binary64) (*.f64 (*.f64 im im) #s(literal 1/60 binary64))) im) im) #s(literal 2 binary64)) re)) im)) #s(literal 1/2 binary64)) (*.f64 #s(approx (* 1/2 (sin re)) (*.f64 (+.f64 (*.f64 (*.f64 re re) #s(literal -1/12 binary64)) #s(literal 1/2 binary64)) re)) #s(approx (- (exp (neg im)) (exp im)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/60 binary64) (*.f64 im im)) #s(literal 1/3 binary64)) im) im) #s(literal 2 binary64)) im))))
((atan2.f64 im re))
((+.f64 (*.f64 re re) (*.f64 im im)))
(#s(approx (+ (* re re) (* im im)) (*.f64 im im)) #s(approx (+ (* re re) (* im im)) (*.f64 (+.f64 (*.f64 (*.f64 im (/.f64 re im)) (/.f64 re im)) im) im)))
(#s(approx (+ (* re re) (* im im)) (*.f64 (+.f64 (*.f64 #s(approx (* im (/ re im)) re) (/.f64 re im)) im) im)))
((sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))))
(#s(approx (sqrt (+ (* re re) (* im im))) im))
((-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64)))
(#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64)) #s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n)))
((log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))
(#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 2 binary64)) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)) #s(literal 2/3 binary64)) eps) eps) #s(literal 2 binary64)) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -2/7 binary64) (*.f64 eps eps)) #s(literal 2/5 binary64)) eps) eps) #s(literal 2/3 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) eps)))
(#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (-.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -2/5 binary64) (*.f64 eps eps)) #s(literal 2/3 binary64)) eps) eps) #s(literal 1 binary64)) #s(literal 1 binary64)) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) #s(literal 2 binary64)) #s(literal 4 binary64)) eps) (+.f64 #s(literal 2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))))
(#s(approx (log (/ (- 1 eps) (+ 1 eps))) (/.f64 #s(approx (* (- (pow (* -2/3 (* eps eps)) 2) 4) eps) (*.f64 #s(literal -4 binary64) eps)) (+.f64 #s(literal 2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps))))))
((log.f64 (+.f64 #s(literal 1 binary64) x)))
(#s(approx (log (+ 1 x)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) x) #s(approx (log (+ 1 x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x)) (log.f64 #s(approx (+ 1 x) x)))
(#s(approx (log (+ 1 x)) (+.f64 (*.f64 (*.f64 x x) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64))) x)) #s(approx (log (+ 1 x)) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (+.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64))))) (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (log.f64 (-.f64 #s(literal 1 binary64) x))))
(#s(approx (log (+ 1 x)) (+.f64 (*.f64 (*.f64 x x) (-.f64 (*.f64 #s(approx (- (* -1/4 x) -1/3) #s(literal 1/3 binary64)) x) #s(literal 1/2 binary64))) x)) (-.f64 #s(approx (log (- 1 (* x x))) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (*.f64 x x))) (log.f64 (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(approx (log (- 1 (* x x))) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/3 binary64) x) x) #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64)) (*.f64 x x))) (log.f64 (-.f64 #s(literal 1 binary64) x))) #s(approx (log (+ 1 x)) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) #s(approx (+ (+ (pow (* (- (* (- (* -1/4 x) -1/3) x) 1/2) x) 2) 1) (* (* (- (* (- (* -1/4 x) -1/3) x) 1/2) x) -1)) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/12 binary64) x) #s(literal 1/12 binary64)) x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))))) #s(approx (log (+ 1 x)) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (+.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (*.f64 #s(approx (- (* -1/4 x) -1/3) #s(literal 1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64)) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64))))))
((if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a))))
((if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (-.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b))) #s(literal -2 binary64)) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a))) #s(approx (if (>= b 0) (/ (* 2 c) (- (neg b) (sqrt (- (* b b) (* (* 4 a) c))))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) b)) (*.f64 (/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) b) a) #s(literal 1/2 binary64)))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* (* 4 a) c))) (+.f64 (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64)) b)))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))))) (/.f64 (+.f64 (*.f64 (neg.f64 b) (*.f64 a #s(literal 2 binary64))) (*.f64 (*.f64 a #s(literal 2 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c))))) (*.f64 (*.f64 a #s(literal 2 binary64)) (*.f64 a #s(literal 2 binary64))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (/.f64 (-.f64 (*.f64 b b) (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c))) (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c))) (neg.f64 b)))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a))))
(#s(approx (if (>= b 0) (/ (* 2 c) (- (neg b) (sqrt (- (* b b) (* (* 4 a) c))))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c))) b)) (*.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)))) #s(approx (if (>= b 0) (/ (* 2 c) (/ (- (* b b) (- (* b b) (* (* a 4) c))) (+ (sqrt (- (* b b) (* (* a 4) c))) (neg b)))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) (*.f64 (/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal 4 binary64)))) b) a) #s(literal 1/2 binary64))) #s(approx (if (>= b 0) (/ (* 2 c) (- (neg b) (sqrt (- (* b b) (* (* 4 a) c))))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (+.f64 #s(approx (sqrt (- (* b b) (* (* a 4) c))) b) b)) (*.f64 (/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) b) a) #s(literal 1/2 binary64)))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))))) (/.f64 #s(approx (+ (* (neg b) (* a 2)) (* (* a 2) (sqrt (- (* b b) (* (* a 4) c))))) (*.f64 (*.f64 a b) #s(literal -4 binary64))) (*.f64 (*.f64 a #s(literal 2 binary64)) (*.f64 a #s(literal 2 binary64))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))))) (/.f64 (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 a #s(literal 4 binary64)) c)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c)))) (*.f64 a #s(literal 2 binary64))))))
(#s(approx (if (>= b 0) (/ (* 2 c) (- (neg b) (sqrt (- (* b b) (* (* 4 a) c))))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c))) b)) (*.f64 (-.f64 #s(approx (sqrt (- (* b b) (* (* a 4) c))) (neg.f64 b)) b) (/.f64 #s(literal 1/2 binary64) a)))) #s(approx (if (>= b 0) (/ (* 2 c) (/ (- (* b b) (- (* b b) (* (* a 4) c))) (+ (sqrt (- (* b b) (* (* a 4) c))) (neg b)))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) #s(approx (* (- (sqrt (- (* b b) (* (* a 4) c))) b) (/ 1/2 a)) (/.f64 (neg.f64 b) a))) #s(approx (if (>= b 0) (/ (* 2 c) (/ (- (* b b) (- (* b b) (* (* a 4) c))) (+ (sqrt (- (* b b) (* (* a 4) c))) (neg b)))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) #s(approx (* (- (sqrt (- (* b b) (* (* a 4) c))) b) (/ 1/2 a)) (*.f64 (+.f64 (/.f64 (neg.f64 c) (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b)))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) #s(approx (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 #s(literal 2 binary64) (-.f64 (*.f64 a (/.f64 c b)) b)))) (/.f64 #s(approx (+ (* (neg b) (* a 2)) (* (* a 2) (sqrt (- (* b b) (* (* a 4) c))))) (*.f64 (*.f64 a b) #s(literal -4 binary64))) (*.f64 (*.f64 a #s(literal 2 binary64)) (*.f64 a #s(literal 2 binary64))))) #s(approx (if (>= b 0) (/ (* 2 c) (/ (- (* b b) (- (* b b) (* (* a 4) c))) (+ (sqrt (- (* b b) (* (* a 4) c))) (neg b)))) (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a))) (*.f64 (/.f64 #s(approx (- (sqrt (- (* b b) (* (* 4 a) c))) b) (*.f64 (-.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b))) #s(literal -2 binary64)) (neg.f64 b))) a) #s(literal 1/2 binary64))))
((if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))))))
(#s(approx (if (>= b 0) (/ (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/ (* 2 c) (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))))) (if (>=.f64 b #s(literal 0 binary64)) (*.f64 (/.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) b) a) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) c) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) b)))) (if (>=.f64 b #s(literal 0 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (+.f64 (/.f64 c b) (/.f64 (neg.f64 b) a))) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* (* 4 a) c))) (neg.f64 b))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (*.f64 b b) (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (*.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (*.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) #s(literal 1/4 binary64)))))))
((if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (pow.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 #s(literal -2 binary64) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* (* 4 a) c))) (neg.f64 b))))) (if (>=.f64 b #s(literal 0 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (+.f64 (/.f64 c b) (/.f64 (neg.f64 b) a))) (/.f64 (*.f64 #s(literal 2 binary64) c) #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64))) (neg.f64 b))))) (if (>=.f64 b #s(literal 0 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 (+.f64 (pow.f64 (/.f64 c b) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 b) a) #s(literal 3 binary64))) (+.f64 (*.f64 (/.f64 c b) (/.f64 c b)) (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (neg.f64 b) a)) (*.f64 (/.f64 c b) (/.f64 (neg.f64 b) a)))))) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))))))
((if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) #s(approx (* (- 2 (* (* a (/ c (* b b))) 2)) (neg b)) (*.f64 (-.f64 (*.f64 (/.f64 a b) #s(literal 2 binary64)) (*.f64 (/.f64 b c) #s(literal 2 binary64))) c))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 #s(literal -2 binary64) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 #s(literal -2 binary64) b)))) (if (>=.f64 b #s(literal 0 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 (/.f64 (-.f64 (*.f64 c a) (*.f64 b b)) b) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))) (if (>=.f64 b #s(literal 0 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 #s(approx (+ (pow (/ c b) 3) (pow (/ (neg b) a) 3)) (pow.f64 (/.f64 c b) #s(literal 3 binary64))) (+.f64 (*.f64 (/.f64 c b) (/.f64 c b)) (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (neg.f64 b) a)) (*.f64 (/.f64 c b) (/.f64 (neg.f64 b) a)))))) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))))) (if (>=.f64 b #s(literal 0 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 #s(literal 2 binary64) c) (+.f64 (neg.f64 b) (pow.f64 #s(approx (pow (- (* b b) (* (* a 4) c)) 1/4) (pow.f64 (exp.f64 #s(literal 1/4 binary64)) (-.f64 (log.f64 (*.f64 #s(literal -4 binary64) a)) (*.f64 (log.f64 c) #s(literal -1 binary64))))) #s(literal 2 binary64))))))
((-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x))))
(#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x)) #s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (+.f64 (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64)) x)) #s(approx (- (/ 1 x) (/ 1 (tan x))) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64))) (*.f64 #s(literal -1/3 binary64) x))))
(#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (+.f64 #s(literal 1/27 binary64) (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 3 binary64))) x) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (*.f64 x x)) x) (*.f64 #s(literal -1/3 binary64) x))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) x) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64)))) #s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (- (* (pow x 3) (+ (* 2/945 (* x x)) 1/45)) (* -1/3 x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) x) x) #s(literal 2/945 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/9 binary64) (*.f64 x x))) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/3 binary64) x)))))
(#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(approx (* (+ 1/27 (pow (* 1/45 (* x x)) 3)) x) (*.f64 #s(literal 1/27 binary64) x)) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (-.f64 (*.f64 #s(approx (* (+ (* 2/945 (* x x)) 1/45) (* x x)) (*.f64 (*.f64 x x) #s(literal 1/45 binary64))) x) (*.f64 #s(literal -1/3 binary64) x))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(approx (* (- (pow (* 1/45 (* x x)) 2) 1/9) x) (*.f64 #s(literal -1/9 binary64) x)) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64)))) #s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (/ (* (- (pow (* 1/45 (* x x)) 2) 1/9) x) (- (* 1/45 (* x x)) 1/3)) (*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal -1/45 binary64)) (pow.f64 x #s(literal 3 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (-.f64 (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64)) #s(literal 1/9 binary64)))))
((-.f64 (*.f64 #s(literal 170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 binary64) t) #s(literal 170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 binary64)))
(#s(approx (- (* 170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 t) 170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) #s(literal -170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 binary64)) #s(approx (- (* 170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 t) 170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) (*.f64 #s(literal 170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 binary64) t)))
((+.f64 (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 t #s(literal 1/5000000000000000 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 t #s(literal 1/5000000000000000 binary64)))) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (*.f64 t #s(literal 1/5000000000000000 binary64))))))
(#s(approx (+ (* (+ 1 (* t 1/5000000000000000)) (+ 1 (* t 1/5000000000000000))) (- -1 (* 2 (* t 1/5000000000000000)))) (*.f64 (*.f64 t t) #s(literal 1/25000000000000000000000000000000 binary64))))
(#s(approx (+ (* (+ 1 (* t 1/5000000000000000)) (+ 1 (* t 1/5000000000000000))) (- -1 (* 2 (* t 1/5000000000000000)))) (*.f64 (*.f64 #s(literal 1/25000000000000000000000000000000 binary64) t) t)) #s(approx (+ (* (+ 1 (* t 1/5000000000000000)) (+ 1 (* t 1/5000000000000000))) (- -1 (* 2 (* t 1/5000000000000000)))) (*.f64 (*.f64 #s(literal 1/5000000000000000 binary64) t) (*.f64 #s(literal 1/5000000000000000 binary64) t))) #s(approx (+ (* (+ 1 (* t 1/5000000000000000)) (+ 1 (* t 1/5000000000000000))) (- -1 (* 2 (* t 1/5000000000000000)))) (*.f64 (*.f64 (*.f64 #s(literal 1/5000000000000000 binary64) t) #s(literal 1/5000000000000000 binary64)) t)) #s(approx (+ (* (+ 1 (* t 1/5000000000000000)) (+ 1 (* t 1/5000000000000000))) (- -1 (* 2 (* t 1/5000000000000000)))) (*.f64 (*.f64 (*.f64 #s(literal 1/5000000000000000 binary64) t) t) #s(literal 1/5000000000000000 binary64))))
(#s(approx (+ (* (+ 1 (* t 1/5000000000000000)) (+ 1 (* t 1/5000000000000000))) (- -1 (* 2 (* t 1/5000000000000000)))) (*.f64 (*.f64 (*.f64 t t) #s(literal 1/5000000000000000 binary64)) #s(literal 1/5000000000000000 binary64))))
((/.f64 (fabs.f64 (-.f64 a b)) #s(literal 2 binary64)))
(#s(approx (/ (fabs (- a b)) 2) (*.f64 #s(literal 1/2 binary64) (fabs.f64 (-.f64 b a)))))
(#s(approx (/ (fabs (- a b)) 2) (*.f64 #s(literal 1/2 binary64) (fabs.f64 #s(approx (- b a) b)))) #s(approx (/ (fabs (- a b)) 2) (*.f64 #s(literal 1/2 binary64) (fabs.f64 #s(approx (- b a) (neg.f64 a))))))
((fabs.f64 (-.f64 (/.f64 (+.f64 x #s(literal 4 binary64)) y) (*.f64 (/.f64 x y) z))))
((fabs.f64 (/.f64 (-.f64 (+.f64 #s(literal 4 binary64) x) (*.f64 z x)) y)) (fabs.f64 #s(approx (- (/ (+ x 4) y) (* (/ x y) z)) (/.f64 #s(literal 4 binary64) y))) (fabs.f64 #s(approx (- (/ (+ x 4) y) (* (/ x y) z)) (*.f64 (neg.f64 z) (/.f64 x y)))) (fabs.f64 (+.f64 (/.f64 (-.f64 #s(literal 4 binary64) (*.f64 z x)) y) (/.f64 x y))) (fabs.f64 (/.f64 (-.f64 (*.f64 y (+.f64 #s(literal 4 binary64) x)) (*.f64 (*.f64 y x) z)) (*.f64 y y))))
((fabs.f64 (/.f64 (-.f64 #s(approx (+ 4 x) #s(literal 4 binary64)) (*.f64 z x)) y)) #s(approx (- (/ (+ x 4) y) (* (/ x y) z)) (/.f64 #s(literal 4 binary64) y)) #s(approx (- (/ (+ x 4) y) (* (/ x y) z)) (*.f64 (/.f64 (neg.f64 x) y) z)) (fabs.f64 #s(approx (+ (/ (- 4 (* z x)) y) (/ x y)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) z) y) x))) (fabs.f64 (+.f64 (/.f64 #s(approx (- 4 (* z x)) #s(literal 4 binary64)) y) (/.f64 x y))))
((fabs.f64 (/.f64 (+.f64 #s(approx (- 4 (* z x)) #s(literal 4 binary64)) x) y)) (fabs.f64 #s(approx (+ (/ (- 4 (* z x)) y) (/ x y)) #s(approx (* (/ (- 1 z) y) x) (/.f64 x y)))) (fabs.f64 #s(approx (+ (/ (- 4 (* z x)) y) (/ x y)) (*.f64 (/.f64 #s(approx (- 1 z) #s(literal 1 binary64)) y) x))) (fabs.f64 #s(approx (+ (/ (- 4 (* z x)) y) (/ x y)) (*.f64 (/.f64 #s(approx (- 1 z) (neg.f64 z)) y) x))) (fabs.f64 (/.f64 #s(approx (- (* y (+ 4 x)) (* (* y x) z)) (*.f64 (*.f64 (neg.f64 y) z) x)) (*.f64 y y))))
((/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)) (*.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a a) b) (*.f64 (*.f64 b b) a)) #s(literal 1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)))) eps))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a)))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)) (*.f64 #s(approx (- (* (/ 1/2 a) (/ (pow (+ b a) 2) b)) (* (* (+ (* (* a a) b) (* (* b b) a)) 1/2) (/ (+ b a) (* (* (* a a) b) b)))) #s(literal 0 binary64)) eps))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 #s(approx (+ b a) a) b) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 (/.f64 a b) #s(literal 1 binary64)) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 a b) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (/.f64 a b) (/.f64 a b)) (*.f64 #s(literal 1 binary64) (/.f64 a b))))) a)))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)) #s(approx (* (- (* (/ 1/2 a) (/ (pow (+ b a) 2) b)) (* (* (+ (* (* a a) b) (* (* b b) a)) 1/2) (/ (+ b a) (* (* (* a a) b) b)))) eps) #s(literal 0 binary64)))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ b a) a) (*.f64 b a))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 a b) (*.f64 (/.f64 a b) a)) b)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (/.f64 a b) (/.f64 a b)) (*.f64 #s(literal 1 binary64) (/.f64 a b))))) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 a b) #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 a b) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b)) a)))))
((/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64))))
((/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x)) #s(approx (/ (exp x) (- (exp x) 1)) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) #s(approx (/ (exp x) (- (exp x) 1)) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (*.f64 #s(literal -1/12 binary64) x))) #s(approx (/ (exp x) (- (exp x) 1)) (-.f64 (/.f64 #s(literal 1 binary64) x) (-.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal -1/12 binary64)) x)))))
((/.f64 (exp.f64 x) #s(approx (- (exp x) 1) #s(approx (* (- (* (- (* 1/6 x) -1/2) x) -1) x) x))) #s(approx (/ (exp x) (- (exp x) 1)) #s(approx (- (/ 1 x) -1/2) #s(literal 1/2 binary64))) #s(approx (/ (exp x) (- (exp x) 1)) (-.f64 #s(approx (- (/ 1 x) -1/2) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/12 binary64) x))) #s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal -1/12 binary64)) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x)) (/.f64 (exp.f64 x) (+.f64 (cosh.f64 x) (-.f64 (sinh.f64 x) #s(literal 1 binary64)))))
((/.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (- (exp x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x))) #s(approx (/ (exp x) (- (exp x) 1)) #s(approx (- (- (/ 1 x) -1/2) (* -1/12 x)) (*.f64 #s(literal 1/12 binary64) x))) #s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (-.f64 #s(approx (* (- (* (- (* (* x x) -1/720) -1/12) x) -1/2) x) (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) x)) (/.f64 #s(approx (exp x) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x) #s(literal -1 binary64))) #s(approx (- (exp x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x))) (*.f64 (/.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (sinh.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (cosh.f64 x) #s(literal 3 binary64)))) (+.f64 (*.f64 (-.f64 (sinh.f64 x) #s(literal 1 binary64)) (-.f64 (-.f64 (sinh.f64 x) #s(literal 1 binary64)) (cosh.f64 x))) (pow.f64 (cosh.f64 x) #s(literal 2 binary64)))))
((-.f64 (exp.f64 x) #s(literal 1 binary64)))
(#s(approx (- (exp x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x)) #s(approx (- (exp x) 1) x) (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) #s(approx (- (exp x) 1) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)) x)) #s(approx (- (exp x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x)))
((+.f64 (cosh.f64 x) (-.f64 (sinh.f64 x) #s(literal 1 binary64))) (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (exp.f64 x))))
((-.f64 (sinh.f64 x) (-.f64 #s(literal 1 binary64) (cosh.f64 x))) (-.f64 (/.f64 (pow.f64 (cosh.f64 x) #s(literal 2 binary64)) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))) (/.f64 (pow.f64 (-.f64 (sinh.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))) (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (exp.f64 x))))
((*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))))
((*.f64 (fmod.f64 #s(approx (exp x) #s(literal 1 binary64)) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))) (*.f64 (fmod.f64 (exp.f64 x) #s(approx (sqrt (cos x)) #s(literal 1 binary64))) (exp.f64 (neg.f64 x))) #s(approx (* (fmod (exp x) (sqrt (cos x))) (exp (neg x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (*.f64 (fmod.f64 #s(approx (exp x) (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))) (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))
((*.f64 (fmod.f64 #s(approx (exp x) #s(approx (- (+ 1 x) (* (* -1/2 x) x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)) x))) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))) (*.f64 (fmod.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (sqrt (cos x)) #s(literal 1 binary64))) (exp.f64 (neg.f64 x))) (*.f64 (fmod.f64 #s(approx (exp x) (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) #s(approx (sqrt (cos x)) #s(literal 1 binary64))) (exp.f64 (neg.f64 x))) #s(approx (* (fmod (exp x) (sqrt (cos x))) (exp (neg x))) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 (fmod.f64 #s(approx (exp x) #s(approx (- (+ 1 x) (* (* -1/2 x) x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))))
((/.f64 (*.f64 (fmod.f64 #s(approx (exp x) #s(approx (- (+ 1 x) (* (* -1/2 x) x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)) x))) (sqrt.f64 (cos.f64 x))) #s(literal 1 binary64)) (exp.f64 x)) #s(approx (* (fmod (exp x) (sqrt (cos x))) (exp (neg x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fmod.f64 (exp.f64 x) #s(approx (sqrt (cos x)) #s(literal 1 binary64))))) (/.f64 (*.f64 (fmod.f64 #s(approx (exp x) (-.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) #s(approx (sqrt (cos x)) #s(literal 1 binary64))) #s(literal 1 binary64)) (exp.f64 x)) (*.f64 (fmod.f64 #s(approx (exp x) (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal -1/2 binary64) x) x))) #s(approx (sqrt (cos x)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/96 binary64) (*.f64 x x)) #s(literal 1/4 binary64)) x) x) #s(literal -1 binary64)))) (exp.f64 (neg.f64 x))) (*.f64 (fmod.f64 #s(approx (exp x) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64))) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))))
((-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)))
(#s(approx (- (exp (* a x)) 1) (*.f64 x a)) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (+.f64 #s(literal 1 binary64) (*.f64 x a))) #s(literal 1 binary64)) #s(approx (- (exp (* a x)) 1) (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) a) x)) #s(approx (- (exp (* a x)) 1) (*.f64 (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 1/6 binary64) a) x)))) a)))
(#s(approx (- (exp (* a x)) 1) (*.f64 (-.f64 x (*.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 1/6 binary64) a) x)) x) (*.f64 x a))) a)) #s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) #s(literal 1 binary64)) a) x)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ 1 (* x a)) (*.f64 (neg.f64 a) (-.f64 (neg.f64 x) (/.f64 #s(literal 1 binary64) a))))) #s(literal 1 binary64)) #s(approx (- (exp (* a x)) 1) (+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x) (*.f64 x a))) (-.f64 #s(approx (exp (* a x)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) x) #s(literal -1 binary64)) a) x))) #s(literal 1 binary64)))
(#s(approx (- (exp (* a x)) 1) (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64)) a) (*.f64 (*.f64 x x) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal -1/6 binary64) a) x)))) a) x) a)) #s(approx (- (exp (* a x)) 1) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 x a))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ 1 (* x a)) (*.f64 (neg.f64 a) #s(approx (- (neg x) (/ 1 a)) (/.f64 #s(literal -1 binary64) a))))) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (- 1 (* (* (+ (* (* -1/2 a) x) -1) a) x)) (*.f64 (*.f64 (*.f64 (*.f64 x x) a) #s(literal 1/2 binary64)) a))) #s(literal 1 binary64)))
((+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))
(#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x)) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (-.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/12 binary64))))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal -1/12 binary64) (*.f64 #s(literal -1/360 binary64) (*.f64 x x)))))) (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) #s(literal 1 binary64))))
(#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (- (* x x) (* (pow x 4) (+ -1/12 (* -1/360 (* x x))))) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/360 binary64)) (/.f64 #s(literal -1/12 binary64) (*.f64 x x))) (pow.f64 x #s(literal 6 binary64))))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) (*.f64 x #s(literal -1/12 binary64)))))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 (*.f64 x x) (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/360 binary64) (*.f64 x x)) #s(literal -1/12 binary64)) (*.f64 x x)) (*.f64 x x)))) (+.f64 #s(approx (- (exp x) 2) #s(literal -1 binary64)) #s(approx (exp (neg x)) #s(literal 1 binary64))))
(#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 x x) #s(literal -1/360 binary64)) #s(literal -1/12 binary64)) x) (neg.f64 x)) #s(literal 1 binary64)) (*.f64 x x))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 (*.f64 x x) (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x)) (*.f64 #s(literal -1/12 binary64) (*.f64 x x))) (*.f64 x x)))))
((*.f64 (exp.f64 (neg.f64 w)) (pow.f64 l (exp.f64 w))))
((*.f64 (exp.f64 (neg.f64 w)) #s(approx (pow l (exp w)) l)) #s(approx (* (exp (neg w)) (pow l (exp w))) l) (*.f64 #s(approx (exp (neg w)) (-.f64 #s(literal 1 binary64) w)) (pow.f64 l (exp.f64 w))) #s(approx (* (exp (neg w)) (pow l (exp w))) (exp.f64 (-.f64 (*.f64 (log.f64 l) (exp.f64 w)) w))) (*.f64 (exp.f64 (neg.f64 w)) #s(approx (pow l (exp w)) (+.f64 (*.f64 (*.f64 w (-.f64 (log.f64 l) (*.f64 (*.f64 #s(literal -1/2 binary64) w) (*.f64 (+.f64 (log.f64 l) #s(literal 1 binary64)) (log.f64 l))))) l) l))))
((*.f64 (exp.f64 (neg.f64 w)) #s(approx (pow l (exp w)) (+.f64 (*.f64 (*.f64 w #s(approx (- (log l) (* (* -1/2 w) (* (+ (log l) 1) (log l)))) (*.f64 (log.f64 l) (-.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) (log.f64 l)) (*.f64 #s(literal -1/2 binary64) w)))))) l) l))) (*.f64 #s(approx (exp (neg w)) (-.f64 #s(literal 1 binary64) w)) #s(approx (pow l (exp w)) l)) (*.f64 #s(approx (exp (neg w)) (-.f64 #s(literal 1 binary64) w)) (pow.f64 l #s(approx (exp w) (+.f64 #s(literal 1 binary64) w)))) #s(approx (* (exp (neg w)) (pow l (exp w))) (exp.f64 (-.f64 (*.f64 (log.f64 l) #s(approx (exp w) (+.f64 #s(literal 1 binary64) w))) w))) (*.f64 (*.f64 (exp.f64 (neg.f64 w)) (pow.f64 l (cosh.f64 w))) (pow.f64 l (sinh.f64 w))))
(#s(approx (* (exp (neg w)) (pow l (exp w))) (exp.f64 #s(approx (- (* (log l) (exp w)) w) (*.f64 (-.f64 (*.f64 (/.f64 (log.f64 l) w) (exp.f64 w)) #s(literal 1 binary64)) w)))) (*.f64 #s(approx (exp (neg w)) #s(approx (- 1 w) (neg.f64 w))) #s(approx (pow l (exp w)) l)) (*.f64 #s(approx (exp (neg w)) (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 w #s(literal -1 binary64))) (*.f64 (-.f64 w #s(literal -1 binary64)) (*.f64 w w))) (*.f64 (-.f64 w #s(literal -1 binary64)) (-.f64 w #s(literal -1 binary64))))) #s(approx (pow l (exp w)) l)) #s(approx (* (exp (neg w)) (pow l (exp w))) #s(approx (* (exp (neg w)) (pow l (exp w))) (*.f64 (+.f64 (*.f64 (-.f64 (log.f64 l) #s(literal 1 binary64)) w) #s(literal 1 binary64)) l))) (*.f64 #s(approx (exp (neg w)) (-.f64 #s(literal 1 binary64) w)) #s(approx (pow l (exp w)) (+.f64 (*.f64 (*.f64 w #s(approx (- (log l) (* (* -1/2 w) (* (+ (log l) 1) (log l)))) (*.f64 (log.f64 l) (-.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) (log.f64 l)) (*.f64 #s(literal -1/2 binary64) w)))))) l) l))))
((exp.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))
((exp.f64 #s(approx (neg (- 1 (* x x))) #s(literal -1 binary64))) (exp.f64 #s(approx (neg (- 1 (* x x))) (*.f64 x x))) (exp.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))))
((/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))
((/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1/24 binary64) (*.f64 #s(literal 1/720 binary64) (*.f64 x x))) x) x))) (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))
((/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) x) #s(approx (/ (/ (* (sin x) (sin x)) (+ (cos x) 1)) (* x x)) (-.f64 (*.f64 (*.f64 x x) #s(literal -1/24 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (*.f64 x x)) (sin.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))
((/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 #s(approx (/ x 2) (*.f64 #s(literal 1/2 binary64) x)))) x) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)) #s(approx (/ (pow (sin x) 2) (* (+ (cos x) 1) (* x x))) (-.f64 (*.f64 (+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/40320 binary64)) (-.f64 (*.f64 #s(literal 1/720 binary64) (*.f64 x x)) #s(literal 1/24 binary64))) (*.f64 x x)) #s(literal -1/2 binary64))) (/.f64 (/.f64 #s(approx (- (* 1 (* x x)) (* (* x x) (cos x))) (*.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 x x)) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) x) x))))
((log.f64 (/.f64 (sinh.f64 x) x)))
(#s(approx (log (/ (sinh x) x)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 #s(literal 1/2835 binary64) (*.f64 x x)) #s(literal 1/180 binary64))) (*.f64 #s(literal -1/6 binary64) x)) x)) #s(approx (log (/ (sinh x) x)) (*.f64 (*.f64 x x) #s(literal 1/6 binary64))) #s(approx (log (/ (sinh x) x)) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 x x)) #s(literal -1/6 binary64)) x) x)) (log.f64 #s(approx (/ (sinh x) x) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/6 binary64))))) (log.f64 #s(approx (/ (sinh x) x) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/120 binary64)) (-.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 x x)) #s(literal 1 binary64))))))
(#s(approx (log (/ (sinh x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2835 binary64)) #s(literal 1/180 binary64)) (*.f64 x x)) x) (*.f64 #s(literal -1/6 binary64) x)) x)) #s(approx (log (/ (sinh x) x)) (*.f64 (*.f64 #s(approx (- (* -1/180 (* x x)) -1/6) #s(literal 1/6 binary64)) x) x)) (log.f64 #s(approx (/ (sinh x) x) #s(approx (- (* (pow x 4) 1/120) (- (* -1/6 (* x x)) 1)) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal -1/6 binary64)) x) x)))) #s(approx (log (/ (sinh x) x)) (*.f64 (/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/32400 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/36 binary64)) x) (+.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 x x)) #s(literal -1/6 binary64))) x)) #s(approx (log (/ (sinh x) x)) (*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 x x)) #s(literal 3 binary64)) #s(literal -1/216 binary64)) x) (+.f64 (+.f64 (*.f64 #s(literal 1/32400 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/36 binary64)) (*.f64 (*.f64 x x) #s(literal 1/1080 binary64)))) x)))
(#s(approx (log (/ (sinh x) x)) (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2835 binary64) (*.f64 x x)) #s(literal 1/180 binary64)) x) x) #s(literal -1/6 binary64)) x) x)) #s(approx (log (/ (sinh x) x)) (*.f64 (-.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 x x)) #s(literal -1/6 binary64)) (*.f64 x x))) (log.f64 #s(approx (/ (sinh x) x) #s(approx (- (* (pow x 4) 1/120) (- (* -1/6 (* x x)) 1)) (*.f64 #s(approx (* (- (* 1/120 (* x x)) -1/6) x) (*.f64 #s(literal 1/6 binary64) x)) x)))) #s(approx (log (/ (sinh x) x)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/32400 binary64)) #s(literal 1/36 binary64)) (*.f64 (/.f64 x (+.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 x x)) #s(literal -1/6 binary64))) x))) #s(approx (log (/ (sinh x) x)) (*.f64 (/.f64 #s(approx (* (- (* 1/32400 (pow x 4)) 1/36) x) (*.f64 (-.f64 (/.f64 #s(literal -1/36 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1/32400 binary64)) (pow.f64 x #s(literal 5 binary64)))) (+.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 x x)) #s(literal -1/6 binary64))) x)))
((-.f64 (sin.f64 x) x))
(#s(approx (- (sin x) x) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/5040 binary64)) (+.f64 (*.f64 #s(literal -1/120 binary64) (*.f64 x x)) #s(literal 1/6 binary64))) (pow.f64 x #s(literal 3 binary64)))) #s(approx (- (sin x) x) (neg.f64 x)) (-.f64 #s(approx (sin x) x) x) #s(approx (- (sin x) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64))) #s(approx (- (sin x) x) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/120 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))))
(#s(approx (- (sin x) x) (*.f64 (*.f64 (-.f64 (-.f64 (*.f64 #s(literal -1/5040 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/6 binary64)) (*.f64 (*.f64 x x) #s(literal -1/120 binary64))) x) (*.f64 x x))) #s(approx (- (sin x) x) (*.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 x x)) x)) #s(approx (- (sin x) x) (*.f64 (*.f64 (*.f64 x x) x) #s(literal -1/6 binary64))) #s(approx (- (sin x) x) #s(approx (* (- (* (* x x) 1/120) 1/6) (pow x 3)) (*.f64 (-.f64 #s(literal 1/120 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 x x))) (pow.f64 x #s(literal 5 binary64))))) #s(approx (- (sin x) x) #s(approx (* (- (* (pow x 4) -1/5040) (+ (* -1/120 (* x x)) 1/6)) (pow x 3)) (*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 7 binary64))))))
(#s(approx (- (sin x) x) (*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/5040 binary64)) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)))) x) (-.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/5040 binary64)) #s(literal 1/6 binary64)) (*.f64 #s(literal 1/120 binary64) (*.f64 x x)))) (*.f64 x x))) #s(approx (- (sin x) x) (*.f64 (*.f64 #s(approx (- (- (* -1/5040 (pow x 4)) 1/6) (* (* x x) -1/120)) #s(literal -1/6 binary64)) x) (*.f64 x x))) #s(approx (- (sin x) x) (*.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) x) x) x)) #s(approx (- (sin x) x) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/120 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 x x) x))) #s(approx (- (sin x) x) #s(approx (* (- (* (* x x) 1/120) 1/6) (pow x 3)) (*.f64 #s(approx (- 1/120 (/ 1/6 (* x x))) (/.f64 #s(literal -1/6 binary64) (*.f64 x x))) (pow.f64 x #s(literal 5 binary64))))))
((sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))))
(#s(approx (sqrt (- (* a a) (* b b))) a) (*.f64 (sqrt.f64 (+.f64 b a)) (sqrt.f64 (-.f64 a b))))
(#s(approx (* (sqrt (+ b a)) (sqrt (- a b))) (+.f64 (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) b) a)))
((sqrt.f64 (+.f64 (*.f64 x x) (+.f64 (*.f64 y y) (*.f64 z z)))))
(#s(approx (sqrt (+ (* x x) (+ (* y y) (* z z)))) z) (sqrt.f64 #s(approx (+ (* x x) (+ (* y y) (* z z))) (+.f64 (*.f64 z z) (*.f64 y y)))))
((-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) x))))
(#s(approx (- (sqrt (+ 1 x)) (sqrt (- 1 x))) (+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (-.f64 (*.f64 #s(literal 7/128 binary64) (*.f64 x x)) #s(literal -1/8 binary64)) (*.f64 #s(literal -33/1024 binary64) (pow.f64 x #s(literal 4 binary64))))) x)) #s(approx (- (sqrt (+ 1 x)) (sqrt (- 1 x))) x) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (-.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (+.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))) #s(approx (- (sqrt (+ 1 x)) (sqrt (- 1 x))) (+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 #s(literal 7/128 binary64) (*.f64 x x)) #s(literal -1/8 binary64))) x)))
(#s(approx (- (sqrt (+ 1 x)) (sqrt (- 1 x))) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 7/128 binary64)) #s(literal -1/8 binary64)) (*.f64 x x)) x) x)) #s(approx (/ (- (- x -1) (- 1 x)) (+ (sqrt (- 1 x)) (sqrt (- x -1)))) (+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 33/1024 binary64) (*.f64 x x)) #s(literal -7/128 binary64)) x) x) #s(literal -1/8 binary64))) x)) (/.f64 #s(approx (- (- x -1) (- 1 x)) (*.f64 #s(literal 2 binary64) x)) (+.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt (- 1 x)) (sqrt (- x -1))) #s(literal 2 binary64))))
(#s(approx (- (sqrt (+ 1 x)) (sqrt (- 1 x))) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 7/128 binary64) (*.f64 x x)) #s(literal -1/8 binary64)) x) x) #s(literal -1 binary64)) x)) #s(approx (- (sqrt (+ 1 x)) (sqrt (- 1 x))) (+.f64 (*.f64 #s(approx (* (- (* (* x x) 7/128) -1/8) (* x x)) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))) x) x)))
((atan.f64 (/.f64 y x)))
((acos.f64 (-.f64 #s(literal 1 binary64) x)))
((acos.f64 #s(approx (- 1 x) (neg.f64 x))) (acos.f64 #s(approx (- 1 x) #s(literal 1 binary64))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (-.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))) (*.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) (asin.f64 (-.f64 #s(literal 1 binary64) x)))) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (-.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (+.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))) (+.f64 (*.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) (asin.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (-.f64 #s(literal 1 binary64) x)))))))
((/.f64 (-.f64 (+.f64 (cosh.f64 (*.f64 (log.f64 (/.f64 (PI.f64) #s(literal 2 binary64))) #s(literal 3 binary64))) (sinh.f64 (*.f64 (log.f64 (/.f64 (PI.f64) #s(literal 2 binary64))) #s(literal 3 binary64)))) (pow.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (+.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))) (+.f64 (*.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) (asin.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (-.f64 #s(literal 1 binary64) x)))))) #s(approx (- (/ (PI) 2) (asin (- 1 x))) (-.f64 (*.f64 #s(literal 1/2 binary64) (PI.f64)) (asin.f64 (-.f64 #s(literal 1 binary64) x)))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (acos.f64 (-.f64 #s(literal 1 binary64) x)))) #s(approx (/ (- (* (/ (PI) 2) (/ (PI) 2)) (* (asin (- 1 x)) (asin (- 1 x)))) (+ (/ (PI) 2) (asin (- 1 x)))) (/.f64 (-.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) #s(literal 1/4 binary64)) (pow.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (PI.f64))))) (/.f64 (-.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))) (*.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64)))) (asin.f64 (-.f64 #s(literal 1 binary64) x)))) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (-.f64 #s(literal 1 binary64) x)))))
(#s(approx (/ (- (* (/ (PI) 2) (/ (PI) 2)) (* (asin (- 1 x)) (asin (- 1 x)))) (+ (/ (PI) 2) (asin (- 1 x)))) (/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (PI.f64) (PI.f64))) #s(literal 2 binary64)) (pow.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 4 binary64))) (+.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (PI.f64) (PI.f64))) (pow.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (-.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (PI.f64))))) (acos.f64 #s(approx (- 1 x) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))) #s(approx (/ (- (* (/ (PI) 2) (/ (PI) 2)) (* (asin (/ (- 1 (* x x)) (+ x 1))) (asin (- 1 x)))) (+ (/ (PI) 2) (asin (- 1 x)))) (/.f64 (-.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) #s(literal 1/4 binary64)) (*.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal -1 binary64)))) (asin.f64 (-.f64 #s(literal 1 binary64) x)))) (-.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (PI.f64))))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (cbrt.f64 (PI.f64)) #s(literal 2 binary64)) (/.f64 (cbrt.f64 (PI.f64)) #s(literal 2 binary64))) (acos.f64 (-.f64 #s(literal 1 binary64) x)))) (/.f64 (-.f64 (+.f64 (cosh.f64 (*.f64 (log.f64 (/.f64 (PI.f64) #s(literal 2 binary64))) #s(literal 3 binary64))) (sinh.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 (PI.f64)) #s(literal 2 binary64)) (/.f64 (cbrt.f64 (PI.f64)) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (pow.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (+.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))) (+.f64 (*.f64 (asin.f64 (-.f64 #s(literal 1 binary64) x)) (asin.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (-.f64 #s(literal 1 binary64) x)))))))
((*.f64 (-.f64 (/.f64 (*.f64 m (-.f64 #s(literal 1 binary64) m)) v) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) m)))
((*.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) m) v) m) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) m)) #s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) #s(literal -1 binary64)) #s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) (-.f64 (+.f64 (/.f64 m v) m) #s(literal 1 binary64))) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (/.f64 (*.f64 (neg.f64 m) m) v)) (-.f64 #s(literal 1 binary64) m)) #s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) m) v) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) m) m) v))))
(#s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) (/.f64 (*.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) m) m) v) (-.f64 #s(literal 1 binary64) m)) v)) #s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) (-.f64 #s(approx (+ (/ m v) m) m) #s(literal 1 binary64))) #s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) #s(approx (- (+ (/ m v) m) 1) (+.f64 (/.f64 m v) m))) (*.f64 (-.f64 (/.f64 #s(approx (* m (- 1 m)) m) v) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) m)) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (*.f64 (/.f64 m v) (neg.f64 m))) (-.f64 #s(literal 1 binary64) m)))
(#s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) (/.f64 #s(approx (* (- (* (- 1 m) m) v) (- 1 m)) (-.f64 (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 m #s(literal 2 binary64)) m) v) #s(literal -1 binary64)) m) v)) v)) #s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) #s(approx (- (+ (/ m v) m) 1) (/.f64 m v))) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (*.f64 (/.f64 m v) (neg.f64 m))) #s(approx (- 1 m) (neg.f64 m))) #s(approx (* (- (/ (* m (- 1 m)) v) 1) (- 1 m)) (/.f64 (*.f64 #s(approx (- (* (- 1 m) m) v) (*.f64 (neg.f64 m) m)) (-.f64 #s(literal 1 binary64) m)) v)) (*.f64 #s(approx (- (* (/ (- 1 m) v) m) 1) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) m) v) m)) (-.f64 #s(literal 1 binary64) m)))
((/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (pow.f64 (*.f64 x-scale y-scale) #s(literal 2 binary64)))) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (-.f64 (+.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale)) (sqrt.f64 (+.f64 (pow.f64 (-.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale)) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale) #s(literal 2 binary64)))))))) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (pow.f64 (*.f64 x-scale y-scale) #s(literal 2 binary64)))))
(#s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) a) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x-scale) (sqrt.f64 #s(literal 8 binary64))))) (/.f64 #s(approx (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (*.f64 (neg.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x-scale)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 #s(literal 8 binary64))) (*.f64 b b)) (*.f64 y-scale y-scale)))) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (pow.f64 (*.f64 x-scale y-scale) #s(literal 2 binary64)))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale) x-scale) a)) (sqrt.f64 (-.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 y-scale y-scale))) (sqrt.f64 (+.f64 (pow.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 y-scale y-scale))) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64)))) #s(literal 4 binary64)))))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale) x-scale)) (sqrt.f64 (-.f64 (+.f64 (*.f64 (*.f64 b b) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 y-scale y-scale))) (*.f64 (*.f64 b b) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)))) (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (*.f64 b b) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 x-scale x-scale))) (*.f64 (*.f64 b b) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 y-scale y-scale)))) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64))))) #s(literal 4 binary64)))))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale) x-scale)) (sqrt.f64 (-.f64 (/.f64 (+.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 b b))) (*.f64 y-scale y-scale)) (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 2 binary64)) (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64))) (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64))) (*.f64 y-scale y-scale)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 b b))) (/.f64 (+.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 b b))) (*.f64 y-scale y-scale))))) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 b b)))) #s(literal 1/2 binary64)))))))
(#s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 (*.f64 x-scale #s(literal 4 binary64)) a) #s(literal 1/4 binary64))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) (sqrt.f64 #s(literal 8 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) x-scale))) (/.f64 #s(approx (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/.f64 (/.f64 (*.f64 (/.f64 (pow.f64 (neg.f64 a) #s(literal 3 binary64)) x-scale) (*.f64 (*.f64 b b) #s(literal 4 binary64))) y-scale) y-scale)) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (pow.f64 (*.f64 x-scale y-scale) #s(literal 2 binary64)))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) #s(approx (* (* 1/4 (* (* (sqrt 8) y-scale) x-scale)) (sqrt (- (+ (* (* b b) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale))) (* (* b b) (/ (pow (cos (* -1/180 (* (PI) angle))) 2) (* x-scale x-scale)))) (sqrt (+ (pow (- (* (* b b) (/ (pow (cos (* -1/180 (* (PI) angle))) 2) (* x-scale x-scale))) (* (* b b) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale)))) 2) (* (* (pow b 4) (* (pow (cos (* -1/180 (* (PI) angle))) 2) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (pow (* y-scale x-scale) 2)))) 4)))))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 y-scale (sqrt.f64 #s(literal 8 binary64)))) (sqrt.f64 (-.f64 (*.f64 (*.f64 b b) (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 y-scale y-scale) (*.f64 b b)) (/.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))) (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))) (*.f64 y-scale y-scale)) #s(literal 2 binary64)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)))))))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale)) (*.f64 x-scale (sqrt.f64 (-.f64 (*.f64 (*.f64 b b) (+.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)) (/.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 y-scale y-scale)))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 b b) (-.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)) (/.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (*.f64 y-scale y-scale)))) #s(literal 2 binary64)) (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle)))) #s(literal 2 binary64)) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64)))))))))))))
(#s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) #s(approx (* (* 1/4 (* (* (sqrt 8) y-scale) x-scale)) (sqrt (- (+ (* (* b b) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale))) (* (* b b) (/ (pow (cos (* -1/180 (* (PI) angle))) 2) (* x-scale x-scale)))) (sqrt (+ (pow (- (* (* b b) (/ (pow (cos (* -1/180 (* (PI) angle))) 2) (* x-scale x-scale))) (* (* b b) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale)))) 2) (* (* (pow b 4) (* (pow (cos (* -1/180 (* (PI) angle))) 2) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (pow (* y-scale x-scale) 2)))) 4)))))) #s(approx (* (* 1/4 (* y-scale (sqrt 8))) (sqrt (- (* (* b b) (pow (cos (* -1/180 (* angle (PI)))) 2)) (* 1/2 (* (/ (* y-scale y-scale) (* b b)) (/ (* (/ (* (* (pow b 4) (pow (cos (* -1/180 (* angle (PI)))) 2)) (pow (sin (* 1/180 (* angle (PI)))) 2)) (* y-scale y-scale)) 2) (pow (sin (* 1/180 (* angle (PI)))) 2))))))) #s(literal 0 binary64)))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) #s(approx (* (* (* x-scale 4) a) 1/4) (*.f64 a x-scale))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (-.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 angle angle) x-scale) (*.f64 (*.f64 (*.f64 y-scale y-scale) (sqrt.f64 #s(literal 8 binary64))) (-.f64 (+.f64 (+.f64 (/.f64 (+.f64 (*.f64 #s(literal 1/32400 binary64) (*.f64 (*.f64 a a) (*.f64 (PI.f64) (PI.f64)))) (*.f64 #s(literal -1/32400 binary64) (*.f64 (*.f64 b b) (*.f64 (PI.f64) (PI.f64))))) (*.f64 x-scale x-scale)) (*.f64 #s(literal 1/32400 binary64) (/.f64 (*.f64 (*.f64 b b) (*.f64 (PI.f64) (PI.f64))) (*.f64 y-scale y-scale)))) (*.f64 #s(literal -1/32400 binary64) (/.f64 (*.f64 (*.f64 a a) (*.f64 (PI.f64) (PI.f64))) (*.f64 y-scale y-scale)))) (*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/8100 binary64) (*.f64 (*.f64 (PI.f64) (PI.f64)) (/.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 a a)) #s(literal 2 binary64)) (*.f64 (*.f64 x-scale x-scale) (*.f64 y-scale y-scale))))) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (/.f64 (+.f64 (*.f64 #s(literal 1/32400 binary64) (*.f64 (*.f64 a a) (*.f64 (PI.f64) (PI.f64)))) (*.f64 #s(literal -1/32400 binary64) (*.f64 (*.f64 b b) (*.f64 (PI.f64) (PI.f64))))) (*.f64 x-scale x-scale)) (/.f64 (+.f64 (*.f64 #s(literal 1/32400 binary64) (*.f64 (*.f64 b b) (*.f64 (PI.f64) (PI.f64)))) (*.f64 #s(literal -1/32400 binary64) (*.f64 (*.f64 a a) (*.f64 (PI.f64) (PI.f64))))) (*.f64 y-scale y-scale))) (-.f64 (/.f64 (*.f64 b b) (*.f64 x-scale x-scale)) (/.f64 (*.f64 a a) (*.f64 y-scale y-scale)))))) (-.f64 (/.f64 (*.f64 b b) (*.f64 x-scale x-scale)) (/.f64 (*.f64 a a) (*.f64 y-scale y-scale)))))))) (*.f64 a (sqrt.f64 #s(literal 2 binary64))))) (*.f64 #s(literal -1/4 binary64) (*.f64 (*.f64 a x-scale) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 #s(literal 8 binary64))))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) #s(approx (* (* 1/4 (* (* (sqrt 8) y-scale) x-scale)) (sqrt (- (+ (* (* b b) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale))) (* (* b b) (/ (pow (cos (* -1/180 (* (PI) angle))) 2) (* x-scale x-scale)))) (sqrt (+ (pow (- (* (* b b) (/ (pow (cos (* -1/180 (* (PI) angle))) 2) (* x-scale x-scale))) (* (* b b) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale)))) 2) (* (* (pow b 4) (* (pow (cos (* -1/180 (* (PI) angle))) 2) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (pow (* y-scale x-scale) 2)))) 4)))))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x-scale (sqrt.f64 #s(literal 8 binary64)))) (sqrt.f64 (-.f64 (*.f64 (*.f64 b b) (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 x-scale x-scale) (*.f64 b b)) (/.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))) (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))) (*.f64 x-scale x-scale)) #s(literal 2 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)))))))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (- (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 b (*.f64 x-scale (*.f64 y-scale (sqrt.f64 #s(literal 8 binary64)))))) (sqrt.f64 (-.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)) (*.f64 y-scale y-scale)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)) (*.f64 x-scale x-scale))) (sqrt.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)) (/.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)) (*.f64 y-scale y-scale))) #s(literal 2 binary64)) (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)) (*.f64 (*.f64 x-scale x-scale) (*.f64 y-scale y-scale))))))))))))
((*.f64 #s(literal 2 binary64) (atan.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x))))))
((*.f64 #s(literal 2 binary64) (atan.f64 (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))) (*.f64 #s(literal 2 binary64) (atan.f64 #s(approx (sqrt (/ (- 1 x) (+ 1 x))) #s(literal 1 binary64)))) (*.f64 #s(literal 2 binary64) (atan.f64 #s(approx (sqrt (/ (- 1 x) (+ 1 x))) (-.f64 #s(literal 1 binary64) x)))) (*.f64 #s(literal 2 binary64) (atan.f64 #s(approx (sqrt (/ (- 1 x) (+ 1 x))) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))))) (*.f64 #s(literal 2 binary64) (atan.f64 #s(approx (sqrt (/ (- 1 x) (+ 1 x))) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))))))
((*.f64 #s(literal 2 binary64) (atan.f64 (/.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (*.f64 x (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)))) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))))
((*.f64 (atan.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))))) #s(literal 2 binary64)))
((neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b)))
((*.f64 (*.f64 (neg.f64 b) a) (*.f64 b a)) (*.f64 (*.f64 b a) (*.f64 b a)) (*.f64 (*.f64 b (*.f64 a a)) b) (*.f64 (*.f64 (neg.f64 b) b) (*.f64 a a)) (*.f64 (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) b))))
((*.f64 (*.f64 (neg.f64 b) a) (*.f64 (sqrt.f64 (*.f64 a b)) (sqrt.f64 (*.f64 a b)))) #s(approx (* (* b (* a a)) b) (*.f64 (*.f64 (*.f64 b b) a) a)) (*.f64 (*.f64 b b) (*.f64 a a)) (*.f64 (*.f64 (*.f64 a b) a) b) (*.f64 (*.f64 (*.f64 a (neg.f64 b)) a) b))
((*.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 (sqrt.f64 (*.f64 b a)) (sqrt.f64 a)) (sqrt.f64 b))) (*.f64 (*.f64 (*.f64 (neg.f64 b) a) b) a) (*.f64 (*.f64 (*.f64 (neg.f64 b) b) a) a) (*.f64 (*.f64 (*.f64 (neg.f64 b) a) (sqrt.f64 (*.f64 b a))) (sqrt.f64 (*.f64 b a))) (*.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 (sqrt.f64 b) (sqrt.f64 a)) (sqrt.f64 (*.f64 a b)))))
((+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64))))
((+.f64 (pow.f64 (*.f64 a (cos.f64 (/.f64 (*.f64 angle (PI.f64)) #s(literal 180 binary64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64))) #s(approx (+ (pow (* a (cos (* (PI) (/ angle 180)))) 2) (pow (* b (sin (* (PI) (/ angle 180)))) 2)) (*.f64 a a)) (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 #s(approx (* (PI) (/ angle 180)) (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)))) #s(literal 2 binary64))) #s(approx (+ (pow (* a (cos (* (PI) (/ angle 180)))) 2) (pow (* b (sin (* (PI) (/ angle 180)))) 2)) (*.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 (/.f64 b a) (/.f64 b a))) (pow.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64))) (*.f64 a a))) (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (pow.f64 (cbrt.f64 (PI.f64)) #s(literal 2 binary64)) (*.f64 (cbrt.f64 (PI.f64)) (/.f64 angle #s(literal 180 binary64)))))) #s(literal 2 binary64))))
((+.f64 (pow.f64 (*.f64 (sin.f64 #s(approx (* (PI) (/ angle 180)) (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (/.f64 (*.f64 (PI.f64) angle) #s(literal -180 binary64))) a) #s(literal 2 binary64))) #s(approx (+ (pow (* a (cos (* (PI) (/ angle 180)))) 2) (pow (* b (sin (* (PI) (/ angle 180)))) 2)) (+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/32400 binary64) (*.f64 (PI.f64) (PI.f64))) (-.f64 (*.f64 a a) (*.f64 b b))) (*.f64 angle angle)) (*.f64 a a))) (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b #s(approx (sin (* (PI) (/ angle 180))) (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 a (sin.f64 (+.f64 (/.f64 (*.f64 (PI.f64) angle) #s(literal -180 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64))) #s(approx (+ (pow (* a (cos (* (PI) (/ angle 180)))) 2) (pow (* b (sin (* (PI) (/ angle 180)))) 2)) (*.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 (/.f64 b a) (/.f64 b a))) (pow.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64))) (exp.f64 (*.f64 (log.f64 a) #s(literal 2 binary64))))))
((+.f64 (pow.f64 (*.f64 a (sin.f64 (+.f64 (/.f64 (*.f64 (*.f64 angle (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) #s(literal -180 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) #s(literal 2 binary64))) #s(approx (+ (pow (* a (cos (* (PI) (/ angle 180)))) 2) (pow (* b (sin (* (PI) (/ angle 180)))) 2)) #s(approx (+ (* (* (* -1/32400 (* (PI) (PI))) (- (* a a) (* b b))) (* angle angle)) (* a a)) (*.f64 (*.f64 (*.f64 angle angle) #s(literal 1/32400 binary64)) (*.f64 (*.f64 b (PI.f64)) (*.f64 b (PI.f64)))))) #s(approx (+ (pow (* a (cos (* (PI) (/ angle 180)))) 2) (pow (* b (sin (* (PI) (/ angle 180)))) 2)) (*.f64 #s(approx (+ (* (pow (sin (* (* 1/180 (PI)) angle)) 2) (* (/ b a) (/ b a))) (pow (cos (* (* 1/180 (PI)) angle)) 2)) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) #s(literal 2 binary64)) (/.f64 (*.f64 b b) (*.f64 a a)))) (*.f64 a a))) #s(approx (+ (pow (* a (cos (* (PI) (/ angle 180)))) 2) (pow (* b (sin (* (PI) (/ angle 180)))) 2)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 b a) (sin.f64 (*.f64 (*.f64 (PI.f64) #s(literal 1/180 binary64)) angle))) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) a) #s(literal 2 binary64)))) (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (pow.f64 (cbrt.f64 (PI.f64)) #s(literal 2 binary64))) (cbrt.f64 (PI.f64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b #s(approx (sin (* (PI) (/ angle 180))) (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) #s(literal 2 binary64))))
((*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))))
(#s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) (*.f64 (+.f64 b a) (-.f64 b a))) (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) #s(literal -2 binary64))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 angle (*.f64 #s(literal 1/90 binary64) (PI.f64))) (*.f64 (+.f64 b a) (-.f64 b a)))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) (*.f64 #s(literal -2 binary64) (*.f64 (+.f64 a b) (-.f64 a b))))) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (pow b 2) (pow a 2)) (*.f64 (-.f64 (*.f64 (/.f64 b a) (/.f64 b a)) #s(literal 1 binary64)) (*.f64 a a)))) (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64))))) (cos.f64 (/.f64 (*.f64 angle (PI.f64)) #s(literal -180 binary64)))))
(#s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (*.f64 (-.f64 b a) (*.f64 (+.f64 a b) (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal -1/180 binary64))))) (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) #s(literal -2 binary64))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) #s(approx (* (* angle (* 1/90 (PI))) (* (+ b a) (- b a))) (*.f64 (*.f64 #s(literal -1/90 binary64) (*.f64 a a)) (*.f64 angle (PI.f64))))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 angle (*.f64 #s(literal 1/90 binary64) (PI.f64))) #s(approx (- (pow b 2) (pow a 2)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (*.f64 a a) b) #s(literal 0 binary64)) b)) (*.f64 b b))))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) (*.f64 (+.f64 b a) (-.f64 b a))) (sin.f64 (+.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal -1/180 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))))) #s(literal -2 binary64))))
(#s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (*.f64 (-.f64 b a) (*.f64 (+.f64 a b) (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal -1/180 binary64))))) #s(approx (cos (* (* 1/180 (PI)) angle)) #s(literal 1 binary64))) #s(literal -2 binary64))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) #s(approx (* (* angle (* 1/90 (PI))) (* (+ b a) (- b a))) (*.f64 #s(literal -1/90 binary64) (*.f64 (*.f64 a a) (*.f64 (PI.f64) angle))))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 angle (*.f64 #s(literal 1/90 binary64) (PI.f64))) #s(approx (- (pow b 2) (pow a 2)) (*.f64 (-.f64 (/.f64 (+.f64 #s(literal 0 binary64) (/.f64 (*.f64 (neg.f64 b) b) a)) (neg.f64 a)) #s(literal 1 binary64)) (*.f64 a a))))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (*.f64 (-.f64 b a) #s(approx (* (+ a b) (sin (* (* (PI) angle) -1/180))) (*.f64 (sin.f64 (*.f64 (*.f64 #s(literal -1/180 binary64) (PI.f64)) angle)) a))) (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle))) #s(literal -2 binary64))) #s(approx (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (PI) (/ angle 180)))) (cos (* (PI) (/ angle 180)))) (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) (*.f64 (+.f64 b a) (-.f64 b a))) (sin.f64 (+.f64 (*.f64 (PI.f64) (*.f64 angle #s(literal -1/180 binary64))) (/.f64 (PI.f64) #s(literal 2 binary64))))) #s(literal -2 binary64))))
((+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))))
((+.f64 (pow.f64 (*.f64 a (sin.f64 #s(approx (* (/ angle 180) (PI)) (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) #s(approx (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) (*.f64 b b)) (+.f64 (pow.f64 #s(approx (* a (sin (* (/ angle 180) (PI)))) (*.f64 (*.f64 (*.f64 (PI.f64) a) #s(literal 1/180 binary64)) angle)) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (+.f64 (/.f64 (*.f64 (PI.f64) angle) #s(literal -180 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))))) #s(literal 2 binary64))) (+.f64 (exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a)) #s(literal 2 binary64))) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))))
((+.f64 (pow.f64 (*.f64 a (sin.f64 #s(approx (* (/ angle 180) (PI)) (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))))) #s(literal 2 binary64))) #s(approx (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) (+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/32400 binary64) (*.f64 (PI.f64) (PI.f64))) (-.f64 (*.f64 b b) (*.f64 a a))) (*.f64 angle angle)) (*.f64 b b))) (+.f64 #s(approx (pow (* a (sin (* (/ angle 180) (PI)))) 2) (*.f64 (*.f64 (*.f64 angle angle) #s(literal 1/32400 binary64)) (*.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) a) a))) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 a (sin.f64 (/.f64 (*.f64 (PI.f64) angle) #s(literal 180 binary64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) (+.f64 (exp.f64 (log.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64))) a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))))
((+.f64 (pow.f64 (*.f64 a (sin.f64 #s(approx (* (/ angle 180) (PI)) (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))))) #s(literal 2 binary64))) #s(approx (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) #s(approx (+ (* (* (* -1/32400 (* (PI) (PI))) (- (* b b) (* a a))) (* angle angle)) (* b b)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) a) a) angle) (*.f64 #s(literal 1/32400 binary64) angle)))) #s(approx (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 a a))) (+.f64 (pow.f64 (*.f64 a #s(approx (sin (/ (* (PI) angle) 180)) (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))))
((*.f64 (-.f64 (/.f64 (*.f64 m (-.f64 #s(literal 1 binary64) m)) v) #s(literal 1 binary64)) m))
((*.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) m) v) m) #s(literal 1 binary64)) m) #s(approx (* (- (/ (* m (- 1 m)) v) 1) m) (neg.f64 m)) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (*.f64 (/.f64 (neg.f64 m) v) m)) m) (*.f64 (-.f64 (/.f64 (*.f64 m #s(approx (- 1 m) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) m) #s(literal 1 binary64)) m))) v) #s(literal 1 binary64)) m) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) m) (/.f64 #s(literal -1 binary64) v)) m) (/.f64 #s(literal 1 binary64) v)) (*.f64 m m))) m))
((*.f64 (-.f64 #s(approx (/ (* m (- 1 m)) v) (*.f64 (*.f64 m m) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) v) m) (/.f64 #s(literal 1 binary64) v)))) #s(literal 1 binary64)) m) (*.f64 (-.f64 (/.f64 #s(approx (* m (- 1 m)) m) v) #s(literal 1 binary64)) m) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) m) m) v)) m) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (*.f64 #s(approx (- (/ (- (/ -1 m) (/ -1 v)) m) (/ 1 v)) (/.f64 (/.f64 (-.f64 (/.f64 m v) #s(literal 1 binary64)) m) m)) (*.f64 m m))) m) #s(approx (* (- (/ (* m (- 1 m)) v) 1) m) (/.f64 (pow.f64 (neg.f64 m) #s(literal 3 binary64)) v)))
((*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) m) v) m)) m) #s(approx (* (- (/ (* m (- 1 m)) v) 1) m) (*.f64 (*.f64 m m) (/.f64 (neg.f64 m) v))) (*.f64 #s(approx (- (/ (* m (- 1 m)) v) 1) (*.f64 #s(approx (- (/ (- (/ -1 m) (/ -1 v)) m) (/ 1 v)) (/.f64 (-.f64 (/.f64 m v) #s(literal 1 binary64)) (*.f64 m m))) (*.f64 m m))) m) #s(approx (* (- (/ (* m (- 1 m)) v) 1) m) (*.f64 (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) v) m) (/.f64 #s(literal 1 binary64) v)) (pow.f64 m #s(literal 3 binary64)))) (/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) m) m) v) #s(literal 2 binary64)) #s(literal 1 binary64)) m) (-.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) m) m) v) #s(literal -1 binary64))))
((/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (pow.f64 (*.f64 x-scale y-scale) #s(literal 2 binary64)))) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (+.f64 (+.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale)) (sqrt.f64 (+.f64 (pow.f64 (-.f64 (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale)) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale) #s(literal 2 binary64)))))))) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (*.f64 b a) (*.f64 b (neg.f64 a)))) (pow.f64 (*.f64 x-scale y-scale) #s(literal 2 binary64)))))
(#s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale)) (sqrt.f64 (*.f64 #s(literal 2 binary64) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 b b))))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) b) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) y-scale) (sqrt.f64 #s(literal 8 binary64))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale) x-scale)) (sqrt.f64 (*.f64 #s(literal 2 binary64) (/.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 b b))) (*.f64 x-scale x-scale)))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale) x-scale) a)) (sqrt.f64 (+.f64 (sqrt.f64 (-.f64 (pow.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 x-scale x-scale)) (/.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 y-scale y-scale))) #s(literal 2 binary64)) (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64))))))) (+.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 y-scale y-scale)) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 x-scale x-scale))))))) (*.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (sin.f64 (*.f64 #s(literal 2 binary64) (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))))) (*.f64 y-scale x-scale)) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 x-scale x-scale)) (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 y-scale y-scale))) #s(literal 2 binary64)))) (+.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 y-scale y-scale)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) a) #s(literal 2 binary64))) (*.f64 x-scale x-scale)))) (*.f64 (*.f64 #s(literal 8 binary64) (/.f64 (neg.f64 (pow.f64 (*.f64 a b) #s(literal 2 binary64))) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (*.f64 a b) #s(literal 2 binary64)))))) (*.f64 #s(literal -4 binary64) (neg.f64 (pow.f64 (*.f64 a b) #s(literal 2 binary64))))) (*.f64 y-scale x-scale)) (*.f64 y-scale x-scale)))
(#s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) angle))) b) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) a) #s(literal 2 binary64))) #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 8 binary64)) #s(literal 1/4 binary64))) y-scale)) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) #s(approx (* (* 1/4 (* (* (* (sqrt 8) y-scale) x-scale) a)) (sqrt (+ (sqrt (- (pow (- (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* x-scale x-scale)) (/ (pow (cos (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale))) 2) (* -4 (* (pow (cos (* (* (PI) angle) 1/180)) 2) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (pow (* y-scale x-scale) 2)))))) (+ (/ (pow (cos (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale)) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* x-scale x-scale)))))) (*.f64 (*.f64 #s(literal 1/4 binary64) a) (*.f64 (*.f64 x-scale (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 8 binary64)))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) #s(approx (* (* 1/4 (* (* (* (sqrt 8) y-scale) x-scale) a)) (sqrt (+ (sqrt (- (pow (- (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* x-scale x-scale)) (/ (pow (cos (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale))) 2) (* -4 (* (pow (cos (* (* (PI) angle) 1/180)) 2) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (pow (* y-scale x-scale) 2)))))) (+ (/ (pow (cos (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale)) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* x-scale x-scale)))))) (*.f64 (*.f64 #s(literal 1/4 binary64) a) (*.f64 (*.f64 x-scale (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 #s(literal 8 binary64))))))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale) x-scale)) (sqrt.f64 (*.f64 #s(literal 2 binary64) (/.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 #s(approx (cos (* (* (PI) angle) 1/180)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 b b))) (*.f64 x-scale x-scale)))))) (*.f64 (*.f64 #s(approx (/ (sqrt (* (+ (sqrt (+ (pow (/ (* (* (+ b a) (- b a)) (sin (* 2 (* (PI) (/ angle 180))))) (* y-scale x-scale)) 2) (pow (- (/ (+ (pow (* (cos (* (PI) (/ angle 180))) b) 2) (pow (* (sin (* (PI) (/ angle 180))) a) 2)) (* x-scale x-scale)) (/ (+ (pow (* (sin (* (PI) (/ angle 180))) b) 2) (pow (* (cos (* (PI) (/ angle 180))) a) 2)) (* y-scale y-scale))) 2))) (+ (/ (+ (pow (* (sin (* (PI) (/ angle 180))) b) 2) (pow (* (cos (* (PI) (/ angle 180))) a) 2)) (* y-scale y-scale)) (/ (+ (pow (* (cos (* (PI) (/ angle 180))) b) 2) (pow (* (sin (* (PI) (/ angle 180))) a) 2)) (* x-scale x-scale)))) (* (* 8 (/ (neg (pow (* a b) 2)) (pow (* y-scale x-scale) 2))) (neg (pow (* a b) 2))))) (* -4 (neg (pow (* a b) 2)))) (*.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 (sqrt.f64 #s(literal 8 binary64)) (*.f64 x-scale y-scale))) (sqrt.f64 (*.f64 #s(literal 2 binary64) (/.f64 (+.f64 (*.f64 (*.f64 a a) (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64))) (*.f64 (*.f64 b b) (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) #s(literal 2 binary64)))) (*.f64 y-scale y-scale)))))) (*.f64 y-scale x-scale)) (*.f64 y-scale x-scale)))
(#s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 (PI.f64) angle))) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal -1/180 binary64))) b) #s(literal 2 binary64)))) #s(literal 4 binary64)) #s(literal 1/4 binary64)) y-scale)) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) #s(approx (* (* 1/4 (* (* (* (sqrt 8) y-scale) x-scale) a)) (sqrt (+ (sqrt (- (pow (- (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* x-scale x-scale)) (/ (pow (cos (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale))) 2) (* -4 (* (pow (cos (* (* (PI) angle) 1/180)) 2) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (pow (* y-scale x-scale) 2)))))) (+ (/ (pow (cos (* (* (PI) angle) 1/180)) 2) (* y-scale y-scale)) (/ (pow (sin (* (* (PI) angle) 1/180)) 2) (* x-scale x-scale)))))) (*.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) x-scale) #s(literal 4 binary64)))) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 #s(approx (* (sqrt (* (+ (pow (* (cos (* -1/180 (* (PI) angle))) b) 2) (pow (* (sin (* 1/180 (* (PI) angle))) a) 2)) 2)) (* (sqrt 8) 1/4)) (-.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 angle angle) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 8 binary64)) (-.f64 (*.f64 #s(literal -1/32400 binary64) (*.f64 (*.f64 b b) (*.f64 (PI.f64) (PI.f64)))) (*.f64 #s(literal -1/32400 binary64) (*.f64 (*.f64 a a) (*.f64 (PI.f64) (PI.f64)))))))) b)) (*.f64 #s(literal -1/4 binary64) (*.f64 b (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 #s(literal 8 binary64))))))) y-scale)) (*.f64 (*.f64 #s(approx (/ (sqrt (* (+ (sqrt (+ (pow (/ (* (* (+ b a) (- b a)) (sin (* 2 (* (PI) (/ angle 180))))) (* y-scale x-scale)) 2) (pow (- (/ (+ (pow (* (cos (* (PI) (/ angle 180))) b) 2) (pow (* (sin (* (PI) (/ angle 180))) a) 2)) (* x-scale x-scale)) (/ (+ (pow (* (sin (* (PI) (/ angle 180))) b) 2) (pow (* (cos (* (PI) (/ angle 180))) a) 2)) (* y-scale y-scale))) 2))) (+ (/ (+ (pow (* (sin (* (PI) (/ angle 180))) b) 2) (pow (* (cos (* (PI) (/ angle 180))) a) 2)) (* y-scale y-scale)) (/ (+ (pow (* (cos (* (PI) (/ angle 180))) b) 2) (pow (* (sin (* (PI) (/ angle 180))) a) 2)) (* x-scale x-scale)))) (* (* 8 (/ (neg (pow (* a b) 2)) (pow (* y-scale x-scale) 2))) (neg (pow (* a b) 2))))) (* -4 (neg (pow (* a b) 2)))) #s(approx (* (* 1/4 (/ (sqrt 8) (* x-scale y-scale))) (sqrt (* 2 (/ (+ (* (* a a) (pow (cos (* 1/180 (* angle (PI)))) 2)) (* (* b b) (pow (sin (* 1/180 (* angle (PI)))) 2))) (* y-scale y-scale))))) (*.f64 #s(literal 1/4 binary64) (*.f64 (/.f64 b x-scale) (/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 angle (PI.f64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 #s(literal 8 binary64)))) (*.f64 y-scale y-scale)))))) (*.f64 y-scale x-scale)) (*.f64 y-scale x-scale)) #s(approx (/ (neg (sqrt (* (* (* 2 (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (* (* b a) (* b (neg a)))) (+ (+ (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) (sqrt (+ (pow (- (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale)) 2) (pow (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) 2))))))) (/ (* 4 (* (* b a) (* b (neg a)))) (pow (* x-scale y-scale) 2))) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 8 binary64)) y-scale) x-scale)) (sqrt.f64 (*.f64 #s(literal 2 binary64) (/.f64 (+.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) angle) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 b b))) (*.f64 y-scale y-scale)))))))
((-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)))
(#s(approx (- (* x.re y.re) (* x.im y.im)) (*.f64 y.re x.re)) #s(approx (- (* x.re y.re) (* x.im y.im)) (*.f64 (neg.f64 x.im) y.im)) (-.f64 (*.f64 x.re y.re) (*.f64 (sqrt.f64 (*.f64 (*.f64 x.im x.im) y.im)) (sqrt.f64 y.im))) (-.f64 (*.f64 (sqrt.f64 (*.f64 y.re x.re)) (sqrt.f64 (*.f64 y.re x.re))) (*.f64 x.im y.im)))
(#s(approx (- (* (sqrt (* y.re x.re)) (sqrt (* y.re x.re))) (* x.im y.im)) (*.f64 (-.f64 y.re (/.f64 (*.f64 y.im x.im) x.re)) x.re)) #s(approx (- (* (sqrt (* y.re x.re)) (sqrt (* y.re x.re))) (* x.im y.im)) (*.f64 (-.f64 (/.f64 (*.f64 y.re x.re) x.im) y.im) x.im)))
((+.f64 (*.f64 x.re y.im) (*.f64 x.im y.re)))
(#s(approx (+ (* x.re y.im) (* x.im y.re)) (*.f64 y.im x.re)) #s(approx (+ (* x.re y.im) (* x.im y.re)) (*.f64 y.re x.im)))
((/.f64 (+.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (+.f64 (*.f64 y.re y.re) (*.f64 y.im y.im))))
(#s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (+.f64 (/.f64 (*.f64 y.im x.im) y.re) x.re) y.re)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 x.im y.im)) (/.f64 (+.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) #s(approx (+ (* y.re y.re) (* y.im y.im)) (*.f64 y.im y.im))) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (-.f64 x.im (/.f64 (-.f64 (*.f64 (*.f64 y.re (/.f64 y.re y.im)) x.im) (*.f64 y.re x.re)) y.im)) y.im)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (-.f64 (-.f64 x.im (*.f64 (pow.f64 (/.f64 y.re y.im) #s(literal 3 binary64)) x.re)) (/.f64 (-.f64 (*.f64 (*.f64 y.re (/.f64 y.re y.im)) x.im) (*.f64 y.re x.re)) y.im)) y.im)))
(#s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (+.f64 (*.f64 x.im (/.f64 y.im y.re)) x.re) y.re)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 #s(approx (+ (/ (* y.im x.im) y.re) x.re) x.re) y.re)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 #s(approx (+ (/ (* y.im x.im) y.re) x.re) (/.f64 (*.f64 y.im x.im) y.re)) y.re)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (+.f64 (*.f64 (/.f64 x.im y.re) y.im) x.re) y.re)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (-.f64 (/.f64 x.im y.im) (*.f64 (/.f64 y.re y.im) (/.f64 (-.f64 (*.f64 (/.f64 y.re y.im) x.im) x.re) y.im)))))
(#s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (+.f64 (*.f64 (/.f64 y.re y.im) x.re) x.im) y.im)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) #s(approx (/ (+ (/ (* y.im x.im) y.re) x.re) y.re) (*.f64 (/.f64 x.im (*.f64 y.re y.re)) y.im))) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 #s(approx (+ (/ (* y.im x.im) y.re) x.re) (*.f64 (/.f64 y.im y.re) x.im)) y.re)) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (-.f64 (/.f64 x.im y.im) #s(approx (* (/ y.re y.im) (/ (- (* (/ y.re y.im) x.im) x.re) y.im)) (*.f64 (/.f64 (neg.f64 y.re) y.im) (/.f64 x.re y.im))))) #s(approx (/ (+ (* x.re y.re) (* x.im y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 #s(approx (- x.im (/ (- (* (* y.re (/ y.re y.im)) x.im) (* y.re x.re)) y.im)) (*.f64 (-.f64 (+.f64 (/.f64 (*.f64 y.re (/.f64 x.re x.im)) y.im) #s(literal 1 binary64)) (*.f64 y.re (/.f64 (/.f64 y.re y.im) y.im))) x.im)) y.im)))
((/.f64 (-.f64 (*.f64 x.im y.re) (*.f64 x.re y.im)) (+.f64 (*.f64 y.re y.re) (*.f64 y.im y.im))))
(#s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (-.f64 (/.f64 (*.f64 y.re x.im) y.im) x.re) y.im)) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 x.im y.re)) (/.f64 (-.f64 (*.f64 x.im y.re) (*.f64 x.re y.im)) #s(approx (+ (* y.re y.re) (* y.im y.im)) (*.f64 y.im y.im))) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (-.f64 x.im (/.f64 (*.f64 y.im x.re) y.re)) y.re)) (/.f64 (-.f64 (*.f64 x.im y.re) (*.f64 x.re y.im)) #s(approx (+ (* y.re y.re) (* y.im y.im)) (*.f64 (-.f64 (*.f64 (/.f64 y.im y.re) (/.f64 y.im y.re)) #s(literal -1 binary64)) (*.f64 y.re y.re)))))
(#s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (-.f64 (*.f64 x.im (/.f64 y.re y.im)) x.re) y.im)) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (neg.f64 x.re) y.im)) (/.f64 #s(approx (- (* x.im y.re) (* x.re y.im)) (*.f64 (neg.f64 x.re) y.im)) #s(approx (+ (* y.re y.re) (* y.im y.im)) (*.f64 y.im y.im))) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 #s(approx (- x.im (/ (* y.im x.re) y.re)) (/.f64 (*.f64 (neg.f64 x.re) y.im) y.re)) y.re)) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (*.f64 (/.f64 (neg.f64 y.im) (+.f64 (*.f64 y.re y.re) (*.f64 y.im y.im))) x.re)))
(#s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (/.f64 (-.f64 x.im (/.f64 (*.f64 y.im x.re) y.re)) y.re)) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) (*.f64 #s(approx (/ (neg y.im) (+ (* y.re y.re) (* y.im y.im))) (/.f64 #s(literal -1 binary64) y.im)) x.re)) (/.f64 #s(approx (- (* x.im y.re) (* x.re y.im)) (*.f64 (neg.f64 x.re) y.im)) #s(approx (+ (* y.re y.re) (* y.im y.im)) (*.f64 y.re y.re))) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) #s(approx (/ (- x.im (/ (* y.im x.re) y.re)) y.re) (*.f64 (/.f64 (/.f64 (neg.f64 x.re) y.re) y.re) y.im))) #s(approx (/ (- (* x.im y.re) (* x.re y.im)) (+ (* y.re y.re) (* y.im y.im))) #s(approx (/ (- (/ (* y.re x.im) y.im) x.re) y.im) (*.f64 (/.f64 (+.f64 (/.f64 y.re y.im) (/.f64 (neg.f64 x.re) x.im)) y.im) x.im))))
((-.f64 (*.f64 (PI.f64) l) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 F F)) (tan.f64 (*.f64 (PI.f64) l)))))
((-.f64 (*.f64 (PI.f64) l) (/.f64 (/.f64 (tan.f64 (*.f64 l (PI.f64))) F) F)) #s(approx (- (* (PI) l) (* (/ 1 (* F F)) (tan (* (PI) l)))) (*.f64 (PI.f64) l)) (-.f64 (*.f64 (PI.f64) l) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 F F)) (tan.f64 (+.f64 (*.f64 l (PI.f64)) (PI.f64))))) (-.f64 (*.f64 (PI.f64) l) (/.f64 (sin.f64 (*.f64 l (PI.f64))) (*.f64 (cos.f64 (*.f64 l (PI.f64))) (*.f64 F F)))) (-.f64 (*.f64 (PI.f64) l) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 F F)) (tan.f64 (*.f64 (cbrt.f64 (PI.f64)) (*.f64 (pow.f64 (PI.f64) #s(literal 1/6 binary64)) (*.f64 (sqrt.f64 (PI.f64)) l)))))))
((-.f64 (*.f64 (PI.f64) l) (/.f64 (*.f64 (pow.f64 F #s(literal -1 binary64)) (tan.f64 (*.f64 l (PI.f64)))) F)) #s(approx (- (* (PI) l) (/ (/ (tan (* l (PI))) F) F)) #s(literal 0 binary64)) (-.f64 (*.f64 (PI.f64) l) (/.f64 (/.f64 #s(approx (tan (* l (PI))) (*.f64 (PI.f64) l)) F) F)) #s(approx (- (* (PI) l) (* (/ 1 (* F F)) (tan (* (PI) l)))) (*.f64 (pow.f64 (PI.f64) #s(literal 1/6 binary64)) (*.f64 (*.f64 (sqrt.f64 (PI.f64)) l) (cbrt.f64 (PI.f64))))) (-.f64 (*.f64 (PI.f64) l) (/.f64 (sin.f64 (*.f64 l (PI.f64))) (*.f64 (sin.f64 (+.f64 (*.f64 (neg.f64 l) (PI.f64)) (/.f64 (PI.f64) #s(literal 2 binary64)))) (*.f64 F F)))))
((-.f64 (*.f64 (PI.f64) l) (/.f64 (*.f64 (pow.f64 F #s(literal -1 binary64)) (/.f64 (sin.f64 (*.f64 (neg.f64 l) (PI.f64))) (cos.f64 (+.f64 (*.f64 (PI.f64) l) (PI.f64))))) F)) #s(approx (- (* (PI) l) (/ (/ (tan (* l (PI))) F) F)) (*.f64 (-.f64 (PI.f64) (/.f64 (PI.f64) (*.f64 F F))) l)) (-.f64 (*.f64 (PI.f64) l) (/.f64 (tan.f64 (*.f64 (PI.f64) l)) (*.f64 F F))) (-.f64 (*.f64 (PI.f64) l) #s(approx (/ (sin (* l (PI))) (* (sin (+ (* (neg l) (PI)) (/ (PI) 2))) (* F F))) (/.f64 (*.f64 (/.f64 l (*.f64 F F)) (PI.f64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) (PI.f64)))))) (-.f64 (*.f64 (PI.f64) l) (/.f64 (sin.f64 (*.f64 l (PI.f64))) (*.f64 (sin.f64 #s(approx (+ (* (neg l) (PI)) (/ (PI) 2)) (*.f64 (PI.f64) (-.f64 (neg.f64 l) #s(literal -1/2 binary64))))) (*.f64 F F)))))
((+.f64 (neg.f64 (*.f64 x (/.f64 #s(literal 1 binary64) (tan.f64 B)))) (/.f64 #s(literal 1 binary64) (sin.f64 B))))
(#s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 B) x)) (sin.f64 B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 (-.f64 #s(literal 1 binary64) x) B)) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 #s(literal 1 binary64) (sin.f64 B))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 #s(literal 1 binary64) (sin.f64 B))) (+.f64 (neg.f64 (*.f64 x (*.f64 (pow.f64 (tan.f64 B) #s(literal -1/2 binary64)) (pow.f64 (tan.f64 B) #s(literal -1/2 binary64))))) (/.f64 #s(literal 1 binary64) (sin.f64 B))))
((+.f64 (neg.f64 (*.f64 x (*.f64 (pow.f64 (sin.f64 B) #s(literal -1 binary64)) (cos.f64 B)))) (/.f64 #s(literal 1 binary64) (sin.f64 B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 #s(approx (- 1 x) #s(literal 1 binary64)) B)) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 (-.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/3 binary64) x)) B) B) (-.f64 x #s(literal 1 binary64))) B)) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 B) x)) #s(approx (sin B) B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (pow.f64 (pow.f64 (sin.f64 B) #s(literal 2 binary64)) #s(literal -1/2 binary64))))
(#s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 #s(approx (- 1 (* (cos B) x)) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (cos.f64 B)) x)) (sin.f64 B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) #s(approx (/ (- (* (* (+ 1/6 (* 1/3 x)) B) B) (- x 1)) B) (*.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal -1/3 binary64) x)) B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)) B)) #s(approx (+ (neg (* x (/ 1 (tan B)))) (/ 1 (sin B))) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (* (cos B) x) (-.f64 x (*.f64 (-.f64 (*.f64 (*.f64 x (-.f64 (*.f64 #s(literal 1/720 binary64) (*.f64 B B)) #s(literal 1/24 binary64))) (*.f64 B B)) (*.f64 #s(literal -1/2 binary64) x)) (*.f64 B B))))) #s(approx (sin B) B))) (+.f64 (neg.f64 (*.f64 x (*.f64 (pow.f64 (sin.f64 B) #s(literal -1 binary64)) (cos.f64 B)))) (/.f64 #s(literal 1 binary64) #s(approx (sin B) B))))
((+.f64 (neg.f64 (*.f64 x (/.f64 #s(literal 1 binary64) (tan.f64 B)))) (*.f64 (/.f64 F (sin.f64 B)) (pow.f64 (+.f64 (+.f64 (*.f64 F F) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) x)) (neg.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)))))))
((+.f64 (neg.f64 (*.f64 x (/.f64 #s(literal 1 binary64) (tan.f64 B)))) (/.f64 (*.f64 (pow.f64 (-.f64 (+.f64 (*.f64 F F) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) x)) #s(literal -1/2 binary64)) F) (sin.f64 B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (*.f64 F F) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) x)))) F) x) B)) (+.f64 (neg.f64 (*.f64 x (/.f64 #s(literal 1 binary64) (tan.f64 B)))) #s(approx (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2)))) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (*.f64 F F) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) x)))) (+.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 B B) F)) F)) B))) (+.f64 (neg.f64 (*.f64 x (/.f64 #s(literal 1 binary64) (tan.f64 B)))) #s(approx (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2)))) (/.f64 #s(literal 1 binary64) (sin.f64 B)))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))))
((+.f64 (/.f64 (*.f64 (neg.f64 (cos.f64 B)) x) (sin.f64 B)) (/.f64 (*.f64 (pow.f64 (-.f64 (+.f64 (*.f64 F F) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) x)) #s(literal -1/2 binary64)) F) (sin.f64 B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (/.f64 #s(approx (- (* (sqrt (/ 1 (- (+ (* F F) 2) (* -2 x)))) F) x) (neg.f64 x)) B)) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (/.f64 (-.f64 #s(approx (* (sqrt (/ 1 (- (+ (* F F) 2) (* -2 x)))) F) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) F) (/.f64 (-.f64 (*.f64 #s(literal -2 binary64) x) #s(literal 2 binary64)) F)))) x) B)) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 B)) #s(approx (* (cos B) (/ x (sin B))) (/.f64 x B)))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 B) x)) (sin.f64 B))))
((+.f64 (/.f64 (*.f64 (neg.f64 (cos.f64 B)) x) (sin.f64 B)) (/.f64 (/.f64 (*.f64 F #s(literal 1 binary64)) (sqrt.f64 (-.f64 (+.f64 #s(literal 2 binary64) (*.f64 F F)) (*.f64 #s(literal -2 binary64) x)))) (sin.f64 B))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (/.f64 (-.f64 #s(approx (* (sqrt (/ 1 (- (+ (* F F) 2) (* -2 x)))) F) #s(literal -1 binary64)) x) B)) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (-.f64 #s(approx (/ 1 (sin B)) (/.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 7/360 binary64) (*.f64 B B)) #s(literal 1/6 binary64)) (*.f64 B B)) #s(literal 1 binary64)) B)) #s(approx (* (cos B) (/ x (sin B))) (/.f64 x B)))) #s(approx (+ (neg (* x (/ 1 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2) (* 2 x)) (neg (/ 1 2))))) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (* (cos B) x) x)) (sin.f64 B))) #s(approx (+ (/ (* (neg (cos B)) x) (sin B)) (/ (* (pow (- (+ (* F F) 2) (* -2 x)) -1/2) F) (sin B))) (*.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)))))
((neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (PI.f64) #s(literal 4 binary64))) (log.f64 (/.f64 (+.f64 (exp.f64 (*.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) f)) (exp.f64 (neg.f64 (*.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) f)))) (-.f64 (exp.f64 (*.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) f)) (exp.f64 (neg.f64 (*.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) f)))))))))
((neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (PI.f64) #s(literal 4 binary64))) (log.f64 (pow.f64 (pow.f64 (/.f64 (cosh.f64 (*.f64 (/.f64 (PI.f64) #s(literal -4 binary64)) f)) (sinh.f64 (*.f64 f (/.f64 (PI.f64) #s(literal 4 binary64))))) (pow.f64 (exp.f64 f) (/.f64 (PI.f64) #s(literal 4 binary64)))) (pow.f64 (exp.f64 f) (/.f64 (PI.f64) #s(literal -4 binary64))))))) (neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (PI.f64) #s(literal 4 binary64))) (log.f64 #s(approx (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f))))) (/.f64 (/.f64 #s(literal 4 binary64) (PI.f64)) f))))) (neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (PI.f64) #s(literal 4 binary64))) (log.f64 #s(approx (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f))))) (/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 (+.f64 (*.f64 (/.f64 (*.f64 (PI.f64) (PI.f64)) (PI.f64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (PI.f64) #s(literal 3 binary64))) (*.f64 (PI.f64) (PI.f64))) #s(literal 1/48 binary64))) f)) f) (/.f64 #s(literal -4 binary64) (PI.f64))) f))))) (neg.f64 (*.f64 (/.f64 (log.f64 (/.f64 (cosh.f64 (*.f64 (/.f64 (PI.f64) #s(literal -4 binary64)) f)) (sinh.f64 (*.f64 f (/.f64 (PI.f64) #s(literal 4 binary64)))))) (sqrt.f64 (PI.f64))) (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (PI.f64)) #s(literal 4 binary64))))) (-.f64 (/.f64 (log.f64 (*.f64 (cosh.f64 (*.f64 (/.f64 (PI.f64) #s(literal -4 binary64)) f)) #s(literal 2 binary64))) (/.f64 (PI.f64) #s(literal -4 binary64))) (/.f64 (log.f64 (*.f64 #s(literal -2 binary64) (sinh.f64 (*.f64 (/.f64 (PI.f64) #s(literal -4 binary64)) f)))) (/.f64 (PI.f64) #s(literal -4 binary64)))))
((neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (PI.f64) #s(literal 4 binary64))) (log.f64 (pow.f64 (pow.f64 #s(approx (/ (cosh (* (/ (PI) -4) f)) (sinh (* f (/ (PI) 4)))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (PI.f64) #s(literal 1/2 binary64)) f))) (pow.f64 (exp.f64 f) (/.f64 (PI.f64) #s(literal 4 binary64)))) (pow.f64 (exp.f64 f) (/.f64 (PI.f64) #s(literal -4 binary64))))))) (*.f64 (/.f64 #s(literal -4 binary64) (PI.f64)) (log.f64 #s(approx (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f))))) (/.f64 (/.f64 #s(literal 4 binary64) (PI.f64)) f)))) #s(approx (neg (* (/ 1 (/ (PI) 4)) (log (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))))))) (*.f64 (/.f64 (-.f64 (log.f64 (/.f64 #s(literal 4 binary64) (PI.f64))) (log.f64 f)) (PI.f64)) #s(literal -4 binary64))) (neg.f64 (*.f64 (*.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) #s(literal -1/2 binary64))) (log.f64 #s(approx (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f))))) (/.f64 (/.f64 #s(literal 4 binary64) (PI.f64)) f))))) (neg.f64 (*.f64 (/.f64 (log.f64 (/.f64 (cosh.f64 (*.f64 (/.f64 (PI.f64) #s(literal -4 binary64)) f)) (sinh.f64 (*.f64 f (/.f64 (PI.f64) #s(literal 4 binary64)))))) (*.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (sqrt.f64 (PI.f64))))) (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (PI.f64)) #s(literal 4 binary64))))))
((neg.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (PI.f64)) #s(literal 4 binary64)) (log.f64 (pow.f64 (pow.f64 #s(approx (/ (cosh (* (/ (PI) -4) f)) (sinh (* f (/ (PI) 4)))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (PI.f64) #s(literal 1/2 binary64)) f))) (pow.f64 (exp.f64 f) (/.f64 (PI.f64) #s(literal 4 binary64)))) (pow.f64 (exp.f64 f) (/.f64 (PI.f64) #s(literal -4 binary64))))))) (*.f64 (/.f64 #s(literal -4 binary64) (PI.f64)) (log.f64 #s(approx (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f))))) (/.f64 #s(literal 4 binary64) (*.f64 (PI.f64) f))))) (log.f64 (pow.f64 #s(approx (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f))))) (/.f64 (/.f64 #s(literal 4 binary64) (PI.f64)) f)) (/.f64 #s(literal -4 binary64) (PI.f64)))) (neg.f64 (*.f64 (*.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (PI.f64) #s(literal 4 binary64)) #s(literal -1/2 binary64))) (log.f64 #s(approx (/ (+ (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f)))) (- (exp (* (/ (PI) 4) f)) (exp (neg (* (/ (PI) 4) f))))) (/.f64 #s(literal 4 binary64) (*.f64 (PI.f64) f)))))) (neg.f64 (*.f64 (/.f64 (log.f64 (/.f64 (cosh.f64 (*.f64 (/.f64 (PI.f64) #s(literal -4 binary64)) f)) (sinh.f64 (*.f64 f (/.f64 (PI.f64) #s(literal 4 binary64)))))) (*.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) #s(literal 4 binary64)))))
((+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))
((-.f32 #s(literal 1 binary32) (-.f32 ux (*.f32 maxCos ux))) #s(approx (+ (- 1 ux) (* ux maxCos)) #s(literal 1 binary32)) #s(approx (+ (- 1 ux) (* ux maxCos)) (-.f32 #s(literal 1 binary32) ux)) (-.f32 (+.f32 (*.f32 maxCos ux) #s(literal 1 binary32)) ux) (+.f32 (/.f32 (-.f32 #s(literal 1 binary32) (*.f32 ux ux)) (+.f32 ux #s(literal 1 binary32))) (*.f32 ux maxCos)))
(#s(approx (+ (- 1 ux) (* ux maxCos)) (/.f32 (-.f32 #s(literal 1 binary32) (pow.f32 ux #s(literal 3 binary32))) (+.f32 (*.f32 ux (-.f32 ux #s(literal -1 binary32))) #s(literal 1 binary32)))) #s(approx (+ (- 1 ux) (* ux maxCos)) (/.f32 (-.f32 (*.f32 #s(literal 1 binary32) (-.f32 ux #s(literal -1 binary32))) (*.f32 (-.f32 ux #s(literal -1 binary32)) (*.f32 ux ux))) (*.f32 (-.f32 ux #s(literal -1 binary32)) (-.f32 ux #s(literal -1 binary32))))) #s(approx (+ (/ (- 1 (* ux ux)) (+ ux 1)) (* ux maxCos)) (/.f32 (-.f32 (*.f32 ux ux) #s(literal 1 binary32)) (-.f32 #s(literal -1 binary32) ux))))
(#s(approx (+ (- 1 ux) (* ux maxCos)) (/.f32 (*.f32 (-.f32 ux #s(literal -1 binary32)) (-.f32 #s(literal 1 binary32) (*.f32 ux ux))) (*.f32 (-.f32 ux #s(literal -1 binary32)) (-.f32 ux #s(literal -1 binary32))))) #s(approx (+ (/ (- 1 (* ux ux)) (+ ux 1)) (* ux maxCos)) (*.f32 (+.f32 (/.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) maxCos)) #s(approx (+ (/ (- 1 (* ux ux)) (+ ux 1)) (* ux maxCos)) (*.f32 (-.f32 ux #s(literal -1 binary32)) (/.f32 (-.f32 ux #s(literal 1 binary32)) (-.f32 #s(literal -1 binary32) ux)))))
((*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))))
((*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) (*.f32 (-.f32 (-.f32 (-.f32 #s(literal 2 binary32) (*.f32 (pow.f32 (-.f32 maxCos #s(literal 1 binary32)) #s(literal 2 binary32)) ux)) maxCos) maxCos) ux)))) (*.f32 #s(approx (sin (* (* uy 2) (PI))) (*.f32 (*.f32 (PI.f32) #s(literal 2 binary32)) uy)) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))) (*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (-.f32 (+.f32 (*.f32 maxCos ux) #s(literal 1 binary32)) ux) (-.f32 (+.f32 (*.f32 maxCos ux) #s(literal 1 binary32)) ux))))) (*.f32 (sin.f32 (*.f32 (*.f32 (*.f32 #s(literal 2 binary32) uy) (sqrt.f32 (PI.f32))) (sqrt.f32 (PI.f32)))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))) (*.f32 #s(approx (sin (* (* uy 2) (PI))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (*.f32 #s(literal -8/315 binary32) (pow.f32 (PI.f32) #s(literal 7 binary32))) (*.f32 uy uy)) (*.f32 #s(literal -4/15 binary32) (pow.f32 (PI.f32) #s(literal 5 binary32)))) (*.f32 uy uy)) (*.f32 #s(literal 4/3 binary32) (pow.f32 (PI.f32) #s(literal 3 binary32)))) (*.f32 uy uy)) (*.f32 #s(literal -2 binary32) (PI.f32))) uy)) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))))
((*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) #s(approx (* (- (- (- 2 (* (pow (- maxCos 1) 2) ux)) maxCos) maxCos) ux) (+.f32 (*.f32 (-.f32 (*.f32 (*.f32 #s(literal -2 binary32) (-.f32 #s(literal 1 binary32) ux)) ux) (*.f32 (*.f32 maxCos ux) ux)) maxCos) (*.f32 (-.f32 #s(literal 2 binary32) ux) ux)))))) (*.f32 #s(approx (sin (* (* uy 2) (PI))) (*.f32 (*.f32 (PI.f32) #s(literal 2 binary32)) uy)) (sqrt.f32 (-.f32 #s(literal 1 binary32) #s(approx (* (- (+ (* maxCos ux) 1) ux) (- (+ (* maxCos ux) 1) ux)) #s(literal 1 binary32))))) (*.f32 #s(approx (sin (* (* (* 2 uy) (sqrt (PI))) (sqrt (PI)))) (*.f32 (*.f32 (PI.f32) #s(literal 2 binary32)) uy)) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) (*.f32 (-.f32 (-.f32 (-.f32 #s(literal 2 binary32) (*.f32 (pow.f32 (-.f32 maxCos #s(literal 1 binary32)) #s(literal 2 binary32)) ux)) maxCos) maxCos) ux)))) (*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) (*.f32 (-.f32 (/.f32 (*.f32 #s(literal 2 binary32) (-.f32 #s(literal 1 binary32) maxCos)) ux) (pow.f32 (-.f32 maxCos #s(literal 1 binary32)) #s(literal 2 binary32))) (*.f32 ux ux))))) (*.f32 (sin.f32 (log.f32 (pow.f32 (exp.f32 (PI.f32)) (*.f32 #s(literal 2 binary32) uy)))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))))
((*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) #s(approx (* (- (- (- 2 (* (pow (- maxCos 1) 2) ux)) maxCos) maxCos) ux) (/.f32 (-.f32 (pow.f32 (*.f32 (-.f32 #s(literal 2 binary32) ux) ux) #s(literal 2 binary32)) (pow.f32 (*.f32 (*.f32 maxCos ux) (-.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) #s(literal -2 binary32)) (*.f32 maxCos ux))) #s(literal 2 binary32))) (-.f32 (*.f32 (-.f32 #s(literal 2 binary32) ux) ux) (*.f32 (*.f32 maxCos ux) (-.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) #s(literal -2 binary32)) (*.f32 maxCos ux))))))))) (*.f32 #s(approx (sin (* (* uy 2) (PI))) (*.f32 (+.f32 (PI.f32) (PI.f32)) uy)) (sqrt.f32 (-.f32 #s(literal 1 binary32) #s(approx (* (- (+ (* maxCos ux) 1) ux) (- (+ (* maxCos ux) 1) ux)) #s(literal 1 binary32))))) (*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) (*.f32 (*.f32 #s(literal 2 binary32) (-.f32 #s(literal 1 binary32) maxCos)) ux)))) (*.f32 #s(approx (sin (* (* (* 2 uy) (sqrt (PI))) (sqrt (PI)))) (*.f32 (-.f32 (*.f32 (*.f32 #s(literal -4/3 binary32) (*.f32 uy uy)) (pow.f32 (PI.f32) #s(literal 3 binary32))) (*.f32 #s(literal -2 binary32) (PI.f32))) uy)) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) #s(approx (* (- (- (- 2 (* (pow (- maxCos 1) 2) ux)) maxCos) maxCos) ux) (+.f32 (*.f32 (-.f32 (*.f32 (*.f32 #s(literal -2 binary32) (-.f32 #s(literal 1 binary32) ux)) ux) (*.f32 (*.f32 maxCos ux) ux)) maxCos) (*.f32 (-.f32 #s(literal 2 binary32) ux) ux)))))) (*.f32 #s(approx (sin (* (* uy 2) (PI))) (*.f32 (*.f32 (PI.f32) #s(literal 2 binary32)) uy)) (sqrt.f32 (/.f32 (-.f32 #s(literal 1 binary32) (pow.f32 (-.f32 (-.f32 (*.f32 maxCos ux) #s(literal -1 binary32)) ux) #s(literal 6 binary32))) (+.f32 (+.f32 #s(literal 1 binary32) (pow.f32 (-.f32 (-.f32 (*.f32 maxCos ux) #s(literal -1 binary32)) ux) #s(literal 4 binary32))) (pow.f32 (-.f32 (-.f32 (*.f32 maxCos ux) #s(literal -1 binary32)) ux) #s(literal 2 binary32)))))))
((*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))))
((*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) (*.f32 (-.f32 (-.f32 (-.f32 #s(literal 2 binary32) (*.f32 (pow.f32 (-.f32 maxCos #s(literal 1 binary32)) #s(literal 2 binary32)) ux)) maxCos) maxCos) ux)))) (*.f32 #s(approx (cos (* (* uy 2) (PI))) #s(literal 1 binary32)) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))) (*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (*.f32 (+.f32 #s(literal 1 binary32) (-.f32 (+.f32 (*.f32 maxCos ux) #s(literal 1 binary32)) ux)) (-.f32 #s(literal 1 binary32) (-.f32 (+.f32 (*.f32 maxCos ux) #s(literal 1 binary32)) ux))))) (*.f32 (sin.f32 (+.f32 (*.f32 (neg.f32 uy) (*.f32 (PI.f32) #s(literal 2 binary32))) (/.f32 (PI.f32) #s(literal 2 binary32)))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))) (*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) #s(approx (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos))) (*.f32 (+.f32 (+.f32 (/.f32 (/.f32 #s(literal 1 binary32) ux) ux) (pow.f32 (-.f32 maxCos #s(literal 1 binary32)) #s(literal 2 binary32))) (/.f32 (*.f32 #s(literal 2 binary32) (-.f32 maxCos #s(literal 1 binary32))) ux)) (*.f32 ux ux)))))))
((*.f32 (sin.f32 (+.f32 (*.f32 (neg.f32 uy) (*.f32 (PI.f32) #s(literal 2 binary32))) (/.f32 (PI.f32) #s(literal 2 binary32)))) (sqrt.f32 (+.f32 (*.f32 (-.f32 (-.f32 (*.f32 maxCos ux) #s(literal -1 binary32)) ux) (+.f32 (-.f32 #s(literal 0 binary32) (*.f32 maxCos ux)) ux)) (*.f32 #s(literal 1 binary32) (+.f32 (-.f32 #s(literal 0 binary32) (*.f32 maxCos ux)) ux))))) (*.f32 #s(approx (cos (* (* uy 2) (PI))) #s(literal 1 binary32)) (sqrt.f32 (-.f32 #s(literal 1 binary32) #s(approx (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos))) #s(literal 1 binary32))))) (*.f32 #s(approx (cos (* (* uy 2) (PI))) (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 #s(literal 2 binary32) (*.f32 uy uy)) (*.f32 (PI.f32) (PI.f32))))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))) #s(approx (* (cos (* (* uy 2) (PI))) (sqrt (* (+ 1 (- (+ (* maxCos ux) 1) ux)) (- 1 (- (+ (* maxCos ux) 1) ux))))) (*.f32 (sqrt.f32 (*.f32 (-.f32 (-.f32 (*.f32 maxCos ux) #s(literal -2 binary32)) ux) (-.f32 ux (*.f32 maxCos ux)))) (cos.f32 (*.f32 #s(literal -2 binary32) (*.f32 (PI.f32) uy))))) (*.f32 (cos.f32 (*.f32 (*.f32 (*.f32 #s(literal 2 binary32) uy) (sqrt.f32 (PI.f32))) (sqrt.f32 (PI.f32)))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))))
((*.f32 (sin.f32 (+.f32 (*.f32 (neg.f32 uy) (*.f32 (PI.f32) #s(literal 2 binary32))) (/.f32 (PI.f32) #s(literal 2 binary32)))) (sqrt.f32 (+.f32 (+.f32 (*.f32 (-.f32 #s(literal 1 binary32) (-.f32 ux (*.f32 ux maxCos))) (-.f32 ux (*.f32 ux maxCos))) ux) (*.f32 (neg.f32 maxCos) ux)))) (*.f32 #s(approx (cos (* (* uy 2) (PI))) #s(literal 1 binary32)) (sqrt.f32 #s(approx (- 1 (* (+ (- 1 ux) (* ux maxCos)) (+ (- 1 ux) (* ux maxCos)))) (*.f32 (-.f32 (*.f32 #s(literal -2 binary32) maxCos) #s(literal -2 binary32)) ux)))) (*.f32 #s(approx (cos (* (* uy 2) (PI))) #s(approx (- 1 (* (* 2 (* uy uy)) (* (PI) (PI)))) (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (*.f32 uy uy) #s(literal 2 binary32)) (PI.f32)) (PI.f32))))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)) (+.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 ux maxCos)))))) (*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (*.f32 #s(approx (+ 1 (- (+ (* maxCos ux) 1) ux)) (-.f32 #s(literal 2 binary32) ux)) (-.f32 #s(literal 1 binary32) (-.f32 (+.f32 (*.f32 maxCos ux) #s(literal 1 binary32)) ux))))) #s(approx (* (cos (* (* uy 2) (PI))) (sqrt (* (+ 1 (- (+ (* maxCos ux) 1) ux)) (- 1 (- (+ (* maxCos ux) 1) ux))))) (*.f32 (sqrt.f32 (*.f32 (-.f32 (-.f32 (*.f32 maxCos ux) #s(literal -2 binary32)) ux) (-.f32 ux (*.f32 maxCos ux)))) (cos.f32 (*.f32 #s(literal -2 binary32) (*.f32 (*.f32 (sqrt.f32 (PI.f32)) uy) (sqrt.f32 (PI.f32))))))))
((+.f32 (+.f32 (*.f32 (*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) xi) (*.f32 (*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) yi)) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) zi)))
((+.f32 (+.f32 (*.f32 (*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) xi) (*.f32 (*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) yi)) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 maxCos ux)) zi)) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) zi) ux) maxCos)) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (+.f32 (+.f32 (*.f32 (cos.f32 (*.f32 #s(literal -2 binary32) (*.f32 (PI.f32) uy))) xi) (*.f32 (sin.f32 (*.f32 (PI.f32) (*.f32 #s(literal 2 binary32) uy))) yi)) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) zi) ux) maxCos))) (+.f32 (+.f32 (*.f32 (*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) xi) (*.f32 (*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) yi)) (*.f32 #s(approx (* (* (- 1 ux) maxCos) ux) (*.f32 (+.f32 (/.f32 maxCos ux) (neg.f32 maxCos)) (*.f32 ux ux))) zi)) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (*.f32 (+.f32 (*.f32 (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (pow.f32 (-.f32 #s(literal 1 binary32) ux) #s(literal 2 binary32)) (*.f32 ux ux)) (*.f32 maxCos maxCos)))) (+.f32 (*.f32 yi (/.f32 (sin.f32 (*.f32 (PI.f32) (*.f32 #s(literal 2 binary32) uy))) xi)) (cos.f32 (*.f32 #s(literal -2 binary32) (*.f32 (PI.f32) uy))))) (/.f32 (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) zi) ux) maxCos) xi)) xi)))
((+.f32 (+.f32 (*.f32 (/.f32 (-.f32 (cos.f32 (-.f32 (+.f32 (/.f32 (PI.f32) #s(literal 2 binary32)) (*.f32 (PI.f32) (*.f32 #s(literal 2 binary32) uy))) (acos.f32 (*.f32 (*.f32 maxCos (-.f32 #s(literal 1 binary32) ux)) ux)))) (cos.f32 (+.f32 (+.f32 (/.f32 (PI.f32) #s(literal 2 binary32)) (*.f32 (PI.f32) (*.f32 #s(literal 2 binary32) uy))) (acos.f32 (*.f32 (*.f32 maxCos (-.f32 #s(literal 1 binary32) ux)) ux))))) #s(literal 2 binary32)) xi) (*.f32 (*.f32 (sin.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) yi)) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) zi)) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (*.f32 (*.f32 #s(approx (* (- 1 ux) zi) zi) ux) maxCos)) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (+.f32 #s(approx (+ (* (cos (* -2 (* (PI) uy))) xi) (* (sin (* (PI) (* 2 uy))) yi)) (+.f32 (*.f32 (*.f32 (*.f32 (PI.f32) yi) uy) #s(literal 2 binary32)) xi)) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) zi) ux) maxCos))) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (+.f32 #s(approx (+ (* (cos (* -2 (* (PI) uy))) xi) (* (sin (* (PI) (* 2 uy))) yi)) (+.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (*.f32 (*.f32 (pow.f32 (PI.f32) #s(literal 3 binary32)) yi) uy) #s(literal -4/3 binary32)) (*.f32 #s(literal 2 binary32) (*.f32 (*.f32 (PI.f32) (PI.f32)) xi))) uy) (*.f32 #s(literal -2 binary32) (*.f32 (PI.f32) yi))) uy) xi)) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) zi) ux) maxCos))) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) #s(approx (+ (+ (* (cos (* -2 (* (PI) uy))) xi) (* (sin (* (PI) (* 2 uy))) yi)) (* (* (* (- 1 ux) zi) ux) maxCos)) (*.f32 (-.f32 (neg.f32 (/.f32 (-.f32 (neg.f32 (/.f32 (-.f32 (*.f32 (cos.f32 (*.f32 #s(literal -2 binary32) (*.f32 (PI.f32) uy))) xi) (*.f32 (sin.f32 (*.f32 #s(literal -2 binary32) (*.f32 (PI.f32) uy))) yi)) ux)) (*.f32 zi maxCos)) ux)) (*.f32 zi maxCos)) (*.f32 ux ux)))))
((+.f32 (+.f32 (*.f32 (*.f32 (cos.f32 (*.f32 (*.f32 uy #s(literal 2 binary32)) (PI.f32))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) xi) (*.f32 (*.f32 (sin.f32 (*.f32 (*.f32 (*.f32 #s(literal 2 binary32) uy) (pow.f32 (cbrt.f32 (PI.f32)) #s(literal 2 binary32))) (cbrt.f32 (PI.f32)))) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) maxCos) ux))))) yi)) (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) (*.f32 maxCos ux)) zi)) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (*.f32 (*.f32 maxCos #s(approx (* (- 1 ux) zi) zi)) ux)) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (+.f32 #s(approx (+ (* (cos (* -2 (* (PI) uy))) xi) (* (sin (* (PI) (* 2 uy))) yi)) #s(approx (+ (* (- (* (- (* (* (* (pow (PI) 3) yi) uy) -4/3) (* 2 (* (* (PI) (PI)) xi))) uy) (* -2 (* (PI) yi))) uy) xi) (+.f32 (*.f32 (*.f32 #s(literal -2 binary32) (*.f32 uy uy)) (*.f32 (*.f32 (PI.f32) (PI.f32)) xi)) xi))) (*.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) ux) zi) ux) maxCos))) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) #s(approx (+ (+ (* (cos (* -2 (* (PI) uy))) xi) (* (sin (* (PI) (* 2 uy))) yi)) (* (* (* (- 1 ux) zi) ux) maxCos)) (*.f32 (sin.f32 (*.f32 (*.f32 (PI.f32) uy) #s(literal 2 binary32))) yi))) #s(approx (+ (+ (* (* (cos (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2) (PI))) (sqrt (- 1 (* (* (* (- 1 ux) maxCos) ux) (* (* (- 1 ux) maxCos) ux))))) yi)) (* (* (* (- 1 ux) maxCos) ux) zi)) (*.f32 #s(approx (+ (* (sqrt (- 1 (* (* (pow (- 1 ux) 2) (* ux ux)) (* maxCos maxCos)))) (+ (* yi (/ (sin (* (PI) (* 2 uy))) xi)) (cos (* -2 (* (PI) uy))))) (/ (* (* (* (- 1 ux) zi) ux) maxCos) xi)) (+.f32 (*.f32 (/.f32 (sin.f32 (*.f32 (*.f32 (PI.f32) uy) #s(literal 2 binary32))) xi) yi) (cos.f32 (*.f32 #s(literal -2 binary32) (*.f32 (PI.f32) uy))))) xi)))
((/.f32 #s(literal 1 binary32) (sqrt.f32 (+.f32 #s(literal 1 binary32) (/.f32 (*.f32 (/.f32 #s(literal 1 binary32) (+.f32 (/.f32 (*.f32 (cos.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (+.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u1) (*.f32 #s(literal 1/2 binary32) (PI.f32))))))) (cos.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (+.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u1) (*.f32 #s(literal 1/2 binary32) (PI.f32)))))))) (*.f32 alphax alphax)) (/.f32 (*.f32 (sin.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (+.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u1) (*.f32 #s(literal 1/2 binary32) (PI.f32))))))) (sin.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (+.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u1) (*.f32 #s(literal 1/2 binary32) (PI.f32)))))))) (*.f32 alphay alphay)))) u0) (-.f32 #s(literal 1 binary32) u0))))))
((pow.f32 (-.f32 (/.f32 (/.f32 u0 (+.f32 (pow.f32 (/.f32 (sin.f32 (atan.f32 (*.f32 (tan.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)) (*.f32 #s(literal -2 binary32) (*.f32 u1 (PI.f32))))) (/.f32 alphay alphax)))) alphay) #s(literal 2 binary32)) (pow.f32 (/.f32 (cos.f32 (atan.f32 (*.f32 (tan.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)) (*.f32 #s(literal -2 binary32) (*.f32 u1 (PI.f32))))) (/.f32 alphay alphax)))) alphax) #s(literal 2 binary32)))) (-.f32 #s(literal 1 binary32) u0)) #s(literal -1 binary32)) #s(literal -1/2 binary32)) #s(approx (/ 1 (sqrt (+ 1 (/ (* (/ 1 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphay alphay)))) u0) (- 1 u0))))) #s(literal 1 binary32)) #s(approx (/ 1 (sqrt (+ 1 (/ (* (/ 1 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphay alphay)))) u0) (- 1 u0))))) (+.f32 (*.f32 (/.f32 #s(literal -1/2 binary32) (pow.f32 (sin.f32 (atan.f32 (*.f32 (/.f32 (sin.f32 (*.f32 (PI.f32) (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)))) alphax) (/.f32 alphay (cos.f32 (*.f32 (PI.f32) (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)))))))) #s(literal 2 binary32))) (/.f32 (*.f32 (*.f32 alphay alphay) u0) (-.f32 #s(literal 1 binary32) u0))) #s(literal 1 binary32))) (/.f32 #s(literal 1 binary32) (sqrt.f32 (+.f32 #s(literal 1 binary32) (/.f32 #s(approx (* (/ 1 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphay alphay)))) u0) (/.f32 (*.f32 (*.f32 alphax alphax) u0) (pow.f32 (cos.f32 (atan.f32 (*.f32 (/.f32 (sin.f32 (*.f32 (PI.f32) (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)))) alphax) (/.f32 alphay (cos.f32 (*.f32 (PI.f32) (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)))))))) #s(literal 2 binary32)))) (-.f32 #s(literal 1 binary32) u0))))) (/.f32 #s(literal 1 binary32) (sqrt.f32 (-.f32 (/.f32 (/.f32 u0 (+.f32 (pow.f32 (/.f32 (sin.f32 (atan.f32 (*.f32 (tan.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)) (*.f32 #s(literal -2 binary32) (*.f32 u1 (PI.f32))))) (/.f32 alphay alphax)))) alphay) #s(literal 2 binary32)) (pow.f32 (/.f32 (cos.f32 (atan.f32 (*.f32 (tan.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)) (*.f32 #s(literal -2 binary32) (*.f32 u1 (PI.f32))))) (/.f32 alphay alphax)))) alphax) #s(literal 2 binary32)))) (-.f32 #s(literal 1 binary32) u0)) #s(literal -1 binary32)))))
((pow.f32 (-.f32 (/.f32 (/.f32 u0 (+.f32 (pow.f32 (/.f32 (sin.f32 (atan.f32 (*.f32 (tan.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)) (*.f32 #s(literal -2 binary32) (*.f32 u1 (PI.f32))))) (/.f32 alphay alphax)))) alphay) #s(literal 2 binary32)) (pow.f32 (/.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (+.f32 (pow.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 u1 #s(literal -2 binary32)))))) #s(literal 2 binary32)) #s(literal 1 binary32)))) alphax) #s(literal 2 binary32)))) (-.f32 #s(literal 1 binary32) u0)) #s(literal -1 binary32)) #s(literal -1/2 binary32)) (/.f32 #s(literal 1 binary32) (sqrt.f32 (+.f32 #s(literal 1 binary32) (/.f32 #s(approx (* (/ 1 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphay alphay)))) u0) (/.f32 (*.f32 (*.f32 alphax alphax) u0) (+.f32 #s(literal 1/2 binary32) (*.f32 #s(literal 1/2 binary32) (cos.f32 (*.f32 #s(literal 2 binary32) (atan.f32 (*.f32 (/.f32 alphay (cos.f32 (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)) (PI.f32)))) (/.f32 (sin.f32 (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)) (PI.f32))) alphax))))))))) (-.f32 #s(literal 1 binary32) u0))))) #s(approx (pow (- (/ (/ u0 (+ (pow (/ (sin (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphay) 2) (pow (/ (cos (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphax) 2))) (- 1 u0)) -1) -1/2) (-.f32 #s(literal 1 binary32) (/.f32 (*.f32 #s(literal 1/2 binary32) (*.f32 (*.f32 alphay alphay) u0)) (*.f32 (pow.f32 (sin.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (/.f32 (sin.f32 (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)) (PI.f32))) (cos.f32 (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)) (PI.f32))))))) #s(literal 2 binary32)) (-.f32 #s(literal 1 binary32) u0))))) #s(approx (pow (- (/ (/ u0 (+ (pow (/ (sin (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphay) 2) (pow (/ (cos (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphax) 2))) (- 1 u0)) -1) -1/2) (sqrt.f32 (/.f32 #s(literal 1 binary32) (+.f32 (*.f32 (/.f32 (*.f32 alphay alphay) (pow.f32 (sin.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (/.f32 (sin.f32 (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)) (PI.f32))) (cos.f32 (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)) (PI.f32))))))) #s(literal 2 binary32))) (/.f32 u0 (-.f32 #s(literal 1 binary32) u0))) #s(literal 1 binary32))))) (pow.f32 (/.f32 (+.f32 (*.f32 (/.f32 u0 (+.f32 (pow.f32 (/.f32 (cos.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 u1 #s(literal -2 binary32)))))))) alphax) #s(literal 2 binary32)) (pow.f32 (/.f32 (sin.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 u1 #s(literal -2 binary32)))))))) alphay) #s(literal 2 binary32)))) #s(literal 2 binary32)) (*.f32 (-.f32 #s(literal 1 binary32) u0) #s(literal 2 binary32))) (*.f32 (-.f32 #s(literal 1 binary32) u0) #s(literal 2 binary32))) #s(literal -1/2 binary32)))
((pow.f32 (-.f32 (/.f32 (/.f32 u0 (+.f32 (-.f32 (/.f32 #s(literal 1/2 binary32) (*.f32 alphay alphay)) (/.f32 (*.f32 (cos.f32 (*.f32 (atan.f32 (*.f32 (tan.f32 (*.f32 (-.f32 #s(literal 1/2 binary32) (*.f32 u1 #s(literal -2 binary32))) (PI.f32))) (/.f32 alphay alphax))) #s(literal 2 binary32))) #s(literal 1/2 binary32)) (*.f32 alphay alphay))) (pow.f32 (/.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (+.f32 (pow.f32 (*.f32 (/.f32 alphay alphax) (tan.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 u1 #s(literal -2 binary32)))))) #s(literal 2 binary32)) #s(literal 1 binary32)))) alphax) #s(literal 2 binary32)))) (-.f32 #s(literal 1 binary32) u0)) #s(literal -1 binary32)) #s(literal -1/2 binary32)) (pow.f32 (/.f32 #s(approx (+ (* (/ u0 (+ (pow (/ (cos (atan (* (/ alphay alphax) (tan (* (PI) (- 1/2 (* u1 -2))))))) alphax) 2) (pow (/ (sin (atan (* (/ alphay alphax) (tan (* (PI) (- 1/2 (* u1 -2))))))) alphay) 2))) 2) (* (- 1 u0) 2)) #s(literal 2 binary32)) (*.f32 (-.f32 #s(literal 1 binary32) u0) #s(literal 2 binary32))) #s(literal -1/2 binary32)) (sqrt.f32 (/.f32 #s(literal 1 binary32) (-.f32 (/.f32 #s(approx (* (/ 1 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI))))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2 (PI)) u1) (* 1/2 (PI)))))))) (* alphay alphay)))) u0) (/.f32 (*.f32 (*.f32 alphax alphax) u0) (pow.f32 (cos.f32 (atan.f32 (*.f32 (tan.f32 (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u1) #s(literal -1/2 binary32)) (PI.f32))) (/.f32 alphay alphax)))) #s(literal 2 binary32)))) (-.f32 #s(literal 1 binary32) u0)) #s(literal -1 binary32)))) #s(approx (pow (- (/ (/ u0 (+ (pow (/ (sin (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphay) 2) (pow (/ (cos (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphax) 2))) (- 1 u0)) -1) -1/2) (-.f32 #s(literal 1 binary32) #s(approx (/ (* 1/2 (* (* alphay alphay) u0)) (* (pow (sin (atan (* (/ alphay alphax) (/ (sin (* (- (* 2 u1) -1/2) (PI))) (cos (* (- (* 2 u1) -1/2) (PI))))))) 2) (- 1 u0))) (*.f32 #s(literal 1/2 binary32) (/.f32 (*.f32 (*.f32 alphay alphay) u0) (pow.f32 (sin.f32 (atan.f32 (*.f32 (/.f32 alphay alphax) (/.f32 (sin.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 #s(literal -2 binary32) u1)))) (cos.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 #s(literal -2 binary32) u1)))))))) #s(literal 2 binary32))))))) #s(approx (pow (- (/ (/ u0 (+ (pow (/ (sin (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphay) 2) (pow (/ (cos (atan (* (tan (- (* 1/2 (PI)) (* -2 (* u1 (PI))))) (/ alphay alphax)))) alphax) 2))) (- 1 u0)) -1) -1/2) (sqrt.f32 (/.f32 #s(literal 1 binary32) (+.f32 (*.f32 (/.f32 (*.f32 alphay alphay) (pow.f32 (sin.f32 (atan.f32 #s(approx (* (/ alphay alphax) (/ (sin (* (- (* 2 u1) -1/2) (PI))) (cos (* (- (* 2 u1) -1/2) (PI))))) (*.f32 (/.f32 alphay alphax) (/.f32 (sin.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32))) (cos.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)))))))) #s(literal 2 binary32))) (/.f32 u0 (-.f32 #s(literal 1 binary32) u0))) #s(literal 1 binary32))))))
((*.f32 (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))))
((*.f32 (sqrt.f32 (*.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) (*.f32 u1 u1))) (+.f32 #s(literal 1 binary32) u1))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))) #s(approx (sin (* 314159265359/50000000000 u2)) (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) #s(approx (* (sqrt (/ u1 (- 1 u1))) (sin (* 314159265359/50000000000 u2))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal -31006276680305942139213528068663279/750000000000000000000000000000000 binary32) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1)))) (*.f32 (*.f32 #s(literal -3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 binary32) (*.f32 u2 u2)) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) (*.f32 u2 u2)) (*.f32 #s(literal -314159265359/50000000000 binary32) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) u2)) (*.f32 (sqrt.f32 #s(approx (/ u1 (- 1 u1)) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 u1 #s(literal -1 binary32)) u1) #s(literal -1 binary32)) u1) #s(literal -1 binary32)) u1))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) #s(approx (* (sqrt (/ u1 (- 1 u1))) (sin (* 314159265359/50000000000 u2))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (+.f32 (*.f32 #s(literal 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 binary32) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1)))) (*.f32 (*.f32 #s(literal -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 binary32) (*.f32 u2 u2)) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) (*.f32 u2 u2)) (*.f32 #s(literal 31006276680305942139213528068663279/750000000000000000000000000000000 binary32) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) (*.f32 u2 u2)) (*.f32 #s(literal -314159265359/50000000000 binary32) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) u2)))
((*.f32 (sqrt.f32 (/.f32 (*.f32 (-.f32 #s(literal 1 binary32) (*.f32 u1 u1)) u1) (*.f32 (-.f32 #s(literal 1 binary32) u1) (-.f32 #s(literal 1 binary32) (*.f32 u1 u1))))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 #s(approx (/ u1 (- 1 u1)) u1)) #s(approx (sin (* 314159265359/50000000000 u2)) (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 #s(approx (/ u1 (- 1 u1)) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 u1 #s(literal -1 binary32)) u1) #s(literal -1 binary32)) u1) #s(literal -1 binary32)) u1))) #s(approx (sin (* 314159265359/50000000000 u2)) (*.f32 (+.f32 (*.f32 (-.f32 (*.f32 #s(literal 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 binary32) (*.f32 u2 u2)) #s(literal 31006276680305942139213528068663279/750000000000000000000000000000000 binary32)) (*.f32 u2 u2)) #s(literal 314159265359/50000000000 binary32)) u2))) (*.f32 (sqrt.f32 #s(approx (/ u1 (- 1 u1)) #s(approx (* (- (* (- (* (- u1 -1) u1) -1) u1) -1) u1) u1))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 (+.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) (*.f32 u1 u1))) (*.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) (*.f32 u1 u1))) u1))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))))
((*.f32 (*.f32 (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 u1 u1))) (sqrt.f32 (/.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1)) (-.f32 #s(literal 1 binary32) (*.f32 u1 u1))))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 #s(approx (/ u1 (- 1 u1)) (*.f32 (-.f32 u1 #s(literal -1 binary32)) u1))) #s(approx (sin (* 314159265359/50000000000 u2)) (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 (*.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) (*.f32 u1 u1))) (+.f32 #s(literal 1 binary32) u1))) #s(approx (sin (* 314159265359/50000000000 u2)) (*.f32 (+.f32 (*.f32 (*.f32 u2 u2) #s(literal -31006276680305942139213528068663279/750000000000000000000000000000000 binary32)) #s(literal 314159265359/50000000000 binary32)) u2))) #s(approx (* (sqrt (/ u1 (- 1 u1))) (sin (* 314159265359/50000000000 u2))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal -31006276680305942139213528068663279/750000000000000000000000000000000 binary32) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1)))) (*.f32 (*.f32 #s(literal -3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 binary32) (*.f32 u2 u2)) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) (*.f32 u2 u2)) (*.f32 #s(literal -314159265359/50000000000 binary32) (sqrt.f32 #s(approx (/ u1 (- 1 u1)) (*.f32 (-.f32 (*.f32 (-.f32 u1 #s(literal -1 binary32)) u1) #s(literal -1 binary32)) u1))))) u2)) (*.f32 #s(approx (sqrt (/ (* (- 1 (* u1 u1)) u1) (* (- 1 u1) (- 1 (* u1 u1))))) (+.f32 (*.f32 (*.f32 (*.f32 u1 u1) #s(literal 1/2 binary32)) (+.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) u1)) (sqrt.f32 u1))) (sqrt.f32 u1))) (sin.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))))
((*.f32 (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))) (cos.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))))
((*.f32 (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))) (sin.f32 (+.f32 (*.f32 #s(literal -314159265359/50000000000 binary32) u2) (/.f32 (PI.f32) #s(literal 2 binary32))))) #s(approx (* (sqrt (/ u1 (- 1 u1))) (cos (* 314159265359/50000000000 u2))) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1)))) #s(approx (* (sqrt (/ u1 (- 1 u1))) (cos (* 314159265359/50000000000 u2))) (+.f32 (*.f32 (-.f32 (*.f32 #s(literal -98696044010906577398881/5000000000000000000000 binary32) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1)))) (*.f32 (*.f32 #s(literal -9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 binary32) (*.f32 u2 u2)) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) (*.f32 u2 u2)) (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))))) (*.f32 (/.f32 (sqrt.f32 u1) (sqrt.f32 (-.f32 #s(literal 1 binary32) u1))) (cos.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 (/.f32 u1 (/.f32 (-.f32 #s(literal 1 binary32) (*.f32 u1 u1)) (+.f32 #s(literal 1 binary32) u1)))) (cos.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))))
((*.f32 (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))) (sin.f32 #s(approx (+ (* -314159265359/50000000000 u2) (/ (PI) 2)) (-.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)) (*.f32 #s(literal 314159265359/50000000000 binary32) u2))))) #s(approx (* (sqrt (/ u1 (- 1 u1))) (cos (* 314159265359/50000000000 u2))) (sqrt.f32 #s(approx (/ u1 (- 1 u1)) u1))) (*.f32 (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))) #s(approx (cos (* 314159265359/50000000000 u2)) (-.f32 (*.f32 (*.f32 (-.f32 (*.f32 #s(literal 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 binary32) (*.f32 u2 u2)) #s(literal 98696044010906577398881/5000000000000000000000 binary32)) u2) u2) #s(literal -1 binary32)))) (*.f32 (sqrt.f32 #s(approx (/ u1 (/ (- 1 (* u1 u1)) (+ 1 u1))) u1)) (cos.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))) (*.f32 (sqrt.f32 #s(approx (/ u1 (- 1 u1)) (*.f32 (+.f32 (*.f32 (+.f32 #s(literal 1 binary32) u1) u1) #s(literal 1 binary32)) u1))) (sin.f32 (+.f32 (*.f32 #s(literal -314159265359/50000000000 binary32) u2) (/.f32 (PI.f32) #s(literal 2 binary32))))))
((*.f32 (sqrt.f32 (/.f32 u1 (-.f32 #s(literal 1 binary32) u1))) (sin.f32 #s(approx (+ (* -314159265359/50000000000 u2) (/ (PI) 2)) (*.f32 (-.f32 (*.f32 (/.f32 (PI.f32) u2) #s(literal 1/2 binary32)) #s(literal 314159265359/50000000000 binary32)) u2)))) #s(approx (* (sqrt (/ u1 (- 1 u1))) (cos (* 314159265359/50000000000 u2))) (sqrt.f32 #s(approx (/ u1 (- 1 u1)) (*.f32 (+.f32 #s(literal 1 binary32) u1) u1)))) (*.f32 (/.f32 (sqrt.f32 u1) (sqrt.f32 (-.f32 #s(literal 1 binary32) u1))) #s(approx (sin (+ (* -314159265359/50000000000 u2) (/ (PI) 2))) (+.f32 (*.f32 (*.f32 u2 u2) #s(literal -98696044010906577398881/5000000000000000000000 binary32)) #s(literal 1 binary32)))) (*.f32 (sqrt.f32 (/.f32 u1 #s(approx (- 1 u1) (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) u1) #s(literal 1 binary32)) u1)))) #s(approx (cos (* 314159265359/50000000000 u2)) (-.f32 (*.f32 (*.f32 (-.f32 (*.f32 #s(literal 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 binary32) (*.f32 u2 u2)) #s(literal 98696044010906577398881/5000000000000000000000 binary32)) u2) u2) #s(literal -1 binary32)))) (*.f32 (sqrt.f32 (/.f32 u1 #s(approx (/ (- 1 (* u1 u1)) (+ 1 u1)) (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) u1) #s(literal 1 binary32)) u1)))) (cos.f32 (*.f32 #s(literal 314159265359/50000000000 binary32) u2))))
((/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 x)))))
(#s(approx (/ (- 1 (* (tan x) (tan x))) (+ 1 (* (tan x) (tan x)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) #s(approx (/ (- 1 (* (tan x) (tan x))) (+ 1 (* (tan x) (tan x)))) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) #s(approx (tan x) x))) (+.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 x)))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))) (+.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 x)))) (-.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))
((/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))) (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x)))) #s(approx (/ (- 1 (* (/ (sin x) (cos x)) (tan x))) (+ 1 (* (tan x) (tan x)))) (+.f64 (*.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))
((/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))) (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) #s(approx (tan x) (/.f64 (sin.f64 x) (cos.f64 x)))))) #s(approx (/ (- 1 (* (/ (sin x) (cos x)) (tan x))) (+ 1 (* (tan x) (tan x)))) #s(approx (+ (* (* x x) -2) 1) (*.f64 (*.f64 x x) #s(literal -2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 #s(literal 1 binary64) (exp.f64 (*.f64 (log.f64 (tan.f64 x)) #s(literal 2 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (/.f64 (+.f64 (*.f64 (*.f64 (tan.f64 x) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 #s(approx (pow (tan x) 2) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))))
((/.f64 (*.f64 e (sin.f64 v)) (+.f64 #s(literal 1 binary64) (*.f64 e (cos.f64 v)))))
((/.f64 (*.f64 e (sin.f64 v)) (/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 v) e) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (*.f64 (cos.f64 v) e) #s(literal 1 binary64)))) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (*.f64 (/.f64 e (-.f64 e #s(literal -1 binary64))) v)) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (*.f64 (sin.f64 v) e)) (/.f64 (*.f64 e (sin.f64 v)) (+.f64 #s(literal 1 binary64) #s(approx (* e (cos v)) e))) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (/.f64 (sin.f64 v) (+.f64 (/.f64 #s(literal 1 binary64) e) (cos.f64 v)))))
(#s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (/.f64 (sin.f64 v) #s(approx (+ (/ 1 e) (cos v)) (/.f64 #s(literal 1 binary64) e)))) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) #s(approx (* (/ e (- e -1)) v) v)) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) #s(approx (* (/ e (- e -1)) v) (-.f64 v (/.f64 v e)))) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) #s(approx (/ (sin v) (+ (/ 1 e) (cos v))) (/.f64 v (/.f64 (-.f64 e #s(literal -1 binary64)) e)))) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (*.f64 (/.f64 (sin.f64 v) (-.f64 (pow.f64 e #s(literal -2 binary64)) (pow.f64 (cos.f64 v) #s(literal 2 binary64)))) (-.f64 (pow.f64 e #s(literal -1 binary64)) (cos.f64 v)))))
(#s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (/.f64 (*.f64 (-.f64 (pow.f64 e #s(literal -1 binary64)) (cos.f64 v)) (sin.f64 v)) (-.f64 (pow.f64 e #s(literal -2 binary64)) (pow.f64 (cos.f64 v) #s(literal 2 binary64))))) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (*.f64 #s(approx (/ e (- e -1)) e) v)) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (*.f64 #s(approx (/ e (- e -1)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) e))) v)) #s(approx (/ (* e (sin v)) (/ (- (pow (* (cos v) e) 2) 1) (- (* (cos v) e) 1))) (*.f64 (*.f64 (-.f64 e #s(literal 1 binary64)) v) (/.f64 e (-.f64 (*.f64 e e) #s(literal 1 binary64))))) #s(approx (/ (* e (sin v)) (+ 1 (* e (cos v)))) (*.f64 #s(approx (/ (sin v) (- (pow e -2) (pow (cos v) 2))) (*.f64 (*.f64 (sin.f64 v) e) e)) (-.f64 (pow.f64 e #s(literal -1 binary64)) (cos.f64 v)))))
((/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (sqrt.f64 (-.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (*.f64 l l) (*.f64 #s(literal 2 binary64) (*.f64 t t)))) (*.f64 l l)))))
((/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) #s(approx (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l))) (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) t)))) #s(approx (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))) (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (sqrt.f64 #s(approx (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 t t) #s(literal 2 binary64)))))) #s(approx (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 l l) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 l l)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) t))) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (sqrt.f64 #s(approx (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)) (-.f64 (-.f64 (-.f64 (/.f64 (*.f64 l l) x) (*.f64 #s(literal -2 binary64) (*.f64 t t))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 t t) x))) (/.f64 (-.f64 (*.f64 l l) (*.f64 #s(literal -2 binary64) (*.f64 t t))) (neg.f64 x)))))))
((*.f64 (/.f64 t #s(approx (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l))) (*.f64 (sqrt.f64 (*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) t))) (sqrt.f64 #s(literal 2 binary64))) #s(approx (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))) #s(literal 1 binary64)) #s(approx (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))) (/.f64 (*.f64 (*.f64 t (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64)) (sqrt.f64 (*.f64 l (-.f64 (/.f64 (*.f64 l (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))) l))))) #s(approx (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 1/2 binary64)) (sqrt.f64 (*.f64 l (-.f64 (/.f64 (*.f64 l (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))) l))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) t))) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (sqrt.f64 #s(approx (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)) (-.f64 (-.f64 (-.f64 (/.f64 (*.f64 l l) x) (*.f64 #s(literal -2 binary64) (*.f64 t t))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 t t) x))) #s(approx (/ (- (* l l) (* -2 (* t t))) (neg x)) (*.f64 (-.f64 (/.f64 (*.f64 (neg.f64 l) l) (*.f64 (*.f64 t t) x)) (/.f64 #s(literal 2 binary64) x)) (*.f64 t t))))))))
((*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (/.f64 #s(literal 1 binary64) #s(approx (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l))) (*.f64 (sqrt.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) (-.f64 x #s(literal 1 binary64))))) t)))) #s(approx (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))) #s(approx (/ (* (* t (sqrt 2)) 1) (sqrt (* l (- (/ (* l (- x -1)) (- x 1)) l)))) (*.f64 (sqrt.f64 (/.f64 x (*.f64 (-.f64 l (neg.f64 l)) l))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) t)))) #s(approx (/ (* (sqrt 2) t) (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (- (* (* l l) (/ (+ 1 x) (- x 1))) (* l l)) (*.f64 (/.f64 (*.f64 l l) x) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) t))) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (sqrt.f64 #s(approx (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l)) (-.f64 #s(approx (- (- (/ (* l l) x) (* -2 (* t t))) (* -2 (/ (* t t) x))) (*.f64 (*.f64 t t) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 l l) (*.f64 #s(literal -2 binary64) (*.f64 t t))) (neg.f64 x)))))) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) #s(approx (sqrt (- (* (/ (+ x 1) (- x 1)) (+ (* l l) (* 2 (* t t)))) (* l l))) (-.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 l l) (-.f64 (-.f64 (*.f64 #s(literal -2 binary64) (*.f64 t t)) (*.f64 l l)) (*.f64 (*.f64 t t) #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) t)))))))
((*.f64 (/.f64 (sin.f64 ky) (sqrt.f64 (+.f64 (pow.f64 (sin.f64 kx) #s(literal 2 binary64)) (pow.f64 (sin.f64 ky) #s(literal 2 binary64))))) (sin.f64 th)))
((*.f64 (sin.f64 ky) (/.f64 (sin.f64 th) (sqrt.f64 (+.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) (pow.f64 (sin.f64 kx) #s(literal 2 binary64)))))) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) (sin.f64 th)) (*.f64 #s(approx (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (-.f64 (/.f64 (*.f64 (*.f64 kx kx) #s(literal -1/2 binary64)) (pow.f64 (sin.f64 ky) #s(literal 2 binary64))) #s(literal -1 binary64))) (sin.f64 th)) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) (*.f64 (*.f64 (sin.f64 ky) th) (sqrt.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) (pow.f64 (sin.f64 kx) #s(literal 2 binary64))))))) (*.f64 #s(approx (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 kx)) (*.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (sin.f64 kx) #s(literal 2 binary64))) #s(literal 1/6 binary64)) (sin.f64 kx)) (*.f64 ky ky))) ky)) (sin.f64 th)))
((*.f64 (sin.f64 ky) (/.f64 (sin.f64 th) (sqrt.f64 (+.f64 (pow.f64 (pow.f64 (pow.f64 (sin.f64 ky) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (sin.f64 kx) #s(literal 2 binary64)))))) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) #s(approx (* (* (sin ky) th) (sqrt (/ 1 (+ (pow (sin ky) 2) (pow (sin kx) 2))))) th)) (*.f64 #s(approx (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (*.f64 #s(approx (- (/ 1 (sin kx)) (* (/ (+ (/ 1/2 (pow (sin kx) 2)) 1/6) (sin kx)) (* ky ky))) (/.f64 #s(literal 1 binary64) (sin.f64 kx))) ky)) (sin.f64 th)) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) (*.f64 (*.f64 (sin.f64 ky) th) (sqrt.f64 #s(approx (/ 1 (+ (pow (sin ky) 2) (pow (sin kx) 2))) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 kx) #s(literal 2 binary64))))))) (*.f64 (sin.f64 ky) (/.f64 (sin.f64 th) (sqrt.f64 (+.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) #s(approx (pow (sin kx) 2) (*.f64 (+.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 kx kx)) #s(literal 1 binary64)) (*.f64 kx kx))))))))
((*.f64 (sin.f64 ky) (/.f64 (sin.f64 th) (sqrt.f64 (+.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 ky) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (sin.f64 kx) #s(literal 2 binary64)))))) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) #s(approx (sin th) (*.f64 (+.f64 (*.f64 (*.f64 th th) #s(literal -1/6 binary64)) #s(literal 1 binary64)) th))) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) (*.f64 (*.f64 (sin.f64 ky) th) #s(approx (sqrt (/ 1 (+ (pow (sin ky) 2) (pow (sin kx) 2)))) (/.f64 #s(literal 1 binary64) (sin.f64 ky))))) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) (*.f64 (*.f64 (sqrt.f64 #s(approx (/ 1 (+ (pow (sin ky) 2) (pow (sin kx) 2))) (pow.f64 (sin.f64 kx) #s(literal -2 binary64)))) th) (sin.f64 ky))) #s(approx (* (/ (sin ky) (sqrt (+ (pow (sin kx) 2) (pow (sin ky) 2)))) (sin th)) (/.f64 (*.f64 (*.f64 th (sin.f64 ky)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 (pow.f64 (sin.f64 kx) #s(literal 2 binary64)) (pow.f64 (sin.f64 ky) #s(literal 2 binary64)))))))
((sqrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) l) Om) #s(literal 2 binary64)) (+.f64 (pow.f64 (sin.f64 kx) #s(literal 2 binary64)) (pow.f64 (sin.f64 ky) #s(literal 2 binary64)))))))))))
((sqrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) l) Om) #s(literal 2 binary64)) (+.f64 (pow.f64 (sin.f64 kx) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) ky)))))))))))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) #s(literal 1/2 binary64))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) Om) (/.f64 (*.f64 l l) Om)))))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 Om l)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) (pow.f64 (sin.f64 kx) #s(literal 2 binary64)))))) #s(literal -1/2 binary64)))) (sqrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (/.f64 (+.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) (pow.f64 (sin.f64 kx) #s(literal 2 binary64))) (pow.f64 (/.f64 (*.f64 l #s(literal 2 binary64)) Om) #s(literal 2 binary64))) #s(literal -1 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) (pow.f64 (sin.f64 kx) #s(literal 2 binary64))) (pow.f64 (/.f64 (*.f64 l #s(literal 2 binary64)) Om) #s(literal 2 binary64))) #s(literal -1 binary64))))))))
((sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 ky) #s(literal 2 binary64)) Om) #s(literal -4 binary64)) l) (/.f64 l Om))))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) #s(approx (sqrt (* (/ 1 2) (/ (+ (* 2 (sqrt (- (* (+ (pow (sin ky) 2) (pow (sin kx) 2)) (pow (/ (* l 2) Om) 2)) -1))) 2) (* 2 (sqrt (- (* (+ (pow (sin ky) 2) (pow (sin kx) 2)) (pow (/ (* l 2) Om) 2)) -1)))))) #s(literal 1 binary64)) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 (/.f64 #s(approx (pow (sin ky) 2) (*.f64 (*.f64 ky ky) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/3 binary64) (*.f64 ky ky))))) Om) (/.f64 (*.f64 l l) Om)))))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (-.f64 #s(approx (* (* 1/4 (/ Om l)) (sqrt (/ 1 (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (*.f64 #s(literal 1/4 binary64) (/.f64 Om (*.f64 l (sin.f64 ky))))) #s(literal -1/2 binary64)))) #s(approx (sqrt (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (- 1/2 (* 1/2 (cos (* 2 ky)))))))))))) (-.f64 (sqrt.f64 #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 Om (sqrt.f64 #s(literal 1/2 binary64))) l)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 (sin.f64 kx) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) ky))))))))))
((sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal -2 binary64) ky)) #s(literal 1/2 binary64))) Om) #s(literal -4 binary64)) l) (/.f64 l Om))))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (-.f64 #s(approx (* (* 1/4 (/ Om l)) (sqrt (/ 1 (+ (pow (sin ky) 2) (pow (sin kx) 2))))) (*.f64 #s(literal 1/4 binary64) (/.f64 Om #s(approx (* l (sin ky)) (*.f64 ky l))))) #s(literal -1/2 binary64)))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) #s(approx (* (/ (pow (sin ky) 2) Om) (/ (* l l) Om)) (/.f64 (*.f64 (*.f64 ky ky) (*.f64 l l)) (*.f64 Om Om))))))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(approx (pow (sin ky) 2) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 ky ky)) #s(literal -1 binary64)) ky) ky)) (/.f64 (*.f64 l l) (*.f64 Om Om))) #s(literal -4 binary64))))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (sqrt.f64 #s(approx (* (/ 1 2) (+ 1 (/ 1 (sqrt (+ 1 (* (pow (/ (* 2 l) Om) 2) (+ (pow (sin kx) 2) (pow (sin ky) 2)))))))) (*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (/.f64 #s(approx (pow (sin ky) 2) (*.f64 (*.f64 ky ky) (+.f64 (*.f64 (*.f64 ky ky) (-.f64 (*.f64 (*.f64 ky ky) (+.f64 (*.f64 #s(literal -1/315 binary64) (*.f64 ky ky)) #s(literal 2/45 binary64))) #s(literal 1/3 binary64))) #s(literal 1 binary64)))) Om) #s(literal -4 binary64)) l) (/.f64 l Om))))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))))
((asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (pow.f64 (/.f64 t l) #s(literal 2 binary64))))))))
((asin.f64 (*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (/.f64 t l) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) #s(literal 1/4 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (/.f64 t l) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64))) #s(literal 1/4 binary64)))) (asin.f64 (sqrt.f64 #s(approx (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64)))))) (asin.f64 (sqrt.f64 #s(approx (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 l l)) t) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64))) t))))) (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 (/.f64 t l) t) l)))))) (asin.f64 #s(approx (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2))))) (*.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64)))) (+.f64 (/.f64 (sqrt.f64 #s(literal 1/2 binary64)) t) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 l l)) (*.f64 (pow.f64 t #s(literal 3 binary64)) (sqrt.f64 #s(literal 1/2 binary64)))))) l))))
((asin.f64 (sqrt.f64 (/.f64 #s(approx (- 1 (pow (/ Om Omc) 2)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (pow.f64 (/.f64 t l) #s(literal 2 binary64))))))) (asin.f64 (sqrt.f64 #s(approx (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))) #s(approx (- 1 (pow (/ Om Omc) 2)) #s(literal 1 binary64))))) (asin.f64 (sqrt.f64 #s(approx (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 l l)) t) (/.f64 #s(approx (- 1 (pow (/ Om Omc) 2)) #s(literal 1 binary64)) t))))) (asin.f64 #s(approx (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2))))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) l) t) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64))))))) (asin.f64 #s(approx (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2))))) (*.f64 #s(approx (* (sqrt (- 1 (pow (/ Om Omc) 2))) (+ (/ (sqrt 1/2) t) (/ (* -1/8 (* l l)) (* (pow t 3) (sqrt 1/2))))) (/.f64 (+.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) (*.f64 t t)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64))))) (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 l l) (sqrt.f64 #s(literal 1/2 binary64)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 Om Omc) #s(literal 2 binary64)))))) (pow.f64 t #s(literal 3 binary64)))) l))))
((asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 Om Omc) (/.f64 Om Omc))) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 (/.f64 t l) t) l)))))) (asin.f64 #s(approx (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2))))) #s(approx (* (/ (* (sqrt 1/2) l) t) (sqrt (- 1 (pow (/ Om Omc) 2)))) (*.f64 l (/.f64 (sqrt.f64 #s(literal 1/2 binary64)) t))))) (asin.f64 (sqrt.f64 #s(approx (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2)))) #s(approx (* (/ (* 1/2 (* l l)) t) (/ (- 1 (pow (/ Om Omc) 2)) t)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) l) t) (/.f64 l t)))))) (asin.f64 #s(approx (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2))))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) l) t) (sqrt.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 Om Om) (*.f64 Omc Omc))))))) (asin.f64 #s(approx (sqrt (/ (- 1 (pow (/ Om Omc) 2)) (+ 1 (* 2 (pow (/ t l) 2))))) (*.f64 (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) l) (/.f64 (sin.f64 (acos.f64 (/.f64 Om Omc))) t)))))
((sqrt.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) n) U) (-.f64 (-.f64 t (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 l l) Om))) (*.f64 (*.f64 n (pow.f64 (/.f64 l Om) #s(literal 2 binary64))) (-.f64 U U*))))))
((sqrt.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) n) U) #s(approx (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*))) (+.f64 (*.f64 (*.f64 (neg.f64 l) l) (+.f64 (*.f64 (/.f64 (-.f64 U U*) Om) (/.f64 n Om)) (/.f64 #s(literal 2 binary64) Om))) t)))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (*.f64 (*.f64 n t) U) #s(literal 2 binary64)))) #s(approx (sqrt (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*))))) (*.f64 (*.f64 (neg.f64 l) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1 binary64)) n) Om)) (sqrt.f64 (*.f64 U* U)))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (*.f64 #s(literal -2 binary64) U) (*.f64 (*.f64 (*.f64 l l) n) (+.f64 (*.f64 (/.f64 (-.f64 U U*) Om) (/.f64 n Om)) (/.f64 #s(literal 2 binary64) Om)))))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (+.f64 (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) U) l) (/.f64 (*.f64 n t) l)) (*.f64 (*.f64 (*.f64 U n) (+.f64 (*.f64 (/.f64 (-.f64 U U*) Om) (/.f64 n Om)) (/.f64 #s(literal 2 binary64) Om))) #s(literal -2 binary64))) (*.f64 l l)))))
(#s(approx (sqrt (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*))))) (*.f64 (sqrt.f64 (*.f64 (*.f64 n U) (-.f64 t (-.f64 (*.f64 (neg.f64 U*) (*.f64 (*.f64 l (/.f64 l Om)) (/.f64 n Om))) (*.f64 (*.f64 l (/.f64 l Om)) #s(literal -2 binary64)))))) (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (*.f64 (*.f64 t U) n) #s(literal 2 binary64)))) #s(approx (sqrt (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*))))) (*.f64 (*.f64 (sqrt.f64 (*.f64 U* U)) (neg.f64 l)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 n Om)))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (*.f64 #s(literal -2 binary64) U) #s(approx (* (* (* l l) n) (+ (* (/ (- U U*) Om) (/ n Om)) (/ 2 Om))) (*.f64 (neg.f64 U*) (*.f64 (/.f64 (*.f64 n n) Om) (*.f64 l (/.f64 l Om)))))))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (*.f64 #s(literal -2 binary64) U) #s(approx (* (* (* l l) n) (+ (* (/ (- U U*) Om) (/ n Om)) (/ 2 Om))) (*.f64 (-.f64 (*.f64 (*.f64 n (/.f64 (-.f64 U U*) Om)) (*.f64 l (/.f64 l Om))) (*.f64 (*.f64 l (/.f64 l Om)) #s(literal -2 binary64))) n))))))
(#s(approx (sqrt (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*))))) (*.f64 (sqrt.f64 (*.f64 (*.f64 n U) (-.f64 t #s(approx (- (* (neg U*) (* (* l (/ l Om)) (/ n Om))) (* (* l (/ l Om)) -2)) (*.f64 (*.f64 (/.f64 l Om) l) #s(literal 2 binary64)))))) (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 U (*.f64 t (*.f64 #s(literal 2 binary64) n))))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (/.f64 (*.f64 (*.f64 U* U) (*.f64 (*.f64 n l) (*.f64 n l))) (*.f64 Om Om)) #s(literal 2 binary64)))) (sqrt.f64 #s(approx (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*)))) (*.f64 (*.f64 #s(literal -2 binary64) U) (*.f64 l (*.f64 (*.f64 l n) (/.f64 (+.f64 #s(literal 2 binary64) (*.f64 n (/.f64 (-.f64 U U*) Om))) Om)))))) #s(approx (sqrt (* (* (* 2 n) U) (- (- t (* 2 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2)) (- U U*))))) (*.f64 (*.f64 (sqrt.f64 n) (sqrt.f64 (*.f64 (-.f64 (+.f64 t (*.f64 (*.f64 U* (/.f64 n Om)) (*.f64 (/.f64 l Om) l))) (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 l Om) l))) U))) (sqrt.f64 #s(literal 2 binary64)))))
((/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (/.f64 (pow.f64 t #s(literal 3 binary64)) (*.f64 l l)) (sin.f64 k)) (tan.f64 k)) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 k t) #s(literal 2 binary64))) #s(literal 1 binary64)))))
(#s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (*.f64 (/.f64 (*.f64 l l) (*.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 k) #s(literal 2 binary64)) t) k) k)) (*.f64 #s(literal 2 binary64) (cos.f64 k)))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (*.f64 (/.f64 l (*.f64 (pow.f64 k #s(literal 4 binary64)) t)) (*.f64 #s(literal 2 binary64) l))) (/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1)) (*.f64 (*.f64 (+.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 k k)) #s(literal 1 binary64)) (/.f64 t (*.f64 l l))) (pow.f64 k #s(literal 4 binary64))))) (/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1)) (*.f64 (/.f64 (*.f64 (*.f64 k k) t) (cos.f64 k)) (/.f64 (pow.f64 (sin.f64 k) #s(literal 2 binary64)) (*.f64 l l))))) (/.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (/.f64 k t) #s(literal 2 binary64)) #s(literal 0 binary64))) (*.f64 (tan.f64 k) (*.f64 (/.f64 (pow.f64 t #s(literal 3 binary64)) l) (/.f64 (sin.f64 k) l)))))
(#s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (*.f64 (*.f64 (/.f64 l (*.f64 (*.f64 (pow.f64 (sin.f64 k) #s(literal 2 binary64)) t) k)) (/.f64 l k)) (*.f64 (cos.f64 k) #s(literal 2 binary64)))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (/.f64 (*.f64 l (*.f64 l #s(literal 2 binary64))) (*.f64 (pow.f64 k #s(literal 4 binary64)) t))) (/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1)) (*.f64 (/.f64 (*.f64 (*.f64 k k) t) (cos.f64 k)) (/.f64 #s(approx (pow (sin k) 2) (*.f64 k k)) (*.f64 l l))))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (*.f64 #s(approx (/ (* l l) (* (* (* (pow (sin k) 2) t) k) k)) (/.f64 (/.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 l l)) (*.f64 k k)) (*.f64 l l)) t) (pow.f64 k #s(literal 4 binary64)))) (*.f64 #s(literal 2 binary64) (cos.f64 k)))) (/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1)) (*.f64 (/.f64 (*.f64 k (*.f64 k t)) (cos.f64 k)) (/.f64 (pow.f64 (sin.f64 k) #s(literal 2 binary64)) (*.f64 l l))))))
(#s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (/.f64 (*.f64 (/.f64 l (*.f64 (pow.f64 (sin.f64 k) #s(literal 2 binary64)) t)) (*.f64 (*.f64 (/.f64 l k) #s(literal 2 binary64)) (cos.f64 k))) k)) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (/.f64 (*.f64 l (*.f64 l #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 k t) k) (*.f64 k k)))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (*.f64 (/.f64 (*.f64 l l) (*.f64 (*.f64 (*.f64 #s(approx (pow (sin k) 2) (*.f64 k k)) t) k) k)) (*.f64 #s(literal 2 binary64) (cos.f64 k)))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (*.f64 #s(approx (/ (* l l) (* (* (* (pow (sin k) 2) t) k) k)) (*.f64 l (/.f64 l (*.f64 (pow.f64 k #s(literal 4 binary64)) t)))) (*.f64 #s(literal 2 binary64) (cos.f64 k)))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (- (+ 1 (pow (/ k t) 2)) 1))) (*.f64 (*.f64 (cos.f64 k) #s(literal 2 binary64)) (*.f64 (/.f64 l (*.f64 (*.f64 k k) t)) (/.f64 l (pow.f64 (sin.f64 k) #s(literal 2 binary64)))))))
((/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (/.f64 (pow.f64 t #s(literal 3 binary64)) (*.f64 l l)) (sin.f64 k)) (tan.f64 k)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 k t) #s(literal 2 binary64))) #s(literal 1 binary64)))))
((/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1)) (*.f64 (/.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 k) #s(literal 2 binary64)) k) k) (*.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 k) #s(literal 2 binary64)) t) t) #s(literal 2 binary64))) (*.f64 (*.f64 (cos.f64 k) l) l)) t))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1))) (*.f64 (/.f64 l (pow.f64 t #s(literal 3 binary64))) (/.f64 l (*.f64 k k)))) (/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1)) (*.f64 (/.f64 (+.f64 (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 t t)) #s(literal -1/3 binary64)) (pow.f64 t #s(literal 3 binary64))) (*.f64 k k)) (*.f64 (pow.f64 t #s(literal 3 binary64)) #s(literal 2 binary64))) (*.f64 l l)) (*.f64 k k)))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(approx (* (/ (pow t 3) (* l l)) (sin k)) (*.f64 (/.f64 k l) (/.f64 (pow.f64 t #s(literal 3 binary64)) l))) (tan.f64 k)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 k t) #s(literal 2 binary64))) #s(literal 1 binary64)))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 t #s(literal 3 binary64)) (/.f64 (sin.f64 k) (*.f64 l l))) (tan.f64 k)) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 k t) #s(literal 2 binary64))) #s(literal 1 binary64)))))
((/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1)) (/.f64 (*.f64 (/.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 k) t) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 k) k) #s(literal 2 binary64))) (*.f64 (cos.f64 k) l)) t) l))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1))) (*.f64 (/.f64 l (*.f64 (*.f64 t t) t)) (/.f64 l (*.f64 k k)))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1))) (/.f64 (*.f64 (/.f64 l k) l) (*.f64 (pow.f64 t #s(literal 3 binary64)) k))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(approx (* (/ (pow t 3) (* l l)) (sin k)) (*.f64 (/.f64 k l) (/.f64 (pow.f64 t #s(literal 3 binary64)) l))) (tan.f64 k)) #s(approx (+ (+ 1 (pow (/ k t) 2)) 1) (/.f64 (*.f64 k k) (*.f64 t t))))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 t t) (*.f64 t (*.f64 (/.f64 (/.f64 (sin.f64 k) l) l) (tan.f64 k)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 k t) #s(literal 2 binary64))) #s(literal 1 binary64)))))
((/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1)) (/.f64 (*.f64 (/.f64 (+.f64 (*.f64 #s(approx (pow (* (sin k) t) 2) (*.f64 (*.f64 t k) (*.f64 t k))) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 k) k) #s(literal 2 binary64))) (*.f64 (cos.f64 k) l)) t) l))) #s(approx (/ 2 (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1))) (/.f64 (*.f64 (/.f64 l k) l) (*.f64 (*.f64 k (*.f64 t t)) t))) (/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1)) (*.f64 #s(approx (/ (+ (* (* (pow (sin k) 2) k) k) (* (* (* (pow (sin k) 2) t) t) 2)) (* (* (cos k) l) l)) (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 t t)) #s(literal 1 binary64)) (*.f64 l l)) (/.f64 (*.f64 t t) (*.f64 l l))) (*.f64 k k)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 t t) (*.f64 l l)))) (*.f64 k k))) t))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 t t) (*.f64 t (*.f64 (/.f64 (/.f64 (sin.f64 k) l) l) (tan.f64 k)))) #s(approx (+ (+ 1 (pow (/ k t) 2)) 1) #s(literal 2 binary64)))) (/.f64 #s(literal 2 binary64) #s(approx (* (* (* (/ (pow t 3) (* l l)) (sin k)) (tan k)) (+ (+ 1 (pow (/ k t) 2)) 1)) (/.f64 #s(approx (* (/ (+ (* (pow (* (sin k) t) 2) 2) (pow (* (sin k) k) 2)) (* (cos k) l)) t) (/.f64 (*.f64 (*.f64 (*.f64 k k) t) (pow.f64 (sin.f64 k) #s(literal 2 binary64))) (*.f64 (cos.f64 k) l))) l))))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 (*.f64 c a) b) b) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+.f64 (*.f64 (/.f64 (+.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 1 binary64)) b) c) (/.f64 (neg.f64 b) a))))
((-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 #s(literal 4 binary64) a)))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (- (/ (* c a) b) b) a) (/.f64 c b))) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* (* a 4) c)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* a 4) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b))) b)) (/.f64 (-.f64 (*.f64 b b) (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (*.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (-.f64 (neg.f64 b) (*.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 #s(literal 4 binary64) a))) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 #s(literal 4 binary64) a))) #s(literal 1/4 binary64)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (* b b) (- (* b b) (* (* c a) 4))) (* (+ (sqrt (- (* b b) (* (* c a) 4))) (neg b)) (* 2 a))) (/.f64 (neg.f64 b) a)) (/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* (* a 4) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (*.f64 (*.f64 c c) (/.f64 a (*.f64 b b)))) b)) (/.f64 #s(approx (- (* b b) (- (* b b) (* (* c a) 4))) (*.f64 (*.f64 c a) #s(literal 4 binary64))) (*.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)))
((+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b))) b)) (/.f64 (/.f64 (-.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) (*.f64 b b)) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)))
((+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (/ (- (- (* b b) (* c (* a 4))) (* b b)) (- (sqrt (- (* b b) (* c (* a 4)))) (neg b))) (* 2 a)) (/.f64 (neg.f64 b) a)) (/.f64 #s(approx (/ (- (- (* b b) (* c (* a 4))) (* b b)) (- (sqrt (- (* b b) (* c (* a 4)))) (neg b))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (/.f64 (*.f64 (*.f64 c c) a) (*.f64 b b))) b)) (/.f64 (-.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 b b)) (*.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (/.f64 #s(approx (- (- (* b b) (* c (* a 4))) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (+ (/ (/ (neg b) a) 2) (/ (sqrt (- (* b b) (* c (* a 4)))) (* 2 a))) (*.f64 (/.f64 b a) #s(literal 0 binary64))) #s(approx (/ (/ (- (- (* b b) (* c (* a 4))) (* b b)) (- (sqrt (- (* b b) (* c (* a 4)))) (neg b))) (* 2 a)) (*.f64 (+.f64 (/.f64 (neg.f64 c) (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))) (+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) #s(approx (/ (sqrt (- (* b b) (* c (* a 4)))) (* 2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (/.f64 (/.f64 (-.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a)) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) (neg.f64 b))))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))) #s(literal 11/40 binary64)))))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64)) #s(approx (pow (- x 31/40) 2) (-.f64 (*.f64 (-.f64 x #s(literal 31/20 binary64)) x) #s(literal -961/1600 binary64))))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))) #s(literal 11/40 binary64)))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y) #s(literal 11/40 binary64)))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64)) (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))) #s(literal 11/40 binary64)))))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64)) #s(approx (pow (- x 31/40) 2) (-.f64 (*.f64 (-.f64 x #s(literal 31/20 binary64)) x) #s(literal -961/1600 binary64))))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y) #s(literal 11/40 binary64)))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y))) (-.f64 #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y) #s(literal 11/40 binary64)))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64)) #s(approx (pow (+ (pow (- x 31/40) 2) (pow (- y 7/10) 2)) 1/4) (-.f64 (sqrt.f64 x) (*.f64 #s(literal 31/80 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 11/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 11/40 binary64)) #s(literal 2 binary64)))) #s(literal 11/40 binary64)))))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 #s(approx (pow (- y 7/10) 2) #s(literal 49/100 binary64)) (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y))) (-.f64 #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y) #s(literal 11/40 binary64)))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64)) #s(approx (pow (- x 31/40) 2) #s(literal 961/1600 binary64)))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y))) (-.f64 #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y) #s(literal 11/40 binary64)))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64)) #s(approx (pow (- x 31/40) 2) (-.f64 (*.f64 (-.f64 x #s(literal 31/20 binary64)) x) #s(literal -961/1600 binary64))))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y))) (-.f64 #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y) #s(literal 11/40 binary64)))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (neg.f64 y)) (-.f64 x #s(literal 33/40 binary64))) (-.f64 #s(literal 29/40 binary64) x)) (-.f64 (*.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64)) (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 31/40 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 y #s(literal 7/10 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64))) #s(literal 3/40 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 11/40 binary64))) (-.f64 x #s(literal 11/20 binary64))) (-.f64 #s(literal 9/20 binary64) x))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 y) (-.f64 y #s(literal 1 binary64))) (-.f64 x #s(literal 1/10 binary64))) (neg.f64 x))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 y #s(literal 11/20 binary64)) (-.f64 x #s(literal 11/20 binary64))) (neg.f64 x)) (-.f64 #s(literal 11/40 binary64) y)) (-.f64 #s(literal 7/40 binary64) #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y))) (-.f64 #s(approx (sqrt (+ (pow (- y 11/40) 2) (pow (- x 11/40) 2))) y) #s(literal 11/40 binary64)))))
((*.f64 (+.f64 x y) z))
((*.f64 #s(approx (+ x y) x) z) (*.f64 #s(approx (+ x y) y) z) (+.f64 (*.f64 z y) (*.f64 z x)))
((/.f64 (+.f64 x y) #s(literal 10 binary64)))
(#s(approx (/ (+ x y) 10) (*.f64 (+.f64 y x) #s(literal 1/10 binary64))) #s(approx (/ (+ x y) 10) (*.f64 #s(literal 1/10 binary64) x)) #s(approx (/ (+ x y) 10) (*.f64 #s(literal 1/10 binary64) y)) (/.f64 #s(approx (+ x y) x) #s(literal 10 binary64)) (/.f64 #s(approx (+ x y) y) #s(literal 10 binary64)))
(#s(approx (/ (+ x y) 10) (-.f64 (*.f64 #s(literal 1/10 binary64) y) (*.f64 #s(literal -1/10 binary64) x))))
((-.f64 x (/.f64 (log.f64 (+.f64 (-.f64 #s(literal 1 binary64) y) (*.f64 y (exp.f64 z)))) t)))
((-.f64 x (/.f64 #s(approx (log (+ (- 1 y) (* y (exp z)))) (*.f64 (-.f64 (exp.f64 z) #s(literal 1 binary64)) y)) t)) #s(approx (- x (/ (log (+ (- 1 y) (* y (exp z)))) t)) x) (-.f64 x (/.f64 #s(approx (log (+ (- 1 y) (* y (exp z)))) (*.f64 (-.f64 y (*.f64 (*.f64 (-.f64 y (*.f64 y y)) #s(literal -1/2 binary64)) z)) z)) t)) (-.f64 x (/.f64 #s(approx (log (+ (- 1 y) (* y (exp z)))) (*.f64 (-.f64 y (*.f64 (+.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) z) (-.f64 (+.f64 (*.f64 #s(literal -3 binary64) (*.f64 y y)) y) (*.f64 #s(literal -2 binary64) (pow.f64 y #s(literal 3 binary64))))) (*.f64 (-.f64 y (*.f64 y y)) #s(literal -1/2 binary64))) z)) z)) t)) #s(approx (- x (/ (log (+ (- 1 y) (* y (exp z)))) t)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 (-.f64 (+.f64 (*.f64 (exp.f64 z) y) #s(literal 1 binary64)) y)) (*.f64 t x))) x)))
(#s(approx (- x (/ (log (+ (- 1 y) (* y (exp z)))) t)) (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (/ (log (- (+ (* (exp z) y) 1) y)) (* t x)) (/.f64 (*.f64 y (/.f64 (-.f64 (exp.f64 z) #s(literal 1 binary64)) t)) x))) x)) (-.f64 x (/.f64 #s(approx (log (+ (- 1 y) (* y (exp z)))) (*.f64 #s(approx (- (exp z) 1) z) y)) t)) (-.f64 x (/.f64 #s(approx (log (+ (- 1 y) (* y (exp z)))) (*.f64 (-.f64 y #s(approx (* (* (- y (* y y)) -1/2) z) (*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 z (*.f64 z y))) y))) z)) t)) (-.f64 x (/.f64 (log.f64 #s(approx (+ (- 1 y) (* y (exp z))) (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 z y) #s(literal 1/2 binary64)) y) z) #s(literal 1 binary64)))) t)) #s(approx (- x (/ (log (+ (- 1 y) (* y (exp z)))) t)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (-.f64 y (*.f64 (exp.f64 z) y)) #s(literal 2 binary64)))) (log.f64 (+.f64 #s(literal 1 binary64) (-.f64 y (*.f64 (exp.f64 z) y))))) (*.f64 t x))) x)))
((-.f64 x #s(approx (/ (log (+ (- 1 y) (* y (exp z)))) t) (*.f64 (/.f64 (+.f64 (-.f64 (exp.f64 z) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 z) #s(literal 1 binary64)) #s(literal 2 binary64)) y) #s(literal -1/2 binary64))) t) y))) #s(approx (- x (/ (log (+ (- 1 y) (* y (exp z)))) t)) (+.f64 (*.f64 (neg.f64 y) (/.f64 z t)) x)) (-.f64 x (/.f64 #s(approx (log (+ (- 1 y) (* y (exp z)))) (*.f64 (-.f64 y (*.f64 #s(approx (+ (* (* -1/6 z) (- (+ (* -3 (* y y)) y) (* -2 (pow y 3)))) (* (- y (* y y)) -1/2)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) z) #s(literal 1/2 binary64)) y)) z)) z)) t)) #s(approx (- x (/ (log (+ (- 1 y) (* y (exp z)))) t)) (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (/ (log (- (+ (* (exp z) y) 1) y)) (* t x)) (/.f64 (*.f64 (-.f64 (exp.f64 z) #s(literal 1 binary64)) y) (*.f64 t x)))) x)) #s(approx (- x (/ (log (+ (- 1 y) (* y (exp z)))) t)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (log.f64 #s(approx (- (+ (* (exp z) y) 1) y) (*.f64 (-.f64 (exp.f64 z) #s(literal 1 binary64)) y))) (*.f64 t x))) x)))
((*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 x x) y)))
(#s(approx (* 1/2 (- (* x x) y)) (*.f64 #s(literal -1/2 binary64) y)) (*.f64 #s(literal 1/2 binary64) #s(approx (- (* x x) y) (*.f64 x x))) (*.f64 #s(literal 1/2 binary64) #s(approx (- (* x x) y) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 y (*.f64 x x))) x) x))) (*.f64 #s(literal 1/2 binary64) #s(approx (- (* x x) y) (*.f64 (-.f64 (/.f64 (*.f64 x x) y) #s(literal 1 binary64)) y))))
((*.f64 #s(literal 1/2 binary64) #s(approx (- (* x x) y) (*.f64 #s(approx (- (/ (* x x) y) 1) (/.f64 (*.f64 x x) y)) y))))
((+.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 y (+.f64 (-.f64 #s(literal 1 binary64) z) (log.f64 z)))))
(#s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (-.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) x) y) (*.f64 (-.f64 z (log.f64 z)) y))) #s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (*.f64 #s(literal 1/2 binary64) x)) (+.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 y #s(approx (+ (- 1 z) (log z)) (neg.f64 z)))) (+.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 y #s(approx (+ (- 1 z) (log z)) (+.f64 (log.f64 z) #s(literal 1 binary64))))) (+.f64 (*.f64 x #s(literal 1/2 binary64)) #s(approx (* y (+ (- 1 z) (log z))) (*.f64 (-.f64 (/.f64 (*.f64 (+.f64 (log.f64 z) #s(literal 1 binary64)) y) z) y) z))))
(#s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (-.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) x) y) (*.f64 (/.f64 (-.f64 (*.f64 z z) (pow.f64 (log.f64 z) #s(literal 2 binary64))) (+.f64 (log.f64 z) z)) y))) #s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (*.f64 (neg.f64 y) z)) #s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (-.f64 #s(approx (+ (* 1/2 x) y) y) (*.f64 (-.f64 z (log.f64 z)) y))) (+.f64 (*.f64 x #s(literal 1/2 binary64)) #s(approx (* y (+ (- 1 z) (log z))) (*.f64 #s(approx (- (/ (* (+ (log z) 1) y) z) y) (*.f64 (/.f64 y z) (-.f64 (log.f64 z) #s(literal -1 binary64)))) z))) #s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (-.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) x) y) (/.f64 (*.f64 (-.f64 (*.f64 z z) (pow.f64 (log.f64 z) #s(literal 2 binary64))) y) (+.f64 (log.f64 z) z)))))
((+.f64 (*.f64 x #s(literal 1/2 binary64)) #s(approx (* y (+ (- 1 z) (log z))) (*.f64 (-.f64 (/.f64 (-.f64 (log.f64 z) #s(literal -1 binary64)) z) #s(literal 1 binary64)) (*.f64 y z)))) #s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (-.f64 #s(approx (+ (* 1/2 x) y) y) (*.f64 #s(approx (- z (log z)) z) y))) #s(approx (- (+ (* 1/2 x) y) (* (- z (log z)) y)) (*.f64 (-.f64 (-.f64 (log.f64 z) #s(literal -1 binary64)) z) y)) #s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (*.f64 (+.f64 (*.f64 (/.f64 y x) (-.f64 (+.f64 (log.f64 z) #s(literal 1 binary64)) z)) #s(literal 1/2 binary64)) x)) #s(approx (+ (* x 1/2) (* y (+ (- 1 z) (log z)))) (-.f64 #s(approx (+ (* 1/2 x) y) y) (/.f64 (*.f64 (-.f64 (*.f64 z z) (pow.f64 (log.f64 z) #s(literal 2 binary64))) y) (+.f64 (log.f64 z) z)))))
((*.f64 (*.f64 x #s(literal 1/2 binary64)) x))
((+.f64 x (*.f64 y (-.f64 z x))))
((+.f64 x (*.f64 y #s(approx (- z x) z))) #s(approx (+ x (* y (- z x))) x) #s(approx (+ x (* y (- z x))) (*.f64 z y)) #s(approx (+ x (* y (- z x))) (*.f64 (-.f64 #s(literal 1 binary64) y) x)) (+.f64 x (*.f64 y #s(approx (- z x) (neg.f64 x)))))
(#s(approx (+ x (* y (- z x))) (*.f64 #s(approx (- 1 y) (neg.f64 y)) x)) #s(approx (+ x (* y (- z x))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 y y)) x) (+.f64 #s(literal 1 binary64) y))))
(#s(approx (+ x (* y (- z x))) (*.f64 (-.f64 (-.f64 (/.f64 (*.f64 z y) x) y) #s(literal -1 binary64)) x)))
((+.f64 x (*.f64 (*.f64 y z) (-.f64 (tanh.f64 (/.f64 t y)) (tanh.f64 (/.f64 x y))))))
((+.f64 x (*.f64 (*.f64 y z) #s(approx (- (tanh (/ t y)) (tanh (/ x y))) (tanh.f64 (/.f64 t y))))) #s(approx (+ x (* (* y z) (- (tanh (/ t y)) (tanh (/ x y))))) x) (+.f64 x (*.f64 (*.f64 y z) #s(approx (- (tanh (/ t y)) (tanh (/ x y))) (/.f64 (-.f64 t x) y)))) (+.f64 x #s(approx (* (* y z) (- (tanh (/ t y)) (tanh (/ x y)))) (-.f64 (*.f64 (tanh.f64 (/.f64 t y)) (*.f64 z y)) (*.f64 z x)))) #s(approx (+ x (* (* y z) (- (tanh (/ t y)) (tanh (/ x y))))) (*.f64 (+.f64 (/.f64 x z) (*.f64 (+.f64 (-.f64 (tanh.f64 (/.f64 t y)) (/.f64 (exp.f64 (/.f64 x y)) (+.f64 (exp.f64 (/.f64 (neg.f64 x) y)) (exp.f64 (/.f64 x y))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x y)) #s(literal 1 binary64)))) y)) z)))
((+.f64 x #s(approx (* (* y z) (- (tanh (/ t y)) (tanh (/ x y)))) #s(approx (- (* (tanh (/ t y)) (* z y)) (* z x)) (*.f64 (-.f64 (*.f64 (tanh.f64 (/.f64 t y)) y) x) z)))) (+.f64 x #s(approx (* (* y z) (- (tanh (/ t y)) (tanh (/ x y)))) #s(approx (- (* (tanh (/ t y)) (* z y)) (* z x)) (*.f64 (neg.f64 x) z)))) (+.f64 x (*.f64 (*.f64 y z) #s(approx (- (tanh (/ t y)) (tanh (/ x y))) #s(approx (/ (- t x) y) (/.f64 t y))))) (+.f64 x (*.f64 (*.f64 y z) #s(approx (- (tanh (/ t y)) (tanh (/ x y))) #s(approx (/ (- t x) y) (*.f64 (-.f64 (/.f64 t (*.f64 y x)) (/.f64 #s(literal 1 binary64) y)) x))))) #s(approx (+ x (* (* y z) (- (tanh (/ t y)) (tanh (/ x y))))) (*.f64 (*.f64 z y) (tanh.f64 (/.f64 t y)))))
(#s(approx (+ x (* (* y z) (- (tanh (/ t y)) (tanh (/ x y))))) (*.f64 (+.f64 (/.f64 x z) (*.f64 #s(approx (+ (- (tanh (/ t y)) (/ (exp (/ x y)) (+ (exp (/ (neg x) y)) (exp (/ x y))))) (/ 1 (+ (pow (exp 2) (/ x y)) 1))) (tanh.f64 (/.f64 t y))) y)) z)) #s(approx (+ x (* (* y z) (- (tanh (/ t y)) (tanh (/ x y))))) #s(approx (* (* z y) (tanh (/ t y))) (*.f64 t z))) (+.f64 x #s(approx (* (* y z) (- (tanh (/ t y)) (tanh (/ x y)))) (-.f64 #s(approx (* (tanh (/ t y)) (* z y)) (*.f64 t z)) (*.f64 z x)))) (+.f64 x (*.f64 (*.f64 y z) #s(approx (- (tanh (/ t y)) (tanh (/ x y))) #s(approx (/ (- t x) y) (/.f64 (neg.f64 x) y))))) #s(approx (+ x (* (* y z) (- (tanh (/ t y)) (tanh (/ x y))))) #s(approx (* (* z y) (tanh (/ t y))) (*.f64 (+.f64 (*.f64 (/.f64 #s(literal -1/3 binary64) y) (/.f64 (*.f64 (*.f64 t t) z) y)) z) t))))
((+.f64 x (*.f64 (*.f64 y z) z)))
(#s(approx (+ x (* (* y z) z)) x) #s(approx (+ x (* (* y z) z)) (*.f64 (*.f64 z z) y)) (+.f64 x (*.f64 (sqrt.f64 (*.f64 (*.f64 z y) z)) (sqrt.f64 (*.f64 (*.f64 z y) z)))) (+.f64 x (*.f64 (*.f64 z z) y)))
(#s(approx (+ x (* (* y z) z)) (*.f64 (neg.f64 x) (-.f64 (*.f64 (*.f64 z (/.f64 (neg.f64 z) x)) y) #s(literal 1 binary64)))) #s(approx (+ x (* (* y z) z)) (*.f64 (*.f64 z y) z)) #s(approx (+ x (* (* y z) z)) (*.f64 (*.f64 (sqrt.f64 y) (fabs.f64 z)) (*.f64 (sqrt.f64 y) (fabs.f64 z)))) #s(approx (+ x (* (* y z) z)) (*.f64 (-.f64 (/.f64 (*.f64 (*.f64 z z) y) x) #s(literal -1 binary64)) x)))
(#s(approx (+ x (* (* y z) z)) (*.f64 (-.f64 (*.f64 z (/.f64 (*.f64 y z) x)) #s(literal -1 binary64)) x)) #s(approx (+ x (* (* y z) z)) (*.f64 #s(approx (- (/ (* (* z z) y) x) -1) (/.f64 (*.f64 (*.f64 z z) y) x)) x)) #s(approx (+ x (* (* y z) z)) (*.f64 (-.f64 (*.f64 y (/.f64 (*.f64 z z) x)) #s(literal -1 binary64)) x)) #s(approx (+ x (* (* y z) z)) (*.f64 (-.f64 (*.f64 (/.f64 y x) (*.f64 z z)) #s(literal -1 binary64)) x)) #s(approx (+ x (* (* y z) z)) (*.f64 (neg.f64 x) #s(approx (- (* (* z (/ (neg z) x)) y) 1) (*.f64 (*.f64 (/.f64 z x) y) (neg.f64 z))))))
((+.f64 x (/.f64 (-.f64 y x) z)))
((+.f64 x (/.f64 #s(approx (- y x) y) z)) #s(approx (+ x (/ (- y x) z)) x) #s(approx (+ x (/ (- y x) z)) (/.f64 y z)) #s(approx (+ x (/ (- y x) z)) (-.f64 x (/.f64 x z))) #s(approx (+ x (/ (- y x) z)) (/.f64 (-.f64 y x) z)))
(#s(approx (+ x (/ (- y x) z)) #s(approx (- x (/ x z)) (/.f64 (neg.f64 x) z))) (/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (/.f64 #s(approx (- y x) y) z) #s(literal 6 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(approx (- y x) y) z) x) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (- y x) y) z) #s(literal 4 binary64))) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(approx (- y x) y) z)))))
(#s(approx (+ x (/ (- y x) z)) (*.f64 (neg.f64 y) (-.f64 (neg.f64 (/.f64 (+.f64 (/.f64 (neg.f64 x) z) x) y)) (/.f64 #s(literal 1 binary64) z)))))
((-.f64 (/.f64 x (*.f64 y y)) #s(literal 3 binary64)))
((-.f64 (/.f64 (/.f64 x y) y) #s(literal 3 binary64)) #s(approx (- (/ x (* y y)) 3) #s(literal -3 binary64)) #s(approx (- (/ x (* y y)) 3) (/.f64 x (*.f64 y y))) #s(approx (- (/ x (* y y)) 3) (*.f64 (neg.f64 x) (-.f64 (/.f64 #s(literal 3 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 y y))))) (/.f64 (-.f64 (pow.f64 (/.f64 x (*.f64 y y)) #s(literal 2 binary64)) #s(literal 9 binary64)) (+.f64 #s(literal 3 binary64) (/.f64 x (*.f64 y y)))))
(#s(approx (- (/ x (* y y)) 3) (*.f64 (neg.f64 x) (-.f64 (/.f64 #s(literal 3 binary64) x) (/.f64 (/.f64 #s(literal 1 binary64) (neg.f64 y)) (neg.f64 y))))) #s(approx (/ (- (pow (/ x (* y y)) 2) 9) (+ 3 (/ x (* y y)))) (/.f64 (/.f64 x y) y)) #s(approx (- (/ x (* y y)) 3) (*.f64 (neg.f64 x) #s(approx (- (/ 3 x) (/ 1 (* y y))) (/.f64 #s(literal -1 binary64) (*.f64 y y))))) #s(approx (- (/ x (* y y)) 3) (*.f64 (neg.f64 x) (/.f64 (-.f64 (*.f64 (*.f64 y y) #s(literal 3 binary64)) x) (*.f64 (*.f64 y y) x)))) (/.f64 (-.f64 (/.f64 (*.f64 (/.f64 x y) x) (*.f64 y (*.f64 y y))) #s(literal 9 binary64)) (+.f64 #s(literal 3 binary64) (/.f64 x (*.f64 y y)))))
(#s(approx (- (/ x (* y y)) 3) (*.f64 (neg.f64 x) #s(approx (- (/ 3 x) (/ 1 (* y y))) (/.f64 (/.f64 #s(literal -1 binary64) y) y)))) #s(approx (- (/ x (* y y)) 3) (/.f64 (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 y y) #s(literal 3 binary64)) x) (neg.f64 x)) y) (*.f64 y x))) #s(approx (/ (- (pow (/ x (* y y)) 2) 9) (+ 3 (/ x (* y y)))) (*.f64 (pow.f64 (/.f64 (/.f64 x y) y) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (/.f64 x y) y) #s(literal 1/2 binary64)))) (/.f64 (-.f64 (/.f64 (/.f64 (*.f64 (/.f64 x y) x) y) (*.f64 y y)) #s(literal 9 binary64)) (+.f64 #s(literal 3 binary64) (/.f64 x (*.f64 y y)))))
((/.f64 (*.f64 (*.f64 x y) z) (sqrt.f64 (-.f64 (*.f64 z z) (*.f64 t a)))))
(#s(approx (/ (* (* x y) z) (sqrt (- (* z z) (* t a)))) (*.f64 y x)) (/.f64 (*.f64 (*.f64 x y) z) #s(approx (sqrt (- (* z z) (* t a))) z)) (*.f64 x (*.f64 y (/.f64 z (sqrt.f64 (-.f64 (*.f64 z z) (*.f64 a t)))))) (*.f64 y (*.f64 x (/.f64 z (sqrt.f64 (-.f64 (*.f64 z z) (*.f64 a t)))))) (*.f64 (/.f64 z (sqrt.f64 (-.f64 (*.f64 z z) (*.f64 a t)))) (*.f64 y x)))
((/.f64 (*.f64 (*.f64 x y) z) #s(approx (sqrt (- (* z z) (* t a))) (+.f64 (*.f64 (*.f64 (/.f64 t z) (/.f64 a z)) (*.f64 #s(literal -1/2 binary64) z)) z))) (*.f64 x (/.f64 (*.f64 z y) #s(approx (sqrt (- (* z z) (* t a))) z))) (/.f64 (*.f64 (*.f64 z y) x) #s(approx (sqrt (- (* z z) (* t a))) z)) (*.f64 (/.f64 z (sqrt.f64 #s(approx (- (* z z) (* a t)) (*.f64 (neg.f64 t) a)))) (*.f64 y x)) (*.f64 (/.f64 (*.f64 z y) (sqrt.f64 (-.f64 (*.f64 z z) (*.f64 a t)))) x))
((*.f64 (*.f64 x z) (/.f64 y #s(approx (sqrt (- (* z z) (* t a))) z))) (*.f64 y (*.f64 z (/.f64 x #s(approx (sqrt (- (* z z) (* t a))) z)))) (/.f64 (*.f64 (*.f64 z x) y) #s(approx (sqrt (- (* z z) (* t a))) z)) (*.f64 (*.f64 (/.f64 z (sqrt.f64 #s(approx (- (* z z) (* a t)) (*.f64 (neg.f64 t) a)))) x) y) (*.f64 x #s(approx (/ (* z y) (sqrt (- (* z z) (* t a)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 z z) (*.f64 a t)))) (*.f64 y z)))))
((-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y))
(#s(approx (- (- (* x (log y)) z) y) (*.f64 (-.f64 (-.f64 (/.f64 (*.f64 (log.f64 y) x) y) #s(literal 1 binary64)) (/.f64 z y)) y)) #s(approx (- (- (* x (log y)) z) y) (neg.f64 y)) (-.f64 #s(approx (- (* x (log y)) z) (neg.f64 z)) y) #s(approx (- (- (* x (log y)) z) y) (-.f64 (*.f64 (log.f64 y) x) z)) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (log.f64 y) x) z) #s(literal 2 binary64)) (*.f64 y y)) (+.f64 (-.f64 (*.f64 (log.f64 y) x) z) y)))
(#s(approx (- (- (* x (log y)) z) y) (*.f64 (-.f64 (-.f64 (*.f64 x (/.f64 (log.f64 y) y)) #s(literal 1 binary64)) (/.f64 z y)) y)) #s(approx (/ (- (pow (- (* (log y) x) z) 2) (* y y)) (+ (- (* (log y) x) z) y)) (neg.f64 z)) #s(approx (/ (- (pow (- (* (log y) x) z) 2) (* y y)) (+ (- (* (log y) x) z) y)) (*.f64 (log.f64 y) x)) #s(approx (- (- (* x (log y)) z) y) (*.f64 (-.f64 (-.f64 (*.f64 (/.f64 x y) (log.f64 y)) #s(literal 1 binary64)) (/.f64 z y)) y)) #s(approx (/ (- (pow (- (* (log y) x) z) 2) (* y y)) (+ (- (* (log y) x) z) y)) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 z (log.f64 y)) (/.f64 #s(literal -2 binary64) (-.f64 y z))) (/.f64 (*.f64 (*.f64 (+.f64 z y) (-.f64 z y)) (log.f64 y)) (pow.f64 (-.f64 y z) #s(literal 2 binary64)))) x) (/.f64 (*.f64 (+.f64 z y) (-.f64 z y)) (-.f64 y z)))))
(#s(approx (/ (- (pow (- (* (log y) x) z) 2) (* y y)) (+ (- (* (log y) x) z) y)) (*.f64 (-.f64 (log.f64 y) (/.f64 (+.f64 z y) x)) x)) #s(approx (- (- (* x (log y)) z) y) (*.f64 #s(approx (- (- (/ (* (log y) x) y) 1) (/ z y)) (/.f64 (neg.f64 z) y)) y)) #s(approx (- (- (* x (log y)) z) y) (*.f64 #s(approx (- (- (* (/ x y) (log y)) 1) (/ z y)) (*.f64 (/.f64 (log.f64 y) y) x)) y)) #s(approx (/ (- (pow (- (* (log y) x) z) 2) (* y y)) (+ (- (* (log y) x) z) y)) (*.f64 (-.f64 (-.f64 (*.f64 (*.f64 x (/.f64 (log.f64 y) z)) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (*.f64 (log.f64 y) x) y) z)) z)) #s(approx (/ (- (pow (- (* (log y) x) z) 2) (* y y)) (+ (- (* (log y) x) z) y)) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 z (log.f64 y)) (/.f64 #s(literal -2 binary64) (-.f64 y z))) (*.f64 (-.f64 z y) (*.f64 (+.f64 z y) (/.f64 (log.f64 y) (pow.f64 (-.f64 y z) #s(literal 2 binary64)))))) x) (/.f64 (*.f64 (+.f64 z y) (-.f64 z y)) (-.f64 y z)))))
((exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z)))
((exp.f64 #s(approx (- (+ x (* y (log y))) z) x)) (exp.f64 #s(approx (- (+ x (* y (log y))) z) (neg.f64 z))) (exp.f64 #s(approx (- (+ x (* y (log y))) z) (*.f64 (log.f64 y) y))))
((+.f64 (sinh.f64 #s(approx (- (+ x (* y (log y))) z) x)) (cosh.f64 #s(approx (- (+ x (* y (log y))) z) x))) (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 #s(approx (- (+ x (* y (log y))) z) x)))) (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 #s(approx (- (+ x (* y (log y))) z) (neg.f64 z))))))
((/.f64 #s(literal 1 binary64) (exp.f64 #s(approx (neg (- (+ x (* y (log y))) z)) z))))
((/.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 y (+.f64 #s(literal 1 binary64) (*.f64 z z)))))
((/.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 z z) #s(literal -1 binary64))) y) (/.f64 (/.f64 #s(literal 1 binary64) x) #s(approx (* y (+ 1 (* z z))) y)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (*.f64 z z) #s(literal -1 binary64)) y) x)) (/.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 y #s(approx (+ 1 (* z z)) (*.f64 z z)))) (/.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 z #s(literal 4 binary64))) y) (-.f64 #s(literal 1 binary64) (*.f64 z z)))))
((/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x (-.f64 (*.f64 z z) #s(literal -1 binary64))) y)) (/.f64 #s(literal 1 binary64) (*.f64 #s(approx (* y (+ 1 (* z z))) y) x)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) #s(approx (* y (+ 1 (* z z))) y))) (/.f64 #s(approx (/ (pow x -1) (- (* z z) -1)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 z z) x))) y) (/.f64 (pow.f64 (*.f64 y (-.f64 (*.f64 z z) #s(literal -1 binary64))) #s(literal -1 binary64)) x))
((/.f64 (/.f64 #s(literal 1 binary64) (*.f64 y (-.f64 (*.f64 z z) #s(literal -1 binary64)))) x) (/.f64 #s(approx (pow (* y (- (* z z) -1)) -1) (/.f64 #s(literal 1 binary64) y)) x) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(approx (- (* z z) -1) (*.f64 z z))) y)) (/.f64 #s(approx (/ (pow x -1) (- (* z z) -1)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 z x) z))) y) (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (pow.f64 z #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 y x)) (+.f64 (*.f64 z z) #s(literal -1 binary64)))))
((*.f64 x (log.f64 x)))
((*.f64 (*.f64 x y) (-.f64 #s(literal 1 binary64) y)))
((*.f64 (*.f64 (-.f64 #s(literal 1 binary64) y) x) y) #s(approx (* (* x y) (- 1 y)) (*.f64 y x)) #s(approx (* (* x y) (- 1 y)) (*.f64 (*.f64 (neg.f64 y) y) x)) (*.f64 (*.f64 x y) #s(approx (- 1 y) (neg.f64 y))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 y y)) (*.f64 y x)) (+.f64 #s(literal 1 binary64) y)))
((/.f64 (*.f64 #s(approx (- 1 (* y y)) (*.f64 (neg.f64 y) y)) (*.f64 y x)) (+.f64 #s(literal 1 binary64) y)) (/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 y y)) x) y) (-.f64 y #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 y y)) y) x) (+.f64 #s(literal 1 binary64) y)))
((/.f64 (*.f64 (*.f64 #s(approx (- 1 (* y y)) (*.f64 (neg.f64 y) y)) x) y) (+.f64 #s(literal 1 binary64) y)) (/.f64 (*.f64 (*.f64 #s(approx (- 1 (* y y)) (*.f64 (neg.f64 y) y)) y) x) (+.f64 #s(literal 1 binary64) y)))
((/.f64 (*.f64 x y) (*.f64 (*.f64 z z) (+.f64 z #s(literal 1 binary64)))))
((/.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 z #s(literal -1 binary64)) z)) (/.f64 (*.f64 x y) #s(approx (* (* z z) (+ z 1)) (*.f64 z z))) (*.f64 y (/.f64 x (*.f64 (*.f64 (-.f64 z #s(literal -1 binary64)) z) z))) (*.f64 (/.f64 y (*.f64 z z)) (/.f64 x (-.f64 z #s(literal -1 binary64)))) (*.f64 (/.f64 (/.f64 y (*.f64 z z)) (-.f64 z #s(literal -1 binary64))) x))
((/.f64 (/.f64 (/.f64 (*.f64 x y) z) z) (-.f64 z #s(literal -1 binary64))) (*.f64 y (/.f64 x (*.f64 #s(approx (* (- z -1) z) z) z))) #s(approx (/ (* x y) (* (* z z) (+ z 1))) (*.f64 (/.f64 x z) (/.f64 y z))) (*.f64 y #s(approx (/ x (* (* (- z -1) z) z)) (/.f64 (-.f64 (/.f64 x z) x) z))) (/.f64 (/.f64 (*.f64 y x) z) #s(approx (* (- z -1) z) (*.f64 z z))))
((*.f64 (/.f64 y (*.f64 z z)) (*.f64 (/.f64 x (-.f64 (*.f64 z z) #s(literal 1 binary64))) (-.f64 z #s(literal 1 binary64)))) (*.f64 y #s(approx (/ x (* (* (- z -1) z) z)) (/.f64 #s(approx (- (/ x z) x) (neg.f64 x)) z))) (*.f64 y (/.f64 x (*.f64 #s(approx (* (- z -1) z) (*.f64 z z)) z))) (/.f64 (/.f64 (*.f64 y x) #s(approx (* (- z -1) z) z)) z) (*.f64 x (/.f64 (/.f64 y z) #s(approx (* (- z -1) z) (*.f64 z z)))))
((+.f64 (-.f64 (-.f64 x (*.f64 (-.f64 y #s(literal 1 binary64)) z)) (*.f64 (-.f64 t #s(literal 1 binary64)) a)) (*.f64 (-.f64 (+.f64 y t) #s(literal 2 binary64)) b)))
((+.f64 (-.f64 (-.f64 x (*.f64 (-.f64 y #s(literal 1 binary64)) z)) #s(approx (* (- t 1) a) (-.f64 (*.f64 a t) a))) (*.f64 (-.f64 (+.f64 y t) #s(literal 2 binary64)) b)) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) x) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (*.f64 (-.f64 b a) t)) (+.f64 #s(approx (- (- x (* (- y 1) z)) (* (- t 1) a)) x) (*.f64 (-.f64 (+.f64 y t) #s(literal 2 binary64)) b)) (+.f64 #s(approx (- (- x (* (- y 1) z)) (* (- t 1) a)) (*.f64 (-.f64 #s(literal 1 binary64) t) a)) (*.f64 (-.f64 (+.f64 y t) #s(literal 2 binary64)) b)))
(#s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (*.f64 (-.f64 (+.f64 (/.f64 (-.f64 (+.f64 (+.f64 (*.f64 (-.f64 t #s(literal 2 binary64)) b) x) z) (*.f64 (-.f64 t #s(literal 1 binary64)) a)) y) b) z) y)) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (*.f64 #s(approx (- b a) b) t)) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (*.f64 (-.f64 b z) y)) (+.f64 #s(approx (- (- x (* (- y 1) z)) (* (- t 1) a)) x) (*.f64 (-.f64 #s(approx (+ y t) y) #s(literal 2 binary64)) b)) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (-.f64 (-.f64 x (*.f64 (-.f64 t #s(literal 1 binary64)) a)) (*.f64 (-.f64 y #s(literal 1 binary64)) z))))
(#s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (-.f64 #s(approx (- x (* (- t 1) a)) (+.f64 (-.f64 x (*.f64 a t)) a)) (*.f64 (-.f64 y #s(literal 1 binary64)) z))) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (*.f64 #s(approx (- b z) b) y)) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (*.f64 (-.f64 #s(literal 1 binary64) y) z)) #s(approx (+ (- (- x (* (- y 1) z)) (* (- t 1) a)) (* (- (+ y t) 2) b)) (-.f64 #s(approx (- x (* (- t 1) a)) x) (*.f64 (-.f64 y #s(literal 1 binary64)) z))) (+.f64 #s(approx (- (- x (* (- y 1) z)) (* (- t 1) a)) x) (+.f64 (*.f64 y b) (*.f64 (-.f64 t #s(literal 2 binary64)) b))))
((-.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (log.f64 y)) (*.f64 (-.f64 z #s(literal 1 binary64)) (log.f64 (-.f64 #s(literal 1 binary64) y)))) t))
((-.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (log.f64 y)) (*.f64 (-.f64 z #s(literal 1 binary64)) #s(approx (log (- 1 y)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64)) y) #s(literal 1/2 binary64)) y) #s(literal 1 binary64)) y)))) t) #s(approx (- (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) t) (neg.f64 t)) (-.f64 #s(approx (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) (*.f64 (log.f64 y) (-.f64 x #s(literal 1 binary64)))) t) (-.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (log.f64 y)) #s(approx (* (- z 1) (log (- 1 y))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 z #s(literal 1 binary64)) y) (+.f64 #s(literal -1/3 binary64) (*.f64 #s(literal -1/4 binary64) y))) (*.f64 #s(literal 1/2 binary64) (-.f64 z #s(literal 1 binary64)))) y) (-.f64 z #s(literal 1 binary64))) y))) t) (-.f64 #s(approx (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) (*.f64 (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) y)) (/.f64 (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) y)) (*.f64 (log.f64 y) (-.f64 x #s(literal 1 binary64)))) z)) z)) t))
((-.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (log.f64 y)) #s(approx (* (- z 1) (log (- 1 y))) (*.f64 (-.f64 (*.f64 #s(approx (- (* (* (- z 1) y) (+ -1/3 (* -1/4 y))) (* 1/2 (- z 1))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64)) y) #s(literal 1/2 binary64)) z)) y) (-.f64 z #s(literal 1 binary64))) y))) t) #s(approx (- (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) t) (*.f64 (log.f64 y) x)) (-.f64 #s(approx (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) (-.f64 (*.f64 (log.f64 y) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 z #s(literal 1 binary64)) y))) t) (-.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (log.f64 y)) (*.f64 (-.f64 z #s(literal 1 binary64)) #s(approx (log (- 1 y)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/3 binary64) y) #s(literal 1/2 binary64)) y) #s(literal 1 binary64)) y)))) t) (-.f64 (+.f64 (log.f64 (pow.f64 y (-.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 z #s(literal 1 binary64)) #s(approx (log (- 1 y)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64)) y) #s(literal 1/2 binary64)) y) #s(literal 1 binary64)) y)))) t))
((-.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (log.f64 y)) #s(approx (* (- z 1) (log (- 1 y))) #s(approx (* (- (* (- (* (* (- z 1) y) (+ -1/3 (* -1/4 y))) (* 1/2 (- z 1))) y) (- z 1)) y) (*.f64 (*.f64 z y) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64)) y) #s(literal 1/2 binary64)) y) #s(literal 1 binary64)))))) t) (-.f64 #s(approx (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) #s(approx (- (* (log y) (- x 1)) (* (- z 1) y)) (*.f64 (neg.f64 y) z))) t) (-.f64 #s(approx (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) #s(approx (- (* (log y) (- x 1)) (* (- z 1) y)) (+.f64 (*.f64 (log.f64 y) (-.f64 x #s(literal 1 binary64))) y))) t) (-.f64 #s(approx (+ (* (- x 1) (log y)) (* (- z 1) (log (- 1 y)))) #s(approx (- (* (log y) (- x 1)) (* (- z 1) y)) (*.f64 (+.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) y) (log.f64 y)) (-.f64 #s(literal 1 binary64) z)) y))) t) (-.f64 (+.f64 (/.f64 (*.f64 (-.f64 (*.f64 x x) #s(literal 1 binary64)) (log.f64 y)) (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 z #s(literal 1 binary64)) #s(approx (log (- 1 y)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/3 binary64) y) #s(literal 1/2 binary64)) y) #s(literal 1 binary64)) y)))) t))
((*.f64 x (-.f64 x #s(literal 1 binary64))))
(#s(approx (* x (- x 1)) (neg.f64 x)) (*.f64 x #s(approx (- x 1) x)) (/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (+.f64 (+.f64 (*.f64 x x) #s(literal 1 binary64)) x)))
((/.f64 #s(approx (* (- (pow x 3) 1) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (+.f64 (*.f64 x x) #s(literal 1 binary64)) x)) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) x) #s(literal 1 binary64)) x) (+.f64 (+.f64 (*.f64 x x) #s(literal 1 binary64)) x)))
((/.f64 #s(approx (* (- (pow x 3) 1) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (pow.f64 x #s(literal 4 binary64)))) #s(approx (+ (+ (* x x) 1) x) (-.f64 x #s(literal -1 binary64)))) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) x) #s(literal 1 binary64)) x) #s(approx (+ (+ (* x x) 1) x) (*.f64 x x))))
((*.f64 (acos.f64 (+.f64 (*.f64 (sin.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (cos.f64 (-.f64 lambda1 lambda2))))) R))
((*.f64 (acos.f64 (+.f64 (*.f64 (sin.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (+.f64 (*.f64 (sin.f64 lambda2) (sin.f64 lambda1)) (*.f64 (cos.f64 lambda2) (cos.f64 lambda1)))))) R) (*.f64 (acos.f64 #s(approx (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2)))) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (cos.f64 phi1)))) R) (*.f64 (acos.f64 (+.f64 (*.f64 (sin.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) #s(approx (cos (- lambda1 lambda2)) (cos.f64 lambda1))))) R) (*.f64 (acos.f64 (+.f64 (*.f64 (sin.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) #s(approx (cos (- lambda1 lambda2)) (+.f64 (*.f64 (-.f64 (sin.f64 lambda1) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 lambda1) lambda2))) lambda2) (cos.f64 lambda1)))))) R) (*.f64 (acos.f64 (+.f64 (*.f64 (sin.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) #s(literal 0 binary64)) (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) #s(literal 0 binary64))) (-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) #s(literal 1 binary64)) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) #s(literal 1 binary64))) (*.f64 (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) #s(literal 0 binary64)) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) #s(literal 1 binary64))))))))) R))
((*.f64 (acos.f64 (+.f64 (+.f64 (*.f64 (sin.f64 phi2) (sin.f64 phi1)) (*.f64 (*.f64 (*.f64 (cos.f64 phi2) (cos.f64 phi1)) (sin.f64 lambda1)) (sin.f64 lambda2))) (*.f64 (*.f64 (*.f64 (cos.f64 phi2) (cos.f64 phi1)) (cos.f64 lambda1)) (cos.f64 lambda2)))) R) (*.f64 (acos.f64 #s(approx (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2)))) #s(approx (* (cos (- lambda2 lambda1)) (cos phi1)) (cos.f64 (-.f64 lambda1 lambda2))))) R) (*.f64 (acos.f64 #s(approx (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2)))) (+.f64 (*.f64 (+.f64 (*.f64 phi2 (*.f64 #s(literal -1/2 binary64) phi2)) #s(literal 1 binary64)) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (cos.f64 phi1))) (*.f64 (sin.f64 phi1) phi2)))) R) (*.f64 (acos.f64 #s(approx (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2)))) #s(approx (* (cos (- lambda2 lambda1)) (cos phi1)) (+.f64 (*.f64 (-.f64 (*.f64 (sin.f64 lambda1) (cos.f64 phi1)) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 lambda2 (cos.f64 phi1))) (cos.f64 lambda1))) lambda2) (*.f64 (cos.f64 lambda1) (cos.f64 phi1)))))) R) (*.f64 (acos.f64 (+.f64 (*.f64 (sin.f64 phi1) (sin.f64 phi2)) (*.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 (-.f64 lambda1 lambda2)) #s(literal 3 binary64)) (*.f64 (cos.f64 phi2) (cos.f64 phi1))) (pow.f64 (cos.f64 (-.f64 lambda1 lambda2)) #s(literal 6 binary64))) (pow.f64 (cos.f64 (-.f64 lambda1 lambda2)) #s(literal 4 binary64))))) R))
((*.f64 (acos.f64 (+.f64 (+.f64 (*.f64 (sin.f64 phi2) (sin.f64 phi1)) (*.f64 (*.f64 (sin.f64 lambda2) (cos.f64 phi2)) (*.f64 (sin.f64 lambda1) (cos.f64 phi1)))) (*.f64 (*.f64 (*.f64 (cos.f64 phi2) (cos.f64 phi1)) (cos.f64 lambda1)) (cos.f64 lambda2)))) R) (*.f64 (acos.f64 #s(approx (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2)))) #s(approx (* (cos (- lambda2 lambda1)) (cos phi1)) #s(approx (cos (- lambda2 lambda1)) (cos.f64 lambda1))))) R) (*.f64 (acos.f64 #s(approx (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2)))) #s(approx (* (cos (- lambda2 lambda1)) (cos phi1)) #s(approx (cos (- lambda2 lambda1)) (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (cos.f64 lambda2) lambda1) #s(literal -1/2 binary64)) (sin.f64 lambda2)) lambda1) (cos.f64 lambda2)))))) R) (*.f64 (acos.f64 (+.f64 #s(approx (+ (* (sin phi2) (sin phi1)) (* (* (* (cos phi2) (cos phi1)) (sin lambda1)) (sin lambda2))) (*.f64 (sin.f64 phi2) (sin.f64 phi1))) (*.f64 (*.f64 (*.f64 (cos.f64 phi2) (cos.f64 phi1)) (cos.f64 lambda1)) (cos.f64 lambda2)))) R) (*.f64 (acos.f64 #s(approx (+ (+ (* (sin phi2) (sin phi1)) (* (* (* (cos phi2) (cos phi1)) (sin lambda1)) (sin lambda2))) (* (* (* (cos phi2) (cos phi1)) (cos lambda1)) (cos lambda2))) (+.f64 (+.f64 (*.f64 (*.f64 (cos.f64 lambda1) (cos.f64 lambda2)) (*.f64 (cos.f64 phi2) (cos.f64 phi1))) (*.f64 (sin.f64 phi2) (sin.f64 phi1))) (*.f64 (*.f64 (*.f64 (sin.f64 lambda1) (cos.f64 phi2)) (cos.f64 phi1)) (sin.f64 lambda2))))) R))
((-.f64 (*.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale) (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale)) (*.f64 (*.f64 #s(literal 4 binary64) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale)) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale))))
(#s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (*.f64 (/.f64 b (*.f64 y-scale y-scale)) (/.f64 b (*.f64 x-scale x-scale))))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -8 binary64) (*.f64 a a)) (*.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 y-scale y-scale) x-scale) x-scale)))) (*.f64 (/.f64 (*.f64 (*.f64 a a) (+.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 4 binary64)) (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 4 binary64)))) (*.f64 (*.f64 (*.f64 y-scale y-scale) x-scale) x-scale)) #s(literal 4 binary64))) (*.f64 b b))) (-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 (cos.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) x-scale) (*.f64 (sin.f64 (*.f64 (PI.f64) (/.f64 angle #s(literal 180 binary64)))) (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 y-scale y-scale)) (*.f64 (*.f64 #s(literal 4 binary64) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale)) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (/.f64 #s(literal 4 binary64) x-scale) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 2 binary64)) (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64))) (pow.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64))) (*.f64 y-scale y-scale)) (*.f64 (/.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 b b))) y-scale) (/.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 b b)) (*.f64 (pow.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) #s(literal 2 binary64)) (*.f64 a a))) y-scale))) x-scale))) (-.f64 (*.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal 2 binary64)))) (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) x-scale) y-scale) #s(approx (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (*.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (cos.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) (/.f64 (sin.f64 (*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) angle)) (*.f64 y-scale x-scale)))))) (*.f64 (*.f64 #s(literal 4 binary64) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) x-scale) x-scale)) (/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 a (cos.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (sin.f64 (*.f64 (/.f64 angle #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64))) y-scale) y-scale))))
(#s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (/.f64 (pow.f64 (*.f64 a b) #s(literal 2 binary64)) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64))) #s(literal -4 binary64))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 #s(approx (- (* (* -8 (* a a)) (* (pow (cos (* (* 1/180 (PI)) angle)) 2) (/ (pow (sin (* (* 1/180 (PI)) angle)) 2) (* (* (* y-scale y-scale) x-scale) x-scale)))) (* (/ (* (* a a) (+ (pow (cos (* (* 1/180 (PI)) angle)) 4) (pow (sin (* (* 1/180 (PI)) angle)) 4))) (* (* (* y-scale y-scale) x-scale) x-scale)) 4)) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (*.f64 (*.f64 (*.f64 y-scale y-scale) x-scale) x-scale))) (*.f64 b b))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (/.f64 (*.f64 (/.f64 b y-scale) b) (*.f64 y-scale (*.f64 x-scale x-scale))))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (/.f64 (*.f64 (/.f64 b (*.f64 x-scale x-scale)) (/.f64 b y-scale)) y-scale))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) #s(literal 1/180 binary64)) angle)) a) #s(literal 2 binary64)) (/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) #s(literal 1/180 binary64)) angle)) #s(literal 2 binary64)) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64)))) #s(literal -8 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 a a)) (/.f64 (+.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) #s(literal 1/180 binary64)) angle)) #s(literal 4 binary64)) (pow.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) #s(literal 1/180 binary64)) angle)) #s(literal 4 binary64))) (pow.f64 (*.f64 y-scale x-scale) #s(literal 2 binary64))))) (*.f64 b b))))
(#s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (*.f64 (/.f64 (*.f64 a b) (*.f64 y-scale x-scale)) (/.f64 (*.f64 a b) (*.f64 y-scale x-scale))) #s(literal -4 binary64))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 #s(approx (- (* (* -8 (* a a)) (* (pow (cos (* (* 1/180 (PI)) angle)) 2) (/ (pow (sin (* (* 1/180 (PI)) angle)) 2) (* (* (* y-scale y-scale) x-scale) x-scale)))) (* (/ (* (* a a) (+ (pow (cos (* (* 1/180 (PI)) angle)) 4) (pow (sin (* (* 1/180 (PI)) angle)) 4))) (* (* (* y-scale y-scale) x-scale) x-scale)) 4)) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (*.f64 (*.f64 y-scale x-scale) (*.f64 y-scale x-scale)))) (*.f64 b b))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (/.f64 (*.f64 (/.f64 b y-scale) b) (*.f64 (*.f64 y-scale x-scale) x-scale)))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (*.f64 #s(approx (- (* (* -8 (* a a)) (* (pow (cos (* (* 1/180 (PI)) angle)) 2) (/ (pow (sin (* (* 1/180 (PI)) angle)) 2) (* (* (* y-scale y-scale) x-scale) x-scale)))) (* (/ (* (* a a) (+ (pow (cos (* (* 1/180 (PI)) angle)) 4) (pow (sin (* (* 1/180 (PI)) angle)) 4))) (* (* (* y-scale y-scale) x-scale) x-scale)) 4)) (*.f64 (/.f64 #s(literal -4 binary64) x-scale) (*.f64 (/.f64 a y-scale) (/.f64 a (*.f64 y-scale x-scale))))) (*.f64 b b))) #s(approx (- (* (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale) (/ (/ (* (* (* 2 (- (pow b 2) (pow a 2))) (sin (* (/ angle 180) (PI)))) (cos (* (/ angle 180) (PI)))) x-scale) y-scale)) (* (* 4 (/ (/ (+ (pow (* a (sin (* (/ angle 180) (PI)))) 2) (pow (* b (cos (* (/ angle 180) (PI)))) 2)) x-scale) x-scale)) (/ (/ (+ (pow (* a (cos (* (/ angle 180) (PI)))) 2) (pow (* b (sin (* (/ angle 180) (PI)))) 2)) y-scale) y-scale))) (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal -4 binary64)) b) (/.f64 b y-scale)) (*.f64 y-scale x-scale)) x-scale)))
((*.f32 (neg.f32 s) (log.f32 (-.f32 (/.f32 #s(literal 1 binary32) (+.f32 (*.f32 u (-.f32 (/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)))) (/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (PI.f32) s)))))) (/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (PI.f32) s)))))) #s(literal 1 binary32)))))
((*.f32 (neg.f32 s) (log.f32 (/.f32 (-.f32 #s(literal 2 binary32) (*.f32 (+.f32 (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) u) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) #s(literal 2 binary32))) (*.f32 (+.f32 (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) u) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) #s(literal 2 binary32))))) #s(approx (* (neg s) (log (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1))) (neg.f32 (PI.f32))) (*.f32 (neg.f32 s) #s(approx (log (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1)) (*.f32 (-.f32 (*.f32 (*.f32 u (PI.f32)) #s(literal 1/2 binary32)) (*.f32 #s(literal 1/4 binary32) (PI.f32))) (/.f32 #s(literal -4 binary32) s)))) (*.f32 (neg.f32 s) (log.f32 #s(approx (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1) (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 (/.f32 (-.f32 (*.f32 (pow.f32 (-.f32 (*.f32 (*.f32 u (PI.f32)) #s(literal -1/2 binary32)) (*.f32 #s(literal -1/4 binary32) (PI.f32))) #s(literal 2 binary32)) #s(literal -8 binary32)) #s(literal 0 binary32)) s) (*.f32 (-.f32 (*.f32 (*.f32 u (PI.f32)) #s(literal -1/2 binary32)) (*.f32 #s(literal -1/4 binary32) (PI.f32))) #s(literal 4 binary32))) s))))) (*.f32 (neg.f32 s) (log.f32 (/.f32 (-.f32 (pow.f32 (+.f32 (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) u) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) #s(literal -2 binary32)) #s(literal 1 binary32)) (-.f32 (/.f32 #s(literal 1 binary32) (+.f32 (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) u) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32))))) #s(literal -1 binary32))))))
((*.f32 (neg.f32 s) (-.f32 (log.f32 (-.f32 #s(literal 2 binary32) (*.f32 (+.f32 (*.f32 u (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32))))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) #s(literal 2 binary32)))) (log.f32 (*.f32 (+.f32 (*.f32 u (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32))))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) #s(literal 2 binary32))))) (*.f32 (neg.f32 s) #s(approx (log (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1)) (/.f32 (PI.f32) s))) (*.f32 (neg.f32 s) #s(approx (log (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1)) (*.f32 #s(approx (- (* (* u (PI)) 1/2) (* 1/4 (PI))) (*.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) (PI.f32)) (*.f32 (/.f32 (PI.f32) u) #s(literal 1/4 binary32))) u)) (/.f32 #s(literal -4 binary32) s)))) (*.f32 (neg.f32 s) (log.f32 #s(approx (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1) (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 (/.f32 #s(approx (- (* (pow (- (* (* u (PI)) -1/2) (* -1/4 (PI))) 2) -8) 0) (*.f32 (*.f32 #s(literal -2 binary32) (*.f32 u u)) (*.f32 (PI.f32) (PI.f32)))) s) (*.f32 (-.f32 (*.f32 (*.f32 u (PI.f32)) #s(literal -1/2 binary32)) (*.f32 #s(literal -1/4 binary32) (PI.f32))) #s(literal 4 binary32))) s))))) (*.f32 (neg.f32 s) (log.f32 #s(approx (/ (- (pow (+ (* (- (/ 1 (- (exp (/ (neg (PI)) s)) -1)) (/ 1 (- (exp (/ (PI) s)) -1))) u) (/ 1 (- (exp (/ (PI) s)) -1))) -2) 1) (- (/ 1 (+ (* (- (/ 1 (- (exp (/ (neg (PI)) s)) -1)) (/ 1 (- (exp (/ (PI) s)) -1))) u) (/ 1 (- (exp (/ (PI) s)) -1)))) -1)) (-.f32 (/.f32 (/.f32 #s(literal 1 binary32) u) (-.f32 (/.f32 #s(literal 1 binary32) (+.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal 1 binary32))) (/.f32 #s(literal 1 binary32) (+.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal 1 binary32))))) #s(literal 1 binary32))))))
((*.f32 (neg.f32 s) (-.f32 (log.f32 (-.f32 (pow.f32 (+.f32 (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) u) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) #s(literal -2 binary32)) #s(literal 1 binary32))) (log.f32 (-.f32 (/.f32 #s(literal 1 binary32) (+.f32 (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal -1 binary32))) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32)))) u) (/.f32 #s(literal 1 binary32) (-.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal -1 binary32))))) #s(literal -1 binary32))))) #s(approx (* (neg s) (- (log (- 2 (* (+ (* u (- (/ 1 (- (exp (/ (neg (PI)) s)) -1)) (/ 1 (- (exp (/ (PI) s)) -1)))) (/ 1 (- (exp (/ (PI) s)) -1))) 2))) (log (* (+ (* u (- (/ 1 (- (exp (/ (neg (PI)) s)) -1)) (/ 1 (- (exp (/ (PI) s)) -1)))) (/ 1 (- (exp (/ (PI) s)) -1))) 2)))) (*.f32 (-.f32 (*.f32 (*.f32 #s(literal -1/2 binary32) (PI.f32)) u) (*.f32 #s(literal -1/4 binary32) (PI.f32))) #s(literal -4 binary32))) (*.f32 (neg.f32 s) #s(approx (log (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1)) #s(approx (* (- (* (* u (PI)) 1/2) (* 1/4 (PI))) (/ -4 s)) (*.f32 (-.f32 (/.f32 (/.f32 (PI.f32) s) u) (*.f32 #s(literal 2 binary32) (/.f32 (PI.f32) s))) u)))) (*.f32 (neg.f32 s) (log.f32 #s(approx (- (/ 1 (+ (* u (- (/ 1 (+ 1 (exp (/ (neg (PI)) s)))) (/ 1 (+ 1 (exp (/ (PI) s)))))) (/ 1 (+ 1 (exp (/ (PI) s)))))) 1) (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 (/.f32 #s(approx (- (* (pow (- (* (* u (PI)) -1/2) (* -1/4 (PI))) 2) -8) 0) (*.f32 (*.f32 #s(literal -2 binary32) (*.f32 u u)) (*.f32 (PI.f32) (PI.f32)))) s) #s(approx (* (- (* (* u (PI)) -1/2) (* -1/4 (PI))) 4) (*.f32 (-.f32 (/.f32 (PI.f32) u) (*.f32 #s(literal 2 binary32) (PI.f32))) u))) s))))) (log.f32 (pow.f32 #s(approx (/ (- (pow (+ (* (- (/ 1 (- (exp (/ (neg (PI)) s)) -1)) (/ 1 (- (exp (/ (PI) s)) -1))) u) (/ 1 (- (exp (/ (PI) s)) -1))) -2) 1) (- (/ 1 (+ (* (- (/ 1 (- (exp (/ (neg (PI)) s)) -1)) (/ 1 (- (exp (/ (PI) s)) -1))) u) (/ 1 (- (exp (/ (PI) s)) -1)))) -1)) (-.f32 (/.f32 (/.f32 #s(literal 1 binary32) u) (-.f32 (/.f32 #s(literal 1 binary32) (+.f32 (exp.f32 (/.f32 (neg.f32 (PI.f32)) s)) #s(literal 1 binary32))) (/.f32 #s(literal 1 binary32) (+.f32 (exp.f32 (/.f32 (PI.f32) s)) #s(literal 1 binary32))))) #s(literal 1 binary32))) (neg.f32 s))))
((copysign.f64 (log.f64 (+.f64 (fabs.f64 x) (sqrt.f64 (+.f64 (*.f64 x x) #s(literal 1 binary64))))) x))
((copysign.f64 (asinh.f64 (fabs.f64 x)) x) (copysign.f64 (log.f64 #s(approx (+ (fabs x) (sqrt (+ (* x x) 1))) x)) x) (copysign.f64 (log.f64 (+.f64 (fabs.f64 x) #s(approx (sqrt (+ (* x x) 1)) x))) x) (copysign.f64 (log.f64 (+.f64 (fabs.f64 x) #s(approx (sqrt (+ (* x x) 1)) (neg.f64 x)))) x))
((copysign.f64 (asinh.f64 (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (neg.f64 x)))) x))
((copysign.f64 #s(approx (asinh (* (sqrt (neg x)) (sqrt (neg x)))) (neg.f64 x)) x))
((log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) #s(literal 1 binary64))))))
((acosh.f64 x) (log.f64 (+.f64 x #s(approx (sqrt (- (* x x) 1)) x))))
((copysign.f32 (log.f32 (+.f32 (fabs.f32 x) (sqrt.f32 (+.f32 (*.f32 x x) #s(literal 1 binary32))))) x))
((copysign.f32 (asinh.f32 (fabs.f32 x)) x) (copysign.f32 (log.f32 #s(approx (+ (fabs x) (sqrt (+ (* x x) 1))) x)) x))
((log.f32 (+.f32 x (sqrt.f32 (-.f32 (*.f32 x x) #s(literal 1 binary32))))))
((acosh.f32 x))
((+.f64 (+.f64 (+.f64 (*.f64 #s(literal 1335/4 binary64) (pow.f64 y #s(literal 6 binary64))) (*.f64 (*.f64 x x) (-.f64 (-.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal 11 binary64) x) x) y) y) (pow.f64 y #s(literal 6 binary64))) (*.f64 #s(literal 121 binary64) (pow.f64 y #s(literal 4 binary64)))) #s(literal 2 binary64)))) (*.f64 #s(literal 11/2 binary64) (pow.f64 y #s(literal 8 binary64)))) (/.f64 x (*.f64 #s(literal 2 binary64) y))))
(#s(approx (+ (+ (+ (* 1335/4 (pow y 6)) (* (* x x) (- (- (- (* (* (* (* 11 x) x) y) y) (pow y 6)) (* 121 (pow y 4))) 2))) (* 11/2 (pow y 8))) (/ x (* 2 y))) (*.f64 (/.f64 x y) #s(literal 1/2 binary64))) (+.f64 #s(approx (+ (+ (* 1335/4 (pow y 6)) (* (* x x) (- (- (- (* (* (* (* 11 x) x) y) y) (pow y 6)) (* 121 (pow y 4))) 2))) (* 11/2 (pow y 8))) (*.f64 #s(literal -2 binary64) (*.f64 x x))) (/.f64 x (*.f64 #s(literal 2 binary64) y))))
((+.f64 #s(approx (+ (+ (* 1335/4 (pow y 6)) (* (* x x) (- (- (- (* (* (* (* 11 x) x) y) y) (pow y 6)) (* 121 (pow y 4))) 2))) (* 11/2 (pow y 8))) (*.f64 #s(literal -2 binary64) (*.f64 x x))) (/.f64 x (+.f64 y y))))
((-.f64 (-.f64 (+.f64 #s(literal 3 binary64) (/.f64 #s(literal 2 binary64) (*.f64 r r))) (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal 2 binary64) v))) (*.f64 (*.f64 (*.f64 w w) r) r)) (-.f64 #s(literal 1 binary64) v))) #s(literal 9/2 binary64)))
((-.f64 (-.f64 (+.f64 #s(literal 3 binary64) (/.f64 #s(literal 2 binary64) (*.f64 r r))) (*.f64 (pow.f64 (*.f64 w r) #s(literal 2 binary64)) (/.f64 (*.f64 (-.f64 #s(literal 3 binary64) (*.f64 v #s(literal 2 binary64))) #s(literal 1/8 binary64)) (-.f64 #s(literal 1 binary64) v)))) #s(literal 9/2 binary64)) #s(approx (- (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) 9/2) (/.f64 #s(literal 2 binary64) (*.f64 r r))) (-.f64 #s(approx (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) (/.f64 (/.f64 (-.f64 (*.f64 (*.f64 r r) #s(literal 3 binary64)) #s(literal -2 binary64)) r) r)) #s(literal 9/2 binary64)) (-.f64 (-.f64 #s(approx (+ 3 (/ 2 (* r r))) #s(literal 3 binary64)) (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal 2 binary64) v))) (*.f64 (*.f64 (*.f64 w w) r) r)) (-.f64 #s(literal 1 binary64) v))) #s(literal 9/2 binary64)) (-.f64 (-.f64 (+.f64 #s(literal 3 binary64) (/.f64 #s(literal 2 binary64) (*.f64 r r))) (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal 2 binary64) v))) (*.f64 w (*.f64 (*.f64 w r) r))) (-.f64 #s(literal 1 binary64) v))) #s(literal 9/2 binary64)))
((-.f64 (-.f64 (+.f64 #s(literal 3 binary64) (/.f64 #s(literal 2 binary64) (*.f64 r r))) (*.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/8 binary64) (-.f64 #s(literal 1 binary64) v)) (-.f64 #s(literal 3 binary64) (*.f64 v #s(literal 2 binary64)))) (*.f64 w r)) (*.f64 w r))) #s(literal 9/2 binary64)) (-.f64 #s(approx (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) #s(approx (/ (/ (- (* (* r r) 3) -2) r) r) #s(literal 3 binary64))) #s(literal 9/2 binary64)) #s(approx (- (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) 9/2) (/.f64 (/.f64 #s(literal 2 binary64) r) r)) #s(approx (- (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) 9/2) (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 r r)) #s(literal 3/2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 3/8 binary64) (*.f64 r r)) w) w))) (-.f64 (-.f64 #s(approx (+ 3 (/ 2 (* r r))) #s(literal 3 binary64)) (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (-.f64 #s(literal 3 binary64) (*.f64 #s(literal 2 binary64) v))) (*.f64 (*.f64 (*.f64 w r) w) r)) (-.f64 #s(literal 1 binary64) v))) #s(literal 9/2 binary64)))
((-.f64 (-.f64 (+.f64 #s(literal 3 binary64) (/.f64 #s(literal 2 binary64) (*.f64 r r))) (*.f64 (*.f64 #s(approx (* (/ 1/8 (- 1 v)) (- 3 (* v 2))) #s(literal 1/4 binary64)) (*.f64 w r)) (*.f64 w r))) #s(literal 9/2 binary64)) #s(approx (- (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) 9/2) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 r r)) #s(literal 3/2 binary64))) (-.f64 #s(approx (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) (/.f64 (-.f64 (*.f64 (*.f64 r r) #s(literal 3 binary64)) #s(literal -2 binary64)) (*.f64 r r))) #s(literal 9/2 binary64)) #s(approx (- (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) 9/2) (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 r r)) #s(literal 3/2 binary64)) (*.f64 #s(approx (* (* 3/8 (* r r)) w) (*.f64 (*.f64 (*.f64 w r) #s(literal 3/8 binary64)) r)) w))) #s(approx (- (- (+ 3 (/ 2 (* r r))) (/ (* (* 1/8 (- 3 (* 2 v))) (* (* (* w w) r) r)) (- 1 v))) 9/2) (*.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 r r)) (/.f64 (*.f64 (*.f64 (-.f64 #s(literal 3 binary64) (*.f64 #s(literal 2 binary64) v)) w) w) (-.f64 #s(literal 1 binary64) v)))))
((+.f64 x1 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) (-.f64 (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) #s(literal 3 binary64))) (*.f64 (*.f64 x1 x1) (-.f64 (*.f64 #s(literal 4 binary64) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) #s(literal 6 binary64)))) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))))) (*.f64 (*.f64 x1 x1) x1)) x1) (*.f64 #s(literal 3 binary64) (/.f64 (-.f64 (-.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))))))
((+.f64 x1 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) (-.f64 (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) #s(literal 3 binary64))) (*.f64 (*.f64 x1 x1) (-.f64 (*.f64 #s(literal 4 binary64) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) #s(literal 6 binary64)))) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) #s(approx (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) #s(literal 3 binary64)))) (*.f64 (*.f64 x1 x1) x1)) x1) (*.f64 #s(literal 3 binary64) (/.f64 (-.f64 (-.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))))) (+.f64 x1 (+.f64 (+.f64 #s(approx (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) (*.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64)) x2) #s(literal 4 binary64)) x1)) x1) (*.f64 #s(literal 3 binary64) (/.f64 (-.f64 (-.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))))) (+.f64 x1 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (*.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64)) x2) #s(literal 4 binary64)) x1)) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))))) (*.f64 (*.f64 x1 x1) x1)) x1) (*.f64 #s(literal 3 binary64) (/.f64 (-.f64 (-.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))))) (+.f64 x1 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 #s(approx (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (*.f64 (*.f64 (-.f64 #s(literal 6 binary64) (/.f64 (-.f64 #s(literal 4 binary64) (/.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64)) #s(literal 4 binary64)) #s(literal 6 binary64)) x1)) x1)) x1) x1)) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))))) (*.f64 (*.f64 x1 x1) x1)) x1) (*.f64 #s(literal 3 binary64) (/.f64 (-.f64 (-.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))))) (+.f64 x1 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) (-.f64 (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) #s(literal 3 binary64))) (*.f64 (*.f64 x1 x1) (-.f64 (*.f64 #s(literal 4 binary64) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) #s(literal 6 binary64)))) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))))) (*.f64 (*.f64 x1 x1) x1)) x1) (*.f64 #s(literal 3 binary64) #s(approx (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) #s(literal 3 binary64))))))
((+.f64 x1 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) (-.f64 (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) #s(literal 3 binary64))) (*.f64 (*.f64 x1 x1) (-.f64 (*.f64 #s(literal 4 binary64) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) #s(literal 6 binary64)))) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) #s(approx (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) #s(literal 3 binary64)))) (*.f64 (*.f64 x1 x1) x1)) x1) (*.f64 #s(literal 3 binary64) #s(approx (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) (-.f64 (*.f64 #s(literal -2 binary64) x2) x1))))) #s(approx (+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) x1) (* 3 (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))))) (*.f64 #s(literal -6 binary64) x2)) (+.f64 x1 (+.f64 (+.f64 #s(approx (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) (*.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64)) x2) #s(literal 4 binary64)) x1)) x1) (*.f64 #s(literal 3 binary64) #s(approx (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 #s(literal 3 binary64) (*.f64 #s(literal -2 binary64) x2)) x1) #s(literal 1 binary64)) x1) (*.f64 #s(literal 2 binary64) x2)))))) #s(approx (+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) x1) (* 3 (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))))) (*.f64 (-.f64 #s(literal 6 binary64) (/.f64 #s(literal 3 binary64) x1)) (pow.f64 x1 #s(literal 4 binary64)))) #s(approx (+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) x1) (* 3 (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))))) (*.f64 (-.f64 #s(literal 6 binary64) (/.f64 (-.f64 #s(literal 3 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64)) #s(literal 3 binary64)) #s(literal -2 binary64))) (neg.f64 x1)) (-.f64 (*.f64 #s(literal -4 binary64) (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64))) #s(literal 9 binary64))) x1)) x1)) (pow.f64 x1 #s(literal 4 binary64)))))
((+.f64 x1 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) x1) (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64)))) (-.f64 (/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (*.f64 #s(literal 2 binary64) x2)) x1) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) #s(literal 3 binary64))) (*.f64 (*.f64 x1 x1) (-.f64 (*.f64 #s(literal 4 binary64) (+.f64 (/.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) (-.f64 (*.f64 x1 x1) #s(literal -1 binary64))) (/.f64 (-.f64 (*.f64 x2 #s(literal 2 binary64)) x1) (-.f64 (*.f64 x1 x1) #s(literal -1 binary64))))) #s(literal 6 binary64)))) (+.f64 (*.f64 x1 x1) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x1) x1) #s(approx (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) #s(literal 3 binary64)))) (*.f64 (*.f64 x1 x1) x1)) x1) (*.f64 #s(literal 3 binary64) #s(approx (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) (-.f64 (*.f64 #s(literal -2 binary64) x2) x1))))) (+.f64 x1 #s(approx (+ (+ (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) x1) (* 3 (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (*.f64 #s(literal -6 binary64) x2))) #s(approx (+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) x1) (* 3 (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))))) #s(approx (* (- 6 (/ (- 3 (/ (- (/ (+ -1 (* (* (- (* 2 x2) 3) 3) -2)) (neg x1)) (- (* -4 (- (* 2 x2) 3)) 9)) x1)) x1)) (pow x1 4)) (*.f64 (+.f64 (*.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal -4 binary64) (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64)))) x1) (neg.f64 (-.f64 (*.f64 #s(literal -6 binary64) (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64))) #s(literal 1 binary64)))) x1))) #s(approx (+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) x1) (* 3 (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))))) (*.f64 (pow.f64 x1 #s(literal 4 binary64)) #s(literal 6 binary64))) (+.f64 x1 #s(approx (+ (+ (+ (+ (* (+ (* (* (* 2 x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) (- (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)) 3)) (* (* x1 x1) (- (* 4 (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1))) 6))) (+ (* x1 x1) 1)) (* (* (* 3 x1) x1) (/ (- (+ (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (* (* x1 x1) x1)) x1) (* 3 (/ (- (- (* (* 3 x1) x1) (* 2 x2)) x1) (+ (* x1 x1) 1)))) (*.f64 (-.f64 #s(literal 6 binary64) (/.f64 (-.f64 #s(literal 3 binary64) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal 0 binary64) (*.f64 #s(literal -6 binary64) (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64)))) (neg.f64 x1)) (-.f64 #s(literal 9 binary64) (*.f64 #s(literal -4 binary64) (-.f64 (*.f64 #s(literal 2 binary64) x2) #s(literal 3 binary64))))) x1)) x1)) (pow.f64 x1 #s(literal 4 binary64))))))
((/.f64 (*.f64 (neg.f64 t1) v) (*.f64 (+.f64 t1 u) (+.f64 t1 u))))
((/.f64 (*.f64 (/.f64 t1 (-.f64 u t1)) (neg.f64 v)) (-.f64 u t1)) #s(approx (/ (* (neg t1) v) (* (+ t1 u) (+ t1 u))) (/.f64 v (neg.f64 t1))) (/.f64 (*.f64 (neg.f64 t1) v) #s(approx (* (+ t1 u) (+ t1 u)) (*.f64 u u))) (/.f64 (*.f64 (neg.f64 t1) v) #s(approx (* (+ t1 u) (+ t1 u)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) u) t1) t1))) (/.f64 (*.f64 (neg.f64 t1) v) #s(approx (* (+ t1 u) (+ t1 u)) (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) u) t1) t1) (*.f64 u u)))))
((*.f64 (neg.f64 v) (/.f64 (/.f64 t1 (-.f64 u t1)) (-.f64 u t1))) (/.f64 #s(approx (* (/ t1 (- u t1)) (neg v)) v) (-.f64 u t1)) (/.f64 (*.f64 (neg.f64 t1) v) #s(approx (* (+ t1 u) (+ t1 u)) #s(approx (* (+ (* 2 u) t1) t1) (*.f64 (*.f64 u t1) #s(literal 2 binary64))))) (/.f64 #s(approx (* (/ t1 (- u t1)) (neg v)) (*.f64 (/.f64 (neg.f64 v) u) t1)) (-.f64 u t1)) #s(approx (/ (* (neg t1) v) (* (+ t1 u) (+ t1 u))) (/.f64 (neg.f64 (-.f64 v (*.f64 (*.f64 (/.f64 v t1) u) #s(literal 2 binary64)))) t1)))
((*.f64 v (/.f64 (neg.f64 t1) #s(approx (* (+ t1 u) (+ t1 u)) (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) u) t1) t1) (*.f64 u u))))) (/.f64 #s(approx (* (/ t1 (- u t1)) (neg v)) v) #s(approx (- u t1) u)) (*.f64 (neg.f64 v) #s(approx (/ (/ t1 (- u t1)) (- u t1)) (/.f64 t1 (*.f64 u u)))) #s(approx (/ (* (/ t1 (- u t1)) (neg v)) (- u t1)) (*.f64 (/.f64 (/.f64 (neg.f64 v) u) u) t1)) (*.f64 (neg.f64 v) (/.f64 (/.f64 t1 (-.f64 u t1)) #s(approx (- u t1) u))))
((-.f64 (*.f64 #s(literal 238732414637843/250000000000000 binary64) x) (*.f64 #s(literal 6450306886639899/50000000000000000 binary64) (*.f64 (*.f64 x x) x))))
(#s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -6450306886639899/50000000000000000 binary64)) #s(literal -238732414637843/250000000000000 binary64)) x)) #s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 #s(literal 238732414637843/250000000000000 binary64) x)) (-.f64 (sqrt.f64 (*.f64 #s(literal 56993165798814994692847692649/62500000000000000000000000000 binary64) (*.f64 x x))) (*.f64 #s(literal 6450306886639899/50000000000000000 binary64) (*.f64 (*.f64 x x) x))) #s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 (-.f64 (/.f64 #s(literal 238732414637843/250000000000000 binary64) (*.f64 x x)) #s(literal 6450306886639899/50000000000000000 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 41606458931834106848498498730201/2500000000000000000000000000000000 binary64)) (*.f64 #s(literal 56993165798814994692847692649/62500000000000000000000000000 binary64) (*.f64 x x))) (-.f64 (*.f64 #s(literal -6450306886639899/50000000000000000 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 238732414637843/250000000000000 binary64) x))))
(#s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -6450306886639899/50000000000000000 binary64) x) x) #s(literal -238732414637843/250000000000000 binary64)) x)) #s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 #s(approx (- (* (* x x) -6450306886639899/50000000000000000) -238732414637843/250000000000000) (*.f64 (*.f64 x x) #s(literal -6450306886639899/50000000000000000 binary64))) x)) #s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 238732414637843/250000000000000 binary64) (*.f64 x x)) #s(literal 6450306886639899/50000000000000000 binary64)) x) (*.f64 x x))) #s(approx (/ (- (* (pow x 6) 41606458931834106848498498730201/2500000000000000000000000000000000) (* 56993165798814994692847692649/62500000000000000000000000000 (* x x))) (- (* -6450306886639899/50000000000000000 (pow x 3)) (* 238732414637843/250000000000000 x))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -6450306886639899/50000000000000000 binary64))) #s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 238732414637843/250000000000000 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 41606458931834106848498498730201/2500000000000000000000000000000000 binary64))) (+.f64 (/.f64 #s(literal 238732414637843/250000000000000 binary64) (*.f64 x x)) #s(literal 6450306886639899/50000000000000000 binary64)))))
((-.f64 (*.f64 (sqrt.f64 (*.f64 #s(literal 56993165798814994692847692649/62500000000000000000000000000 binary64) x)) (sqrt.f64 x)) (*.f64 #s(literal 6450306886639899/50000000000000000 binary64) (*.f64 (*.f64 x x) x))) #s(approx (/ (- (* (pow x 6) 41606458931834106848498498730201/2500000000000000000000000000000000) (* 56993165798814994692847692649/62500000000000000000000000000 (* x x))) (- (* -6450306886639899/50000000000000000 (pow x 3)) (* 238732414637843/250000000000000 x))) (*.f64 (*.f64 x x) (*.f64 #s(literal -6450306886639899/50000000000000000 binary64) x))) #s(approx (/ (- (* (pow x 6) 41606458931834106848498498730201/2500000000000000000000000000000000) (* 56993165798814994692847692649/62500000000000000000000000000 (* x x))) (- (* -6450306886639899/50000000000000000 (pow x 3)) (* 238732414637843/250000000000000 x))) (*.f64 (*.f64 (*.f64 x x) x) #s(literal -6450306886639899/50000000000000000 binary64))) #s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 #s(approx (* (- (/ 238732414637843/250000000000000 (* x x)) 6450306886639899/50000000000000000) x) (/.f64 #s(literal 238732414637843/250000000000000 binary64) x)) (*.f64 x x))) #s(approx (- (* 238732414637843/250000000000000 x) (* 6450306886639899/50000000000000000 (* (* x x) x))) (*.f64 (*.f64 #s(approx (- (/ 238732414637843/250000000000000 (* x x)) 6450306886639899/50000000000000000) (/.f64 #s(literal 238732414637843/250000000000000 binary64) (*.f64 x x))) x) (*.f64 x x))))
((*.f64 #s(literal 100 binary64) (/.f64 (-.f64 x x) x)))
(#s(approx (* 100 (/ (- x x) x)) #s(literal 0 binary64)))
((*.f64 #s(literal 2 binary64) (+.f64 (+.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) #s(literal 9 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 9 binary64)) (/.f64 #s(literal 1 binary64) #s(literal 9 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 9 binary64)) #s(literal 1 binary64)))))
(#s(literal 38/81 binary64))
((-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 y #s(literal 4 binary64))))
(#s(approx (- (pow x 4) (pow y 4)) (neg.f64 (pow.f64 y #s(literal 4 binary64)))) #s(approx (- (pow x 4) (pow y 4)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (-.f64 (*.f64 x x) (*.f64 y y))))
((*.f64 (+.f64 (*.f64 x x) (*.f64 y y)) #s(approx (- (* x x) (* y y)) (*.f64 (-.f64 (*.f64 (/.f64 x y) (/.f64 x y)) #s(literal 1 binary64)) (*.f64 y y)))) #s(approx (- (pow x 4) (pow y 4)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(approx (- (pow x 4) (pow y 4)) (*.f64 (*.f64 (*.f64 x x) x) x)) #s(approx (- (pow x 4) (pow y 4)) (neg.f64 (*.f64 (*.f64 (*.f64 y y) y) y))) #s(approx (- (pow x 4) (pow y 4)) (*.f64 (*.f64 (neg.f64 y) y) (*.f64 y y))))
((*.f64 #s(approx (+ (* x x) (* y y)) (*.f64 x x)) #s(approx (- (* x x) (* y y)) (*.f64 (-.f64 (*.f64 (/.f64 x y) (/.f64 x y)) #s(literal 1 binary64)) (*.f64 y y)))) (*.f64 (+.f64 (*.f64 x x) (*.f64 y y)) #s(approx (- (* x x) (* y y)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 y x) (/.f64 y x))) (*.f64 x x)))))
((/.f64 (exp.f64 a) (+.f64 (exp.f64 a) (exp.f64 b))))
((/.f64 (exp.f64 a) #s(approx (+ (exp a) (exp b)) (-.f64 (-.f64 (+.f64 (exp.f64 b) a) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) a) a)))) #s(approx (/ (exp a) (+ (exp a) (exp b))) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 b) #s(literal -1 binary64)))) (/.f64 (exp.f64 a) (+.f64 (exp.f64 a) #s(approx (exp b) #s(literal 1 binary64)))) (/.f64 (exp.f64 a) (+.f64 (+.f64 (sinh.f64 b) (exp.f64 a)) (cosh.f64 b))) #s(approx (/ (exp a) (+ (exp a) (exp b))) (/.f64 (+.f64 (*.f64 (neg.f64 (exp.f64 a)) (/.f64 b (-.f64 (exp.f64 a) #s(literal -1 binary64)))) (exp.f64 a)) (-.f64 (exp.f64 a) #s(literal -1 binary64)))))
((/.f64 #s(approx (exp a) (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 1 binary64)) a) #s(literal 1 binary64))) #s(approx (+ (exp a) (exp b)) (-.f64 (-.f64 (+.f64 (exp.f64 b) a) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) a) a)))) #s(approx (/ (exp a) (+ (exp a) (exp b))) #s(approx (/ 1 (- (exp b) -1)) #s(literal 1/2 binary64))) #s(approx (/ (exp a) (+ (exp a) (exp b))) (/.f64 #s(literal 1 binary64) #s(approx (- (exp b) -1) (+.f64 #s(literal 2 binary64) b)))) #s(approx (/ (exp a) (+ (exp a) (exp b))) (/.f64 #s(literal 1 binary64) #s(approx (- (exp b) -1) (+.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) b)) b) #s(literal 2 binary64))))) #s(approx (/ (exp a) (+ (exp a) (exp b))) (/.f64 #s(literal 1 binary64) #s(approx (- (exp b) -1) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) b) #s(literal -1/2 binary64)) b) #s(literal 1 binary64)) b) #s(literal 2 binary64))))))
((/.f64 (exp.f64 a) (+.f64 #s(approx (exp a) #s(literal 1 binary64)) #s(approx (exp b) #s(literal 1 binary64)))) #s(approx (/ (exp a) (+ (exp a) (exp b))) #s(approx (/ (+ (* (neg (exp a)) (/ b (- (exp a) -1))) (exp a)) (- (exp a) -1)) (-.f64 (*.f64 #s(literal -1/4 binary64) b) #s(literal -1/2 binary64)))) #s(approx (/ (exp a) (+ (exp a) (exp b))) #s(approx (/ 1 (- (exp b) -1)) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 b b) #s(literal 1/48 binary64)) #s(literal 1/4 binary64)) b) #s(literal -1/2 binary64)))) #s(approx (/ (exp a) (+ (exp a) (exp b))) (/.f64 #s(literal 1 binary64) #s(approx (- (exp b) -1) #s(approx (+ (* (- 1 (* -1/2 b)) b) 2) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) b) #s(literal -1 binary64)) b))))) #s(approx (/ (exp a) (+ (exp a) (exp b))) #s(approx (/ (+ (* (neg (exp a)) (/ b (- (exp a) -1))) (exp a)) (- (exp a) -1)) (+.f64 (*.f64 (-.f64 (-.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/8 binary64) b)) #s(literal 1/4 binary64)) (*.f64 #s(literal -1/8 binary64) b)) a) (-.f64 (*.f64 #s(literal -1/4 binary64) b) #s(literal -1/2 binary64))))))
((/.f64 (*.f64 a1 a2) (*.f64 b1 b2)))
((*.f64 (/.f64 a2 b2) (/.f64 a1 b1)) (*.f64 (/.f64 a2 b1) (/.f64 a1 b2)) (*.f64 (/.f64 (/.f64 a2 b2) b1) a1) (/.f64 (*.f64 (/.f64 a1 b1) a2) b2) (*.f64 (/.f64 (/.f64 (neg.f64 a1) b1) b2) (neg.f64 a2)))
((*.f64 (/.f64 a2 (*.f64 b1 b2)) a1) (*.f64 (/.f64 (neg.f64 a1) (*.f64 b1 b2)) (neg.f64 a2)))
((*.f64 (/.f64 a1 (*.f64 b2 b1)) a2))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a) (/.f64 c (neg.f64 b)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 c (neg.f64 b))) (+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (-.f64 (/.f64 c (neg.f64 b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 3 binary64))))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (/.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (+.f64 (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)) (*.f64 c a)))) b)) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) #s(approx (+ (* (- (* (+ (/ (* (* -1/4 a) (/ (* (pow c 4) 20) (pow b 6))) b) (/ (* (pow c 3) -2) (pow b 5))) a) (/ (* c c) (pow b 3))) a) (/ c (neg b))) (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 (-.f64 (/.f64 (*.f64 #s(literal -5 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 7 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 5 binary64)))) c) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c) (/.f64 #s(literal 1 binary64) b)) c))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) #s(literal 0 binary64)) (+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (*.f64 #s(literal 2 binary64) a))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (*.f64 c #s(literal -2 binary64)) (+.f64 (/.f64 a b) (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (/.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) #s(approx (+ (* (/ (* a a) b) (/ (* c c) b)) (* c a)) (*.f64 (+.f64 (*.f64 (/.f64 a b) (/.f64 a b)) (/.f64 a c)) (*.f64 c c))))) b)) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) #s(approx (+ (* (- (* (+ (/ (* (* -1/4 a) (/ (* (pow c 4) 20) (pow b 6))) b) (/ (* (pow c 3) -2) (pow b 5))) a) (/ (* c c) (pow b 3))) a) (/ c (neg b))) (*.f64 #s(approx (- (* (+ (* (- (/ (* -5 (* (pow a 3) c)) (pow b 7)) (/ (* 2 (* a a)) (pow b 5))) c) (/ (neg a) (pow b 3))) c) (/ 1 b)) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64)))) (+.f64 (/.f64 (*.f64 #s(literal 5 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) (*.f64 (/.f64 a b) (/.f64 c b)))) (neg.f64 b))) c))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) #s(approx (+ (* (- (* (+ (/ (* (* -1/4 a) (/ (* (pow c 4) 20) (pow b 6))) b) (/ (* (pow c 3) -2) (pow b 5))) a) (/ (* c c) (pow b 3))) a) (/ c (neg b))) (*.f64 #s(approx (- (* (+ (* (- (/ (* -5 (* (pow a 3) c)) (pow b 7)) (/ (* 2 (* a a)) (pow b 5))) c) (/ (neg a) (pow b 3))) c) (/ 1 b)) (/.f64 #s(literal -1 binary64) b)) c))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* (* 4 a) c)) (*.f64 (-.f64 (/.f64 (*.f64 b b) c) (*.f64 #s(literal 4 binary64) a)) c)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) #s(approx (+ (* (- (* (+ (/ (* (* -1/4 a) (/ (* (pow c 4) 20) (pow b 6))) b) (/ (* (pow c 3) -2) (pow b 5))) a) (/ (* c c) (pow b 3))) a) (/ c (neg b))) (*.f64 #s(approx (- (* (+ (* (- (/ (* -5 (* (pow a 3) c)) (pow b 7)) (/ (* 2 (* a a)) (pow b 5))) c) (/ (neg a) (pow b 3))) c) (/ 1 b)) (/.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))) (-.f64 (*.f64 (neg.f64 a) (/.f64 c (*.f64 b b))) #s(literal 1 binary64))) b)) c))) (/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 b) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c)) (*.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a #s(literal 4 binary64)) c))))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a) (/.f64 c (neg.f64 b)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (/.f64 (*.f64 #s(literal -2 binary64) (+.f64 (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)) (*.f64 c a))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (*.f64 c #s(literal -2 binary64)) (+.f64 (/.f64 a b) (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 b) #s(literal 3 binary64))) (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b))))) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (/.f64 #s(approx (+ (pow (- (* b b) (* c (* a 4))) 3/2) (pow (neg b) 3)) (*.f64 b (+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a c) #s(literal -12 binary64))) (-.f64 (*.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a c) #s(literal -12 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 48 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a c) #s(literal -12 binary64)) #s(literal 2 binary64))))))) (*.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 48 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a c) #s(literal -12 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64)))) (pow.f64 b #s(literal 6 binary64)))) (+.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (-.f64 (*.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a c) #s(literal -12 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 48 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a c) #s(literal -12 binary64)) #s(literal 2 binary64)))))) (pow.f64 b #s(literal 4 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 48 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a c) #s(literal -12 binary64)) #s(literal 2 binary64)))) (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a c) #s(literal -12 binary64))))))) (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (/ (+ (pow (- (* b b) (* c (* a 4))) 3/2) (pow (neg b) 3)) (+ (- (* b b) (* c (* a 4))) (- (* b b) (* (sqrt (- (* b b) (* c (* a 4)))) (neg b))))) (* 2 a)) (*.f64 (/.f64 #s(literal 1/12 binary64) a) (/.f64 (*.f64 (*.f64 a c) #s(literal -12 binary64)) b))) (/.f64 (-.f64 (*.f64 b b) (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (pow.f64 (neg.f64 b) #s(literal 3 binary64))) (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 c (+.f64 (*.f64 c (+.f64 (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64))))) (*.f64 #s(literal -2 binary64) (/.f64 a b))))) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (/.f64 (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))))) #s(approx (/ (/ (+ (pow (- (* b b) (* c (* a 4))) 3/2) (pow (neg b) 3)) (+ (- (* b b) (* c (* a 4))) (- (* b b) (* (sqrt (- (* b b) (* c (* a 4)))) (neg b))))) (* 2 a)) (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 a c)) (*.f64 a b))) #s(approx (/ (/ (+ (pow (- (* b b) (* c (* a 4))) 3/2) (pow (neg b) 3)) (+ (- (* b b) (* c (* a 4))) (- (* b b) (* (sqrt (- (* b b) (* c (* a 4)))) (neg b))))) (* 2 a)) (*.f64 (/.f64 #s(literal 1/12 binary64) a) (*.f64 a (*.f64 c (/.f64 #s(literal -12 binary64) b))))) #s(approx (/ (/ (+ (pow (- (* b b) (* c (* a 4))) 3/2) (pow (neg b) 3)) (+ (- (* b b) (* c (* a 4))) (- (* b b) (* (sqrt (- (* b b) (* c (* a 4)))) (neg b))))) (* 2 a)) (/.f64 (*.f64 (/.f64 (*.f64 #s(literal -12 binary64) (*.f64 a c)) b) #s(literal -1/12 binary64)) (neg.f64 a))) (/.f64 (+.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a) (/.f64 c (neg.f64 b)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (/.f64 (*.f64 #s(literal -2 binary64) (+.f64 (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)) (*.f64 c a))) b)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (-.f64 (/.f64 c (neg.f64 b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 3 binary64))))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (/.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (+.f64 (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)) (*.f64 c a)))) b)) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (*.f64 (*.f64 c c) (*.f64 c (/.f64 #s(literal -2 binary64) (pow.f64 b #s(literal 5 binary64)))))) a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a) (/.f64 c (neg.f64 b)))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) #s(approx (- (/ c (neg b)) (/ (* (* c c) a) (pow b 3))) (*.f64 (*.f64 (neg.f64 c) c) (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) c) (/.f64 a (pow.f64 b #s(literal 3 binary64))))))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) #s(approx (/ (+ (/ (* (pow (* c a) 3) -4) (pow b 4)) (* -2 (+ (* (/ (* a a) b) (/ (* c c) b)) (* c a)))) b) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b b) #s(literal -2 binary64)) (+.f64 (*.f64 (*.f64 (*.f64 b b) c) a) (*.f64 (*.f64 (*.f64 c c) a) a))) (*.f64 #s(literal 4 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 b #s(literal 5 binary64))))) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))))) b) (*.f64 (*.f64 c c) (*.f64 c (/.f64 #s(literal -2 binary64) (pow.f64 b #s(literal 5 binary64)))))) a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a) (/.f64 c (neg.f64 b)))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (+.f64 a a)) (/.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))))) (*.f64 #s(literal 4 binary64) a)) a) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) #s(approx (- (/ c (neg b)) (/ (* (* c c) a) (pow b 3))) (/.f64 (*.f64 (+.f64 (*.f64 c a) (*.f64 b b)) (*.f64 (neg.f64 c) c)) (*.f64 (pow.f64 b #s(literal 3 binary64)) c)))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) #s(approx (/ (+ (/ (* (pow (* c a) 3) -4) (pow b 4)) (* -2 (+ (* (/ (* a a) b) (/ (* c c) b)) (* c a)))) b) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b b) #s(literal -2 binary64)) (+.f64 (*.f64 (*.f64 (*.f64 b b) c) a) (*.f64 (*.f64 (*.f64 c c) a) a))) (*.f64 #s(literal 4 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 b #s(literal 5 binary64))))) (+.f64 a a)))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)))) (*.f64 #s(literal 2 binary64) a)))
((+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 c (neg.f64 b))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b))) b)) (/.f64 (/.f64 (-.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64)))) (*.f64 b b)) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)))
((+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (/ (- (- (* b b) (* c (* a 4))) (* b b)) (- (sqrt (- (* b b) (* c (* a 4)))) (neg b))) (* 2 a)) (/.f64 (neg.f64 b) a)) (/.f64 #s(approx (/ (- (- (* b b) (* c (* a 4))) (* b b)) (- (sqrt (- (* b b) (* c (* a 4)))) (neg b))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 4 a) c)))) (* 2 a)) (/.f64 (-.f64 (neg.f64 c) (/.f64 (*.f64 (*.f64 c c) a) (*.f64 b b))) b)) (/.f64 (-.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 b b)) (*.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (/.f64 #s(approx (- (- (* b b) (* c (* a 4))) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 4 binary64))))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) #s(approx (+ (/ (/ (neg b) a) 2) (/ (sqrt (- (* b b) (* c (* a 4)))) (* 2 a))) (*.f64 (/.f64 b a) #s(literal 0 binary64))) #s(approx (/ (/ (- (- (* b b) (* c (* a 4))) (* b b)) (- (sqrt (- (* b b) (* c (* a 4)))) (neg b))) (* 2 a)) (*.f64 (+.f64 (/.f64 (neg.f64 c) (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))) (+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) #s(approx (/ (sqrt (- (* b b) (* c (* a 4)))) (* 2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (/.f64 (/.f64 (-.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a)) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 4 binary64) a) c))) (neg.f64 b))))
((/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))
(#s(approx (/ (+ x 1) (- 1 x)) (-.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1 binary64))) #s(approx (/ (+ x 1) (- 1 x)) #s(literal -1 binary64)) #s(approx (/ (+ x 1) (- 1 x)) #s(literal 1 binary64)) #s(approx (/ (+ x 1) (- 1 x)) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x))) #s(approx (/ (+ x 1) (- 1 x)) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (-.f64 x #s(literal -1 binary64))) x) #s(literal -1 binary64))))
(#s(approx (/ (+ x 1) (- 1 x)) (+.f64 x (-.f64 x #s(literal -1 binary64)))) #s(approx (/ (+ x 1) (- 1 x)) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -2 binary64)) x) #s(literal -2 binary64)) x) #s(literal -1 binary64))) #s(approx (/ (+ x 1) (- 1 x)) (-.f64 (+.f64 x x) #s(literal -1 binary64))) #s(approx (/ (+ x 1) (- 1 x)) (/.f64 (-.f64 #s(literal -2 binary64) x) x)))
(#s(approx (/ (+ x 1) (- 1 x)) (+.f64 x #s(approx (- x -1) #s(literal 1 binary64)))))
((/.f64 x (*.f64 y y)))
((/.f64 (/.f64 x y) y))
((+.f64 (+.f64 x y) z))
((+.f64 #s(approx (+ x y) x) z) #s(approx (+ (+ x y) z) x) #s(approx (+ (+ x y) z) z) #s(approx (+ (+ x y) z) (+.f64 y x)) (+.f64 #s(approx (+ x y) y) z))
((*.f64 (+.f64 x y) (-.f64 #s(literal 1 binary64) z)))
((*.f64 (+.f64 x y) #s(approx (- 1 z) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) z))) #s(approx (* (+ x y) (- 1 z)) (+.f64 y x)) (*.f64 #s(approx (+ x y) x) (-.f64 #s(literal 1 binary64) z)) (*.f64 #s(approx (+ x y) y) (-.f64 #s(literal 1 binary64) z)) (*.f64 (+.f64 x y) #s(approx (- 1 z) (neg.f64 z))))
((*.f64 #s(approx (+ y x) y) #s(approx (- 1 z) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) z))) (*.f64 #s(approx (+ y x) x) #s(approx (- 1 z) (neg.f64 z))) (*.f64 #s(approx (+ y x) y) #s(approx (- 1 z) (neg.f64 z))) (+.f64 (*.f64 #s(approx (- 1 z) (neg.f64 z)) y) (*.f64 #s(approx (- 1 z) (neg.f64 z)) x)) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 z z)) #s(approx (+ x y) y)) (+.f64 z #s(literal 1 binary64))))
((*.f64 #s(approx (+ y x) y) #s(approx (- 1 z) #s(approx (* (- (/ 1 z) 1) z) #s(literal 1 binary64)))) (/.f64 #s(approx (* (- 1 (* z z)) (+ x y)) (+.f64 x y)) (+.f64 z #s(literal 1 binary64))))
((*.f64 (+.f64 x y) (+.f64 z #s(literal 1 binary64))))
((+.f64 (+.f64 y x) (*.f64 z (+.f64 y x))) #s(approx (* (+ x y) (+ z 1)) (+.f64 y x)) (*.f64 #s(approx (+ x y) x) (+.f64 z #s(literal 1 binary64))) (*.f64 #s(approx (+ x y) y) (+.f64 z #s(literal 1 binary64))) (*.f64 (+.f64 x y) #s(approx (+ z 1) z)))
((+.f64 (*.f64 #s(approx (+ x y) y) z) #s(approx (+ x y) y)) #s(approx (* (+ x y) (+ z 1)) #s(approx (+ y x) x)) #s(approx (* (+ x y) (+ z 1)) #s(approx (+ y x) y)) (*.f64 #s(approx (+ x y) x) #s(approx (+ z 1) z)) (*.f64 #s(approx (+ x y) y) #s(approx (+ z 1) z)))
((+.f64 (*.f64 #s(approx (+ z 1) z) y) (*.f64 #s(approx (+ z 1) z) x)))
((-.f64 x (/.f64 (*.f64 y (-.f64 z t)) a)))
((-.f64 x (*.f64 (/.f64 y a) (-.f64 z t))) #s(approx (- x (/ (* y (- z t)) a)) x) #s(approx (- x (/ (* y (- z t)) a)) (*.f64 (/.f64 (neg.f64 z) a) y)) #s(approx (- x (/ (* y (- z t)) a)) (+.f64 (*.f64 (/.f64 t a) y) x)) (-.f64 x (/.f64 (*.f64 y #s(approx (- z t) (neg.f64 t))) a)))
((-.f64 x (*.f64 (/.f64 (-.f64 z t) a) y)) #s(approx (- x (/ (* y (- z t)) a)) (*.f64 (/.f64 t a) y)) #s(approx (- x (/ (* y (- z t)) a)) (/.f64 (*.f64 (neg.f64 z) y) a)) #s(approx (- x (/ (* y (- z t)) a)) (+.f64 (/.f64 (*.f64 t y) a) x)) (-.f64 x (/.f64 #s(approx (* y (- z t)) (*.f64 (-.f64 y (*.f64 (/.f64 t z) y)) z)) a)))
((-.f64 x (/.f64 (*.f64 y #s(approx (- z t) z)) a)) #s(approx (- x (/ (* y (- z t)) a)) (*.f64 (/.f64 y a) t)) #s(approx (- x (/ (* y (- z t)) a)) (*.f64 (/.f64 y a) (neg.f64 z))) (-.f64 x (/.f64 #s(approx (* y (- z t)) (*.f64 #s(approx (- y (* (/ t z) y)) (*.f64 (/.f64 t (neg.f64 z)) y)) z)) a)) (-.f64 x (/.f64 (*.f64 (+.f64 t z) (*.f64 (-.f64 z t) y)) (*.f64 (+.f64 t z) a))))
((+.f64 x (/.f64 (*.f64 y (-.f64 z t)) a)))
((+.f64 x (*.f64 (/.f64 y a) (-.f64 z t))) #s(approx (+ x (/ (* y (- z t)) a)) x) #s(approx (+ x (/ (* y (- z t)) a)) (*.f64 (neg.f64 y) (/.f64 t a))) #s(approx (+ x (/ (* y (- z t)) a)) (/.f64 (*.f64 (-.f64 z t) y) a)) (+.f64 x (/.f64 (*.f64 y #s(approx (- z t) z)) a)))
((+.f64 x (*.f64 (/.f64 y a) #s(approx (- z t) z))) #s(approx (+ x (/ (* y (- z t)) a)) (*.f64 (/.f64 z a) y)) #s(approx (+ x (/ (* y (- z t)) a)) (*.f64 (neg.f64 t) (/.f64 y a))) #s(approx (+ x (/ (* y (- z t)) a)) (*.f64 (/.f64 (-.f64 z t) a) y)) (+.f64 x (*.f64 (/.f64 #s(approx (- z t) z) a) y)))
((+.f64 x (*.f64 (/.f64 y a) #s(approx (- z t) (neg.f64 t)))) #s(approx (+ x (/ (* y (- z t)) a)) (*.f64 (/.f64 y a) z)) #s(approx (+ x (/ (* y (- z t)) a)) (/.f64 (*.f64 (neg.f64 y) t) a)) #s(approx (+ x (/ (* y (- z t)) a)) (/.f64 (*.f64 (-.f64 (*.f64 z a) (*.f64 t a)) y) (*.f64 a a))) (+.f64 x (*.f64 (*.f64 (+.f64 t z) (-.f64 z t)) (/.f64 y (*.f64 (+.f64 t z) a)))))
((+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)))
((+.f64 x (*.f64 (/.f64 y t) (-.f64 z x))) #s(approx (+ x (/ (* y (- z x)) t)) x) #s(approx (+ x (/ (* y (- z x)) t)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 y t)) x)) (+.f64 x #s(approx (/ (* y (- z x)) t) (*.f64 (/.f64 z t) y))) (+.f64 x (/.f64 (*.f64 y #s(approx (- z x) (neg.f64 x))) t)))
(#s(approx (+ x (* (/ y t) (- z x))) (*.f64 (-.f64 (*.f64 (/.f64 y t) (-.f64 #s(literal 1 binary64) (/.f64 z x))) #s(literal 1 binary64)) (neg.f64 x))) #s(approx (+ x (* (/ y t) (- z x))) (*.f64 (/.f64 y t) z)) #s(approx (+ x (/ (* y (- z x)) t)) #s(approx (* (- 1 (/ y t)) x) (*.f64 (/.f64 (neg.f64 x) t) y))) #s(approx (+ x (/ (* y (- z x)) t)) (/.f64 (*.f64 (-.f64 z x) y) t)) (+.f64 x (/.f64 (*.f64 (*.f64 (+.f64 z x) (-.f64 z x)) y) (*.f64 (+.f64 z x) t))))
(#s(approx (+ x (/ (* y (- z x)) t)) (*.f64 (/.f64 y t) (-.f64 z x))) #s(approx (+ x (/ (* y (- z x)) t)) (*.f64 (/.f64 z t) y)) #s(approx (+ x (/ (* y (- z x)) t)) (*.f64 #s(approx (- 1 (/ y t)) (/.f64 (neg.f64 y) t)) x)) (+.f64 x (/.f64 (*.f64 #s(approx (* (+ z x) (- z x)) (*.f64 z z)) y) (*.f64 (+.f64 z x) t))) #s(approx (+ x (/ (* y (- z x)) t)) #s(approx (/ (* (- z x) y) t) (*.f64 (/.f64 (-.f64 y (*.f64 y (/.f64 x z))) t) z))))
((sqrt.f64 (fabs.f64 (-.f64 x y))))
((sqrt.f64 (fabs.f64 #s(approx (- x y) x))) (sqrt.f64 (-.f64 y x)) (/.f64 (-.f64 y x) (sqrt.f64 (-.f64 y x))))
((sqrt.f64 #s(approx (- y x) y)))
((/.f64 (-.f64 (+.f64 x y) z) (*.f64 t #s(literal 2 binary64))))
((/.f64 (-.f64 (+.f64 x y) z) (+.f64 t t)) #s(approx (/ (- (+ x y) z) (* t 2)) (*.f64 (/.f64 #s(literal -1/2 binary64) t) z)) (/.f64 #s(approx (- (+ x y) z) y) (*.f64 t #s(literal 2 binary64))) (/.f64 #s(approx (- (+ x y) z) (+.f64 y x)) (*.f64 t #s(literal 2 binary64))) (/.f64 (-.f64 #s(approx (+ x y) y) z) (*.f64 t #s(literal 2 binary64))))
((/.f64 #s(approx (- (+ x y) z) (*.f64 (-.f64 (/.f64 (-.f64 y z) x) #s(literal -1 binary64)) x)) (+.f64 t t)) (/.f64 #s(approx (- (+ x y) z) x) (+.f64 t t)) #s(approx (/ (- (+ x y) z) (+ t t)) (*.f64 (/.f64 x t) #s(literal 1/2 binary64))) (/.f64 #s(approx (- (+ x y) z) (+.f64 y x)) (+.f64 t t)) (/.f64 (-.f64 #s(approx (+ y x) y) z) (+.f64 t t)))
((/.f64 (-.f64 #s(approx (+ y x) x) z) (+.f64 t t)) (/.f64 #s(approx (- (+ x y) z) #s(approx (+ y x) y)) (+.f64 t t)) (/.f64 #s(approx (- (+ x y) z) (neg.f64 z)) (+.f64 t t)) (-.f64 (/.f64 #s(approx (+ x y) y) (*.f64 #s(literal 2 binary64) t)) (/.f64 z (*.f64 #s(literal 2 binary64) t))) (/.f64 #s(approx (- (+ x y) z) (*.f64 (-.f64 #s(approx (/ (- y z) x) (/.f64 (neg.f64 z) x)) #s(literal -1 binary64)) x)) (+.f64 t t)))
((sqrt.f64 (+.f64 x y)))
((sqrt.f64 #s(approx (+ x y) y)) (sqrt.f64 #s(approx (+ x y) (*.f64 (+.f64 (/.f64 y x) #s(literal 1 binary64)) x))) (/.f64 (sqrt.f64 (*.f64 (+.f64 y x) (-.f64 y x))) (sqrt.f64 (-.f64 y x))))
((atan.f64 (/.f64 v (sqrt.f64 (-.f64 (*.f64 v v) (*.f64 (*.f64 #s(literal 2 binary64) #s(literal 49/5 binary64)) H))))))
((atan.f64 (/.f64 v (sqrt.f64 (-.f64 (*.f64 v v) (*.f64 H #s(literal 98/5 binary64)))))) (atan.f64 #s(approx (/ v (sqrt (- (* v v) (* (* 2 49/5) H)))) #s(literal -1 binary64))) (atan.f64 #s(approx (/ v (sqrt (- (* v v) (* (* 2 49/5) H)))) (-.f64 (*.f64 (/.f64 H (*.f64 v v)) #s(literal 49/5 binary64)) #s(literal -1 binary64)))) #s(approx (atan (/ v (sqrt (- (* v v) (* (* 2 49/5) H))))) (atan.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 v v) (*.f64 #s(literal 98/5 binary64) H)))) v))) (atan.f64 (/.f64 v (*.f64 (pow.f64 (-.f64 (*.f64 v v) (*.f64 H #s(literal 98/5 binary64))) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (*.f64 v v) (*.f64 H #s(literal 98/5 binary64))) #s(literal 1/4 binary64))))))
((atan.f64 (/.f64 v (*.f64 (pow.f64 (-.f64 (*.f64 v v) (*.f64 H #s(literal 98/5 binary64))) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (-.f64 (*.f64 v v) (*.f64 #s(literal 98/5 binary64) H)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (*.f64 v v) (*.f64 #s(literal 98/5 binary64) H)) #s(literal 1/8 binary64)))))) (atan.f64 #s(approx (/ v (sqrt (- (* v v) (* (* 2 49/5) H)))) #s(approx (- (* (/ H (* v v)) 49/5) -1) #s(literal 1 binary64)))) #s(approx (atan (/ v (sqrt (- (* v v) (* (* 2 49/5) H))))) (atan.f64 (*.f64 (sqrt.f64 #s(approx (/ 1 (- (* v v) (* 98/5 H))) (/.f64 #s(literal -5/98 binary64) H))) v))) (atan.f64 (/.f64 v (sqrt.f64 #s(approx (- (* v v) (* (* 2 49/5) H)) (*.f64 #s(literal -98/5 binary64) H))))) (atan.f64 (/.f64 v (sqrt.f64 #s(approx (- (* v v) (* (* 2 49/5) H)) (*.f64 (*.f64 (-.f64 (*.f64 (/.f64 H (*.f64 v v)) #s(literal -98/5 binary64)) #s(literal -1 binary64)) v) v))))))
((atan.f64 (/.f64 v (*.f64 (pow.f64 (-.f64 (*.f64 v v) (*.f64 H #s(literal 98/5 binary64))) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (-.f64 (*.f64 v v) (*.f64 #s(literal 98/5 binary64) H)) #s(literal 1/8 binary64)) #s(literal 2 binary64))))) (atan.f64 (/.f64 v (pow.f64 (pow.f64 (-.f64 (*.f64 v v) (*.f64 #s(literal 98/5 binary64) H)) #s(literal 1/4 binary64)) #s(literal 2 binary64)))) (atan.f64 (/.f64 (/.f64 v (pow.f64 (-.f64 (*.f64 v v) (*.f64 #s(literal 98/5 binary64) H)) #s(literal 1/4 binary64))) (pow.f64 (-.f64 (*.f64 v v) (*.f64 #s(literal 98/5 binary64) H)) #s(literal 1/4 binary64)))))
((*.f64 (-.f64 a (/.f64 #s(literal 1 binary64) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (*.f64 #s(literal 9 binary64) (-.f64 a (/.f64 #s(literal 1 binary64) #s(literal 3 binary64)))))) rand))))
(#s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) (+.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) rand) (sqrt.f64 (-.f64 a #s(literal 1/3 binary64)))) (-.f64 a #s(literal 1/3 binary64)))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) (-.f64 a #s(literal 1/3 binary64))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -1/3 binary64) rand) (sqrt.f64 (/.f64 #s(literal 1 binary64) a)))) a)) (*.f64 (-.f64 (/.f64 rand (sqrt.f64 (*.f64 (-.f64 a #s(literal 1/3 binary64)) #s(literal 9 binary64)))) #s(literal -1 binary64)) (-.f64 a #s(literal 1/3 binary64))) (*.f64 (-.f64 a (/.f64 #s(literal 1 binary64) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (/.f64 rand (sqrt.f64 (-.f64 a #s(literal 1/3 binary64))))))))
(#s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) (+.f64 (*.f64 (*.f64 (sqrt.f64 (-.f64 a #s(literal 1/3 binary64))) #s(literal 1/3 binary64)) rand) (-.f64 a #s(literal 1/3 binary64)))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) #s(approx (- a 1/3) #s(literal -1/3 binary64))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) #s(approx (* (- 1 (* (* -1/3 rand) (sqrt (/ 1 a)))) a) (+.f64 (*.f64 (*.f64 (sqrt.f64 a) rand) #s(literal 1/3 binary64)) a))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) #s(approx (* (- 1 (* (* -1/3 rand) (sqrt (/ 1 a)))) a) (*.f64 (-.f64 (/.f64 a rand) (*.f64 (sqrt.f64 a) #s(literal -1/3 binary64))) rand))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) (*.f64 #s(approx (- 1 (* (* -1/3 rand) (sqrt (/ 1 a)))) (/.f64 (+.f64 (*.f64 (*.f64 (sqrt.f64 a) rand) #s(literal 1/3 binary64)) a) a)) a)))
(#s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) (-.f64 (-.f64 a #s(literal 1/3 binary64)) (*.f64 #s(literal -1/3 binary64) (*.f64 (sqrt.f64 (-.f64 a #s(literal 1/3 binary64))) rand)))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) #s(approx (- a 1/3) a)) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) #s(approx (* (- 1 (* (* -1/3 rand) (sqrt (/ 1 a)))) a) (*.f64 #s(approx (- (/ a rand) (* (sqrt a) -1/3)) (*.f64 (sqrt.f64 a) #s(literal 1/3 binary64))) rand))) #s(approx (* (- (/ rand (sqrt (* (- a 1/3) 9))) -1) (- a 1/3)) (*.f64 (sqrt.f64 (-.f64 a #s(literal 1/3 binary64))) (*.f64 rand #s(literal 1/3 binary64)))) #s(approx (* (- a (/ 1 3)) (+ 1 (* (/ 1 (sqrt (* 9 (- a (/ 1 3))))) rand))) (*.f64 #s(approx (- 1 (* (* -1/3 rand) (sqrt (/ 1 a)))) (*.f64 (*.f64 rand #s(literal 1/3 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) a)))) a)))
((/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 #s(literal 2 binary64) i) (*.f64 #s(literal 2 binary64) i))) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) i) (*.f64 #s(literal 2 binary64) i)) #s(literal 1 binary64))))
((/.f64 #s(approx (/ (* (* i i) (* i i)) (* (* 2 i) (* 2 i))) (*.f64 #s(literal 1/4 binary64) (*.f64 i i))) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) i) (*.f64 #s(literal 2 binary64) i)) #s(literal 1 binary64))) #s(approx (/ (/ (* (* i i) (* i i)) (* (* 2 i) (* 2 i))) (- (* (* 2 i) (* 2 i)) 1)) #s(literal 1/16 binary64)) #s(approx (/ (/ (* (* i i) (* i i)) (* (* 2 i) (* 2 i))) (- (* (* 2 i) (* 2 i)) 1)) (*.f64 (*.f64 #s(literal -1/4 binary64) i) i)) #s(approx (/ (/ (* (* i i) (* i i)) (* (* 2 i) (* 2 i))) (- (* (* 2 i) (* 2 i)) 1)) (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 i i)) #s(literal 1/16 binary64))) #s(approx (/ (/ (* (* i i) (* i i)) (* (* 2 i) (* 2 i))) (- (* (* 2 i) (* 2 i)) 1)) (*.f64 (-.f64 (*.f64 (neg.f64 i) i) #s(literal 1/4 binary64)) (*.f64 i i))))
(#s(approx (/ (/ (* (* i i) (* i i)) (* (* 2 i) (* 2 i))) (- (* (* 2 i) (* 2 i)) 1)) (*.f64 (*.f64 (-.f64 #s(literal -1/4 binary64) (*.f64 i i)) i) i)) (/.f64 #s(approx (/ (* (* i i) (* i i)) (* (* 2 i) (* 2 i))) (*.f64 #s(literal 1/4 binary64) (*.f64 i i))) (-.f64 (*.f64 (*.f64 i i) #s(literal 4 binary64)) #s(literal 1 binary64))))
((/.f64 (/.f64 (*.f64 (*.f64 i (+.f64 (+.f64 alpha beta) i)) (+.f64 (*.f64 beta alpha) (*.f64 i (+.f64 (+.f64 alpha beta) i)))) (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)))) (-.f64 (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i))) #s(literal 1 binary64))))
(#s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) #s(literal 1/16 binary64)) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (*.f64 (/.f64 (+.f64 alpha i) beta) (/.f64 i beta))) (/.f64 #s(approx (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (*.f64 #s(literal 1/4 binary64) (*.f64 i i))) (-.f64 (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i))) #s(literal 1 binary64))) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (/.f64 (-.f64 (*.f64 i (+.f64 (/.f64 (*.f64 (+.f64 alpha i) (+.f64 i (+.f64 alpha i))) beta) (+.f64 alpha i))) (/.f64 (*.f64 (*.f64 (+.f64 alpha i) i) (-.f64 (*.f64 #s(literal 4 binary64) alpha) (*.f64 #s(literal -8 binary64) i))) beta)) (*.f64 beta beta))) (/.f64 (/.f64 (*.f64 (*.f64 i (+.f64 (+.f64 alpha beta) i)) (+.f64 (*.f64 beta alpha) (*.f64 i (+.f64 (+.f64 alpha beta) i)))) (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)))) (-.f64 #s(approx (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) (*.f64 (+.f64 beta alpha) (+.f64 (*.f64 #s(literal 4 binary64) i) (+.f64 beta alpha)))) #s(literal 1 binary64))))
((/.f64 (*.f64 (/.f64 (+.f64 (*.f64 beta alpha) (*.f64 (+.f64 (+.f64 beta alpha) i) i)) (+.f64 (+.f64 (+.f64 beta alpha) i) i)) (*.f64 (+.f64 (+.f64 beta alpha) i) (/.f64 i (+.f64 (+.f64 (+.f64 beta alpha) i) i)))) (-.f64 (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i))) #s(literal 1 binary64))) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (*.f64 i (/.f64 (+.f64 alpha i) (*.f64 beta beta)))) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (/.f64 (/.f64 (*.f64 (+.f64 alpha i) i) (neg.f64 beta)) (neg.f64 beta))) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (*.f64 #s(approx (/ (+ alpha i) beta) (*.f64 (neg.f64 i) (-.f64 (/.f64 (neg.f64 alpha) (*.f64 beta i)) (/.f64 #s(literal 1 binary64) beta)))) (/.f64 i beta))) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (/.f64 (+.f64 (*.f64 (*.f64 (+.f64 alpha i) i) (/.f64 (+.f64 (*.f64 #s(literal 2 binary64) i) alpha) beta)) (-.f64 (*.f64 (+.f64 alpha i) i) (*.f64 (-.f64 (*.f64 #s(literal 4 binary64) alpha) (*.f64 #s(literal -8 binary64) i)) (*.f64 (/.f64 (+.f64 alpha i) beta) i)))) (*.f64 beta beta))))
((/.f64 (*.f64 (/.f64 #s(approx (+ (* beta alpha) (* (+ (+ beta alpha) i) i)) (*.f64 (+.f64 i beta) i)) (+.f64 (+.f64 (+.f64 beta alpha) i) i)) (*.f64 (+.f64 (+.f64 beta alpha) i) (/.f64 i (+.f64 (+.f64 (+.f64 beta alpha) i) i)))) (-.f64 (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i))) #s(literal 1 binary64))) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (*.f64 i (/.f64 #s(approx (+ alpha i) alpha) (*.f64 beta beta)))) #s(approx (/ (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (- (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i))) 1)) (/.f64 (*.f64 (/.f64 (+.f64 i alpha) beta) i) beta)) (/.f64 #s(approx (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (*.f64 (+.f64 alpha i) i)) (-.f64 (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i))) #s(literal 1 binary64))) (/.f64 #s(approx (/ (* (* i (+ (+ alpha beta) i)) (+ (* beta alpha) (* i (+ (+ alpha beta) i)))) (* (+ (+ alpha beta) (* 2 i)) (+ (+ alpha beta) (* 2 i)))) (*.f64 (+.f64 #s(literal 1/4 binary64) (/.f64 (*.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 2 binary64) (+.f64 beta alpha)) (+.f64 beta alpha))) i)) (*.f64 i i))) (-.f64 (*.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i))) #s(literal 1 binary64))))
((/.f64 (/.f64 (/.f64 (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 beta alpha)) #s(literal 1 binary64)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64)))) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64)))) (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64))))
((/.f64 (/.f64 (/.f64 (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 beta alpha)) #s(literal 1 binary64)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64)))) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64)))) #s(approx (+ (+ (+ alpha beta) (* 2 1)) 1) (*.f64 (-.f64 (/.f64 (-.f64 alpha #s(literal -3 binary64)) beta) #s(literal -1 binary64)) beta))) #s(approx (/ (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (+ (+ (+ alpha beta) (* 2 1)) 1)) (/.f64 (-.f64 alpha #s(literal -1 binary64)) (*.f64 beta beta))) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (+.f64 beta alpha)) (*.f64 beta alpha)) (*.f64 (+.f64 #s(literal 2 binary64) (+.f64 beta alpha)) (*.f64 (+.f64 #s(literal 3 binary64) (+.f64 beta alpha)) (+.f64 #s(literal 2 binary64) (+.f64 beta alpha))))) (/.f64 #s(approx (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (/.f64 (-.f64 (-.f64 (+.f64 (/.f64 (-.f64 alpha #s(literal -1 binary64)) beta) alpha) #s(literal -1 binary64)) (*.f64 (-.f64 alpha #s(literal -1 binary64)) (/.f64 (*.f64 (-.f64 alpha #s(literal -2 binary64)) #s(literal 2 binary64)) beta))) beta)) (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (*.f64 (/.f64 (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (+.f64 beta alpha)) (*.f64 beta alpha)) (+.f64 #s(literal 2 binary64) (+.f64 beta alpha))) (+.f64 #s(literal 8 binary64) (pow.f64 (+.f64 beta alpha) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (+.f64 beta alpha) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) (+.f64 beta alpha)))) (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64))))
((/.f64 (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) alpha) (+.f64 (*.f64 beta alpha) beta)) (*.f64 (+.f64 #s(literal 3 binary64) (+.f64 beta alpha)) (+.f64 (+.f64 #s(literal 2 binary64) alpha) beta))) (+.f64 (+.f64 #s(literal 2 binary64) alpha) beta)) #s(approx (/ (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (+ (+ (+ alpha beta) (* 2 1)) 1)) (/.f64 #s(approx (- alpha -1) #s(literal 1 binary64)) (*.f64 beta beta))) #s(approx (/ (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (+ (+ (+ alpha beta) (* 2 1)) 1)) (/.f64 (/.f64 (-.f64 (*.f64 alpha alpha) #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) alpha)) (*.f64 beta beta))) (/.f64 (+.f64 #s(approx (+ 1 (+ beta alpha)) beta) (*.f64 beta alpha)) (*.f64 (+.f64 #s(literal 2 binary64) (+.f64 beta alpha)) (*.f64 (+.f64 #s(literal 3 binary64) (+.f64 beta alpha)) (+.f64 #s(literal 2 binary64) (+.f64 beta alpha))))) (/.f64 (+.f64 (-.f64 (+.f64 (+.f64 #s(literal 2 binary64) alpha) beta) #s(literal 1 binary64)) (*.f64 beta alpha)) (*.f64 (+.f64 #s(literal 2 binary64) (+.f64 beta alpha)) (*.f64 (+.f64 #s(literal 3 binary64) (+.f64 beta alpha)) (+.f64 #s(literal 2 binary64) (+.f64 beta alpha))))))
((/.f64 #s(approx (/ (+ (+ 1 alpha) (+ (* beta alpha) beta)) (* (+ 3 (+ beta alpha)) (+ (+ 2 alpha) beta))) (/.f64 (-.f64 beta #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 3 binary64) beta) (-.f64 beta #s(literal -2 binary64))))) (+.f64 (+.f64 #s(literal 2 binary64) alpha) beta)) #s(approx (/ (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (+ (+ (+ alpha beta) (* 2 1)) 1)) (/.f64 #s(approx (/ (- (* alpha alpha) 1) (+ -1 alpha)) alpha) (*.f64 beta beta))) (/.f64 #s(approx (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (/.f64 (-.f64 alpha #s(literal -1 binary64)) beta)) (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 #s(approx (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (/.f64 #s(approx (- (- (+ (/ (- alpha -1) beta) alpha) -1) (* (- alpha -1) (/ (* (- alpha -2) 2) beta))) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 3 binary64) beta))) beta)) (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 #s(approx (/ (/ (+ (+ (+ alpha beta) (* beta alpha)) 1) (+ (+ alpha beta) (* 2 1))) (+ (+ alpha beta) (* 2 1))) (/.f64 (-.f64 (-.f64 (+.f64 (/.f64 (-.f64 alpha #s(literal -1 binary64)) beta) alpha) #s(literal -1 binary64)) (*.f64 (-.f64 alpha #s(literal -1 binary64)) (/.f64 (*.f64 (-.f64 alpha #s(literal -2 binary64)) #s(literal 2 binary64)) beta))) beta)) #s(approx (+ (+ (+ alpha beta) (* 2 1)) 1) beta)))
((/.f64 (+.f64 (/.f64 (/.f64 (*.f64 (+.f64 alpha beta) (-.f64 beta alpha)) (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i))) (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))
(#s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (*.f64 (+.f64 (*.f64 (/.f64 beta (-.f64 (+.f64 (*.f64 #s(literal 2 binary64) i) beta) #s(literal -2 binary64))) (/.f64 beta (+.f64 (*.f64 #s(literal 2 binary64) i) beta))) #s(literal 1 binary64)) #s(literal 1/2 binary64))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) #s(literal 1/2 binary64)) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 beta alpha) (-.f64 (+.f64 beta alpha) #s(literal -2 binary64)))) #s(literal 1/2 binary64))) (/.f64 (+.f64 (/.f64 #s(approx (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (neg.f64 alpha)) (+.f64 (+.f64 (+.f64 alpha beta) (*.f64 #s(literal 2 binary64) i)) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (/.f64 alpha (-.f64 (+.f64 (*.f64 #s(literal 2 binary64) i) alpha) #s(literal -2 binary64))) (/.f64 alpha (+.f64 (*.f64 #s(literal 2 binary64) i) alpha))) #s(literal 1/2 binary64)))))
(#s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (*.f64 (+.f64 #s(approx (* (/ beta (- (+ (* 2 i) beta) -2)) (/ beta (+ (* 2 i) beta))) (/.f64 beta (+.f64 #s(literal 2 binary64) beta))) #s(literal 1 binary64)) #s(literal 1/2 binary64))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) #s(approx (* (+ (* (/ beta (- (+ (* 2 i) beta) -2)) (/ beta (+ (* 2 i) beta))) 1) 1/2) #s(literal 1 binary64))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) #s(approx (- 1/2 (* (* (/ alpha (- (+ (* 2 i) alpha) -2)) (/ alpha (+ (* 2 i) alpha))) 1/2)) (*.f64 (/.f64 (+.f64 (*.f64 #s(literal 4 binary64) i) #s(literal 2 binary64)) alpha) #s(literal 1/2 binary64)))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) #s(approx (* (+ (* (/ beta (- (+ (* 2 i) beta) -2)) (/ beta (+ (* 2 i) beta))) 1) 1/2) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 #s(literal 4 binary64) i) #s(literal 2 binary64)) #s(literal -1/2 binary64)) beta) #s(literal 1 binary64)))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (*.f64 (+.f64 (/.f64 (*.f64 beta beta) (*.f64 (-.f64 (+.f64 (*.f64 i #s(literal 2 binary64)) beta) #s(literal -2 binary64)) (+.f64 (*.f64 i #s(literal 2 binary64)) beta))) #s(literal 1 binary64)) #s(literal 1/2 binary64))))
(#s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (*.f64 (+.f64 (/.f64 (*.f64 beta beta) (*.f64 (+.f64 i (+.f64 i (-.f64 beta #s(literal -2 binary64)))) (+.f64 (*.f64 i #s(literal 2 binary64)) beta))) #s(literal 1 binary64)) #s(literal 1/2 binary64))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (-.f64 #s(literal 1/2 binary64) #s(approx (* (* (/ alpha (- (+ (* 2 i) alpha) -2)) (/ alpha (+ (* 2 i) alpha))) 1/2) #s(literal 1/2 binary64)))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) #s(approx (* (+ (* (/ beta (- (+ (* 2 i) beta) -2)) (/ beta (+ (* 2 i) beta))) 1) 1/2) (+.f64 (/.f64 #s(approx (* (+ (* 4 i) 2) -1/2) (*.f64 #s(literal -2 binary64) i)) beta) #s(literal 1 binary64)))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) (*.f64 #s(approx (+ 1 (/ (- beta alpha) (- (+ beta alpha) -2))) (/.f64 (+.f64 (*.f64 #s(literal 2 binary64) beta) #s(literal 2 binary64)) alpha)) #s(literal 1/2 binary64))) #s(approx (/ (+ (/ (/ (* (+ alpha beta) (- beta alpha)) (+ (+ alpha beta) (* 2 i))) (+ (+ (+ alpha beta) (* 2 i)) 2)) 1) 2) #s(approx (- 1/2 (* (* (/ alpha (- (+ (* 2 i) alpha) -2)) (/ alpha (+ (* 2 i) alpha))) 1/2)) (*.f64 (/.f64 (+.f64 (*.f64 (*.f64 #s(literal 4 binary64) i) alpha) (*.f64 alpha #s(literal 2 binary64))) (*.f64 alpha alpha)) #s(literal 1/2 binary64)))))
((/.f64 (+.f64 (/.f64 (-.f64 beta alpha) (+.f64 (+.f64 alpha beta) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))
((+.f64 (/.f64 (-.f64 beta alpha) (*.f64 (+.f64 #s(literal 2 binary64) (+.f64 alpha beta)) #s(literal 2 binary64))) #s(literal 1/2 binary64)) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) #s(literal 1 binary64)) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) alpha) beta))) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) (*.f64 (-.f64 (/.f64 beta (-.f64 beta #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64))) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (-.f64 (-.f64 (neg.f64 alpha) alpha) #s(literal 2 binary64)) (*.f64 (-.f64 (-.f64 (neg.f64 alpha) alpha) #s(literal 2 binary64)) (/.f64 (-.f64 alpha #s(literal -2 binary64)) beta)))) beta))))
((/.f64 (+.f64 (*.f64 (-.f64 beta alpha) #s(literal 2 binary64)) (*.f64 (*.f64 (+.f64 (+.f64 alpha beta) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (+.f64 alpha beta) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) #s(approx (* (- (/ beta (- beta -2)) -1) 1/2) #s(literal 1/2 binary64))) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ 1 alpha) #s(literal 1 binary64)) beta))) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) #s(approx (* (- (/ beta (- beta -2)) -1) 1/2) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/8 binary64) beta) #s(literal 1/4 binary64)) beta) #s(literal -1/2 binary64)))) (+.f64 (/.f64 (-.f64 beta alpha) (*.f64 #s(approx (+ 2 (+ alpha beta)) (-.f64 beta #s(literal -2 binary64))) #s(literal 2 binary64))) #s(literal 1/2 binary64)))
(#s(approx (/ (+ (* (- beta alpha) 2) (* (* (+ (+ alpha beta) 2) 2) 1)) (* (* (+ (+ alpha beta) 2) 2) 2)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) (-.f64 alpha (-.f64 alpha #s(literal -2 binary64)))) (-.f64 alpha #s(literal -2 binary64))) #s(literal 1/4 binary64))) (+.f64 #s(approx (/ (- beta alpha) (* (+ 2 (+ alpha beta)) 2)) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) #s(approx (/ (+ (/ (- beta alpha) (+ (+ alpha beta) 2)) 1) 2) (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ 1 alpha) alpha) beta))) (+.f64 #s(approx (/ (- beta alpha) (* (+ 2 (+ alpha beta)) 2)) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) beta) alpha) #s(literal 1/2 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(approx (+ (* (- beta alpha) 2) (* (* (+ (+ alpha beta) 2) 2) 1)) (*.f64 #s(literal 4 binary64) beta)) (*.f64 (*.f64 (+.f64 (+.f64 alpha beta) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64))))
((-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y #s(literal 1/2 binary64)) (log.f64 y))) y) z))
((-.f64 (-.f64 x (-.f64 (*.f64 (log.f64 y) (+.f64 #s(literal 1/2 binary64) y)) y)) z) #s(approx (- (+ (- x (* (+ y 1/2) (log y))) y) z) x) #s(approx (- (+ (- x (* (+ y 1/2) (log y))) y) z) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 y)) y)) #s(approx (- (+ (- x (* (+ y 1/2) (log y))) y) z) (-.f64 (+.f64 y x) (*.f64 (+.f64 #s(literal 1/2 binary64) y) (log.f64 y)))) (-.f64 (+.f64 (-.f64 x (/.f64 (*.f64 (-.f64 (pow.f64 y #s(literal 3 binary64)) #s(literal -1/8 binary64)) (log.f64 y)) (-.f64 (-.f64 (*.f64 y y) #s(literal -1/4 binary64)) (*.f64 #s(literal 1/2 binary64) y)))) y) z))
((-.f64 (-.f64 (-.f64 (+.f64 y x) (*.f64 #s(literal 1/2 binary64) (log.f64 y))) (*.f64 (log.f64 y) y)) z) #s(approx (- (- x (- (* (log y) (+ 1/2 y)) y)) z) (neg.f64 z)) #s(approx (- (+ (- x (* (+ y 1/2) (log y))) y) z) (-.f64 #s(approx (+ y x) y) (*.f64 (+.f64 #s(literal 1/2 binary64) y) (log.f64 y)))) (-.f64 (-.f64 x (-.f64 #s(approx (* (+ 1/2 y) (log y)) (*.f64 (log.f64 y) y)) y)) z) (-.f64 (+.f64 (-.f64 x (/.f64 (*.f64 (-.f64 (pow.f64 y #s(literal 3 binary64)) #s(literal -1/8 binary64)) (log.f64 y)) #s(approx (- (- (* y y) -1/4) (* 1/2 y)) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) y) #s(literal -1/2 binary64)) y) #s(literal 1 binary64)) (*.f64 y y))))) y) z))
((-.f64 x (-.f64 #s(approx (* (+ 1/2 y) (log y)) (*.f64 (log.f64 y) y)) (-.f64 y z))) (-.f64 #s(approx (- (+ y x) (* (+ 1/2 y) (log y))) x) z) #s(approx (- (+ (- x (* (+ y 1/2) (log y))) y) z) (-.f64 #s(approx (+ y x) x) (*.f64 (+.f64 #s(literal 1/2 binary64) y) (log.f64 y)))) (-.f64 (+.f64 (-.f64 x (/.f64 #s(approx (* (- (pow y 3) -1/8) (log y)) (*.f64 #s(literal 1/8 binary64) (log.f64 y))) #s(approx (- (- (* y y) -1/4) (* 1/2 y)) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) y) #s(literal -1/2 binary64)) y) #s(literal 1 binary64)) (*.f64 y y))))) y) z) #s(approx (- (+ (- x (* (+ y 1/2) (log y))) y) z) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 y) #s(literal 2 binary64))) y) (+.f64 #s(literal 1 binary64) (log.f64 y)))))
((+.f64 (-.f64 (+.f64 (log.f64 (+.f64 x y)) (log.f64 z)) t) (*.f64 (-.f64 a #s(literal 1/2 binary64)) (log.f64 t))))
(#s(approx (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 1/2) (log t))) (+.f64 (+.f64 (*.f64 (log.f64 t) (-.f64 a #s(literal 1/2 binary64))) (log.f64 z)) (-.f64 (log.f64 y) t))) #s(approx (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 1/2) (log t))) (neg.f64 t)) (-.f64 (log.f64 (*.f64 z (+.f64 y x))) (-.f64 t (*.f64 (log.f64 t) (-.f64 a #s(literal 1/2 binary64))))) (+.f64 (-.f64 (+.f64 (log.f64 (+.f64 x y)) (log.f64 z)) t) (/.f64 (*.f64 (-.f64 (*.f64 a a) #s(literal 1/4 binary64)) (log.f64 t)) (+.f64 #s(literal 1/2 binary64) a))) (+.f64 (-.f64 (/.f64 (+.f64 (pow.f64 (log.f64 z) #s(literal 3 binary64)) (pow.f64 (log.f64 (+.f64 y x)) #s(literal 3 binary64))) (+.f64 (*.f64 (log.f64 z) (log.f64 (/.f64 z (+.f64 y x)))) (pow.f64 (log.f64 (+.f64 y x)) #s(literal 2 binary64)))) t) (*.f64 (-.f64 a #s(literal 1/2 binary64)) (log.f64 t))))
(#s(approx (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 1/2) (log t))) #s(approx (+ (+ (* (log t) (- a 1/2)) (log z)) (- (log y) t)) (*.f64 (-.f64 (+.f64 (-.f64 (log.f64 t) (*.f64 (/.f64 (log.f64 t) a) #s(literal 1/2 binary64))) (/.f64 (+.f64 (log.f64 y) (log.f64 z)) a)) (/.f64 t a)) a))) #s(approx (- (log (* z (+ y x))) (- t (* (log t) (- a 1/2)))) (*.f64 (log.f64 t) a)) #s(approx (- (log (* z (+ y x))) (- t (* (log t) (- a 1/2)))) (+.f64 (log.f64 (*.f64 (+.f64 y x) z)) (*.f64 (log.f64 t) (-.f64 a #s(literal 1/2 binary64))))) #s(approx (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 1/2) (log t))) (+.f64 (+.f64 #s(approx (* (log t) (- a 1/2)) (*.f64 #s(literal -1/2 binary64) (log.f64 t))) (log.f64 z)) (-.f64 (log.f64 y) t))) #s(approx (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 1/2) (log t))) #s(approx (+ (+ (* (log t) (- a 1/2)) (log z)) (- (log y) t)) (*.f64 (-.f64 (+.f64 (/.f64 (+.f64 (log.f64 y) (log.f64 z)) t) (neg.f64 (*.f64 (neg.f64 (log.f64 t)) (/.f64 (-.f64 a #s(literal 1/2 binary64)) t)))) #s(literal 1 binary64)) t))))
(#s(approx (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 1/2) (log t))) #s(approx (+ (+ (* (log t) (- a 1/2)) (log z)) (- (log y) t)) (*.f64 (-.f64 (+.f64 #s(approx (- (log t) (* (/ (log t) a) 1/2)) (/.f64 (*.f64 (log.f64 t) (+.f64 #s(literal -1/2 binary64) a)) a)) (/.f64 (+.f64 (log.f64 y) (log.f64 z)) a)) (/.f64 t a)) a))) (+.f64 #s(approx (- (/ (+ (pow (log z) 3) (pow (log (+ y x)) 3)) (+ (* (log z) (log (/ z (+ y x)))) (pow (log (+ y x)) 2))) t) (neg.f64 t)) (*.f64 (-.f64 a #s(literal 1/2 binary64)) (log.f64 t))) #s(approx (- (log (* z (+ y x))) (- t (* (log t) (- a 1/2)))) (-.f64 (+.f64 #s(approx (* (log t) (- a 1/2)) (*.f64 #s(literal -1/2 binary64) (log.f64 t))) (log.f64 (*.f64 z y))) t)) #s(approx (- (log (* z (+ y x))) (- t (* (log t) (- a 1/2)))) (+.f64 (log.f64 (*.f64 (pow.f64 t (-.f64 a #s(literal 1/2 binary64))) (+.f64 x y))) (log.f64 z))) #s(approx (+ (- (+ (log (+ x y)) (log z)) t) (* (- a 1/2) (log t))) #s(approx (+ (+ (* (log t) (- a 1/2)) (log z)) (- (log y) t)) (*.f64 (-.f64 (+.f64 (/.f64 (log.f64 y) t) (+.f64 (/.f64 (log.f64 z) t) (*.f64 (/.f64 (-.f64 a #s(literal 1/2 binary64)) t) (log.f64 t)))) #s(literal 1 binary64)) t))))
((-.f64 (*.f64 (*.f64 x x) #s(literal 2 binary64)) #s(literal 1 binary64)))
(#s(approx (- (* (* x x) 2) 1) #s(literal -1 binary64)) #s(approx (- (* (* x x) 2) 1) (*.f64 (*.f64 x x) #s(literal 2 binary64))))
((+.f64 x (/.f64 (*.f64 y (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 z #s(literal 313060547623/100000000000 binary64)) #s(literal 55833770631/5000000000 binary64)) z) t) z) a) z) b)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 z #s(literal 15234687407/1000000000 binary64)) z) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))))
((+.f64 x (/.f64 (*.f64 y #s(approx (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b) (+.f64 (*.f64 a z) b))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 z #s(literal 15234687407/1000000000 binary64)) z) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))) #s(approx (+ x (/ (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+ (* (+ (* (+ (* (+ z 15234687407/1000000000) z) 314690115749/10000000000) z) 119400905721/10000000000) z) 607771387771/1000000000000))) x) #s(approx (+ x (/ (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+ (* (+ (* (+ (* (+ z 15234687407/1000000000) z) 314690115749/10000000000) z) 119400905721/10000000000) z) 607771387771/1000000000000))) (/.f64 (*.f64 (*.f64 z y) a) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 #s(literal 314690115749/10000000000 binary64) (*.f64 (-.f64 z #s(literal -15234687407/1000000000 binary64)) z)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))) #s(approx (+ x (/ (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+ (* (+ (* (+ (* (+ z 15234687407/1000000000) z) 314690115749/10000000000) z) 119400905721/10000000000) z) 607771387771/1000000000000))) (-.f64 (/.f64 (+.f64 (/.f64 (-.f64 (*.f64 t y) (-.f64 (*.f64 y #s(literal -55647806218377003596563527016327/100000000000000000000000000000 binary64)) (*.f64 #s(literal -98517059967927196814627/1000000000000000000000 binary64) y))) (neg.f64 z)) (*.f64 #s(literal 3652704169880641883561/100000000000000000000 binary64) y)) (neg.f64 z)) (-.f64 (*.f64 #s(literal -313060547623/100000000000 binary64) y) x))) (+.f64 x (/.f64 #s(approx (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 t y) (*.f64 (*.f64 #s(literal -55833770631/5000000000 binary64) y) z)) z) (*.f64 a y)) z) (*.f64 b y))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 z #s(literal 15234687407/1000000000 binary64)) z) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))))
((+.f64 x (*.f64 (/.f64 #s(approx (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b) (+.f64 (*.f64 a z) b)) (+.f64 #s(literal 607771387771/1000000000000 binary64) (*.f64 (+.f64 #s(literal 119400905721/10000000000 binary64) (*.f64 (+.f64 #s(literal 314690115749/10000000000 binary64) (*.f64 (+.f64 #s(literal 15234687407/1000000000 binary64) z) z)) z)) z))) y)) (+.f64 x #s(approx (/ (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+ (* (+ (* (+ (* (+ z 15234687407/1000000000) z) 314690115749/10000000000) z) 119400905721/10000000000) z) 607771387771/1000000000000)) (*.f64 #s(literal 313060547623/100000000000 binary64) y))) #s(approx (+ x (/ (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+ (* (+ (* (+ (* (+ z 15234687407/1000000000) z) 314690115749/10000000000) z) 119400905721/10000000000) z) 607771387771/1000000000000))) (-.f64 (/.f64 #s(approx (+ (/ (- (* t y) (- (* y -55647806218377003596563527016327/100000000000000000000000000000) (* -98517059967927196814627/1000000000000000000000 y))) (neg z)) (* 3652704169880641883561/100000000000000000000 y)) (*.f64 (neg.f64 t) (/.f64 y z))) (neg.f64 z)) (-.f64 (*.f64 #s(literal -313060547623/100000000000 binary64) y) x))) (+.f64 x (/.f64 (*.f64 y #s(approx (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b) (+.f64 (*.f64 a z) b))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 #s(approx (* (+ z 15234687407/1000000000) z) (*.f64 z z)) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))) (+.f64 x #s(approx (/ (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+ (* (+ (* (+ (* (+ z 15234687407/1000000000) z) 314690115749/10000000000) z) 119400905721/10000000000) z) 607771387771/1000000000000)) (*.f64 y (/.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 z z) (-.f64 (*.f64 #s(literal 313060547623/100000000000 binary64) z) #s(literal -55833770631/5000000000 binary64))) a) z) b) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 z #s(literal -15234687407/1000000000 binary64)) z) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))))))
((+.f64 x (*.f64 (/.f64 #s(approx (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b) (+.f64 (*.f64 a z) b)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 #s(approx (* (+ z 15234687407/1000000000) z) (*.f64 z z)) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64))) y)) (+.f64 x #s(approx (/ (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+ (* (+ (* (+ (* (+ z 15234687407/1000000000) z) 314690115749/10000000000) z) 119400905721/10000000000) z) 607771387771/1000000000000)) (*.f64 (*.f64 y b) #s(literal 1000000000000/607771387771 binary64)))) (+.f64 x (*.f64 (/.f64 #s(approx (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b) (+.f64 (*.f64 a z) b)) (+.f64 #s(literal 607771387771/1000000000000 binary64) #s(approx (* (+ 119400905721/10000000000 (* (+ 314690115749/10000000000 (* (+ 15234687407/1000000000 z) z)) z)) z) (*.f64 #s(literal 119400905721/10000000000 binary64) z)))) y)) (+.f64 x (/.f64 (*.f64 y #s(approx (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b) (*.f64 a z))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 #s(approx (* (+ z 15234687407/1000000000) z) (*.f64 z z)) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))) (+.f64 x (/.f64 #s(approx (* y (+ (* (+ (* (+ (* (+ (* z 313060547623/100000000000) 55833770631/5000000000) z) t) z) a) z) b)) (+.f64 (*.f64 #s(approx (+ (* (- (* t y) (* (* -55833770631/5000000000 y) z)) z) (* a y)) (*.f64 (*.f64 t y) z)) z) (*.f64 b y))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 z #s(literal 15234687407/1000000000 binary64)) z) #s(literal 314690115749/10000000000 binary64)) z) #s(literal 119400905721/10000000000 binary64)) z) #s(literal 607771387771/1000000000000 binary64)))))
((/.f64 (*.f64 (-.f64 x #s(literal 2 binary64)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 x #s(literal 104109730557/25000000000 binary64)) #s(literal 393497462077/5000000000 binary64)) x) #s(literal 4297481763/31250000 binary64)) x) y) x) z)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 x #s(literal 216700011257/5000000000 binary64)) x) #s(literal 263505074721/1000000000 binary64)) x) #s(literal 156699607947/500000000 binary64)) x) #s(literal 23533438303/500000000 binary64))))
((*.f64 (+.f64 z (*.f64 (+.f64 y (*.f64 (+.f64 #s(literal 4297481763/31250000 binary64) (*.f64 (+.f64 #s(literal 393497462077/5000000000 binary64) (*.f64 #s(literal 104109730557/25000000000 binary64) x)) x)) x)) x)) (/.f64 (-.f64 x #s(literal 2 binary64)) (+.f64 #s(literal 23533438303/500000000 binary64) (*.f64 (+.f64 #s(literal 156699607947/500000000 binary64) (*.f64 (+.f64 #s(literal 263505074721/1000000000 binary64) (*.f64 (+.f64 #s(literal 216700011257/5000000000 binary64) x) x)) x)) x)))) #s(approx (/ (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (+ (* (+ (* (+ (* (+ x 216700011257/5000000000) x) 263505074721/1000000000) x) 156699607947/500000000) x) 23533438303/500000000)) (*.f64 #s(literal -1000000000/23533438303 binary64) z)) (/.f64 #s(approx (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (*.f64 #s(literal -2 binary64) z)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 x #s(literal 216700011257/5000000000 binary64)) x) #s(literal 263505074721/1000000000 binary64)) x) #s(literal 156699607947/500000000 binary64)) x) #s(literal 23533438303/500000000 binary64))) (/.f64 #s(approx (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -2 binary64) y) z) x) (*.f64 #s(literal 2 binary64) z))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 x #s(literal 216700011257/5000000000 binary64)) x) #s(literal 263505074721/1000000000 binary64)) x) #s(literal 156699607947/500000000 binary64)) x) #s(literal 23533438303/500000000 binary64))) (/.f64 (*.f64 (-.f64 x #s(literal 2 binary64)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 x #s(literal 104109730557/25000000000 binary64)) #s(literal 393497462077/5000000000 binary64)) x) #s(literal 4297481763/31250000 binary64)) x) y) x) z)) (+.f64 (*.f64 (+.f64 (+.f64 (*.f64 (*.f64 (+.f64 #s(literal 216700011257/5000000000 binary64) x) x) x) (*.f64 #s(literal 263505074721/1000000000 binary64) x)) #s(literal 156699607947/500000000 binary64)) x) #s(literal 23533438303/500000000 binary64))))
((*.f64 (+.f64 z (*.f64 (+.f64 y (*.f64 (+.f64 #s(literal 4297481763/31250000 binary64) (*.f64 (+.f64 #s(literal 393497462077/5000000000 binary64) (*.f64 #s(literal 104109730557/25000000000 binary64) x)) x)) x)) x)) (/.f64 (-.f64 (*.f64 x x) #s(literal 4 binary64)) (*.f64 (+.f64 #s(literal 2 binary64) x) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 #s(literal 216700011257/5000000000 binary64) x) x) #s(literal 263505074721/1000000000 binary64)) x) #s(literal 156699607947/500000000 binary64)) x) #s(literal 23533438303/500000000 binary64))))) #s(approx (/ (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (+ (* (+ (* (+ (* (+ x 216700011257/5000000000) x) 263505074721/1000000000) x) 156699607947/500000000) x) 23533438303/500000000)) (*.f64 #s(literal 104109730557/25000000000 binary64) x)) (/.f64 #s(approx (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -2 binary64) y) z) x) (*.f64 #s(literal 2 binary64) z))) #s(approx (+ (* (+ (* (+ (* (+ x 216700011257/5000000000) x) 263505074721/1000000000) x) 156699607947/500000000) x) 23533438303/500000000) (+.f64 (*.f64 #s(literal 156699607947/500000000 binary64) x) #s(literal 23533438303/500000000 binary64)))) (*.f64 (+.f64 z (*.f64 (+.f64 y (*.f64 (+.f64 #s(literal 4297481763/31250000 binary64) (*.f64 (+.f64 #s(literal 393497462077/5000000000 binary64) (*.f64 #s(literal 104109730557/25000000000 binary64) x)) x)) x)) x)) #s(approx (/ (- x 2) (+ 23533438303/500000000 (* (+ 156699607947/500000000 (* (+ 263505074721/1000000000 (* (+ 216700011257/5000000000 x) x)) x)) x))) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -23298017199368982832548000000000/13033352773350869092174451844127 binary64) x) #s(literal 168466327098500000000/553822718361107519809 binary64)) x) #s(literal 1000000000/23533438303 binary64)))) #s(approx (/ (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (+ (* (+ (* (+ (* (+ x 216700011257/5000000000) x) 263505074721/1000000000) x) 156699607947/500000000) x) 23533438303/500000000)) (-.f64 (*.f64 (+.f64 (*.f64 (-.f64 (-.f64 (*.f64 (-.f64 y #s(literal 4297481763/15625000 binary64)) #s(literal 500000000/23533438303 binary64)) (*.f64 #s(literal -131752537360500000000/553822718361107519809 binary64) z)) (*.f64 #s(literal 156699607947/23533438303 binary64) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -2 binary64) y) z) #s(literal 500000000/23533438303 binary64)) (*.f64 #s(literal -156699607947000000000/553822718361107519809 binary64) z)))) x) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -2 binary64) y) z) #s(literal 500000000/23533438303 binary64)) (*.f64 #s(literal -156699607947000000000/553822718361107519809 binary64) z))) x) (*.f64 #s(literal 1000000000/23533438303 binary64) z))))
((*.f64 (/.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 x #s(literal 104109730557/25000000000 binary64)) #s(literal 393497462077/5000000000 binary64)) x) #s(literal 4297481763/31250000 binary64)) x) y) x) z) (+.f64 #s(literal 2 binary64) x)) (/.f64 (-.f64 (*.f64 x x) #s(literal 4 binary64)) (+.f64 #s(literal 23533438303/500000000 binary64) (*.f64 (+.f64 #s(literal 156699607947/500000000 binary64) (*.f64 (+.f64 #s(literal 263505074721/1000000000 binary64) (*.f64 (+.f64 #s(literal 216700011257/5000000000 binary64) x) x)) x)) x)))) (/.f64 #s(approx (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (*.f64 #s(literal -2 binary64) z)) #s(approx (+ (* (+ (* (+ (* (+ x 216700011257/5000000000) x) 263505074721/1000000000) x) 156699607947/500000000) x) 23533438303/500000000) #s(literal 23533438303/500000000 binary64))) (/.f64 #s(approx (* (- x 2) (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z)) (*.f64 (-.f64 x #s(literal 2 binary64)) z)) #s(approx (+ (* (+ (* (+ (* (+ x 216700011257/5000000000) x) 263505074721/1000000000) x) 156699607947/500000000) x) 23533438303/500000000) (+.f64 (*.f64 #s(literal 156699607947/500000000 binary64) x) #s(literal 23533438303/500000000 binary64)))) (/.f64 (*.f64 (-.f64 x #s(literal 2 binary64)) #s(approx (+ (* (+ (* (+ (* (+ (* x 104109730557/25000000000) 393497462077/5000000000) x) 4297481763/31250000) x) y) x) z) z)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 x #s(literal 216700011257/5000000000 binary64)) x) #s(literal 263505074721/1000000000 binary64)) x) #s(literal 156699607947/500000000 binary64)) x) #s(literal 23533438303/500000000 binary64))) (*.f64 #s(approx (+ z (* (+ y (* (+ 4297481763/31250000 (* (+ 393497462077/5000000000 (* 104109730557/25000000000 x)) x)) x)) x)) z) (/.f64 (-.f64 (*.f64 x x) #s(literal 4 binary64)) (*.f64 (+.f64 #s(literal 2 binary64) x) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 #s(literal 216700011257/5000000000 binary64) x) x) #s(literal 263505074721/1000000000 binary64)) x) #s(literal 156699607947/500000000 binary64)) x) #s(literal 23533438303/500000000 binary64))))))
((+.f64 x (/.f64 (*.f64 y (+.f64 (*.f64 (+.f64 (*.f64 z #s(literal 692910599291889/10000000000000000 binary64)) #s(literal 307332350656623/625000000000000 binary64)) z) #s(literal 11167812716741/40000000000000 binary64))) (+.f64 (*.f64 (+.f64 z #s(literal 6012459259764103/1000000000000000 binary64)) z) #s(literal 104698244219447/31250000000000 binary64)))))
((+.f64 x #s(approx (/ (* y (+ (* (+ (* z 692910599291889/10000000000000000) 307332350656623/625000000000000) z) 11167812716741/40000000000000)) (+ (* (+ z 6012459259764103/1000000000000000) z) 104698244219447/31250000000000)) (*.f64 #s(literal 692910599291889/10000000000000000 binary64) y))) #s(approx (+ x (/ (* y (+ (* (+ (* z 692910599291889/10000000000000000) 307332350656623/625000000000000) z) 11167812716741/40000000000000)) (+ (* (+ z 6012459259764103/1000000000000000) z) 104698244219447/31250000000000))) x) (+.f64 x (/.f64 (*.f64 y #s(approx (+ (* (+ (* z 692910599291889/10000000000000000) 307332350656623/625000000000000) z) 11167812716741/40000000000000) (*.f64 (*.f64 z z) #s(literal 692910599291889/10000000000000000 binary64)))) (+.f64 (*.f64 (+.f64 z #s(literal 6012459259764103/1000000000000000 binary64)) z) #s(literal 104698244219447/31250000000000 binary64)))) (+.f64 x (/.f64 (-.f64 (*.f64 (*.f64 (+.f64 #s(literal 307332350656623/625000000000000 binary64) (*.f64 #s(literal 692910599291889/10000000000000000 binary64) z)) z) y) (*.f64 #s(literal -11167812716741/40000000000000 binary64) y)) (+.f64 (*.f64 (+.f64 z #s(literal 6012459259764103/1000000000000000 binary64)) z) #s(literal 104698244219447/31250000000000 binary64)))) (+.f64 x (/.f64 (*.f64 y (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 #s(literal 307332350656623/625000000000000 binary64) (*.f64 #s(literal 692910599291889/10000000000000000 binary64) z)) z) #s(literal 2 binary64)) #s(literal 124720040876201995101661081/1600000000000000000000000000 binary64)) (-.f64 (*.f64 (+.f64 #s(literal 307332350656623/625000000000000 binary64) (*.f64 #s(literal 692910599291889/10000000000000000 binary64) z)) z) #s(literal 11167812716741/40000000000000 binary64)))) (+.f64 (*.f64 (+.f64 z #s(literal 6012459259764103/1000000000000000 binary64)) z) #s(literal 104698244219447/31250000000000 binary64)))))
((+.f64 x #s(approx (/ (- (* (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) y) (* -11167812716741/40000000000000 y)) (+ (* (+ z 6012459259764103/1000000000000000) z) 104698244219447/31250000000000)) (*.f64 #s(literal 279195317918525/3350343815022304 binary64) y))) (+.f64 x #s(approx (/ (- (* (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) y) (* -11167812716741/40000000000000 y)) (+ (* (+ z 6012459259764103/1000000000000000) z) 104698244219447/31250000000000)) (-.f64 (*.f64 (*.f64 #s(literal -155900051080628738716045985239/56124018394291031809500087342080 binary64) y) z) (*.f64 #s(literal -279195317918525/3350343815022304 binary64) y)))) (+.f64 x (/.f64 #s(approx (* y (/ (- (pow (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) 2) 124720040876201995101661081/1600000000000000000000000000) (- (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) 11167812716741/40000000000000))) (*.f64 (*.f64 (*.f64 z y) z) #s(literal 692910599291889/10000000000000000 binary64))) (+.f64 (*.f64 (+.f64 z #s(literal 6012459259764103/1000000000000000 binary64)) z) #s(literal 104698244219447/31250000000000 binary64)))) #s(approx (+ x (/ (* y (+ (* (+ (* z 692910599291889/10000000000000000) 307332350656623/625000000000000) z) 11167812716741/40000000000000)) (+ (* (+ z 6012459259764103/1000000000000000) z) 104698244219447/31250000000000))) (*.f64 (-.f64 (/.f64 (*.f64 (/.f64 y x) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 692910599291889/10000000000000000 binary64) z) #s(literal -307332350656623/625000000000000 binary64)) z) #s(literal -11167812716741/40000000000000 binary64))) (+.f64 #s(literal 104698244219447/31250000000000 binary64) (*.f64 (-.f64 z #s(literal -6012459259764103/1000000000000000 binary64)) z))) #s(literal -1 binary64)) x)) (+.f64 x (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 #s(literal 307332350656623/625000000000000 binary64) (*.f64 #s(literal 692910599291889/10000000000000000 binary64) z)) z) #s(literal 2 binary64)) #s(literal 124720040876201995101661081/1600000000000000000000000000 binary64)) y) (*.f64 (-.f64 (*.f64 (+.f64 #s(literal 307332350656623/625000000000000 binary64) (*.f64 #s(literal 692910599291889/10000000000000000 binary64) z)) z) #s(literal 11167812716741/40000000000000 binary64)) (+.f64 (*.f64 (+.f64 #s(literal 6012459259764103/1000000000000000 binary64) z) z) #s(literal 104698244219447/31250000000000 binary64))))))
((+.f64 x (/.f64 (*.f64 y #s(approx (/ (- (pow (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) 2) 124720040876201995101661081/1600000000000000000000000000) (- (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) 11167812716741/40000000000000)) #s(literal 11167812716741/40000000000000 binary64))) (+.f64 (*.f64 (+.f64 z #s(literal 6012459259764103/1000000000000000 binary64)) z) #s(literal 104698244219447/31250000000000 binary64)))) (+.f64 x #s(approx (/ (- (* (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) y) (* -11167812716741/40000000000000 y)) (+ (* (+ z 6012459259764103/1000000000000000) z) 104698244219447/31250000000000)) #s(approx (- (* (* -155900051080628738716045985239/56124018394291031809500087342080 y) z) (* -279195317918525/3350343815022304 y)) (*.f64 (+.f64 (*.f64 #s(literal -155900051080628738716045985239/56124018394291031809500087342080 binary64) z) #s(literal 279195317918525/3350343815022304 binary64)) y)))) (+.f64 x #s(approx (/ (- (* (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) y) (* -11167812716741/40000000000000 y)) (+ (* (+ z 6012459259764103/1000000000000000) z) 104698244219447/31250000000000)) #s(approx (- (* (* -155900051080628738716045985239/56124018394291031809500087342080 y) z) (* -279195317918525/3350343815022304 y)) (*.f64 (-.f64 (*.f64 (/.f64 y z) #s(literal 279195317918525/3350343815022304 binary64)) (*.f64 #s(literal 155900051080628738716045985239/56124018394291031809500087342080 binary64) y)) z)))) (+.f64 (*.f64 #s(approx (+ (* (+ (* z 692910599291889/10000000000000000) 307332350656623/625000000000000) z) 11167812716741/40000000000000) (*.f64 (*.f64 z z) #s(literal 692910599291889/10000000000000000 binary64))) (/.f64 y (+.f64 (*.f64 (+.f64 #s(literal 6012459259764103/1000000000000000 binary64) z) z) #s(literal 104698244219447/31250000000000 binary64)))) x) (+.f64 x (/.f64 (*.f64 #s(approx (- (pow (* (+ 307332350656623/625000000000000 (* 692910599291889/10000000000000000 z)) z) 2) 124720040876201995101661081/1600000000000000000000000000) #s(literal -124720040876201995101661081/1600000000000000000000000000 binary64)) y) (*.f64 (-.f64 (*.f64 (+.f64 #s(literal 307332350656623/625000000000000 binary64) (*.f64 #s(literal 692910599291889/10000000000000000 binary64) z)) z) #s(literal 11167812716741/40000000000000 binary64)) (+.f64 (*.f64 (+.f64 #s(literal 6012459259764103/1000000000000000 binary64) z) z) #s(literal 104698244219447/31250000000000 binary64))))))
((+.f64 (-.f64 (*.f64 x (-.f64 y #s(literal 1 binary64))) (*.f64 y #s(literal 1/2 binary64))) #s(literal 918938533204673/1000000000000000 binary64)))
((+.f64 #s(approx (- (* x (- y 1)) (* y 1/2)) (-.f64 (*.f64 (-.f64 x #s(literal 1/2 binary64)) y) x)) #s(literal 918938533204673/1000000000000000 binary64)) #s(approx (+ (- (* x (- y 1)) (* y 1/2)) 918938533204673/1000000000000000) (-.f64 #s(literal 918938533204673/1000000000000000 binary64) x)) #s(approx (+ (- (* x (- y 1)) (* y 1/2)) 918938533204673/1000000000000000) (*.f64 (-.f64 x #s(literal 1/2 binary64)) y)) #s(approx (+ (- (* x (- y 1)) (* y 1/2)) 918938533204673/1000000000000000) (*.f64 (-.f64 y #s(literal 1 binary64)) x)) (+.f64 #s(approx (- (* x (- y 1)) (* y 1/2)) (*.f64 #s(literal -1/2 binary64) y)) #s(literal 918938533204673/1000000000000000 binary64)))
((+.f64 (-.f64 (*.f64 x #s(approx (- y 1) y)) (*.f64 y #s(literal 1/2 binary64))) #s(literal 918938533204673/1000000000000000 binary64)) #s(approx (+ (- (* x (- y 1)) (* y 1/2)) 918938533204673/1000000000000000) #s(approx (- 918938533204673/1000000000000000 x) #s(literal 918938533204673/1000000000000000 binary64))) #s(approx (+ (- (* x (- y 1)) (* y 1/2)) 918938533204673/1000000000000000) #s(approx (- 918938533204673/1000000000000000 x) (neg.f64 x))) #s(approx (+ (- (* x (- y 1)) (* y 1/2)) 918938533204673/1000000000000000) (*.f64 #s(approx (- x 1/2) #s(literal -1/2 binary64)) y)) #s(approx (+ (- (* x (- y 1)) (* y 1/2)) 918938533204673/1000000000000000) (*.f64 #s(approx (- y 1) y) x)))
((+.f64 #s(approx (- (* (- x 1/2) y) x) (*.f64 (-.f64 y #s(literal 1 binary64)) x)) #s(literal 918938533204673/1000000000000000 binary64)))
((/.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 x y) z) y) #s(literal 54929528941/2000000 binary64)) y) #s(literal 28832688827/125000 binary64)) y) t) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 y a) y) b) y) c) y) i)))
((+.f64 (/.f64 t (+.f64 i (*.f64 (+.f64 c (*.f64 (+.f64 b (*.f64 (+.f64 a y) y)) y)) y))) (*.f64 (+.f64 #s(literal 28832688827/125000 binary64) (*.f64 (+.f64 #s(literal 54929528941/2000000 binary64) (*.f64 (+.f64 z (*.f64 y x)) y)) y)) (/.f64 y (+.f64 i (*.f64 (+.f64 c (*.f64 (+.f64 b (*.f64 (+.f64 a y) y)) y)) y))))) #s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) x) (/.f64 (+.f64 (*.f64 (+.f64 #s(approx (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) (*.f64 #s(literal 54929528941/2000000 binary64) y)) #s(literal 28832688827/125000 binary64)) y) t) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 y a) y) b) y) c) y) i)) #s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (+.f64 (/.f64 (-.f64 (neg.f64 (+.f64 (/.f64 (-.f64 (-.f64 #s(literal 54929528941/2000000 binary64) (*.f64 (neg.f64 a) (*.f64 #s(literal -1 binary64) (-.f64 z (*.f64 a x))))) (*.f64 b x)) y) z)) (*.f64 (neg.f64 a) x)) (neg.f64 y)) x)) (/.f64 (+.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 #s(literal 54929528941/2000000 binary64) (*.f64 (+.f64 z (*.f64 y x)) y)) y) #s(literal 2 binary64)) #s(literal 831323944994610635929/15625000000 binary64)) y) (-.f64 (*.f64 (+.f64 #s(literal 54929528941/2000000 binary64) (*.f64 (+.f64 z (*.f64 y x)) y)) y) #s(literal 28832688827/125000 binary64))) t) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 y a) y) b) y) c) y) i)))
(#s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (*.f64 (/.f64 (+.f64 (/.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 y x) z) y) #s(literal -54929528941/2000000 binary64)) y) #s(literal -28832688827/125000 binary64)) y) t) #s(literal 1 binary64)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 a y) y) b) y) c) y) i)) t)) #s(approx (/ (+ (/ (* (- (pow (* (+ 54929528941/2000000 (* (+ z (* y x)) y)) y) 2) 831323944994610635929/15625000000) y) (- (* (+ 54929528941/2000000 (* (+ z (* y x)) y)) y) 28832688827/125000)) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (/.f64 t i)) (/.f64 (+.f64 (*.f64 #s(approx (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) #s(literal 28832688827/125000 binary64)) y) t) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 y a) y) b) y) c) y) i)) #s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 y x) z) y) #s(literal -54929528941/2000000 binary64)) y) #s(literal -28832688827/125000 binary64)) y) t) (+.f64 (*.f64 (*.f64 y y) (+.f64 (*.f64 (+.f64 a y) y) b)) i))) (+.f64 (/.f64 t (+.f64 i (*.f64 (+.f64 c (*.f64 (+.f64 b (*.f64 (+.f64 a y) y)) y)) y))) #s(approx (* (+ 28832688827/125000 (* (+ 54929528941/2000000 (* (+ z (* y x)) y)) y)) (/ y (+ i (* (+ c (* (+ b (* (+ a y) y)) y)) y)))) (/.f64 (+.f64 #s(literal 28832688827/125000 binary64) (*.f64 y (+.f64 #s(literal 54929528941/2000000 binary64) (*.f64 y (+.f64 z (*.f64 x y)))))) (+.f64 c (*.f64 y (+.f64 b (*.f64 y (+.f64 a y)))))))))
((/.f64 (+.f64 (*.f64 (+.f64 #s(approx (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) (*.f64 (-.f64 (*.f64 (*.f64 y y) x) #s(literal -54929528941/2000000 binary64)) y)) #s(literal 28832688827/125000 binary64)) y) t) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 y a) y) b) y) c) y) i)) #s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (*.f64 #s(approx (/ (+ (/ (* (- (* (- (* (+ (* y x) z) y) -54929528941/2000000) y) -28832688827/125000) y) t) 1) (+ (* (+ (* (+ (* (+ a y) y) b) y) c) y) i)) (/.f64 #s(literal 1 binary64) i)) t)) #s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 y x) z) y) #s(literal -54929528941/2000000 binary64)) y) #s(literal -28832688827/125000 binary64)) y) t) i)) #s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (/.f64 (+.f64 #s(approx (* (- (* (- (* (+ (* y x) z) y) -54929528941/2000000) y) -28832688827/125000) y) (*.f64 y (+.f64 #s(literal 28832688827/125000 binary64) (*.f64 y (+.f64 #s(literal 54929528941/2000000 binary64) (*.f64 x (*.f64 y y))))))) t) (+.f64 (*.f64 (*.f64 y y) (+.f64 (*.f64 (+.f64 a y) y) b)) i))) #s(approx (/ (+ (* (+ (* (+ (* (+ (* x y) z) y) 54929528941/2000000) y) 28832688827/125000) y) t) (+ (* (+ (* (+ (* (+ y a) y) b) y) c) y) i)) (*.f64 (/.f64 (+.f64 #s(approx (/ (* (- (* (- (* (+ (* y x) z) y) -54929528941/2000000) y) -28832688827/125000) y) t) (*.f64 y (-.f64 (*.f64 y (+.f64 (*.f64 #s(literal 54929528941/2000000 binary64) (/.f64 #s(literal 1 binary64) t)) (/.f64 (*.f64 y z) t))) (*.f64 #s(literal -28832688827/125000 binary64) (/.f64 #s(literal 1 binary64) t))))) #s(literal 1 binary64)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 a y) y) b) y) c) y) i)) t)))
((+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (*.f64 x (log.f64 y)) z) t) a) (*.f64 (-.f64 b #s(literal 1/2 binary64)) (log.f64 c))) (*.f64 y i)))
((+.f64 (+.f64 (+.f64 #s(approx (+ (+ (* x (log y)) z) t) (+.f64 t z)) a) (*.f64 (-.f64 b #s(literal 1/2 binary64)) (log.f64 c))) (*.f64 y i)) #s(approx (+ (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) (* y i)) a) (+.f64 #s(approx (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) z) (*.f64 y i)) (+.f64 #s(approx (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) (*.f64 (log.f64 y) x)) (*.f64 y i)) (+.f64 (+.f64 #s(approx (+ (+ (+ (* x (log y)) z) t) a) (*.f64 (log.f64 y) x)) (*.f64 (-.f64 b #s(literal 1/2 binary64)) (log.f64 c))) (*.f64 y i)))
((+.f64 (+.f64 (+.f64 #s(approx (+ (+ (* x (log y)) z) t) (+.f64 t z)) a) #s(approx (* (- b 1/2) (log c)) (*.f64 (log.f64 c) b))) (*.f64 y i)) #s(approx (+ (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) (* y i)) z) #s(approx (+ (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) (* y i)) (*.f64 (log.f64 c) b)) (+.f64 (+.f64 #s(approx (+ (+ (+ (* x (log y)) z) t) a) a) (*.f64 (-.f64 b #s(literal 1/2 binary64)) (log.f64 c))) (*.f64 y i)) #s(approx (+ (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) (* y i)) (+.f64 (+.f64 (*.f64 (log.f64 c) (-.f64 b #s(literal 1/2 binary64))) (+.f64 a t)) (+.f64 (*.f64 (log.f64 y) x) z))))
((+.f64 (+.f64 #s(approx (+ (+ (+ (* x (log y)) z) t) a) (+.f64 (*.f64 (/.f64 (+.f64 (+.f64 t (*.f64 (log.f64 y) x)) z) a) a) a)) #s(approx (* (- b 1/2) (log c)) (*.f64 (log.f64 c) b))) (*.f64 y i)) #s(approx (+ (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) (* y i)) (*.f64 i y)) #s(approx (+ (+ (+ (+ (+ (* x (log y)) z) t) a) (* (- b 1/2) (log c))) (* y i)) (+.f64 #s(approx (+ (* (log c) (- b 1/2)) (+ a t)) a) (+.f64 (*.f64 (log.f64 y) x) z))) (+.f64 (+.f64 #s(approx (+ (+ (+ (* x (log y)) z) t) a) a) #s(approx (* (- b 1/2) (log c)) (*.f64 #s(literal -1/2 binary64) (log.f64 c)))) (*.f64 y i)) (+.f64 (+.f64 (+.f64 #s(approx (+ (+ (* x (log y)) z) t) t) a) #s(approx (* (- b 1/2) (log c)) (*.f64 (log.f64 c) b))) (*.f64 y i)))
((+.f64 (-.f64 (+.f64 (+.f64 x y) z) (*.f64 z (log.f64 t))) (*.f64 (-.f64 a #s(literal 1/2 binary64)) b)))
((-.f64 (+.f64 z (+.f64 y x)) (-.f64 (*.f64 (log.f64 t) z) (*.f64 b (-.f64 a #s(literal 1/2 binary64))))) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) x) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) (*.f64 (+.f64 #s(literal -1/2 binary64) a) b)) (+.f64 #s(approx (- (+ (+ x y) z) (* z (log t))) (+.f64 y x)) (*.f64 (-.f64 a #s(literal 1/2 binary64)) b)) (+.f64 (-.f64 #s(approx (+ (+ x y) z) z) (*.f64 z (log.f64 t))) (*.f64 (-.f64 a #s(literal 1/2 binary64)) b)))
((-.f64 (+.f64 z (+.f64 y x)) #s(approx (- (* (log t) z) (* b (- a 1/2))) (*.f64 (-.f64 (-.f64 (/.f64 (*.f64 (log.f64 t) z) b) #s(literal -1/2 binary64)) a) b))) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) y) (+.f64 #s(approx (- (+ (+ x y) z) (* z (log t))) #s(approx (+ y x) y)) (*.f64 (-.f64 a #s(literal 1/2 binary64)) b)) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) (/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 a a)) b) (-.f64 #s(literal -1/2 binary64) a))) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) (-.f64 (+.f64 z x) (-.f64 (*.f64 (log.f64 t) z) y))))
((-.f64 (+.f64 z (+.f64 y x)) #s(approx (- (* (log t) z) (* b (- a 1/2))) (-.f64 (*.f64 (log.f64 t) z) (*.f64 #s(literal -1/2 binary64) b)))) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) (*.f64 #s(approx (+ -1/2 a) #s(literal -1/2 binary64)) b)) (+.f64 #s(approx (- (+ (+ x y) z) (* z (log t))) #s(approx (+ y x) y)) #s(approx (* (- a 1/2) b) (*.f64 a b))) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) #s(approx (/ (* (- 1/4 (* a a)) b) (- -1/2 a)) (*.f64 (+.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) b) a))) #s(approx (+ (- (+ (+ x y) z) (* z (log t))) (* (- a 1/2) b)) (/.f64 (*.f64 #s(approx (- 1/4 (* a a)) (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 a a)) #s(literal 1 binary64)) a) a)) b) (-.f64 #s(literal -1/2 binary64) a))))
((*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x y))))
((+.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x (*.f64 (neg.f64 x) y))) #s(approx (* x (- 1 (* x y))) x) (*.f64 x #s(approx (- 1 (* x y)) (*.f64 (neg.f64 x) y))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 2 binary64))) x) (+.f64 (*.f64 y x) #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 3 binary64))) x) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 2 binary64))) (*.f64 y x))))
((-.f64 x (*.f64 (*.f64 y x) x)) (-.f64 x (*.f64 (*.f64 x x) y)) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 y x) x) y)) x) (+.f64 (*.f64 y x) #s(literal 1 binary64))) (*.f64 (/.f64 x (-.f64 (*.f64 y x) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 2 binary64)))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 3 binary64))) x) (+.f64 (*.f64 (-.f64 (*.f64 y x) #s(literal -1 binary64)) (*.f64 y x)) #s(literal 1 binary64))))
((*.f64 #s(approx (/ x (- (* y x) -1)) (/.f64 #s(literal 1 binary64) y)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 2 binary64)))) (*.f64 (/.f64 x #s(approx (- (* y x) -1) (*.f64 y x))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 2 binary64)))) (*.f64 (/.f64 x (+.f64 (-.f64 (pow.f64 (*.f64 y x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 y x))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 y x) #s(literal 3 binary64)))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 y x) (*.f64 (*.f64 y x) x)) y)) x) (+.f64 (*.f64 (-.f64 (*.f64 y x) #s(literal -1 binary64)) (*.f64 y x)) #s(literal 1 binary64))))
((-.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal 9 binary64)))) (/.f64 y (*.f64 #s(literal 3 binary64) (sqrt.f64 x)))))
((-.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal 9 binary64)))) (/.f64 (/.f64 y #s(literal 3 binary64)) (sqrt.f64 x))) #s(approx (- (- 1 (/ 1 (* x 9))) (/ y (* 3 (sqrt x)))) (/.f64 (-.f64 x #s(literal 1/9 binary64)) x)) #s(approx (- (- 1 (/ 1 (* x 9))) (/ y (* 3 (sqrt x)))) (/.f64 (-.f64 (*.f64 #s(literal -1/3 binary64) (*.f64 (sqrt.f64 x) y)) #s(literal 1/9 binary64)) x)) (-.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal 9 binary64)))) (/.f64 (/.f64 y (sqrt.f64 x)) #s(literal 3 binary64))) (/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal 1/9 binary64) x) #s(literal 2 binary64))) (*.f64 (sqrt.f64 x) #s(literal 3 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 1/9 binary64) x) #s(literal 1 binary64)) y)) (*.f64 (+.f64 (/.f64 #s(literal 1/9 binary64) x) #s(literal 1 binary64)) (*.f64 (sqrt.f64 x) #s(literal 3 binary64)))))
((-.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/9 binary64) x)) (/.f64 y (*.f64 (sqrt.f64 x) #s(literal 3 binary64)))) #s(approx (/ (- (* (- 1 (pow (/ 1/9 x) 2)) (* (sqrt x) 3)) (* (+ (/ 1/9 x) 1) y)) (* (+ (/ 1/9 x) 1) (* (sqrt x) 3))) #s(literal 1 binary64)) #s(approx (- (- 1 (/ 1 (* x 9))) (/ y (* 3 (sqrt x)))) (/.f64 (/.f64 (-.f64 (*.f64 x x) #s(literal 1/81 binary64)) (+.f64 #s(literal 1/9 binary64) x)) x)) (-.f64 #s(approx (- 1 (/ 1 (* x 9))) #s(literal 1 binary64)) (/.f64 (/.f64 y (sqrt.f64 x)) #s(literal 3 binary64))) #s(approx (- (- 1 (/ 1 (* x 9))) (/ y (* 3 (sqrt x)))) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 x) y) #s(literal -1/3 binary64)) x) (*.f64 #s(literal 1/9 binary64) x)) (*.f64 x x))))
((-.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal 9 binary64)))) (/.f64 (/.f64 y (*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))) #s(literal 3 binary64))) #s(approx (/ (- (* (- 1 (pow (/ 1/9 x) 2)) (* (sqrt x) 3)) (* (+ (/ 1/9 x) 1) y)) (* (+ (/ 1/9 x) 1) (* (sqrt x) 3))) (/.f64 #s(literal -1/9 binary64) x)) #s(approx (- (- 1 (/ 1 (* x 9))) (/ y (* 3 (sqrt x)))) (/.f64 #s(approx (- (* -1/3 (* (sqrt x) y)) 1/9) (*.f64 #s(literal -1/3 binary64) (*.f64 (sqrt.f64 x) y))) x)) #s(approx (- (- 1 (/ 1 (* x 9))) (/ (/ y (sqrt x)) 3)) (-.f64 (*.f64 (*.f64 y #s(literal -1/3 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (-.f64 #s(approx (- 1 (/ 1 (* x 9))) (/.f64 #s(literal -1/9 binary64) x)) (/.f64 y (*.f64 #s(literal 3 binary64) (sqrt.f64 x)))))
((-.f64 (/.f64 (+.f64 #s(literal 230753/100000 binary64) (*.f64 x #s(literal 27061/100000 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 x (+.f64 #s(literal 99229/100000 binary64) (*.f64 x #s(literal 4481/100000 binary64)))))) x))
((-.f64 (+.f64 (/.f64 #s(literal 230753/100000 binary64) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))) (*.f64 #s(literal 27061/100000 binary64) (/.f64 x (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))))) x) #s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) #s(literal 230753/100000 binary64)) #s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) (-.f64 (*.f64 #s(literal -30191289437/10000000000 binary64) x) #s(literal -230753/100000 binary64))) #s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1900161040244073/1000000000000000 binary64) x) #s(literal 30191289437/10000000000 binary64)) x) #s(literal -230753/100000 binary64))) (-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -179503363065659419717/100000000000000000000 binary64) x) #s(literal 1900161040244073/1000000000000000 binary64)) x) #s(literal 20191289437/10000000000 binary64)) x) #s(literal -230753/100000 binary64))) x))
((-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) #s(approx (- (* (- (* (+ (* -179503363065659419717/100000000000000000000 x) 1900161040244073/1000000000000000) x) 20191289437/10000000000) x) -230753/100000) #s(literal 230753/100000 binary64))) x) #s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) (neg.f64 x)) (-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) (/.f64 #s(literal 27061/4481 binary64) x)) x) #s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -179503363065659419717/100000000000000000000 binary64) x) #s(literal -1900161040244073/1000000000000000 binary64)) x) #s(literal 30191289437/10000000000 binary64)) x) #s(literal -230753/100000 binary64))) #s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) (/.f64 (-.f64 (*.f64 #s(literal 911513957868707776969/100000000000000000000 binary64) (*.f64 x x)) #s(literal 53246947009/10000000000 binary64)) (+.f64 #s(literal -230753/100000 binary64) (*.f64 #s(literal -30191289437/10000000000 binary64) x)))))
(#s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) (/.f64 #s(approx (- (* 911513957868707776969/100000000000000000000 (* x x)) 53246947009/10000000000) #s(literal -53246947009/10000000000 binary64)) (+.f64 #s(literal -230753/100000 binary64) (*.f64 #s(literal -30191289437/10000000000 binary64) x)))) (-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) (-.f64 (*.f64 #s(literal -20191289437/10000000000 binary64) x) #s(literal -230753/100000 binary64))) x) (-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1900161040244073/1000000000000000 binary64) x) #s(literal 20191289437/10000000000 binary64)) x) #s(literal -230753/100000 binary64))) x) (-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) (/.f64 (-.f64 (/.f64 #s(literal -1651231776/20079361 binary64) x) #s(literal -27061/4481 binary64)) x)) x))
((-.f64 #s(literal 1 binary64) (log.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 x y) (-.f64 #s(literal 1 binary64) y))))))
((-.f64 #s(literal 1 binary64) (log.f64 #s(approx (- 1 (/ (- x y) (- 1 y))) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 y (-.f64 #s(literal 1 binary64) y)) #s(literal 1 binary64)) x) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) y))) x)))) (-.f64 #s(literal 1 binary64) (log.f64 (-.f64 #s(literal 1 binary64) #s(approx (/ (- x y) (- 1 y)) #s(literal 1 binary64))))) (-.f64 #s(literal 1 binary64) (log.f64 #s(approx (- 1 (/ (- x y) (- 1 y))) (*.f64 (+.f64 y #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))) (-.f64 #s(literal 1 binary64) (log.f64 #s(approx (- 1 (/ (- x y) (- 1 y))) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) y))))) (-.f64 #s(literal 1 binary64) #s(approx (log (- 1 (/ (- x y) (- 1 y)))) (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 (+.f64 #s(literal -1 binary64) x) y) (-.f64 #s(literal 1 binary64) x))))))
((-.f64 #s(literal 1 binary64) (log.f64 #s(approx (- 1 (/ (- x y) (- 1 y))) #s(approx (* (- (/ (+ (/ y (- 1 y)) 1) x) (/ 1 (- 1 y))) x) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x))))) (-.f64 #s(literal 1 binary64) #s(approx (log (- 1 (/ (- x y) (- 1 y)))) #s(approx (- (log (- 1 x)) (/ (* (+ -1 x) y) (- 1 x))) y))) (-.f64 #s(literal 1 binary64) #s(approx (log (- 1 (/ (- x y) (- 1 y)))) #s(approx (- (log (- 1 x)) (/ (* (+ -1 x) y) (- 1 x))) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x) y)))) (-.f64 #s(literal 1 binary64) (log.f64 (-.f64 #s(literal 1 binary64) #s(approx (/ (- x y) (- 1 y)) x)))) (-.f64 #s(literal 1 binary64) (log.f64 #s(approx (- 1 (/ (- x y) (- 1 y))) (/.f64 (-.f64 x #s(literal 1 binary64)) y)))))
((-.f64 #s(literal 1 binary64) #s(approx (log (- 1 (/ (- x y) (- 1 y)))) (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (/ (* (+ -1 x) y) (- 1 x)) (neg.f64 y))))) (-.f64 #s(literal 1 binary64) #s(approx (log (- 1 (/ (- x y) (- 1 y)))) #s(approx (- (log (- 1 x)) (/ (* (+ -1 x) y) (- 1 x))) (-.f64 y x)))) (-.f64 #s(literal 1 binary64) #s(approx (log (- 1 (/ (- x y) (- 1 y)))) #s(approx (- (log (- 1 x)) (/ (* (+ -1 x) y) (- 1 x))) (+.f64 (*.f64 (-.f64 #s(approx (* (- (* -1/3 x) 1/2) x) (*.f64 (*.f64 x x) #s(literal -1/3 binary64))) #s(literal 1 binary64)) x) y)))) (-.f64 #s(literal 1 binary64) (log.f64 #s(approx (- 1 (/ (- x y) (- 1 y))) #s(approx (/ (neg x) (- 1 y)) (neg.f64 x))))) (-.f64 #s(literal 1 binary64) (log.f64 #s(approx (- 1 (/ (- x y) (- 1 y))) (/.f64 #s(approx (- x 1) x) y)))))
((-.f64 #s(literal 1 binary64) (*.f64 x (+.f64 #s(literal 253/1000 binary64) (*.f64 x #s(literal 3/25 binary64))))))
((-.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 253/1000 binary64) x)) (*.f64 (*.f64 #s(literal 3/25 binary64) x) x)) #s(approx (- 1 (* x (+ 253/1000 (* x 3/25)))) #s(literal 1 binary64)) #s(approx (- 1 (* x (+ 253/1000 (* x 3/25)))) (*.f64 (*.f64 x x) #s(literal -3/25 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 253/1000 binary64) x) (*.f64 #s(literal 253/1000 binary64) x)) (*.f64 (*.f64 (*.f64 #s(literal 3/25 binary64) x) x) (*.f64 (*.f64 #s(literal 3/25 binary64) x) x))) (-.f64 (*.f64 #s(literal 253/1000 binary64) x) (*.f64 (*.f64 #s(literal 3/25 binary64) x) x)))) (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 64009/1000000 binary64) (pow.f64 (*.f64 #s(literal 3/25 binary64) x) #s(literal 2 binary64))) x) (-.f64 #s(literal 253/1000 binary64) (*.f64 #s(literal 3/25 binary64) x)))))
((-.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 253/1000 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/25 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x #s(approx (+ 253/1000 (* x 3/25)) #s(literal 253/1000 binary64)))) #s(approx (- 1 (* x (+ 253/1000 (* x 3/25)))) (*.f64 (*.f64 #s(literal -3/25 binary64) x) x)) #s(approx (- 1 (* x (+ 253/1000 (* x 3/25)))) (*.f64 (-.f64 (*.f64 #s(literal -3/25 binary64) x) #s(literal 253/1000 binary64)) x)) (-.f64 #s(approx (- 1 (* 253/1000 x)) (*.f64 #s(literal -253/1000 binary64) x)) (*.f64 (*.f64 #s(literal 3/25 binary64) x) x)))
(#s(approx (- 1 (* x (+ 253/1000 (* x 3/25)))) (*.f64 #s(approx (- (* -3/25 x) 253/1000) #s(literal -253/1000 binary64)) x)) #s(approx (- 1 (* x (+ 253/1000 (* x 3/25)))) (*.f64 (/.f64 (-.f64 (*.f64 #s(literal 9/625 binary64) (*.f64 x x)) #s(literal 64009/1000000 binary64)) (-.f64 #s(literal 253/1000 binary64) (*.f64 #s(literal 3/25 binary64) x))) x)) (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(approx (- 64009/1000000 (pow (* 3/25 x) 2)) (*.f64 #s(literal -9/625 binary64) (*.f64 x x))) x) (-.f64 #s(literal 253/1000 binary64) (*.f64 #s(literal 3/25 binary64) x)))))
((/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) (-.f64 (/.f64 (*.f64 z (sqrt.f64 (+.f64 t a))) t) (*.f64 (-.f64 b c) (-.f64 (+.f64 a (/.f64 #s(literal 5 binary64) #s(literal 6 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 t #s(literal 3 binary64))))))))))))
((/.f64 x #s(approx (+ x (* y (exp (* 2 (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))))))) (*.f64 (+.f64 (/.f64 x y) (pow.f64 (exp.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (sqrt.f64 (+.f64 a t)) (/.f64 z t)) (*.f64 (-.f64 (+.f64 #s(literal 5/6 binary64) a) (/.f64 #s(literal 2/3 binary64) t)) (-.f64 b c))))) y))) #s(approx (/ x (+ x (* y (exp (* 2 (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3)))))))))) #s(literal 1 binary64)) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) (*.f64 (-.f64 (+.f64 #s(literal 5/6 binary64) a) (/.f64 #s(literal 2/3 binary64) t)) c))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) (*.f64 (-.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) t) #s(literal 5/6 binary64)) a) b))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) (*.f64 (sqrt.f64 (+.f64 a t)) (/.f64 z t)))))))))
((/.f64 x #s(approx (+ x (* y (exp (* 2 (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))))))) (*.f64 (+.f64 (/.f64 x y) (pow.f64 (exp.f64 #s(literal 2 binary64)) #s(approx (- (* (sqrt (+ a t)) (/ z t)) (* (- (+ 5/6 a) (/ 2/3 t)) (- b c))) (*.f64 (-.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) t) #s(literal 5/6 binary64)) a) b)))) y))) (/.f64 x #s(approx (+ x (* y (exp (* 2 (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))))))) (*.f64 #s(approx (+ (/ x y) (pow (exp 2) (- (* (sqrt (+ a t)) (/ z t)) (* (- (+ 5/6 a) (/ 2/3 t)) (- b c))))) (/.f64 x y)) y))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) #s(approx (* (- (- (/ 2/3 t) 5/6) a) b) (*.f64 (neg.f64 a) b)))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) (*.f64 (-.f64 #s(approx (- (/ 2/3 t) 5/6) #s(literal -5/6 binary64)) a) b))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) #s(approx (* (- (- (/ 2/3 t) 5/6) a) b) (*.f64 (/.f64 b t) #s(literal 2/3 binary64))))))))))
((/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) #s(approx (* (- (+ 5/6 a) (/ 2/3 t)) c) (*.f64 (-.f64 a #s(literal -5/6 binary64)) c)))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) #s(approx (* (- (+ 5/6 a) (/ 2/3 t)) c) (*.f64 c a)))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) #s(approx (* (- (+ 5/6 a) (/ 2/3 t)) c) (*.f64 (/.f64 c t) #s(literal -2/3 binary64))))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) (*.f64 #s(approx (sqrt (+ a t)) (sqrt.f64 a)) (/.f64 z t)))))))) (/.f64 x (+.f64 x (*.f64 y (exp.f64 (*.f64 #s(literal 2 binary64) #s(approx (- (/ (* z (sqrt (+ t a))) t) (* (- b c) (- (+ a (/ 5 6)) (/ 2 (* t 3))))) (*.f64 #s(approx (sqrt (+ a t)) (sqrt.f64 t)) (/.f64 z t)))))))))
((/.f64 (-.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 6 binary64)))
(#s(approx (/ (- (* x x) 3) 6) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 1/2 binary64))) #s(approx (/ (- (* x x) 3) 6) #s(literal -1/2 binary64)) #s(approx (/ (- (* x x) 3) 6) (*.f64 (*.f64 x x) #s(literal 1/6 binary64))) (/.f64 #s(approx (- (* x x) 3) (*.f64 x x)) #s(literal 6 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 6 binary64)) #s(literal 18 binary64)) #s(literal 36 binary64)))
(#s(approx (/ (- (* x x) 3) 6) (*.f64 x (/.f64 (*.f64 #s(literal 6 binary64) x) #s(literal 36 binary64)))) #s(approx (/ (- (* x x) 3) 6) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x)) #s(approx (/ (- (* x x) 3) 6) (/.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 36 binary64)) #s(literal 108 binary64)) #s(literal 216 binary64))))
((+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y)))
((+.f64 x (/.f64 #s(approx (exp (* y (log (/ y (+ z y))))) #s(literal 1 binary64)) y)) #s(approx (+ x (/ (exp (* y (log (/ y (+ z y))))) y)) x) (+.f64 x (/.f64 #s(approx (exp (* y (log (/ y (+ z y))))) (-.f64 #s(literal 1 binary64) z)) y)) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 y y)) (/.f64 #s(literal 1/2 binary64) y)) z) (/.f64 #s(literal 1 binary64) y)) z) (/.f64 #s(literal 1 binary64) y)))) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 (+.f64 (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) y)) (/.f64 #s(literal 1/3 binary64) (*.f64 y y))) (neg.f64 z)) #s(literal 1/2 binary64)) y) (/.f64 #s(literal 1/2 binary64) (*.f64 y y))) z) (/.f64 #s(literal 1 binary64) y)) z) (/.f64 #s(literal 1 binary64) y)))))
((+.f64 x (/.f64 (exp.f64 #s(approx (* y (log (/ y (+ z y)))) (neg.f64 z))) y)) #s(approx (+ x (/ (exp (* y (log (/ y (+ z y))))) y)) (/.f64 #s(literal 1 binary64) y)) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) #s(approx (+ (* (- (* (+ (/ 1/2 (* y y)) (/ 1/2 y)) z) (/ 1 y)) z) (/ 1 y)) (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) z) #s(literal 1 binary64)) z) #s(literal 1 binary64)) y)))) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) (+.f64 #s(approx (* (- (* (+ (/ 1/2 (* y y)) (/ 1/2 y)) z) (/ 1 y)) z) (*.f64 (neg.f64 z) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) z)) y))) (/.f64 #s(literal 1 binary64) y)))) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) (+.f64 (*.f64 (-.f64 #s(approx (* (+ (/ 1/2 (* y y)) (/ 1/2 y)) z) (*.f64 (/.f64 #s(literal 1/2 binary64) y) (/.f64 (+.f64 z (*.f64 z y)) y))) (/.f64 #s(literal 1 binary64) y)) z) (/.f64 #s(literal 1 binary64) y)))))
((+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) #s(approx (+ (* (- (* (+ (/ 1/2 (* y y)) (/ 1/2 y)) z) (/ 1 y)) z) (/ 1 y)) (/.f64 (+.f64 (/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 z z)) #s(literal 1 binary64)) z) (-.f64 (*.f64 #s(literal 1/2 binary64) z) #s(literal -1 binary64))) #s(literal 1 binary64)) y)))) (+.f64 x (/.f64 #s(approx (exp (* y (log (/ y (+ z y))))) #s(approx (- 1 z) (neg.f64 z))) y)) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) #s(approx (+ (* (- (* (+ (/ 1/2 (* y y)) (/ 1/2 y)) z) (/ 1 y)) z) (/ 1 y)) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) y) #s(literal -1/2 binary64)) y) (*.f64 z z))))) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) (+.f64 (*.f64 (-.f64 (*.f64 #s(approx (+ (/ (+ (* (+ (+ 1/6 (/ 1/2 y)) (/ 1/3 (* y y))) (neg z)) 1/2) y) (/ 1/2 (* y y))) (/.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) z) #s(literal -1/2 binary64)) y)) z) (/.f64 #s(literal 1 binary64) y)) z) (/.f64 #s(literal 1 binary64) y)))) (+.f64 x #s(approx (/ (exp (* y (log (/ y (+ z y))))) y) (+.f64 (*.f64 (-.f64 #s(approx (* (+ (/ 1/2 (* y y)) (/ 1/2 y)) z) (*.f64 (/.f64 #s(literal 1/2 binary64) y) (/.f64 (+.f64 (*.f64 (*.f64 z y) y) (*.f64 z y)) (*.f64 y y)))) (/.f64 #s(literal 1 binary64) y)) z) (/.f64 #s(literal 1 binary64) y)))))
((/.f64 (exp.f64 (*.f64 x (log.f64 (/.f64 x (+.f64 x y))))) x))
((/.f64 (exp.f64 #s(approx (* x (log (/ x (+ x y)))) (neg.f64 y))) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) #s(literal 1 binary64)) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal -1/2 binary64)) y) #s(literal 1 binary64)) y) #s(literal 1 binary64))) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (*.f64 (+.f64 (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1/3 binary64) (*.f64 x x))) y)) #s(literal -1/2 binary64)) y) #s(literal 1 binary64)) y) #s(literal 1 binary64))) x) (/.f64 (pow.f64 (/.f64 x (-.f64 y x)) x) x))
((/.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 #s(approx (* x (log (/ x (+ x y)))) (neg.f64 y))))) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) (-.f64 #s(literal 1 binary64) y)) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) (+.f64 (*.f64 (-.f64 #s(approx (* (- (- (/ 1/2 x) (* (+ (+ 1/6 (/ 1/2 x)) (/ 1/3 (* x x))) y)) -1/2) y) (*.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) y)) y)) #s(literal 1 binary64)) y) #s(literal 1 binary64))) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) (+.f64 (*.f64 (-.f64 #s(approx (* (- (- (/ 1/2 x) (* (+ (+ 1/6 (/ 1/2 x)) (/ 1/3 (* x x))) y)) -1/2) y) (/.f64 (-.f64 (*.f64 (+.f64 (*.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) y)) y) x) (*.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) y)) y)) x) (*.f64 #s(literal 1/3 binary64) (*.f64 y y))) (*.f64 x x))) #s(literal 1 binary64)) y) #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (/.f64 x (-.f64 y x)) (neg.f64 x)) x)))
((/.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 #s(approx (* x (log (/ x (+ x y)))) (neg.f64 y)))) x)) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) #s(approx (- 1 y) (neg.f64 y))) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) (+.f64 (*.f64 (-.f64 #s(approx (* (- (/ 1/2 x) -1/2) y) (/.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (*.f64 y x) y)) x)) #s(literal 1 binary64)) y) #s(literal 1 binary64))) x) (/.f64 #s(approx (exp (* x (log (/ x (+ x y))))) (+.f64 (*.f64 (-.f64 #s(approx (* (- (- (/ 1/2 x) (* (+ (+ 1/6 (/ 1/2 x)) (/ 1/3 (* x x))) y)) -1/2) y) (/.f64 (-.f64 #s(approx (* (+ (* (* (- 1/2 (* 1/6 y)) y) x) (* (- 1/2 (* 1/2 y)) y)) x) (*.f64 (*.f64 (*.f64 x x) y) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) y)))) (*.f64 #s(literal 1/3 binary64) (*.f64 y y))) (*.f64 x x))) #s(literal 1 binary64)) y) #s(literal 1 binary64))) x) (/.f64 (exp.f64 #s(approx (* x (log (/ x (+ x y)))) (-.f64 (*.f64 (/.f64 (*.f64 y y) x) #s(literal 1/2 binary64)) y))) x))
((+.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 y (sqrt.f64 x))))
((+.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 y (*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))))) #s(approx (+ (- 1 x) (* y (sqrt x))) (-.f64 #s(literal 1 binary64) x)) #s(approx (+ (- 1 x) (* y (sqrt x))) (*.f64 (sqrt.f64 x) y)) (+.f64 #s(approx (- 1 x) #s(literal 1 binary64)) (*.f64 y (sqrt.f64 x))) (+.f64 #s(approx (- 1 x) (neg.f64 x)) (*.f64 y (sqrt.f64 x))))
((+.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 y (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64)))) #s(approx (+ (- 1 x) (* y (sqrt x))) #s(approx (- 1 x) #s(literal 1 binary64))) #s(approx (+ (- 1 x) (* y (sqrt x))) #s(approx (- 1 x) (neg.f64 x))) #s(approx (+ (- 1 x) (* y (* (pow x 1/4) (pow x 1/4)))) (-.f64 (*.f64 (*.f64 x y) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) #s(approx (+ (- 1 x) (* y (* (pow x 1/4) (pow x 1/4)))) (*.f64 (+.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) y) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) x)))
(#s(approx (+ (- 1 x) (* y (* (pow x 1/4) (pow x 1/4)))) (*.f64 #s(approx (+ (* (sqrt (/ 1 x)) y) (- (/ 1 x) 1)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) y)) x)) #s(approx (+ (- 1 x) (* y (* (pow x 1/4) (pow x 1/4)))) (-.f64 #s(approx (* (* x y) (sqrt (/ 1 x))) (*.f64 (sqrt.f64 x) y)) x)) #s(approx (+ (- 1 x) (* y (* (pow x 1/4) (pow x 1/4)))) (-.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (*.f64 y x)) x)) (+.f64 #s(approx (- 1 x) #s(literal 1 binary64)) (*.f64 y (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64)))))
((-.f64 x (/.f64 (+.f64 #s(literal 230753/100000 binary64) (*.f64 x #s(literal 27061/100000 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 99229/100000 binary64) (*.f64 x #s(literal 4481/100000 binary64))) x)))))
((-.f64 (-.f64 x (/.f64 #s(literal 230753/100000 binary64) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64)))) (*.f64 #s(literal 27061/100000 binary64) (/.f64 x (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))))) #s(approx (- x (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x)))) #s(literal -230753/100000 binary64)) #s(approx (- x (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x)))) (-.f64 (*.f64 #s(literal 30191289437/10000000000 binary64) x) #s(literal 230753/100000 binary64))) #s(approx (- x (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x)))) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -1900161040244073/1000000000000000 binary64) x) #s(literal 30191289437/10000000000 binary64)) x) #s(literal 230753/100000 binary64))) (-.f64 x #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x))) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 #s(literal 1900161040244073/1000000000000000 binary64) (*.f64 #s(literal 179503363065659419717/100000000000000000000 binary64) x)) x) #s(literal 20191289437/10000000000 binary64)) x) #s(literal -230753/100000 binary64)))))
((-.f64 x #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x))) #s(approx (- (* (- (* (- 1900161040244073/1000000000000000 (* 179503363065659419717/100000000000000000000 x)) x) 20191289437/10000000000) x) -230753/100000) #s(literal 230753/100000 binary64)))) #s(approx (- (- x (/ 230753/100000 (- (* (+ (* 4481/100000 x) 99229/100000) x) -1))) (* 27061/100000 (/ x (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)))) x) (-.f64 x #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x))) (/.f64 #s(literal 27061/4481 binary64) x))) #s(approx (- (- x (/ 230753/100000 (- (* (+ (* 4481/100000 x) 99229/100000) x) -1))) (* 27061/100000 (/ x (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)))) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 179503363065659419717/100000000000000000000 binary64) x) #s(literal 1900161040244073/1000000000000000 binary64)) x) #s(literal -30191289437/10000000000 binary64)) x) #s(literal 230753/100000 binary64))) #s(approx (- x (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x)))) (/.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 911513957868707776969/100000000000000000000 binary64)) #s(literal 53246947009/10000000000 binary64)) (+.f64 (*.f64 #s(literal 30191289437/10000000000 binary64) x) #s(literal 230753/100000 binary64)))))
(#s(approx (- x (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x)))) (/.f64 #s(approx (- (* (* x x) 911513957868707776969/100000000000000000000) 53246947009/10000000000) #s(literal -53246947009/10000000000 binary64)) (+.f64 (*.f64 #s(literal 30191289437/10000000000 binary64) x) #s(literal 230753/100000 binary64)))) (-.f64 x #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x))) (-.f64 (*.f64 #s(literal -20191289437/10000000000 binary64) x) #s(literal -230753/100000 binary64)))) (-.f64 x #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x))) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1900161040244073/1000000000000000 binary64) x) #s(literal 20191289437/10000000000 binary64)) x) #s(literal -230753/100000 binary64)))) (-.f64 x #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* (+ 99229/100000 (* x 4481/100000)) x))) (/.f64 (-.f64 (/.f64 #s(literal -1651231776/20079361 binary64) x) #s(literal -27061/4481 binary64)) x))))
((*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 #s(literal 1 binary64) z)))))
(#s(approx (* x (- (/ y z) (/ t (- 1 z)))) (*.f64 (-.f64 (/.f64 x z) (/.f64 (*.f64 x (/.f64 t (-.f64 #s(literal 1 binary64) z))) y)) y)) (*.f64 x #s(approx (- (/ y z) (/ t (- 1 z))) (/.f64 y z))) (*.f64 x #s(approx (- (/ y z) (/ t (- 1 z))) (/.f64 t (-.f64 z #s(literal 1 binary64))))) (*.f64 x (-.f64 (/.f64 y z) #s(approx (/ t (- 1 z)) t))) #s(approx (* x (- (/ y z) (/ t (- 1 z)))) (/.f64 (*.f64 x (-.f64 y (*.f64 t z))) z)))
((*.f64 x #s(approx (- (/ y z) (/ t (- 1 z))) (/.f64 (+.f64 t y) z))) (*.f64 x #s(approx (- (/ y z) (/ t (- 1 z))) #s(approx (/ t (- z 1)) (neg.f64 t)))) #s(approx (* x (- (/ y z) (/ t (- 1 z)))) (*.f64 (/.f64 x z) y)) (*.f64 x #s(approx (- (/ y z) (/ t (- 1 z))) (/.f64 t #s(approx (- z 1) z)))) #s(approx (* x (- (/ y z) (/ t (- 1 z)))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) z)) (neg.f64 t))))
(#s(approx (* x (- (/ y z) (/ t (- 1 z)))) (/.f64 (*.f64 (+.f64 t y) x) z)) #s(approx (* x (- (/ y z) (/ t (- 1 z)))) #s(approx (* (/ x (- 1 z)) (neg t)) (*.f64 (*.f64 t x) (-.f64 #s(literal -1 binary64) z)))) #s(approx (* x (- (/ y z) (/ t (- 1 z)))) #s(approx (* (/ x (- 1 z)) (neg t)) (*.f64 (/.f64 x z) t))) #s(approx (* x (- (/ y z) (/ t (- 1 z)))) (*.f64 (-.f64 y (*.f64 t z)) (/.f64 x z))) (/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 y z) #s(literal 2 binary64)) (pow.f64 #s(approx (/ t (- 1 z)) t) #s(literal 2 binary64))) x) (+.f64 #s(approx (/ t (- 1 z)) t) (/.f64 y z))))
((-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 #s(literal 1 binary64) y)))) t))
((-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z #s(approx (log (- 1 y)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64)) y) #s(literal 1/2 binary64)) y) #s(literal 1 binary64)) y)))) t) #s(approx (- (+ (* x (log y)) (* z (log (- 1 y)))) t) (neg.f64 t)) #s(approx (- (+ (* x (log y)) (* z (log (- 1 y)))) t) (*.f64 (log.f64 (-.f64 #s(literal 1 binary64) y)) z)) (-.f64 #s(approx (+ (* x (log y)) (* z (log (- 1 y)))) (-.f64 (*.f64 (log.f64 y) x) (*.f64 z y))) t) (-.f64 (+.f64 (*.f64 x (log.f64 y)) #s(approx (* z (log (- 1 y))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 z (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64))) y) (*.f64 #s(literal 1/2 binary64) z)) y) z) y))) t))
((-.f64 #s(approx (+ (* x (log y)) (* z (log (- 1 y)))) #s(approx (- (* (log y) x) (* z y)) (*.f64 (-.f64 (*.f64 (/.f64 (log.f64 y) z) x) y) z))) t) #s(approx (- (+ (* x (log y)) (* z (log (- 1 y)))) t) (*.f64 #s(approx (log (- 1 y)) (neg.f64 y)) z)) #s(approx (- (+ (* x (log y)) (* z (log (- 1 y)))) t) #s(approx (* z (log (- 1 y))) (*.f64 (-.f64 (*.f64 (*.f64 z (+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -1/3 binary64) y))) y) z) y))) #s(approx (- (+ (* x (log y)) (* z (log (- 1 y)))) t) (*.f64 #s(approx (log (- 1 y)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64)) y) #s(literal 1/2 binary64)) y) #s(literal 1 binary64)) y)) z)) (-.f64 #s(approx (+ (* x (log y)) (* z (log (- 1 y)))) #s(approx (- (* (log y) x) (* z y)) (*.f64 (-.f64 (*.f64 (/.f64 (log.f64 y) y) x) z) y))) t))
((-.f64 #s(approx (+ (* x (log y)) (* z (log (- 1 y)))) #s(approx (- (* (log y) x) (* z y)) (*.f64 (-.f64 (*.f64 (log.f64 y) (/.f64 x z)) y) z))) t) (-.f64 #s(approx (+ (* x (log y)) (* z (log (- 1 y)))) #s(approx (- (* (log y) x) (* z y)) (*.f64 (neg.f64 y) z))) t) #s(approx (- (+ (* x (log y)) (* z (log (- 1 y)))) t) #s(approx (* z (log (- 1 y))) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/3 binary64)) y) #s(literal 1/2 binary64)) z) y) z) y))) #s(approx (- (+ (* x (log y)) (* z (log (- 1 y)))) t) (*.f64 (log.f64 y) x)) (/.f64 (-.f64 (pow.f64 #s(approx (+ (* x (log y)) (* z (log (- 1 y)))) (-.f64 (*.f64 (log.f64 y) x) (*.f64 z y))) #s(literal 2 binary64)) (*.f64 t t)) (+.f64 #s(approx (+ (* x (log y)) (* z (log (- 1 y)))) (-.f64 (*.f64 (log.f64 y) x) (*.f64 z y))) t)))
((*.f64 #s(literal 70711/100000 binary64) (-.f64 (/.f64 (+.f64 #s(literal 230753/100000 binary64) (*.f64 x #s(literal 27061/100000 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 x (+.f64 #s(literal 99229/100000 binary64) (*.f64 x #s(literal 4481/100000 binary64)))))) x)))
((*.f64 #s(literal 70711/100000 binary64) (/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (*.f64 #s(literal 27061/100000 binary64) x) #s(literal 230753/100000 binary64)) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (/.f64 (+.f64 (*.f64 #s(literal 27061/100000 binary64) x) #s(literal 230753/100000 binary64)) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))) x))) #s(approx (* 70711/100000 (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x)) #s(literal 16316775383/10000000000 binary64)) (*.f64 #s(literal 70711/100000 binary64) #s(approx (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x) (-.f64 (*.f64 #s(literal -30191289437/10000000000 binary64) x) #s(literal -230753/100000 binary64)))) #s(approx (* 70711/100000 (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x)) (*.f64 (-.f64 (/.f64 #s(literal 1913510371/448100000 binary64) (*.f64 x x)) #s(literal 70711/100000 binary64)) x)) (*.f64 #s(literal 70711/100000 binary64) (-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) (/.f64 (-.f64 (/.f64 #s(literal -1651231776/20079361 binary64) x) #s(literal -27061/4481 binary64)) x)) x)))
((/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (*.f64 #s(literal 27061/100000 binary64) x) #s(literal 230753/100000 binary64)) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 70711/100000 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 #s(literal 27061/100000 binary64) x) #s(literal 230753/100000 binary64)) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))) x)) #s(approx (* 70711/100000 (/ (- (pow (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) 2) (* x x)) (+ (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) x))) (*.f64 #s(literal -70711/100000 binary64) x)) #s(approx (* 70711/100000 (/ (- (pow (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) 2) (* x x)) (+ (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) x))) (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 134362287316698645903/100000000000000000000 binary64) x) #s(literal 2134856267379707/1000000000000000 binary64)) x) #s(literal 16316775383/10000000000 binary64))) #s(approx (* 70711/100000 (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x)) #s(approx (* (- (/ 1913510371/448100000 (* x x)) 70711/100000) x) (/.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -70711/100000 binary64)) #s(literal -1913510371/448100000 binary64)) x))) (*.f64 #s(literal 70711/100000 binary64) (-.f64 #s(approx (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -179503363065659419717/100000000000000000000 binary64) x) #s(literal 1900161040244073/1000000000000000 binary64)) x) #s(literal 20191289437/10000000000 binary64)) x) #s(literal -230753/100000 binary64))) x)))
((*.f64 (/.f64 #s(literal 70711/100000 binary64) (+.f64 (/.f64 (+.f64 #s(literal 230753/100000 binary64) (*.f64 x #s(literal 27061/100000 binary64))) (-.f64 (*.f64 (+.f64 #s(literal 99229/100000 binary64) (*.f64 #s(literal 4481/100000 binary64) x)) x) #s(literal -1 binary64))) x)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 230753/100000 binary64) (*.f64 x #s(literal 27061/100000 binary64))) (-.f64 (*.f64 (+.f64 #s(literal 99229/100000 binary64) (*.f64 #s(literal 4481/100000 binary64) x)) x) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 x x))) #s(approx (* 70711/100000 (/ (- (pow (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) 2) (* x x)) (+ (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) x))) (-.f64 (*.f64 #s(literal -2134856267379707/1000000000000000 binary64) x) #s(literal -16316775383/10000000000 binary64))) #s(approx (* 70711/100000 (- (/ (+ 230753/100000 (* x 27061/100000)) (+ 1 (* x (+ 99229/100000 (* x 4481/100000))))) x)) #s(approx (* (- (/ 1913510371/448100000 (* x x)) 70711/100000) x) (/.f64 #s(approx (- (* (* x x) -70711/100000) -1913510371/448100000) (*.f64 (*.f64 x x) #s(literal -70711/100000 binary64))) x))) #s(approx (* 70711/100000 (/ (- (pow (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) 2) (* x x)) (+ (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) x))) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -12692862305735843227608787/10000000000000000000000000 binary64) x) #s(literal 134362287316698645903/100000000000000000000 binary64)) x) #s(literal 2134856267379707/1000000000000000 binary64)) x) #s(literal -16316775383/10000000000 binary64))) (*.f64 #s(literal 70711/100000 binary64) (/.f64 #s(approx (- (pow (/ (+ (* 27061/100000 x) 230753/100000) (- (* (+ (* 4481/100000 x) 99229/100000) x) -1)) 2) (* x x)) (*.f64 (neg.f64 x) x)) (+.f64 (/.f64 (+.f64 (*.f64 #s(literal 27061/100000 binary64) x) #s(literal 230753/100000 binary64)) (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 4481/100000 binary64) x) #s(literal 99229/100000 binary64)) x) #s(literal -1 binary64))) x))))
((+.f64 x (/.f64 y (-.f64 (*.f64 #s(literal 5641895835477563/5000000000000000 binary64) (exp.f64 z)) (*.f64 x y)))))
((+.f64 x (/.f64 y (-.f64 #s(approx (* 5641895835477563/5000000000000000 (exp z)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 5641895835477563/30000000000000000 binary64) z) #s(literal 5641895835477563/10000000000000000 binary64)) z) #s(literal 5641895835477563/5000000000000000 binary64)) z) #s(literal 5641895835477563/5000000000000000 binary64))) (*.f64 x y)))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) x) (+.f64 x (/.f64 y (-.f64 #s(approx (* 5641895835477563/5000000000000000 (exp z)) #s(literal 5641895835477563/5000000000000000 binary64)) (*.f64 x y)))) (+.f64 x (/.f64 y (-.f64 #s(approx (* 5641895835477563/5000000000000000 (exp z)) (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 5641895835477563/10000000000000000 binary64) z) #s(literal 5641895835477563/5000000000000000 binary64)) z) #s(literal 5641895835477563/5000000000000000 binary64))) (*.f64 x y)))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) (*.f64 (/.f64 y (exp.f64 z)) #s(literal 5000000000000000/5641895835477563 binary64))))
((+.f64 x #s(approx (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y))) (/.f64 #s(literal -1 binary64) x))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) (*.f64 #s(approx (/ y (exp z)) y) #s(literal 5000000000000000/5641895835477563 binary64))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) (*.f64 (/.f64 y #s(approx (exp z) (+.f64 #s(literal 1 binary64) z))) #s(literal 5000000000000000/5641895835477563 binary64))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) #s(approx (* (/ y (exp z)) 5000000000000000/5641895835477563) (-.f64 (*.f64 (*.f64 #s(literal -5000000000000000/5641895835477563 binary64) z) (-.f64 y (*.f64 (*.f64 #s(literal 1/2 binary64) y) z))) (*.f64 #s(literal -5000000000000000/5641895835477563 binary64) y)))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) (*.f64 (/.f64 y #s(approx (exp z) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 1/6 binary64) z) #s(literal 1/2 binary64)) z) #s(literal 1 binary64)) z) #s(literal 1 binary64)))) #s(literal 5000000000000000/5641895835477563 binary64))))
((+.f64 x (*.f64 (/.f64 y (-.f64 (pow.f64 #s(approx (* 5641895835477563/5000000000000000 (exp z)) #s(literal 5641895835477563/5000000000000000 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 y x) #s(literal 2 binary64)))) (+.f64 #s(approx (* 5641895835477563/5000000000000000 (exp z)) #s(literal 5641895835477563/5000000000000000 binary64)) (*.f64 y x)))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) (*.f64 #s(approx (/ y (exp z)) (-.f64 y (*.f64 z y))) #s(literal 5000000000000000/5641895835477563 binary64))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) #s(approx (* (/ y (exp z)) 5000000000000000/5641895835477563) (-.f64 #s(approx (* (* -5000000000000000/5641895835477563 z) (- y (* (* 1/2 y) z))) (*.f64 (*.f64 z y) #s(literal -5000000000000000/5641895835477563 binary64))) (*.f64 #s(literal -5000000000000000/5641895835477563 binary64) y)))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) #s(approx (* (/ y (exp z)) 5000000000000000/5641895835477563) #s(approx (- (* (* -5000000000000000/5641895835477563 z) (- y (* (* 1/2 y) z))) (* -5000000000000000/5641895835477563 y)) (*.f64 (*.f64 #s(literal 5000000000000000/5641895835477563 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) z)) z))) y)))) #s(approx (+ x (/ y (- (* 5641895835477563/5000000000000000 (exp z)) (* x y)))) (*.f64 (/.f64 y #s(approx (exp z) (+.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) z)) z) #s(literal 1 binary64)))) #s(literal 5000000000000000/5641895835477563 binary64))))
((*.f64 (*.f64 #s(literal 3 binary64) (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 #s(literal 1 binary64) (*.f64 x #s(literal 9 binary64)))) #s(literal 1 binary64))))
((*.f64 (*.f64 #s(literal 3 binary64) (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64))) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (*.f64 (*.f64 (sqrt.f64 x) y) #s(literal 3 binary64))) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/3 binary64))) (*.f64 (*.f64 (-.f64 (+.f64 y (/.f64 #s(literal 1/9 binary64) x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (sqrt.f64 x)) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (/.f64 (-.f64 (*.f64 (*.f64 (-.f64 y #s(literal 1 binary64)) #s(literal 3 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal -1/3 binary64) (sqrt.f64 x))) x)))
((*.f64 (*.f64 (-.f64 (+.f64 y (/.f64 #s(literal 1/9 binary64) x)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 3 binary64)) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (*.f64 (*.f64 (sqrt.f64 x) #s(literal 3 binary64)) y)) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 1/3 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (sqrt.f64 x)) (-.f64 #s(approx (+ y (/ 1 (* x 9))) (/.f64 #s(literal 1/9 binary64) x)) #s(literal 1 binary64))) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (/.f64 #s(approx (- (* (* (- y 1) 3) (sqrt (pow x 3))) (* -1/3 (sqrt x))) (*.f64 (*.f64 #s(literal 3 binary64) y) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) x)))
((*.f64 (*.f64 (-.f64 (+.f64 y (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 9 binary64) x))) #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 3 binary64)) (*.f64 (*.f64 #s(approx (- (+ y (/ 1/9 x)) 1) y) #s(literal 3 binary64)) (sqrt.f64 x)) (*.f64 #s(approx (* (- (+ y (/ 1/9 x)) 1) 3) (/.f64 #s(literal 1/3 binary64) x)) (sqrt.f64 x)) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (/.f64 #s(approx (- (* (* (- y 1) 3) (sqrt (pow x 3))) (* -1/3 (sqrt x))) (*.f64 (*.f64 #s(literal 3 binary64) y) (*.f64 (sqrt.f64 (*.f64 x x)) (sqrt.f64 x)))) x)) #s(approx (* (* 3 (sqrt x)) (- (+ y (/ 1 (* x 9))) 1)) (/.f64 (-.f64 (*.f64 (*.f64 (-.f64 y #s(literal 1 binary64)) #s(literal 3 binary64)) (*.f64 (sqrt.f64 (*.f64 x x)) (sqrt.f64 x))) (*.f64 #s(literal -1/3 binary64) (sqrt.f64 x))) x)))
((+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t)))
((+.f64 (-.f64 #s(approx (- (* x (log y)) y) (*.f64 (-.f64 (/.f64 (*.f64 (log.f64 y) x) y) #s(literal 1 binary64)) y)) z) (log.f64 t)) #s(approx (+ (- (- (* x (log y)) y) z) (log t)) (neg.f64 y)) (+.f64 #s(approx (- (- (* x (log y)) y) z) (neg.f64 y)) (log.f64 t)) (+.f64 #s(approx (- (- (* x (log y)) y) z) (*.f64 (log.f64 y) x)) (log.f64 t)) (-.f64 (-.f64 (log.f64 (*.f64 (pow.f64 y x) t)) z) y))
((-.f64 (+.f64 (log.f64 t) #s(approx (- (* x (log y)) y) (*.f64 (-.f64 (*.f64 (/.f64 x y) (log.f64 y)) #s(literal 1 binary64)) y))) z) #s(approx (- (- (log (* (pow y x) t)) z) y) (neg.f64 z)) #s(approx (+ (- (- (* x (log y)) y) z) (log t)) (*.f64 (log.f64 y) x)) (-.f64 #s(approx (- (log (* (pow y x) t)) z) (log.f64 (*.f64 (pow.f64 y x) t))) y) (+.f64 (-.f64 #s(approx (- (* x (log y)) y) (*.f64 (log.f64 y) x)) z) (log.f64 t)))
((-.f64 #s(approx (- (log (* (pow y x) t)) z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y) (-.f64 #s(approx (- (log (* (pow y x) t)) z) (neg.f64 z)) y) (-.f64 #s(approx (- (log (* (pow y x) t)) z) (log.f64 #s(approx (* (pow y x) t) t))) y) (+.f64 #s(approx (- (- (* x (log y)) y) z) (neg.f64 z)) (log.f64 t)) (-.f64 #s(approx (+ (log t) (- (* x (log y)) y)) (*.f64 (log.f64 y) x)) z))
((/.f64 (*.f64 x (exp.f64 (-.f64 (+.f64 (*.f64 y (log.f64 z)) (*.f64 (-.f64 t #s(literal 1 binary64)) (log.f64 a))) b))) y))
((/.f64 (*.f64 x (exp.f64 (-.f64 (+.f64 (*.f64 y (log.f64 z)) #s(approx (* (- t 1) (log a)) (*.f64 (-.f64 (log.f64 a) (/.f64 (log.f64 a) t)) t))) b))) y) (/.f64 (*.f64 x (exp.f64 #s(approx (- (+ (* y (log z)) (* (- t 1) (log a))) b) (neg.f64 b)))) y) (/.f64 (*.f64 x (exp.f64 #s(approx (- (+ (* y (log z)) (* (- t 1) (log a))) b) (*.f64 (log.f64 z) y)))) y) (/.f64 #s(approx (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) (*.f64 (*.f64 x (pow.f64 z y)) (pow.f64 a (-.f64 t #s(literal 1 binary64))))) y) (/.f64 #s(approx (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) (/.f64 (*.f64 x (pow.f64 a (-.f64 t #s(literal 1 binary64)))) (exp.f64 b))) y))
((/.f64 (*.f64 x (exp.f64 #s(approx (- (+ (* y (log z)) (* (- t 1) (log a))) b) (-.f64 (*.f64 (log.f64 a) (-.f64 t #s(literal 1 binary64))) b)))) y) (*.f64 (exp.f64 #s(approx (- (+ (* y (log z)) (* (- t 1) (log a))) b) (neg.f64 b))) (/.f64 x y)) (/.f64 #s(approx (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) (*.f64 #s(approx (* x (pow z y)) x) (pow.f64 a (-.f64 t #s(literal 1 binary64))))) y) (/.f64 #s(approx (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) #s(approx (* (* x (pow z y)) (pow a (- t 1))) (/.f64 (*.f64 (pow.f64 z y) x) a))) y) #s(approx (/ (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) y) (*.f64 (*.f64 (pow.f64 a (-.f64 t #s(literal 1 binary64))) (pow.f64 z y)) (/.f64 x y))))
((*.f64 (/.f64 (exp.f64 #s(approx (- (+ (* y (log z)) (* (- t 1) (log a))) b) (-.f64 (*.f64 (-.f64 t #s(literal 1 binary64)) (log.f64 a)) b))) y) x) (/.f64 #s(approx (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) #s(approx (* (* x (pow z y)) (pow a (- t 1))) #s(approx (/ (* (pow z y) x) a) (/.f64 x a)))) y) #s(approx (/ (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) y) (*.f64 #s(approx (* (pow a (- t 1)) (pow z y)) (pow.f64 a (-.f64 t #s(literal 1 binary64)))) (/.f64 x y))) (/.f64 #s(approx (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) #s(approx (/ (* x (pow a (- t 1))) (exp b)) (*.f64 (+.f64 (neg.f64 b) #s(literal 1 binary64)) (*.f64 (pow.f64 a (-.f64 t #s(literal 1 binary64))) x)))) y) #s(approx (/ (* x (exp (- (+ (* y (log z)) (* (- t 1) (log a))) b))) y) (/.f64 (*.f64 (pow.f64 a t) (/.f64 (*.f64 (pow.f64 z y) x) y)) a)))
((*.f64 x (exp.f64 (+.f64 (*.f64 y (-.f64 (log.f64 z) t)) (*.f64 a (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) z)) b))))))
((*.f64 x (exp.f64 (+.f64 (*.f64 y (-.f64 (log.f64 z) t)) (*.f64 a (-.f64 #s(approx (log (- 1 z)) (neg.f64 z)) b))))) (*.f64 x (exp.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (*.f64 (neg.f64 b) a)))) (*.f64 x (exp.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (*.f64 (-.f64 (log.f64 z) t) y)))) (*.f64 x (exp.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (-.f64 (*.f64 (-.f64 (log.f64 z) t) y) (*.f64 b a))))) (*.f64 x (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 z) t)) (exp.f64 (*.f64 (neg.f64 a) (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) z)) b))))))
((*.f64 x (exp.f64 (+.f64 #s(approx (* y (- (log z) t)) (*.f64 (neg.f64 t) y)) (*.f64 a (-.f64 #s(approx (log (- 1 z)) (neg.f64 z)) b))))) (*.f64 x (exp.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (*.f64 (neg.f64 t) y)))) (*.f64 x (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (*.f64 (neg.f64 b) a)))))) (*.f64 x (exp.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) #s(approx (- (* (- (log z) t) y) (* b a)) (-.f64 (*.f64 (log.f64 z) y) (*.f64 b a)))))) (*.f64 x (/.f64 #s(approx (pow (exp y) (- (log z) t)) (pow.f64 z y)) (exp.f64 (*.f64 (neg.f64 a) (-.f64 (log.f64 (-.f64 #s(literal 1 binary64) z)) b))))))
((*.f64 x (/.f64 #s(approx (pow (exp y) (- (log z) t)) (pow.f64 z y)) #s(approx (exp (* (neg a) (- (log (- 1 z)) b))) #s(literal 1 binary64)))) (+.f64 (*.f64 (cosh.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (*.f64 (-.f64 (log.f64 z) t) y))) x) (*.f64 (sinh.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (*.f64 (-.f64 (log.f64 z) t) y))) x)) (/.f64 x (exp.f64 (neg.f64 #s(approx (+ (* y (- (log z) t)) (* a (- (log (- 1 z)) b))) (*.f64 (neg.f64 b) a))))))
((/.f64 (*.f64 x y) (*.f64 (*.f64 (+.f64 x y) (+.f64 x y)) (+.f64 (+.f64 x y) #s(literal 1 binary64)))))
((*.f64 (/.f64 y (+.f64 y x)) (/.f64 x (*.f64 (-.f64 (+.f64 y x) #s(literal -1 binary64)) (+.f64 y x)))) #s(approx (/ (* x y) (* (* (+ x y) (+ x y)) (+ (+ x y) 1))) (/.f64 x (*.f64 y y))) #s(approx (/ (* x y) (* (* (+ x y) (+ x y)) (+ (+ x y) 1))) (/.f64 y (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (/.f64 (*.f64 x y) (*.f64 #s(approx (* (+ x y) (+ x y)) (*.f64 x x)) (+.f64 (+.f64 x y) #s(literal 1 binary64)))) (/.f64 (*.f64 x y) #s(approx (* (* (+ x y) (+ x y)) (+ (+ x y) 1)) (+.f64 (*.f64 (-.f64 (+.f64 (+.f64 (*.f64 x x) y) (*.f64 (+.f64 (*.f64 #s(literal 3 binary64) x) y) y)) (*.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -2 binary64))) y) (*.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x) x)))))
((*.f64 (/.f64 (/.f64 y (+.f64 x y)) (-.f64 (+.f64 x y) #s(literal -1 binary64))) (/.f64 x (+.f64 x y))) #s(approx (/ (* x y) (* (* (+ x y) (+ x y)) (+ (+ x y) 1))) (/.f64 y #s(approx (* (+ 1 x) x) x))) #s(approx (/ (* x y) (* (* (+ x y) (+ x y)) (+ (+ x y) 1))) (/.f64 (/.f64 y (-.f64 x #s(literal -1 binary64))) x)) (/.f64 (*.f64 x y) (*.f64 #s(approx (* (+ x y) (+ x y)) (*.f64 y y)) (+.f64 (+.f64 x y) #s(literal 1 binary64)))) (/.f64 (*.f64 (/.f64 y (+.f64 x y)) (neg.f64 x)) (*.f64 (neg.f64 (+.f64 x y)) (-.f64 (+.f64 x y) #s(literal -1 binary64)))))
((/.f64 (*.f64 (/.f64 x (+.f64 x y)) y) (*.f64 (-.f64 (+.f64 x y) #s(literal -1 binary64)) (+.f64 x y))) #s(approx (/ (* (/ y (+ x y)) (neg x)) (* (neg (+ x y)) (- (+ x y) -1))) (/.f64 y (*.f64 x x))) #s(approx (/ (* x y) (* (* (+ x y) (+ x y)) (+ (+ x y) 1))) (/.f64 (/.f64 y #s(approx (- x -1) x)) x)) (*.f64 #s(approx (/ (/ y (+ x y)) (- (+ x y) -1)) (/.f64 #s(literal 1 binary64) y)) (/.f64 x (+.f64 x y))) (*.f64 (/.f64 y (+.f64 y x)) (/.f64 x (*.f64 (-.f64 #s(approx (+ y x) y) #s(literal -1 binary64)) (+.f64 y x)))))
((/.f64 (*.f64 x (+.f64 y z)) z))
((+.f64 (*.f64 (/.f64 y z) x) (*.f64 #s(literal 1 binary64) x)) #s(approx (/ (* x (+ y z)) z) x) (/.f64 (*.f64 x #s(approx (+ y z) z)) z) (*.f64 (/.f64 (+.f64 z y) z) x) (/.f64 (*.f64 (*.f64 (+.f64 z y) (-.f64 z y)) x) (*.f64 (-.f64 z y) z)))
((+.f64 (*.f64 (/.f64 y z) x) #s(approx (* 1 x) x)) (*.f64 #s(approx (/ (+ z y) z) (/.f64 y z)) x) (*.f64 (/.f64 x z) (+.f64 z y)) (/.f64 (*.f64 x (*.f64 z (+.f64 z y))) (*.f64 z z)) (/.f64 (*.f64 (-.f64 z (/.f64 (*.f64 y y) z)) x) (-.f64 z y)))
((+.f64 (/.f64 (*.f64 x y) z) #s(approx (* 1 x) x)) (*.f64 (/.f64 x z) #s(approx (+ z y) y)) (/.f64 (*.f64 x #s(approx (+ z y) y)) z) (/.f64 (*.f64 x (*.f64 z #s(approx (+ z y) y))) (*.f64 z z)) (/.f64 (*.f64 #s(approx (* (+ z y) (- z y)) (*.f64 (neg.f64 y) y)) x) (*.f64 (-.f64 z y) z)))
((+.f64 (+.f64 (-.f64 (*.f64 (-.f64 x #s(literal 1/2 binary64)) (log.f64 x)) x) #s(literal 91893853320467/100000000000000 binary64)) (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 y #s(literal 7936500793651/10000000000000000 binary64)) z) #s(literal 13888888888889/5000000000000000 binary64)) z) #s(literal 83333333333333/1000000000000000 binary64)) x)))
((+.f64 (-.f64 (*.f64 (log.f64 x) (-.f64 x #s(literal 1/2 binary64))) x) (+.f64 (/.f64 (+.f64 #s(literal 83333333333333/1000000000000000 binary64) (*.f64 (-.f64 (*.f64 z (+.f64 #s(literal 7936500793651/10000000000000000 binary64) y)) #s(literal 13888888888889/5000000000000000 binary64)) z)) x) #s(literal 91893853320467/100000000000000 binary64))) #s(approx (+ (+ (- (* (- x 1/2) (log x)) x) 91893853320467/100000000000000) (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x)) (/.f64 (*.f64 (*.f64 z z) y) x)) (+.f64 (+.f64 (-.f64 (*.f64 (-.f64 x #s(literal 1/2 binary64)) (log.f64 x)) x) #s(literal 91893853320467/100000000000000 binary64)) #s(approx (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x) (/.f64 #s(literal 83333333333333/1000000000000000 binary64) x))) (+.f64 (+.f64 (-.f64 (/.f64 (*.f64 (-.f64 (*.f64 x x) #s(literal 1/4 binary64)) (log.f64 x)) (+.f64 #s(literal 1/2 binary64) x)) x) #s(literal 91893853320467/100000000000000 binary64)) (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 y #s(literal 7936500793651/10000000000000000 binary64)) z) #s(literal 13888888888889/5000000000000000 binary64)) z) #s(literal 83333333333333/1000000000000000 binary64)) x)) (+.f64 (+.f64 (-.f64 (*.f64 (-.f64 x #s(literal 1/2 binary64)) (log.f64 x)) x) #s(literal 91893853320467/100000000000000 binary64)) (/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (*.f64 z (+.f64 #s(literal 7936500793651/10000000000000000 binary64) y)) #s(literal 13888888888889/5000000000000000 binary64)) z) #s(literal 2 binary64)) #s(literal 6944444444444388888888888889/1000000000000000000000000000000 binary64)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 z (+.f64 #s(literal 7936500793651/10000000000000000 binary64) y)) #s(literal 13888888888889/5000000000000000 binary64)) z) #s(literal 83333333333333/1000000000000000 binary64)) x))))
((+.f64 (/.f64 #s(literal 83333333333333/1000000000000000 binary64) x) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 y #s(literal 7936500793651/10000000000000000 binary64)) z) #s(literal 13888888888889/5000000000000000 binary64)) (/.f64 z x)) (-.f64 (*.f64 (-.f64 x #s(literal 1/2 binary64)) (log.f64 x)) (-.f64 x #s(literal 91893853320467/100000000000000 binary64))))) #s(approx (+ (+ (- (* (- x 1/2) (log x)) x) 91893853320467/100000000000000) (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x)) (*.f64 y (/.f64 (*.f64 z z) x))) #s(approx (+ (+ (- (* (- x 1/2) (log x)) x) 91893853320467/100000000000000) (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x)) (/.f64 (*.f64 (*.f64 z (neg.f64 z)) y) x)) (+.f64 (-.f64 (*.f64 (-.f64 x #s(literal 1/2 binary64)) (log.f64 x)) x) (+.f64 #s(approx (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x) (/.f64 #s(literal 83333333333333/1000000000000000 binary64) x)) #s(literal 91893853320467/100000000000000 binary64))) (+.f64 (-.f64 (*.f64 (log.f64 x) (-.f64 x #s(literal 1/2 binary64))) x) (+.f64 (/.f64 (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (+.f64 y #s(literal 7936500793651/10000000000000000 binary64)) z) #s(literal 13888888888889/5000000000000000 binary64)) z) x) (*.f64 x #s(literal 83333333333333/1000000000000000 binary64))) (*.f64 x x)) #s(literal 91893853320467/100000000000000 binary64))))
(#s(approx (+ (/ 83333333333333/1000000000000000 x) (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) (/ z x)) (- (* (- x 1/2) (log x)) (- x 91893853320467/100000000000000)))) (/.f64 (-.f64 (+.f64 (*.f64 (+.f64 (+.f64 #s(literal 91893853320467/100000000000000 binary64) (*.f64 (-.f64 (log.f64 x) #s(literal 1 binary64)) x)) (*.f64 #s(literal -1/2 binary64) (log.f64 x))) x) (*.f64 (-.f64 (*.f64 (-.f64 y #s(literal -7936500793651/10000000000000000 binary64)) z) #s(literal 13888888888889/5000000000000000 binary64)) z)) #s(literal -83333333333333/1000000000000000 binary64)) x)) #s(approx (+ (+ (- (* (- x 1/2) (log x)) x) 91893853320467/100000000000000) (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x)) (*.f64 z (*.f64 z (/.f64 y x)))) #s(approx (+ (+ (- (* (- x 1/2) (log x)) x) 91893853320467/100000000000000) (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x)) (*.f64 y (/.f64 (*.f64 (neg.f64 z) z) x))) (+.f64 (/.f64 #s(literal 83333333333333/1000000000000000 binary64) x) #s(approx (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) (/ z x)) (- (* (- x 1/2) (log x)) (- x 91893853320467/100000000000000))) (*.f64 (*.f64 (/.f64 (-.f64 y #s(literal -7936500793651/10000000000000000 binary64)) x) z) z))) (+.f64 (-.f64 (*.f64 (-.f64 x #s(literal 1/2 binary64)) (log.f64 x)) x) (+.f64 #s(approx (/ (+ (* (- (* (+ y 7936500793651/10000000000000000) z) 13888888888889/5000000000000000) z) 83333333333333/1000000000000000) x) (*.f64 (*.f64 (/.f64 (-.f64 y #s(literal -7936500793651/10000000000000000 binary64)) x) z) z)) #s(literal 91893853320467/100000000000000 binary64))))
((/.f64 #s(literal 1 binary64) (*.f64 x x)))
((pow.f64 x #s(literal -2 binary64)))
((-.f64 (*.f64 x (log.f64 (/.f64 x y))) z))
((-.f64 (*.f64 x (-.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))) z) #s(approx (- (* x (log (/ x y))) z) (neg.f64 z)) (-.f64 (*.f64 x (-.f64 (log.f64 x) (log.f64 y))) z) (-.f64 (*.f64 x (log.f64 (/.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 y))))) z) (-.f64 (*.f64 x (/.f64 (-.f64 (pow.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)) (pow.f64 (log.f64 (neg.f64 y)) #s(literal 2 binary64))) (log.f64 (*.f64 (neg.f64 x) (neg.f64 y))))) z))
(#s(approx (- (* x (log (/ (exp (log x)) (exp (log y))))) z) (-.f64 (*.f64 (log.f64 (/.f64 x y)) (*.f64 (/.f64 x z) z)) z)) #s(approx (- (* x (log (/ (exp (log x)) (exp (log y))))) z) (*.f64 (log.f64 (/.f64 x y)) x)) (-.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) #s(literal 2 binary64)) x)) (sqrt.f64 x)) z) (-.f64 (/.f64 (*.f64 (*.f64 (log.f64 (*.f64 (neg.f64 y) (neg.f64 x))) (log.f64 (/.f64 x y))) x) (log.f64 (*.f64 (neg.f64 y) (neg.f64 x)))) z) #s(approx (- (* x (/ (- (pow (log (neg x)) 2) (pow (log (neg y)) 2)) (log (* (neg x) (neg y))))) z) (*.f64 (-.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)) (pow.f64 (log.f64 (neg.f64 y)) #s(literal 2 binary64))) (*.f64 (log.f64 (*.f64 y x)) z)) x) #s(literal 1 binary64)) z)))
(#s(approx (- (* x (log (/ (exp (log x)) (exp (log y))))) z) (-.f64 (*.f64 (log.f64 (/.f64 x y)) (/.f64 (*.f64 z x) z)) z)) #s(approx (- (* x (log (/ (exp (log x)) (exp (log y))))) z) (-.f64 (*.f64 (*.f64 (log.f64 (/.f64 x y)) (/.f64 x z)) z) z)) #s(approx (- (* x (- (log (neg x)) (log (neg y)))) z) (*.f64 (-.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y))) x)) (-.f64 (*.f64 (sqrt.f64 (*.f64 (*.f64 x x) (log.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (/.f64 x y)))) z) (-.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (*.f64 (sqrt.f64 (log.f64 (/.f64 x y))) (sqrt.f64 (log.f64 (/.f64 x y)))) #s(literal 2 binary64)) x)) (sqrt.f64 x)) z))
((+.f64 x (*.f64 (-.f64 y z) (/.f64 (-.f64 t x) (-.f64 a z)))))
((+.f64 x (*.f64 (-.f64 y z) (-.f64 (/.f64 t (-.f64 a z)) (/.f64 x (-.f64 a z))))) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) t) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) (*.f64 (-.f64 y z) (/.f64 t (-.f64 a z)))) (+.f64 x (*.f64 (-.f64 y z) (/.f64 (-.f64 t x) #s(approx (- a z) a)))) (+.f64 x #s(approx (* (- y z) (/ (- t x) (- a z))) (*.f64 (*.f64 (/.f64 (-.f64 y z) (-.f64 a z)) (+.f64 (/.f64 t x) #s(literal -1 binary64))) x))))
((+.f64 x #s(approx (* (- y z) (/ (- t x) (- a z))) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 t x)) (*.f64 (/.f64 (-.f64 y z) (-.f64 a z)) x)))) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) x) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) (*.f64 #s(approx (- y z) y) (/.f64 t (-.f64 a z)))) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) (/.f64 (*.f64 (-.f64 t x) y) (-.f64 a z))) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) (*.f64 (+.f64 (/.f64 (neg.f64 (-.f64 y z)) (-.f64 a z)) #s(literal 1 binary64)) x)))
((+.f64 x (*.f64 (-.f64 y z) (-.f64 (/.f64 t #s(approx (- a z) a)) (/.f64 x #s(approx (- a z) a))))) (+.f64 x #s(approx (* (- y z) (/ (- t x) (- a z))) (-.f64 t x))) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) #s(approx (/ (* (- t x) y) (- a z)) (*.f64 t (/.f64 y (-.f64 a z))))) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) #s(approx (/ (* (- t x) y) (- a z)) (*.f64 (neg.f64 y) (/.f64 (-.f64 t x) z)))) #s(approx (+ x (* (- y z) (/ (- t x) (- a z)))) (+.f64 (neg.f64 (/.f64 (*.f64 (-.f64 t x) (-.f64 y a)) z)) t)))
((*.f64 (/.f64 (-.f64 x y) (-.f64 z y)) t))
((/.f64 (*.f64 (-.f64 x y) t) (-.f64 z y)) #s(approx (* (/ (- x y) (- z y)) t) t) #s(approx (* (/ (- x y) (- z y)) t) (/.f64 (*.f64 (-.f64 x y) t) z)) (*.f64 (/.f64 #s(approx (- x y) (neg.f64 y)) (-.f64 z y)) t) (/.f64 (*.f64 (*.f64 (-.f64 x y) t) (-.f64 z y)) (pow.f64 (-.f64 z y) #s(literal 2 binary64))))
(#s(approx (* (/ (- x y) (- z y)) t) (*.f64 (/.f64 (+.f64 t (*.f64 t (/.f64 (neg.f64 y) x))) (-.f64 z y)) x)) #s(approx (/ (* (- x y) t) (- z y)) (/.f64 (*.f64 t x) z)) (*.f64 (/.f64 #s(approx (- x y) (neg.f64 y)) #s(approx (- z y) z)) t) (*.f64 #s(approx (/ (- x y) (- z y)) (-.f64 #s(literal 1 binary64) (/.f64 x y))) t) (/.f64 (*.f64 (*.f64 (-.f64 x y) t) (-.f64 z y)) #s(approx (pow (- z y) 2) (*.f64 z z))))
((/.f64 (*.f64 #s(approx (- x y) x) t) (-.f64 z y)) #s(approx (* (/ (- x y) (- z y)) t) (*.f64 #s(approx (/ (+ t (* t (/ (neg y) x))) (- z y)) (/.f64 t x)) x)) (*.f64 #s(approx (/ (- x y) (- z y)) #s(approx (- 1 (/ x y)) (/.f64 x (neg.f64 y)))) t) #s(approx (/ (* (- x y) t) (- z y)) (-.f64 t (*.f64 t (/.f64 (-.f64 x z) y)))) #s(approx (* (/ (- x y) (- z y)) t) (/.f64 (*.f64 (*.f64 (+.f64 y x) (-.f64 x y)) t) (*.f64 (+.f64 y x) z))))
((+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t))
((+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t) #s(approx (+ (* (/ x y) (- z t)) t) t) #s(approx (+ (* (/ x y) (- z t)) t) (*.f64 (/.f64 (-.f64 z t) y) x)) (+.f64 #s(approx (* (/ x y) (- z t)) (*.f64 (/.f64 z y) x)) t) (+.f64 (*.f64 (/.f64 x y) #s(approx (- z t) (neg.f64 t))) t))
((+.f64 (*.f64 (/.f64 x y) #s(approx (- z t) z)) t) #s(approx (+ (/ (* (- z t) x) y) t) (*.f64 (/.f64 z y) x)) #s(approx (+ (/ (* (- z t) x) y) t) (-.f64 t (*.f64 (/.f64 t y) x))) #s(approx (+ (* (/ x y) (- z t)) t) (*.f64 (/.f64 (-.f64 (*.f64 y z) (*.f64 y t)) (*.f64 y y)) x)) (+.f64 (/.f64 (*.f64 (-.f64 (*.f64 y z) (*.f64 y t)) x) (*.f64 y y)) t))
(#s(approx (+ (/ (* (- z t) x) y) t) (-.f64 t (*.f64 t (/.f64 x y)))) #s(approx (+ (/ (* (- z t) x) y) t) (*.f64 z (/.f64 x y))) #s(approx (+ (/ (* (- z t) x) y) t) #s(approx (- t (* (/ t y) x)) (*.f64 (neg.f64 x) (/.f64 t y)))) #s(approx (+ (* (/ x y) (- z t)) t) (*.f64 (/.f64 #s(approx (- (* y z) (* y t)) (*.f64 z y)) (*.f64 y y)) x)) #s(approx (+ (* (/ x y) (- z t)) t) (*.f64 #s(approx (/ (- (* y z) (* y t)) (* y y)) (*.f64 (/.f64 (-.f64 (/.f64 z t) #s(literal 1 binary64)) y) t)) x)))
((/.f64 x (+.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))
((*.f64 (/.f64 x (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) #s(approx (/ x (+ 1 (sqrt (+ x 1)))) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (/ x (+ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) x) #s(literal -1/2 binary64)) x)) (/.f64 x #s(approx (+ 1 (sqrt (+ x 1))) (+.f64 #s(literal 2 binary64) (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 x (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (+ x 1) x)))))
((*.f64 (/.f64 x (+.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) #s(approx (/ x (+ 1 (sqrt (+ x 1)))) (sqrt.f64 x)) #s(approx (/ x (+ 1 (sqrt (+ x 1)))) (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(approx (/ x (+ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/16 binary64) x) #s(literal 1/8 binary64)) x) #s(literal -1/2 binary64)) x)) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))) (-.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))))
((*.f64 #s(approx (/ x (- 1 (- x -1))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))) x) (*.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))))))
((+.f64 (+.f64 (*.f64 x #s(literal 2 binary64)) (*.f64 x x)) (*.f64 y y)))
((+.f64 (+.f64 (+.f64 x x) (*.f64 x x)) (*.f64 y y)) #s(approx (+ (+ (* x 2) (* x x)) (* y y)) (*.f64 x x)) #s(approx (+ (+ (* x 2) (* x x)) (* y y)) (*.f64 y y)) #s(approx (+ (+ (* x 2) (* x x)) (* y y)) (*.f64 (-.f64 x #s(literal -2 binary64)) x)) (+.f64 #s(approx (+ (* x 2) (* x x)) (*.f64 #s(literal 2 binary64) x)) (*.f64 y y)))
(#s(approx (+ (+ (* x 2) (* x x)) (* y y)) (*.f64 #s(approx (- x -2) #s(literal 2 binary64)) x)) (+.f64 #s(approx (+ (* x 2) (* x x)) (*.f64 x x)) (*.f64 y y)))
((+.f64 (+.f64 (*.f64 x y) x) y))
((+.f64 #s(approx (+ (* x y) x) x) y) #s(approx (+ (+ (* x y) x) y) x) #s(approx (+ (+ (* x y) x) y) y) #s(approx (+ (+ (* x y) x) y) (*.f64 (-.f64 y #s(literal -1 binary64)) x)) (+.f64 #s(approx (+ (* x y) x) (*.f64 y x)) y))
(#s(approx (+ (+ (* x y) x) y) (*.f64 #s(approx (- y -1) y) x)))
((*.f64 (*.f64 x #s(literal 2 binary64)) x))
((*.f64 (+.f64 x x) x))
((+.f64 x x))
((/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y)))
((-.f64 #s(literal 1 binary64) (/.f64 x y)) (-.f64 (/.f64 x y) #s(literal 1 binary64)))
(#s(approx (- 1 (/ x y)) #s(literal 1 binary64)) #s(approx (- 1 (/ x y)) (/.f64 (neg.f64 x) y)) #s(approx (- (/ x y) 1) (/.f64 x y)))
((/.f64 (*.f64 x y) #s(literal 2 binary64)))
(#s(approx (/ (* x y) 2) (*.f64 #s(literal 1/2 binary64) (*.f64 y x))) (*.f64 (/.f64 y #s(literal 2 binary64)) x))
((*.f64 #s(approx (/ y 2) (*.f64 #s(literal 1/2 binary64) y)) x))
((+.f64 x (/.f64 (-.f64 y x) #s(literal 2 binary64))))
(#s(approx (+ x (/ (- y x) 2)) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (+ x (/ (- y x) 2)) (*.f64 #s(literal 1/2 binary64) y)) #s(approx (+ x (/ (- y x) 2)) (*.f64 (+.f64 y x) #s(literal 1/2 binary64))))
((*.f64 x (+.f64 y y)))
((/.f64 x (-.f64 #s(literal 1 binary64) x)))
(#s(approx (/ x (- 1 x)) #s(literal -1 binary64)) #s(approx (/ x (- 1 x)) x) #s(approx (/ x (- 1 x)) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 #s(literal 1 binary64) x)))
(#s(approx (/ x (- 1 x)) (+.f64 (*.f64 x x) x)))
((*.f64 x (+.f64 #s(literal 1 binary64) (*.f64 y y))))
((+.f64 (*.f64 (*.f64 y y) x) x) #s(approx (* x (+ 1 (* y y))) x) (*.f64 x #s(approx (+ 1 (* y y)) (*.f64 y y))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 y #s(literal 4 binary64))) x) (-.f64 #s(literal 1 binary64) (*.f64 y y))) (/.f64 (*.f64 (+.f64 (pow.f64 y #s(literal 6 binary64)) #s(literal 1 binary64)) x) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 y #s(literal 4 binary64))) (*.f64 y y))))
((+.f64 (*.f64 (*.f64 x y) y) x) (/.f64 (*.f64 (+.f64 (pow.f64 y #s(literal 6 binary64)) #s(literal 1 binary64)) x) #s(approx (- (+ 1 (pow y 4)) (* y y)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 y y) #s(literal 1 binary64)) y) y) #s(literal -1 binary64)))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 y y) (*.f64 y y))) x) (-.f64 #s(literal 1 binary64) (*.f64 y y))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 y #s(literal 4 binary64))) x) #s(approx (- 1 (* y y)) (*.f64 (neg.f64 y) y))))
((/.f64 (*.f64 #s(approx (+ (pow y 6) 1) (pow.f64 y #s(literal 6 binary64))) x) #s(approx (- (+ 1 (pow y 4)) (* y y)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 y y) #s(literal 1 binary64)) y) y) #s(literal -1 binary64)))))
((+.f64 x (/.f64 (*.f64 (-.f64 y x) z) t)))
((+.f64 x (*.f64 (/.f64 z t) (-.f64 y x))) #s(approx (+ x (/ (* (- y x) z) t)) x) #s(approx (+ x (/ (* (- y x) z) t)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 z t)) x)) (+.f64 x #s(approx (/ (* (- y x) z) t) (*.f64 (/.f64 y t) z))) (+.f64 x (*.f64 (*.f64 (+.f64 y x) (-.f64 y x)) (/.f64 z (*.f64 (+.f64 y x) t)))))
((+.f64 x #s(approx (* (/ z t) (- y x)) (/.f64 (+.f64 (*.f64 (neg.f64 x) z) (*.f64 y z)) t))) #s(approx (+ x (* (/ z t) (- y x))) (*.f64 (/.f64 z t) y)) #s(approx (+ x (/ (* (- y x) z) t)) #s(approx (* (- 1 (/ z t)) x) (*.f64 (neg.f64 z) (/.f64 x t)))) #s(approx (+ x (/ (* (- y x) z) t)) (/.f64 (*.f64 (-.f64 y x) z) t)) (+.f64 x (*.f64 #s(approx (* (+ y x) (- y x)) (*.f64 (neg.f64 x) x)) (/.f64 z (*.f64 (+.f64 y x) t)))))
((+.f64 x #s(approx (* (/ z t) (- y x)) (/.f64 (-.f64 (*.f64 y z) (*.f64 z x)) t))) #s(approx (+ x (/ (* (- y x) z) t)) (*.f64 (/.f64 y t) z)) #s(approx (+ x (/ (* (- y x) z) t)) (*.f64 #s(approx (- 1 (/ z t)) (/.f64 (neg.f64 z) t)) x)) #s(approx (+ x (/ (* (- y x) z) t)) (*.f64 (/.f64 z t) (-.f64 y x))) (+.f64 x (*.f64 #s(approx (* (+ y x) (- y x)) (*.f64 (neg.f64 x) x)) (/.f64 z #s(approx (* (+ y x) t) (*.f64 t x))))))
((-.f64 x (/.f64 (*.f64 (*.f64 y #s(literal 2 binary64)) z) (-.f64 (*.f64 (*.f64 z #s(literal 2 binary64)) z) (*.f64 y t)))))
((-.f64 x (*.f64 (/.f64 z (-.f64 (*.f64 (*.f64 z #s(literal 2 binary64)) z) (*.f64 t y))) (*.f64 #s(literal 2 binary64) y))) #s(approx (- x (/ (* (* y 2) z) (- (* (* z 2) z) (* y t)))) x) (-.f64 x #s(approx (/ (* (* y 2) z) (- (* (* z 2) z) (* y t))) (/.f64 y z))) (-.f64 x #s(approx (/ (* (* y 2) z) (- (* (* z 2) z) (* y t))) (*.f64 (/.f64 z t) #s(literal -2 binary64)))) (-.f64 x (/.f64 (*.f64 (*.f64 y #s(literal 2 binary64)) z) #s(approx (- (* (* z 2) z) (* y t)) (*.f64 (neg.f64 t) y)))))
((-.f64 x (*.f64 z (/.f64 (*.f64 y #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) z) z) (*.f64 y t))))) (-.f64 x (*.f64 #s(approx (/ z (- (* (* z 2) z) (* t y))) (/.f64 #s(literal 1/2 binary64) z)) (*.f64 #s(literal 2 binary64) y))) (-.f64 x (/.f64 (*.f64 (+.f64 y y) z) #s(approx (- (* (* z 2) z) (* y t)) (*.f64 (neg.f64 t) y)))) #s(approx (- x (/ (* (* y 2) z) (- (* (* z 2) z) (* y t)))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) z) y) (-.f64 (*.f64 (*.f64 z z) #s(literal 2 binary64)) (*.f64 y t)))) (-.f64 x #s(approx (/ (* (* y 2) z) (- (* (* z 2) z) (* y t))) (/.f64 (-.f64 y (*.f64 (*.f64 #s(literal -1/2 binary64) t) (*.f64 y (/.f64 (/.f64 y z) z)))) z))))
(#s(approx (- x (/ (* (* y 2) z) (- (* (* z 2) z) (* y t)))) #s(approx (/ (* (* -2 z) y) (- (* (* z z) 2) (* y t))) (*.f64 (/.f64 z t) #s(literal 2 binary64)))) #s(approx (- x (/ (* (* y 2) z) (- (* (* z 2) z) (* y t)))) #s(approx (/ (* (* -2 z) y) (- (* (* z z) 2) (* y t))) (/.f64 (neg.f64 y) z))) #s(approx (- x (/ (* (* y 2) z) (- (* (* z 2) z) (* y t)))) (*.f64 (*.f64 #s(literal -2 binary64) z) (/.f64 y (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) z) z) (*.f64 t y))))))
((*.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (*.f64 a a)))) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal 1 binary64) b))))
((*.f64 (/.f64 (/.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (+.f64 a b)) (-.f64 b a)) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal 1 binary64) b))) #s(approx (* (* (/ (PI) 2) (/ 1 (- (* b b) (* a a)))) (- (/ 1 a) (/ 1 b))) (*.f64 (/.f64 (/.f64 (PI.f64) (*.f64 a a)) b) #s(literal 1/2 binary64))) (/.f64 (*.f64 (-.f64 b a) (PI.f64)) (*.f64 (*.f64 a b) (*.f64 (*.f64 #s(literal 2 binary64) (+.f64 a b)) (-.f64 b a)))) #s(approx (* (* (/ (PI) 2) (/ 1 (- (* b b) (* a a)))) (- (/ 1 a) (/ 1 b))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (PI.f64) b) (/.f64 (PI.f64) a))) (*.f64 b b))) (*.f64 #s(approx (* (/ (PI) 2) (/ 1 (- (* b b) (* a a)))) (*.f64 (/.f64 (PI.f64) (*.f64 b b)) #s(literal 1/2 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal 1 binary64) b))))
((*.f64 (/.f64 (PI.f64) (*.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a))) (/.f64 (-.f64 b a) (-.f64 b a))) #s(approx (/ (* (- b a) (PI)) (* (* a b) (* (* 2 (+ a b)) (- b a)))) (*.f64 (/.f64 (PI.f64) (*.f64 (*.f64 a a) b)) #s(literal 1/2 binary64))) #s(approx (* (* (/ (PI) 2) (/ 1 (- (* b b) (* a a)))) (- (/ 1 a) (/ 1 b))) (*.f64 (/.f64 (/.f64 (PI.f64) (*.f64 b b)) a) #s(literal 1/2 binary64))) (/.f64 (*.f64 #s(approx (- b a) (neg.f64 a)) (PI.f64)) (*.f64 (*.f64 a b) (*.f64 (*.f64 #s(literal 2 binary64) (+.f64 a b)) (-.f64 b a)))) #s(approx (* (* (/ (PI) 2) (/ 1 (- (* b b) (* a a)))) (- (/ 1 a) (/ 1 b))) (*.f64 (-.f64 (/.f64 (PI.f64) b) (/.f64 (PI.f64) a)) (/.f64 #s(literal -1/2 binary64) (*.f64 b b)))))
((/.f64 (/.f64 (PI.f64) (*.f64 a b)) (*.f64 (+.f64 a b) #s(literal 2 binary64))) #s(approx (/ (* (- b a) (PI)) (* (* a b) (* (* 2 (+ a b)) (- b a)))) (*.f64 (PI.f64) (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) b)))) #s(approx (* (* (/ (PI) 2) (/ 1 (- (* b b) (* a a)))) (- (/ 1 a) (/ 1 b))) (*.f64 (/.f64 (PI.f64) (*.f64 a a)) (/.f64 #s(literal 1/2 binary64) b))) #s(approx (/ (* (- b a) (PI)) (* (* a b) (* (* 2 (+ a b)) (- b a)))) (*.f64 (/.f64 (/.f64 (PI.f64) b) (*.f64 a a)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (PI.f64) (*.f64 a b)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 a b) #s(literal 2 binary64)))))
((/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) (exp.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) eps) x)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) (exp.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) x))))) #s(literal 2 binary64)))
((/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) (exp.f64 (-.f64 (*.f64 x eps) x)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) (exp.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) x))))) #s(literal 2 binary64)) #s(approx (/ (- (* (+ 1 (/ 1 eps)) (exp (neg (* (- 1 eps) x)))) (* (- (/ 1 eps) 1) (exp (neg (* (+ 1 eps) x))))) 2) #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) #s(literal 1 binary64))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) (exp.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) x))))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) (exp.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) eps) x)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) #s(approx (exp (neg (* (+ 1 eps) x))) #s(literal 1 binary64)))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) (+.f64 (*.f64 (-.f64 eps #s(literal 1 binary64)) x) #s(literal 1 binary64)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) (exp.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) x))))) #s(literal 2 binary64)))
((/.f64 (-.f64 (*.f64 #s(approx (+ 1 (/ 1 eps)) #s(literal 1 binary64)) #s(approx (exp (neg (* (- 1 eps) x))) (exp.f64 (-.f64 (*.f64 x eps) x)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) (exp.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) x))))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) #s(literal 1 binary64))) #s(approx (* (- (/ 1 eps) 1) (exp (neg (* (+ 1 eps) x)))) (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) #s(literal 1 binary64))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) #s(approx (exp (neg (* (+ 1 eps) x))) (-.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) eps) x))))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) #s(literal 1 binary64))) #s(approx (* (- (/ 1 eps) 1) (exp (neg (* (+ 1 eps) x)))) (/.f64 (exp.f64 (neg.f64 x)) eps))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 #s(approx (+ 1 (/ 1 eps)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) eps) x)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) #s(approx (exp (neg (* (+ 1 eps) x))) #s(literal 1 binary64)))) #s(literal 2 binary64)))
((/.f64 (-.f64 (*.f64 #s(approx (+ 1 (/ 1 eps)) #s(literal 1 binary64)) #s(approx (exp (neg (* (- 1 eps) x))) (exp.f64 (-.f64 (*.f64 x eps) x)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) (exp.f64 (neg.f64 #s(approx (* (+ 1 eps) x) (*.f64 x eps)))))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 #s(approx (+ 1 (/ 1 eps)) #s(literal 1 binary64)) #s(approx (exp (neg (* (- 1 eps) x))) #s(literal 1 binary64))) #s(approx (* (- (/ 1 eps) 1) (exp (neg (* (+ 1 eps) x)))) (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) #s(literal 1 binary64))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) #s(approx (exp (neg (* (+ 1 eps) x))) (-.f64 #s(literal 1 binary64) #s(approx (* (+ 1 eps) x) x))))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) eps)) #s(approx (exp (neg (* (- 1 eps) x))) #s(literal 1 binary64))) #s(approx (* (- (/ 1 eps) 1) (exp (neg (* (+ 1 eps) x)))) #s(approx (/ (exp (neg x)) eps) (+.f64 (*.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) eps) x) (/.f64 #s(literal 1 binary64) eps)) x) (/.f64 #s(literal 1 binary64) eps))))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 #s(approx (+ 1 (/ 1 eps)) #s(literal 1 binary64)) (exp.f64 #s(approx (neg (* (- 1 eps) x)) (neg.f64 x)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64)) #s(approx (exp (neg (* (+ 1 eps) x))) #s(literal 1 binary64)))) #s(literal 2 binary64)))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) x)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) z)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 5 binary64) z)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) x)) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) x)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) z)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))
((fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) x)) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) x)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) x)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) x)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) z)) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) z)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) y) #s(literal 10 binary64)) y)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 x #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 x #s(literal 8 binary64)) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 y #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 y #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) (*.f64 x #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 x #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z #s(literal 10 binary64))) (*.f64 y #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 6 binary64)))) (fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z #s(literal 10 binary64))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 y #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z #s(literal 10 binary64)))))) (fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 y #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z #s(literal 10 binary64)))))))) (fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 x #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 10) 28/5) 2) (pow (- (* x 10) 21/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal -10 binary64) y)) #s(literal 1/10 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 x #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64)))))) (-.f64 #s(approx (sqrt (+ (+ (pow (- (* z 5) 11/5) 2) (pow (- (* x 10) 97/20) 2)) (pow (+ 63/20 (* y 10)) 2))) (*.f64 #s(literal 10 binary64) x)) #s(literal 1/2 binary64))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 y #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 y #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 x #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z #s(literal 10 binary64)))) (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 y #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 y #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 y #s(literal 10 binary64))))) (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 x #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 y #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 y #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 x #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 x #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 y #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 x #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))
((+.f64 (*.f64 (/.f64 (cos.f64 th) (sqrt.f64 #s(literal 2 binary64))) (*.f64 a1 a1)) (*.f64 (/.f64 (cos.f64 th) (sqrt.f64 #s(literal 2 binary64))) (*.f64 a2 a2))))
((/.f64 (*.f64 (cos.f64 th) (+.f64 (*.f64 a2 a2) (*.f64 a1 a1))) (sqrt.f64 #s(literal 2 binary64))) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) (/.f64 (+.f64 (*.f64 a1 a1) (*.f64 a2 a2)) (sqrt.f64 #s(literal 2 binary64)))) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) (*.f64 (*.f64 a2 a2) (/.f64 (cos.f64 th) (sqrt.f64 #s(literal 2 binary64))))) (+.f64 (*.f64 (/.f64 (cos.f64 th) (sqrt.f64 #s(literal 2 binary64))) (*.f64 a1 a1)) #s(approx (* (/ (cos th) (sqrt 2)) (* a2 a2)) (*.f64 a2 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64)))))) (+.f64 (*.f64 (/.f64 (cos.f64 th) (sqrt.f64 #s(literal 2 binary64))) (*.f64 a1 a1)) #s(approx (* (/ (cos th) (sqrt 2)) (* a2 a2)) (*.f64 (+.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 th th)) #s(literal 1 binary64)) (*.f64 a2 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64))))))))
((*.f64 (/.f64 (cos.f64 th) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (*.f64 a2 a2) (*.f64 a1 a1))) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) #s(approx (/ (+ (* a1 a1) (* a2 a2)) (sqrt 2)) (*.f64 a1 (/.f64 a1 (sqrt.f64 #s(literal 2 binary64)))))) (+.f64 #s(approx (* (/ (cos th) (sqrt 2)) (* a1 a1)) (*.f64 a1 (/.f64 a1 (sqrt.f64 #s(literal 2 binary64))))) #s(approx (* (/ (cos th) (sqrt 2)) (* a2 a2)) (*.f64 a2 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64)))))) (+.f64 (*.f64 (/.f64 #s(approx (cos th) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 th th)) #s(literal -1/24 binary64)) th) th) #s(literal 1/2 binary64)) (*.f64 th th)) #s(literal 1 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 a1 a1)) #s(approx (* (/ (cos th) (sqrt 2)) (* a2 a2)) (*.f64 a2 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64)))))) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) (/.f64 (-.f64 (*.f64 (*.f64 a1 (/.f64 a1 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 a1 (/.f64 a1 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (*.f64 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64))) a2) (*.f64 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64))) a2))) (-.f64 (*.f64 a1 (/.f64 a1 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64))) a2)))))
((/.f64 (*.f64 (cos.f64 th) (+.f64 (*.f64 a2 a2) (*.f64 a1 a1))) (exp.f64 (*.f64 (log.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) #s(approx (/ (+ (* a1 a1) (* a2 a2)) (sqrt 2)) (/.f64 (*.f64 a1 a1) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) #s(approx (/ (- (* (* a1 (/ a1 (sqrt 2))) (* a1 (/ a1 (sqrt 2)))) (* (* (/ a2 (sqrt 2)) a2) (* (/ a2 (sqrt 2)) a2))) (- (* a1 (/ a1 (sqrt 2))) (* (/ a2 (sqrt 2)) a2))) (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 a2 a1) (/.f64 a2 a1)) #s(literal -1 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 a1 a1)))) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) (*.f64 (/.f64 (*.f64 a2 (cos.f64 th)) (sqrt.f64 #s(literal 2 binary64))) a2)) #s(approx (+ (* (/ (cos th) (sqrt 2)) (* a1 a1)) (* (/ (cos th) (sqrt 2)) (* a2 a2))) (/.f64 #s(approx (- (* (* a1 (/ a1 (sqrt 2))) (* a1 (/ a1 (sqrt 2)))) (* (* (/ a2 (sqrt 2)) a2) (* (/ a2 (sqrt 2)) a2))) (/.f64 (pow.f64 a2 #s(literal 4 binary64)) #s(literal -2 binary64))) (-.f64 (*.f64 a1 (/.f64 a1 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 a2 (sqrt.f64 #s(literal 2 binary64))) a2)))))
((*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) n) (/.f64 (-.f64 #s(literal 1 binary64) k) #s(literal 2 binary64)))))
((/.f64 (pow.f64 (*.f64 n (*.f64 (PI.f64) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) k) #s(literal 2 binary64))) (sqrt.f64 k)) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 (/.f64 (*.f64 (PI.f64) n) k)))) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 n (*.f64 (PI.f64) #s(literal 2 binary64))) (*.f64 n (*.f64 (PI.f64) #s(literal 2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) k) #s(literal 4 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 k)) (pow.f64 (pow.f64 (*.f64 n (*.f64 (PI.f64) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) k) #s(literal 4 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 k)) (/.f64 (pow.f64 (*.f64 n (*.f64 (PI.f64) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (*.f64 n (*.f64 (PI.f64) #s(literal 2 binary64))) (/.f64 k #s(literal 2 binary64))))))
((/.f64 (pow.f64 (*.f64 n (+.f64 (PI.f64) (PI.f64))) (/.f64 (-.f64 #s(literal 1 binary64) k) #s(literal 2 binary64))) (sqrt.f64 k)) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (sqrt.f64 (*.f64 (/.f64 (*.f64 (PI.f64) n) k) #s(literal 2 binary64)))) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (sqrt.f64 k)))) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (*.f64 (pow.f64 k #s(literal -1/2 binary64)) (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) n)))) (/.f64 (sqrt.f64 (*.f64 (/.f64 (*.f64 (PI.f64) n) k) #s(literal 2 binary64))) (pow.f64 (*.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) n) (/.f64 k #s(literal 2 binary64)))))
((/.f64 (pow.f64 (*.f64 n (*.f64 (PI.f64) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) k) #s(literal 2 binary64))) (*.f64 (pow.f64 k #s(literal 1/4 binary64)) (pow.f64 k #s(literal 1/4 binary64)))) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (sqrt.f64 (*.f64 #s(literal 2 binary64) (/.f64 n k)))) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (/.f64 (sqrt.f64 (*.f64 #s(literal 2 binary64) n)) (sqrt.f64 k))) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (sqrt.f64 (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 n k))) #s(literal 2 binary64)))) #s(approx (* (/ 1 (sqrt k)) (pow (* (* 2 (PI)) n) (/ (- 1 k) 2))) (*.f64 (*.f64 (pow.f64 k #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 n))))
((+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (sin.f64 (-.f64 lambda1 lambda2))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) (cos.f64 (-.f64 lambda1 lambda2)))))))
((+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (-.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (*.f64 (sin.f64 lambda2) (cos.f64 lambda1)))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) (cos.f64 (-.f64 lambda1 lambda2)))))) #s(approx (+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) lambda1) (+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (sin.f64 (-.f64 lambda1 lambda2))) #s(approx (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 phi1 phi1)) #s(literal 1/2 binary64)) phi1) phi1) (+.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (cos.f64 phi2))))))) (+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (sin.f64 (-.f64 lambda1 lambda2))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) #s(approx (cos (- lambda1 lambda2)) (+.f64 (*.f64 (sin.f64 lambda2) lambda1) (cos.f64 lambda2))))))) (+.f64 lambda1 (atan2.f64 (*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 phi2) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 phi2) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (sin.f64 phi2) #s(literal 0 binary64)) (*.f64 (sin.f64 phi2) #s(literal 0 binary64))) (-.f64 (*.f64 (*.f64 (cos.f64 phi2) #s(literal 1 binary64)) (*.f64 (cos.f64 phi2) #s(literal 1 binary64))) (*.f64 (*.f64 (sin.f64 phi2) #s(literal 0 binary64)) (*.f64 (cos.f64 phi2) #s(literal 1 binary64)))))) (sin.f64 (-.f64 lambda1 lambda2))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) (cos.f64 (-.f64 lambda1 lambda2)))))))
((+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (-.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (*.f64 (sin.f64 lambda2) (cos.f64 lambda1)))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) (+.f64 (*.f64 (sin.f64 lambda2) (sin.f64 lambda1)) (*.f64 (cos.f64 lambda1) (cos.f64 lambda2))))))) (+.f64 lambda1 (atan2.f64 #s(approx (* (cos phi2) (sin (- lambda1 lambda2))) (sin.f64 (-.f64 lambda1 lambda2))) #s(approx (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 phi1 phi1)) #s(literal 1/2 binary64)) phi1) phi1) (+.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (cos.f64 phi2))))))) (+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (sin.f64 (-.f64 lambda1 lambda2))) #s(approx (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) (-.f64 (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (cos.f64 phi2)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 phi1 phi1)) #s(literal 1 binary64)))))) (+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) #s(approx (sin (- lambda1 lambda2)) (-.f64 (*.f64 (cos.f64 lambda2) lambda1) (sin.f64 lambda2)))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) #s(approx (cos (- lambda1 lambda2)) (+.f64 (*.f64 (sin.f64 lambda2) lambda1) (cos.f64 lambda2))))))) (+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (-.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (*.f64 (sin.f64 lambda2) (cos.f64 lambda1)))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) #s(approx (cos (- lambda2 lambda1)) (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 lambda2)) lambda1) (sin.f64 lambda2)) lambda1) (cos.f64 lambda2))))))))
((+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (-.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (*.f64 (sin.f64 lambda2) (cos.f64 lambda1)))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) (+.f64 #s(approx (* (sin lambda2) (sin lambda1)) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) lambda1) lambda1) #s(literal 1 binary64)) (sin.f64 lambda2)) lambda1)) (*.f64 (cos.f64 lambda1) (cos.f64 lambda2))))))) (+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (sin.f64 (-.f64 lambda1 lambda2))) #s(approx (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) #s(approx (- (* (cos (- lambda2 lambda1)) (cos phi2)) (- (* 1/2 (* phi1 phi1)) 1)) (*.f64 (*.f64 phi1 phi1) #s(literal -1/2 binary64)))))) (+.f64 lambda1 (atan2.f64 #s(approx (* (cos phi2) (sin (- lambda1 lambda2))) (sin.f64 (-.f64 lambda1 lambda2))) #s(approx (+ (cos phi1) (* (cos phi2) (cos (- lambda2 lambda1)))) (+.f64 (*.f64 (cos.f64 lambda2) (cos.f64 phi2)) (cos.f64 phi1))))) (+.f64 lambda1 (atan2.f64 #s(approx (* (cos phi2) (- (* (cos lambda2) (sin lambda1)) (* (sin lambda2) (cos lambda1)))) (*.f64 (cos.f64 phi2) (-.f64 (*.f64 (cos.f64 lambda2) lambda1) (sin.f64 lambda2)))) (+.f64 (cos.f64 phi1) (*.f64 (cos.f64 phi2) (cos.f64 (-.f64 lambda1 lambda2)))))) (+.f64 lambda1 (atan2.f64 (*.f64 (cos.f64 phi2) (-.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (*.f64 (sin.f64 lambda2) (cos.f64 lambda1)))) (+.f64 (cos.f64 phi1) #s(approx (* (cos phi2) (+ (* (sin lambda2) (sin lambda1)) (* (cos lambda1) (cos lambda2)))) (+.f64 (*.f64 (sin.f64 lambda2) (sin.f64 lambda1)) (*.f64 (cos.f64 lambda1) (cos.f64 lambda2))))))))
((+.f64 (*.f64 (*.f64 J (-.f64 (exp.f64 l) (exp.f64 (neg.f64 l)))) (cos.f64 (/.f64 K #s(literal 2 binary64)))) U))
((+.f64 (*.f64 (*.f64 (*.f64 (sinh.f64 l) #s(literal 2 binary64)) J) (cos.f64 (/.f64 K #s(literal 2 binary64)))) U) #s(approx (+ (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) U) U) (+.f64 #s(approx (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) (*.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) K)) (*.f64 J (-.f64 (*.f64 (*.f64 l l) #s(literal 1/3 binary64)) #s(literal -2 binary64)))) l)) U) (+.f64 (*.f64 (*.f64 J #s(approx (- (exp l) (exp (neg l))) (*.f64 (-.f64 (*.f64 (*.f64 l l) #s(literal 1/3 binary64)) #s(literal -2 binary64)) l))) (cos.f64 (/.f64 K #s(literal 2 binary64)))) U) (+.f64 #s(approx (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) (*.f64 (-.f64 (exp.f64 l) (exp.f64 (neg.f64 l))) J)) U))
((+.f64 (*.f64 (*.f64 (*.f64 (sinh.f64 l) #s(literal 2 binary64)) J) #s(approx (cos (/ K 2)) (cos.f64 (*.f64 #s(literal 1/2 binary64) K)))) U) (+.f64 #s(approx (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) #s(approx (* (* (cos (* -1/2 K)) (* J (- (* (* l l) 1/3) -2))) l) (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 l l) #s(literal 1/3 binary64)) #s(literal -2 binary64)) l) J))) U) (+.f64 (*.f64 (*.f64 J #s(approx (- (exp l) (exp (neg l))) (*.f64 (-.f64 (*.f64 (*.f64 l l) #s(literal 1/3 binary64)) #s(literal -2 binary64)) l))) #s(approx (cos (/ K 2)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/384 binary64) (*.f64 K K)) #s(literal 1/8 binary64)) K) K) #s(literal -1 binary64)))) U) (+.f64 #s(approx (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) (*.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) K)) #s(approx (* J (- (* (* l l) 1/3) -2)) (*.f64 #s(literal 2 binary64) J))) l)) U) (+.f64 #s(approx (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 l l)) #s(literal -2 binary64)) J) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) K)) l))) U))
((+.f64 (*.f64 #s(approx (* J (- (exp l) (exp (neg l)))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 J (+.f64 (*.f64 #s(literal 1/60 binary64) (*.f64 l l)) #s(literal 1/3 binary64))) l) l) (*.f64 #s(literal -2 binary64) J)) l)) (cos.f64 (/.f64 K #s(literal 2 binary64)))) U) (+.f64 #s(approx (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) #s(approx (* (* (cos (* -1/2 K)) (* J (- (* (* l l) 1/3) -2))) l) #s(approx (* (* (- (* (* l l) 1/3) -2) l) J) (*.f64 (*.f64 J l) #s(literal 2 binary64))))) U) (+.f64 #s(approx (* (* J (- (exp l) (exp (neg l)))) (cos (/ K 2))) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 l l)) #s(literal -2 binary64)) J) (*.f64 #s(approx (cos (* 1/2 K)) (-.f64 (*.f64 (*.f64 K K) #s(literal -1/8 binary64)) #s(literal -1 binary64))) l))) U) (+.f64 (*.f64 (*.f64 J #s(approx (- (exp l) (exp (neg l))) (*.f64 (-.f64 (*.f64 (*.f64 l l) #s(literal 1/3 binary64)) #s(literal -2 binary64)) l))) #s(approx (cos (/ K 2)) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/46080 binary64) (*.f64 K K)) #s(literal 1/384 binary64)) K) K) #s(literal 1/8 binary64)) (*.f64 K K)) #s(literal -1 binary64)))) U) (+.f64 (*.f64 (*.f64 (*.f64 (sinh.f64 l) #s(literal 2 binary64)) J) #s(approx (cos (/ K 2)) (-.f64 (*.f64 (*.f64 K K) #s(literal -1/8 binary64)) #s(literal -1 binary64)))) U))
((*.f64 (cos.f64 (-.f64 (/.f64 (*.f64 K (+.f64 m n)) #s(literal 2 binary64)) M)) (exp.f64 (-.f64 (neg.f64 (pow.f64 (-.f64 (/.f64 (+.f64 m n) #s(literal 2 binary64)) M) #s(literal 2 binary64))) (-.f64 l (fabs.f64 (-.f64 m n)))))))
(#s(approx (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))) (*.f64 (exp.f64 (-.f64 (fabs.f64 (-.f64 m n)) (+.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 n m)) M) #s(literal 2 binary64)) l))) (cos.f64 M))) (*.f64 (cos.f64 (-.f64 (/.f64 (*.f64 K (+.f64 m n)) #s(literal 2 binary64)) M)) (exp.f64 #s(approx (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))) (neg.f64 l)))) (*.f64 (cos.f64 (-.f64 (/.f64 (*.f64 K (+.f64 m n)) #s(literal 2 binary64)) M)) (exp.f64 #s(approx (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))) (*.f64 (*.f64 m m) #s(literal -1/4 binary64))))) (*.f64 (cos.f64 (-.f64 (/.f64 (*.f64 K (+.f64 m n)) #s(literal 2 binary64)) M)) (exp.f64 (-.f64 (neg.f64 #s(approx (pow (- (/ (+ m n) 2) M) 2) (*.f64 M M))) (-.f64 l (fabs.f64 (-.f64 m n)))))) (*.f64 (cos.f64 #s(approx (- (/ (* K (+ m n)) 2) M) (*.f64 (*.f64 K m) #s(literal 1/2 binary64)))) (exp.f64 (-.f64 (neg.f64 (pow.f64 (-.f64 (/.f64 (+.f64 m n) #s(literal 2 binary64)) M) #s(literal 2 binary64))) (-.f64 l (fabs.f64 (-.f64 m n)))))))
(#s(approx (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))) #s(approx (* (exp (- (fabs (- m n)) (+ (pow (- (* 1/2 (+ n m)) M) 2) l))) (cos M)) (exp.f64 (-.f64 (fabs.f64 (-.f64 m n)) (+.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 n m) #s(literal 2 binary64))) l))))) (*.f64 #s(approx (cos (- (/ (* K (+ m n)) 2) M)) (cos.f64 M)) (exp.f64 #s(approx (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))) (neg.f64 l)))) #s(approx (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))) (*.f64 (exp.f64 #s(approx (- (fabs (- m n)) (+ (pow (- (* 1/2 (+ n m)) M) 2) l)) (*.f64 (*.f64 n n) #s(literal -1/4 binary64)))) (cos.f64 M))) (*.f64 (cos.f64 #s(approx (- (/ (* K (+ m n)) 2) M) (*.f64 (*.f64 m K) #s(literal 1/2 binary64)))) (exp.f64 #s(approx (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))) (neg.f64 l)))) (*.f64 (cos.f64 #s(approx (- (/ (* K (+ m n)) 2) M) (*.f64 (*.f64 K m) #s(literal 1/2 binary64)))) (exp.f64 #s(approx (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))) (*.f64 (neg.f64 M) M)))))
(#s(approx (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))) #s(approx (* (exp (- (fabs (- m n)) (+ (pow (- (* 1/2 (+ n m)) M) 2) l))) (cos M)) (exp.f64 (-.f64 (fabs.f64 (-.f64 m n)) (+.f64 (*.f64 #s(literal 1/4 binary64) #s(approx (pow (+ n m) 2) (*.f64 n n))) l))))) #s(approx (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))) #s(approx (* (exp (- (fabs (- m n)) (+ (pow (- (* 1/2 (+ n m)) M) 2) l))) (cos M)) (exp.f64 #s(approx (- (fabs (- m n)) (+ (* 1/4 (pow (+ n m) 2)) l)) (neg.f64 l))))) #s(approx (* (cos (- (/ (* K (+ m n)) 2) M)) (exp (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))))) #s(approx (* (exp (- (fabs (- m n)) (+ (pow (- (* 1/2 (+ n m)) M) 2) l))) (cos M)) (exp.f64 #s(approx (- (fabs (- m n)) (+ (* 1/4 (pow (+ n m) 2)) l)) (*.f64 (*.f64 n n) #s(literal -1/4 binary64)))))) (*.f64 #s(approx (cos (- (/ (* K (+ m n)) 2) M)) (cos.f64 M)) (exp.f64 #s(approx (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))) (*.f64 (neg.f64 M) M)))) (*.f64 (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(approx (- (/ (* K (+ m n)) 2) M) (*.f64 (*.f64 m K) #s(literal 1/2 binary64))))) (exp.f64 #s(approx (- (neg (pow (- (/ (+ m n) 2) M) 2)) (- l (fabs (- m n)))) (neg.f64 l)))))
((*.f64 (*.f64 (*.f64 #s(literal -2 binary64) J) (cos.f64 (/.f64 K #s(literal 2 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 U (*.f64 (*.f64 #s(literal 2 binary64) J) (cos.f64 (/.f64 K #s(literal 2 binary64))))) #s(literal 2 binary64))))))
((*.f64 (*.f64 (*.f64 #s(literal -2 binary64) J) (cos.f64 (/.f64 K #s(literal 2 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (/.f64 (/.f64 U (*.f64 #s(literal 2 binary64) J)) (cos.f64 (/.f64 K #s(literal -2 binary64)))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (pow.f64 (/.f64 (/.f64 U (*.f64 #s(literal 2 binary64) J)) (cos.f64 (/.f64 K #s(literal -2 binary64)))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 1/4 binary64)))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) U) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 U U)) (*.f64 J J)))) (*.f64 #s(literal -2 binary64) J))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 J J)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) K)) #s(literal 2 binary64)) U)) U)) (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) J) (+.f64 (*.f64 (sin.f64 (/.f64 K #s(literal 2 binary64))) (cos.f64 (/.f64 (PI.f64) #s(literal 2 binary64)))) (*.f64 (cos.f64 (/.f64 K #s(literal -2 binary64))) (sin.f64 (/.f64 (PI.f64) #s(literal 2 binary64)))))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 U (*.f64 (*.f64 #s(literal 2 binary64) J) (cos.f64 (/.f64 K #s(literal 2 binary64))))) #s(literal 2 binary64))))))
((*.f64 (*.f64 (*.f64 #s(literal -2 binary64) J) (/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (sin.f64 (/.f64 K #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (/.f64 K #s(literal -2 binary64)))) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 (/.f64 K #s(literal 2 binary64)))) (*.f64 #s(literal 0 binary64) (sin.f64 (/.f64 K #s(literal 2 binary64))))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (/.f64 K #s(literal -2 binary64)))) (*.f64 #s(literal 1 binary64) (cos.f64 (/.f64 K #s(literal -2 binary64))))) (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 (/.f64 K #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (cos.f64 (/.f64 K #s(literal -2 binary64))))))))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 U (*.f64 (*.f64 #s(literal 2 binary64) J) (cos.f64 (/.f64 K #s(literal 2 binary64))))) #s(literal 2 binary64))))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) (neg.f64 U)) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) (*.f64 #s(approx (sqrt (- 1 (/ (* -1/4 (* U U)) (* J J)))) (*.f64 (/.f64 U J) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) J))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) #s(approx (* (sqrt (- 1 (/ (* -1/4 (* U U)) (* J J)))) (* -2 J)) (*.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) U) J) (/.f64 U J)) #s(literal 2 binary64)) J))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) #s(approx (/ (* -1/4 (* U U)) (* J J)) (*.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) U) J) (/.f64 U J))))) (*.f64 #s(literal -2 binary64) J))))
((*.f64 (*.f64 (*.f64 #s(literal -2 binary64) J) (/.f64 (+.f64 (pow.f64 (cos.f64 (/.f64 K #s(literal -2 binary64))) #s(literal 3 binary64)) #s(literal 0 binary64)) (+.f64 (*.f64 (cos.f64 (/.f64 K #s(literal -2 binary64))) (-.f64 (cos.f64 (/.f64 K #s(literal -2 binary64))) #s(literal 0 binary64))) #s(literal 0 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (/.f64 U (*.f64 (*.f64 #s(literal 2 binary64) J) (cos.f64 (/.f64 K #s(literal 2 binary64))))) #s(literal 2 binary64))))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) #s(approx (* (sqrt (- 1 (/ (* -1/4 (* U U)) (* J J)))) (* -2 J)) (*.f64 #s(approx (- (* (/ (* -1/4 U) J) (/ U J)) 2) #s(literal -2 binary64)) J))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) #s(approx (* (sqrt (- 1 (/ (* -1/4 (* U U)) (* J J)))) (* -2 J)) #s(approx (* (- (* (/ (* -1/4 U) J) (/ U J)) 2) J) (/.f64 (-.f64 (*.f64 (*.f64 U U) #s(literal -1/4 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 J J))) J)))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) #s(approx (* (sqrt (- 1 (/ (* -1/4 (* U U)) (* J J)))) (* -2 J)) (*.f64 (-.f64 (*.f64 (/.f64 #s(literal -2 binary64) U) (/.f64 (*.f64 J J) U)) #s(literal 1 binary64)) (neg.f64 U)))) #s(approx (* (* (* -2 J) (cos (/ K 2))) (sqrt (+ 1 (pow (/ U (* (* 2 J) (cos (/ K 2)))) 2)))) (*.f64 (sqrt.f64 #s(approx (- 1 (/ (* -1/4 (* U U)) (* J J))) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 U U)) (/.f64 #s(literal 1/4 binary64) (*.f64 J J))) (*.f64 U U)))) (*.f64 #s(literal -2 binary64) J))))
((+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y #s(literal 1 binary64))) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))))
((+.f64 (+.f64 (/.f64 (+.f64 (*.f64 (-.f64 (-.f64 y #s(literal -1 binary64)) y) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (*.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64)))) (-.f64 (-.f64 x #s(literal -1 binary64)) x))) (*.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64)))) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))) #s(approx (+ (+ (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) (- (sqrt (+ z 1)) (sqrt z))) (- (sqrt (+ t 1)) (sqrt t))) (-.f64 (+.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) y))) (sqrt.f64 (+.f64 #s(literal 1 binary64) z))) (+.f64 (+.f64 (sqrt.f64 z) (sqrt.f64 y)) (sqrt.f64 x)))) (+.f64 (+.f64 #s(approx (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) (-.f64 (+.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) y)) #s(literal 1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))) (+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y #s(literal 1 binary64))) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (/.f64 (-.f64 (-.f64 t #s(literal -1 binary64)) t) (+.f64 (sqrt.f64 t) (sqrt.f64 (-.f64 t #s(literal -1 binary64)))))) (+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (/.f64 (-.f64 y #s(literal -1 binary64)) (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64))))) (/.f64 (*.f64 (neg.f64 (sqrt.f64 y)) (sqrt.f64 y)) (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64))))))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))))
((+.f64 (+.f64 (/.f64 (+.f64 (*.f64 (-.f64 (-.f64 y #s(literal -1 binary64)) y) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (*.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64)))) #s(approx (- (- x -1) x) #s(literal 1 binary64)))) (*.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64)))) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))) #s(approx (+ (+ (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) (- (sqrt (+ z 1)) (sqrt z))) (- (sqrt (+ t 1)) (sqrt t))) (-.f64 #s(approx (+ (+ (sqrt (+ 1 x)) (sqrt (+ 1 y))) (sqrt (+ 1 z))) (sqrt.f64 z)) (+.f64 (+.f64 (sqrt.f64 z) (sqrt.f64 y)) (sqrt.f64 x)))) (+.f64 (+.f64 #s(approx (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) #s(approx (- (+ (* (sqrt (/ 1 y)) 1/2) (sqrt (+ 1 x))) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) y)) #s(literal 1/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))) (+.f64 (-.f64 (sqrt.f64 (-.f64 z #s(literal -1 binary64))) (-.f64 (sqrt.f64 z) (-.f64 (sqrt.f64 (-.f64 t #s(literal -1 binary64))) (sqrt.f64 t)))) #s(approx (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 y)) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) (sqrt.f64 x)))) (+.f64 (+.f64 #s(approx (/ (+ (* (- (- y -1) y) (+ (sqrt x) (sqrt (- x -1)))) (* (+ (sqrt y) (sqrt (- y -1))) (- (- x -1) x))) (* (+ (sqrt y) (sqrt (- y -1))) (+ (sqrt x) (sqrt (- x -1))))) (+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) y)) #s(literal 1/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))))
((+.f64 (+.f64 (/.f64 (+.f64 (*.f64 #s(approx (- (- y -1) y) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (*.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64)))) #s(approx (- (- x -1) x) #s(literal 1 binary64)))) (*.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (-.f64 y #s(literal -1 binary64)))) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))) (-.f64 (sqrt.f64 (+.f64 z #s(literal 1 binary64))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))) #s(approx (+ (+ (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) (- (sqrt (+ z 1)) (sqrt z))) (- (sqrt (+ t 1)) (sqrt t))) (-.f64 #s(approx (+ (+ (sqrt (+ 1 x)) (sqrt (+ 1 y))) (sqrt (+ 1 z))) (sqrt.f64 z)) (+.f64 #s(approx (+ (sqrt z) (sqrt y)) (sqrt.f64 y)) (sqrt.f64 x)))) #s(approx (+ (+ (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) (- (sqrt (+ z 1)) (sqrt z))) (- (sqrt (+ t 1)) (sqrt t))) #s(approx (- (+ (+ (sqrt (+ 1 x)) (sqrt (+ 1 y))) (sqrt (+ 1 z))) (+ (+ (sqrt z) (sqrt y)) (sqrt x))) (-.f64 (+.f64 (+.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) z)) #s(literal 1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) y))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 y) (sqrt.f64 x))))) (+.f64 #s(approx (+ (+ (- (sqrt (+ x 1)) (sqrt x)) (+ (/ (- y -1) (+ (sqrt y) (sqrt (- y -1)))) (/ (* (neg (sqrt y)) (sqrt y)) (+ (sqrt y) (sqrt (- y -1)))))) (- (sqrt (+ z 1)) (sqrt z))) (-.f64 (+.f64 (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) y) (neg.f64 y)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) y)) (sqrt.f64 y))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 t #s(literal 1 binary64))) (sqrt.f64 t))) #s(approx (+ (+ (+ (- (sqrt (+ x 1)) (sqrt x)) (- (sqrt (+ y 1)) (sqrt y))) (- (sqrt (+ z 1)) (sqrt z))) (/ (- (- t -1) t) (+ (sqrt t) (sqrt (- t -1))))) (-.f64 (+.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) y))) (+.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) z)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) t)) (sqrt.f64 t))))) (+.f64 (sqrt.f64 y) (sqrt.f64 x)))))
((+.f64 (+.f64 (+.f64 (+.f64 x x) x) x) x))
(#s(approx (+ (+ (+ (+ x x) x) x) x) (*.f64 #s(literal 5 binary64) x)))
((-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))
((/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) (-.f64 #s(approx (sqrt (+ x 1)) (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 #s(approx (+ x 1) x)) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))))
((/.f64 #s(approx (- (- x -1) x) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (- (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(approx (/ (- (- x -1) x) (+ (sqrt x) (sqrt (- x -1)))) (/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) #s(literal -1 binary64)))) #s(approx (/ (- (- x -1) x) (+ (sqrt x) (sqrt (- x -1)))) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64))) x)))
((/.f64 #s(approx (- (- x -1) x) #s(literal 1 binary64)) (+.f64 (exp.f64 (*.f64 (log.f64 x) #s(literal 1/2 binary64))) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) #s(approx (/ (- (- x -1) x) (+ (sqrt x) (sqrt (- x -1)))) (/.f64 #s(approx (- (* 1/2 (sqrt x)) (* (sqrt (/ 1 x)) 1/8)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x)) (/.f64 #s(approx (- (- x -1) x) #s(literal 1 binary64)) #s(approx (+ (sqrt x) (sqrt (- x -1))) (-.f64 (-.f64 (sqrt.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x)))) #s(approx (/ (- (- x -1) x) (+ (sqrt x) (sqrt (- x -1)))) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1/8 binary64) (sqrt.f64 x))) x)) #s(approx (/ (- (- x -1) x) (+ (sqrt x) (sqrt (- x -1)))) (-.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) x) (/.f64 (/.f64 #s(literal 1/8 binary64) (sqrt.f64 x)) x))))
((+.f64 x (*.f64 y (+.f64 z x))))
((+.f64 x (*.f64 y #s(approx (+ z x) z))) #s(approx (+ x (* y (+ z x))) x) #s(approx (+ x (* y (+ z x))) (*.f64 z y)) #s(approx (+ x (* y (+ z x))) (*.f64 (+.f64 #s(literal 1 binary64) y) x)) (+.f64 x (/.f64 (*.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y) (-.f64 x z))))
(#s(approx (+ x (* y (+ z x))) (*.f64 #s(approx (+ 1 y) y) x)) #s(approx (+ x (/ (* (* (+ z x) (- x z)) y) (- x z))) (*.f64 (-.f64 (+.f64 (/.f64 (*.f64 z y) x) y) #s(literal -1 binary64)) x)) (+.f64 x (/.f64 (*.f64 #s(approx (* (+ z x) (- x z)) (*.f64 x x)) y) (-.f64 x z))))
(#s(approx (+ x (/ (* (* (+ z x) (- x z)) y) (- x z))) (*.f64 (+.f64 (+.f64 (/.f64 x y) z) x) y)))
((+.f64 x (*.f64 x x)))
(#s(approx (+ x (* x x)) x) #s(approx (+ x (* x x)) (*.f64 x x)) (*.f64 (+.f64 #s(literal 1 binary64) x) x))
((-.f64 (log.f64 (+.f64 #s(literal 1 binary64) (exp.f64 x))) (*.f64 x y)))
(#s(approx (- (log (+ 1 (exp x))) (* x y)) (*.f64 (-.f64 (/.f64 (log.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64))) x) y) x)) #s(approx (- (log (+ 1 (exp x))) (* x y)) (*.f64 (neg.f64 x) y)) #s(approx (- (log (+ 1 (exp x))) (* x y)) (log.f64 #s(literal 2 binary64))) (-.f64 (log.f64 #s(approx (+ 1 (exp x)) #s(literal 2 binary64))) (*.f64 x y)) #s(approx (- (log (+ 1 (exp x))) (* x y)) (+.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) y) x) (log.f64 #s(literal 2 binary64)))))
(#s(approx (- (log (+ 1 (exp x))) (* x y)) (*.f64 (-.f64 #s(approx (/ (log (+ (exp x) 1)) x) (/.f64 (log.f64 #s(literal 2 binary64)) x)) y) x)) #s(approx (- (log (+ 1 (exp x))) (* x y)) #s(approx (+ (* (- 1/2 y) x) (log 2)) (*.f64 (-.f64 #s(literal 1/2 binary64) y) x))) #s(approx (- (log (+ 1 (exp x))) (* x y)) (+.f64 (*.f64 #s(approx (- 1/2 y) #s(literal 1/2 binary64)) x) (log.f64 #s(literal 2 binary64)))) #s(approx (- (log (+ 1 (exp x))) (* x y)) (+.f64 (*.f64 (-.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) x) #s(literal -1/2 binary64)) y) x) (log.f64 #s(literal 2 binary64)))) #s(approx (- (log (+ 1 (exp x))) (* x y)) #s(approx (+ (* (- 1/2 y) x) (log 2)) (*.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) x)) y) x) y))))
(#s(approx (- (log (+ 1 (exp x))) (* x y)) #s(approx (+ (* (- 1/2 y) x) (log 2)) (*.f64 (-.f64 #s(approx (/ (- (log 2) (* -1/2 x)) y) (/.f64 (log.f64 #s(literal 2 binary64)) y)) x) y))) #s(approx (- (log (+ 1 (exp x))) (* x y)) #s(approx (+ (* (- 1/2 y) x) (log 2)) (*.f64 #s(approx (- 1/2 y) #s(literal 1/2 binary64)) x))) #s(approx (- (log (+ 1 (exp x))) (* x y)) #s(approx (+ (* (- (- (* 1/8 x) -1/2) y) x) (log 2)) (*.f64 (*.f64 x x) #s(literal 1/8 binary64)))) #s(approx (- (log (+ 1 (exp x))) (* x y)) #s(approx (+ (* (- 1/2 y) x) (log 2)) (*.f64 #s(approx (- (/ (- (log 2) (* -1/2 x)) y) x) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) y) #s(literal 1 binary64)) x)) y))) #s(approx (- (log (+ 1 (exp x))) (* x y)) #s(approx (+ (* (- 1/2 y) x) (log 2)) (/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 y y)) x) (+.f64 #s(literal 1/2 binary64) y)))))
((-.f64 (/.f64 #s(literal 2 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (*.f64 #s(literal -2 binary64) x)))) #s(literal 1 binary64)))
(#s(approx (- (/ 2 (+ 1 (exp (* -2 x)))) 1) x) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) (-.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -2 binary64)))) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) x) #s(literal -2 binary64)))) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -4/3 binary64) x) #s(literal -2 binary64)) x) #s(literal 2 binary64)) x) #s(literal -2 binary64)))) #s(literal 1 binary64)) #s(approx (- (/ 2 (+ 1 (exp (* -2 x)))) 1) (-.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64)))))
(#s(approx (- (/ 2 (+ 1 (exp (* -2 x)))) 1) (-.f64 x (*.f64 (*.f64 (*.f64 x x) x) #s(literal 1/3 binary64)))) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) #s(approx (- (* -2 x) -2) (*.f64 x #s(literal -2 binary64))))) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) #s(approx (- (* (- (* 2 x) 2) x) -2) (*.f64 (*.f64 x #s(literal 2 binary64)) x)))) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) (-.f64 (*.f64 (-.f64 #s(approx (* (- (* -4/3 x) -2) x) (*.f64 (*.f64 #s(literal -4/3 binary64) x) x)) #s(literal 2 binary64)) x) #s(literal -2 binary64)))) #s(literal 1 binary64)) (-.f64 #s(approx (/ 2 (+ 1 (exp (* -2 x)))) (-.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64)))) #s(literal 1 binary64)))
((-.f64 #s(approx (/ 2 (+ 1 (exp (* -2 x)))) (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (*.f64 x x)) (*.f64 #s(literal 1/3 binary64) x)))) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) #s(approx (- (* (- (* 2 x) 2) x) -2) (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) x)))) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) #s(approx (+ 1 (exp (* -2 x))) #s(approx (- (* (- (* (- (* -4/3 x) -2) x) 2) x) -2) (*.f64 (-.f64 (*.f64 #s(literal -4/3 binary64) x) #s(literal -2 binary64)) (*.f64 x x))))) #s(literal 1 binary64)) (-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))))
((/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 x) s)))))
((/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) (/.f32 #s(literal 1 binary32) (exp.f32 (/.f32 x s))))) #s(approx (/ 1 (+ 1 (exp (/ (neg x) s)))) #s(literal 1/2 binary32)) (/.f32 #s(literal 1 binary32) #s(approx (+ 1 (exp (/ (neg x) s))) (-.f32 #s(literal 2 binary32) (/.f32 x s)))) (/.f32 #s(literal 1 binary32) #s(approx (+ 1 (exp (/ (neg x) s))) (-.f32 (*.f32 (-.f32 (*.f32 (/.f32 #s(literal 1/2 binary32) (*.f32 s s)) x) (/.f32 #s(literal 1 binary32) s)) x) #s(literal -2 binary32)))) (/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) #s(approx (exp (/ (neg x) s)) (-.f32 (*.f32 (-.f32 (*.f32 (/.f32 (+.f32 #s(literal 1/2 binary32) (/.f32 (*.f32 #s(literal -1/6 binary32) x) s)) (*.f32 s s)) x) (/.f32 #s(literal 1 binary32) s)) x) #s(literal -1 binary32))))))
((*.f32 (pow.f32 (-.f32 (exp.f32 (/.f32 (neg.f32 x) s)) #s(literal -1 binary32)) #s(literal -1/2 binary32)) (pow.f32 (-.f32 (exp.f32 (/.f32 (neg.f32 x) s)) #s(literal -1 binary32)) #s(literal -1/2 binary32))) #s(approx (/ 1 (+ 1 (/ 1 (exp (/ x s))))) (-.f32 (*.f32 (/.f32 #s(literal 1/4 binary32) s) x) #s(literal -1/2 binary32))) (/.f32 #s(literal 1 binary32) #s(approx (+ 1 (exp (/ (neg x) s))) (-.f32 #s(approx (* (- (* (/ 1/2 (* s s)) x) (/ 1 s)) x) (*.f32 (*.f32 x (/.f32 (/.f32 x s) s)) #s(literal 1/2 binary32))) #s(literal -2 binary32)))) (/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) (/.f32 #s(literal 1 binary32) #s(approx (exp (/ x s)) (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 (*.f32 (*.f32 x (/.f32 x s)) #s(literal -1/2 binary32)) x) s)))))) (/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) #s(approx (exp (/ (neg x) s)) (-.f32 (*.f32 (-.f32 (/.f32 (*.f32 (/.f32 (+.f32 (*.f32 #s(literal -1/6 binary32) (/.f32 x s)) #s(literal 1/2 binary32)) s) x) s) (/.f32 #s(literal 1 binary32) s)) x) #s(literal -1 binary32))))))
((*.f32 (pow.f32 (-.f32 (exp.f32 (/.f32 (neg.f32 x) s)) #s(literal -1 binary32)) #s(literal -1/2 binary32)) (/.f32 #s(literal 1 binary32) (pow.f32 (-.f32 (exp.f32 (/.f32 (neg.f32 x) s)) #s(literal -1 binary32)) #s(literal 1/2 binary32)))) #s(approx (/ 1 (+ 1 (/ 1 (exp (/ x s))))) #s(approx (- (* (/ 1/4 s) x) -1/2) (*.f32 #s(literal 1/4 binary32) (/.f32 x s)))) (/.f32 #s(literal 1 binary32) #s(approx (+ 1 (exp (/ (neg x) s))) #s(approx (- (* (- (* (/ 1/2 (* s s)) x) (/ 1 s)) x) -2) (*.f32 (*.f32 (/.f32 (/.f32 x s) s) x) #s(literal 1/2 binary32))))) (/.f32 #s(literal 1 binary32) (+.f32 #s(literal 1 binary32) (/.f32 #s(literal 1 binary32) #s(approx (exp (/ x s)) (-.f32 #s(literal 1 binary32) #s(approx (/ (- (* (* x (/ x s)) -1/2) x) s) (/.f32 (-.f32 (*.f32 (neg.f32 x) s) (*.f32 (*.f32 x x) #s(literal 1/2 binary32))) (*.f32 s s)))))))) (/.f32 #s(literal 1 binary32) #s(approx (+ 1 (/ 1 (exp (/ x s)))) (-.f32 (*.f32 (-.f32 (*.f32 (/.f32 (-.f32 (*.f32 #s(literal -1/6 binary32) (/.f32 x s)) #s(literal -1/2 binary32)) s) (/.f32 x s)) (/.f32 #s(literal 1 binary32) s)) x) #s(literal -2 binary32)))))
((/.f32 (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)) (*.f32 (*.f32 s (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)))) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s))))))
((/.f32 (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)) (/.f32 (*.f32 (+.f32 (pow.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal 3 binary32)) #s(literal 1 binary32)) (*.f32 (-.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal -1 binary32)) s)) (+.f32 (-.f32 (pow.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal 2 binary32)) (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s)))) #s(literal 1 binary32)))) #s(approx (/ (exp (/ (neg (fabs x)) s)) (* (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (+ 1 (exp (/ (neg (fabs x)) s))))) (/.f32 #s(literal 1/4 binary32) s)) (/.f32 (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)) (*.f32 #s(approx (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (*.f32 #s(literal 2 binary32) s)) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s))))) (/.f32 (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)) (*.f32 #s(approx (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (*.f32 (-.f32 #s(literal 2 binary32) (/.f32 (-.f32 (fabs.f32 x) (*.f32 (/.f32 (*.f32 x x) s) #s(literal 1/2 binary32))) s)) s)) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s))))) (/.f32 (/.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) s) (pow.f32 (-.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal -1 binary32)) #s(literal 2 binary32))))
((/.f32 (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)) (*.f32 (pow.f32 (-.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal -1 binary32)) #s(literal 2 binary32)) s)) #s(approx (/ (exp (/ (neg (fabs x)) s)) (* (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (+ 1 (exp (/ (neg (fabs x)) s))))) (/.f32 (+.f32 (/.f32 (-.f32 (*.f32 #s(literal -3/16 binary32) (*.f32 x x)) (*.f32 #s(literal -1/8 binary32) (*.f32 x x))) (*.f32 s s)) #s(literal 1/4 binary32)) s)) (/.f32 #s(approx (exp (/ (fabs x) (neg s))) (-.f32 #s(literal 1 binary32) (/.f32 (fabs.f32 x) s))) (*.f32 #s(approx (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (*.f32 (-.f32 #s(literal 2 binary32) (/.f32 (-.f32 (fabs.f32 x) (*.f32 (/.f32 (*.f32 x x) s) #s(literal 1/2 binary32))) s)) s)) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s))))) (/.f32 (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)) (*.f32 #s(approx (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (*.f32 (-.f32 #s(literal 2 binary32) (/.f32 (fabs.f32 x) s)) s)) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s))))) (/.f32 (/.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) (-.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal -1 binary32))) (*.f32 (-.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal -1 binary32)) s)))
((/.f32 (/.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (fabs.f32 x) s))) (*.f32 (pow.f32 (-.f32 (exp.f32 (/.f32 (fabs.f32 x) (neg.f32 s))) #s(literal -1 binary32)) #s(literal 2 binary32)) s)) #s(approx (/ (exp (/ (neg (fabs x)) s)) (* (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (+ 1 (exp (/ (neg (fabs x)) s))))) (/.f32 (+.f32 (/.f32 (*.f32 (*.f32 x x) #s(literal -1/16 binary32)) (*.f32 s s)) #s(literal 1/4 binary32)) s)) (/.f32 #s(approx (exp (/ (fabs x) (neg s))) (-.f32 #s(literal 1 binary32) (/.f32 (fabs.f32 x) s))) (*.f32 #s(approx (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (*.f32 (-.f32 #s(literal 2 binary32) (/.f32 (-.f32 (fabs.f32 x) (*.f32 (/.f32 (*.f32 x x) s) #s(literal 1/2 binary32))) s)) s)) (+.f32 #s(literal 1 binary32) #s(approx (exp (/ (fabs x) (neg s))) (/.f32 (+.f32 (*.f32 (*.f32 #s(literal 1/2 binary32) x) (/.f32 x s)) (-.f32 s (fabs.f32 x))) s))))) (/.f32 #s(approx (exp (/ (fabs x) (neg s))) (-.f32 #s(literal 1 binary32) (/.f32 (fabs.f32 x) s))) (*.f32 #s(approx (* s (+ 1 (exp (/ (neg (fabs x)) s)))) #s(approx (* (- 2 (/ (- (fabs x) (* (/ (* x x) s) 1/2)) s)) s) (*.f32 (*.f32 #s(literal 1/2 binary32) x) (/.f32 x s)))) (+.f32 #s(literal 1 binary32) (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s))))) (/.f32 (exp.f32 (/.f32 (neg.f32 (fabs.f32 x)) s)) (*.f32 #s(approx (* s (+ 1 (exp (/ (neg (fabs x)) s)))) (*.f32 #s(literal 2 binary32) s)) (+.f32 #s(literal 1 binary32) #s(approx (exp (/ (fabs x) (neg s))) (+.f32 (-.f32 (-.f32 #s(literal 1 binary32) (/.f32 (fabs.f32 x) s)) (*.f32 (/.f32 #s(literal -1/2 binary32) s) (/.f32 (*.f32 x x) s))) (*.f32 (pow.f32 (/.f32 (fabs.f32 x) s) #s(literal 3 binary32)) #s(literal -1/6 binary32))))))))
((*.f64 c (log.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 (pow.f64 (E.f64) x) #s(literal 1 binary64)) y)))))
(#s(approx (* c (log (+ 1 (* (- (pow (E) x) 1) y)))) (*.f64 (*.f64 y c) x)) (*.f64 c #s(approx (log (+ 1 (* (- (pow (E) x) 1) y))) (*.f64 y x))) (*.f64 c (log.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (pow (E) x) 1) x) y)))) (*.f64 c (log.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (pow (E) x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x)) y)))) (*.f64 c (log.f64 #s(approx (+ 1 (* (- (pow (E) x) 1) y)) (*.f64 (-.f64 (pow.f64 (E.f64) x) #s(literal 1 binary64)) y)))))
(#s(approx (* c (log (+ 1 (* (- (pow (E) x) 1) y)))) (*.f64 (*.f64 x c) y)) #s(approx (* c (log (+ 1 (* (- (pow (E) x) 1) y)))) (*.f64 (*.f64 c (-.f64 y (*.f64 #s(literal -1/2 binary64) (*.f64 (-.f64 y (*.f64 y y)) x)))) x)) (*.f64 c (log.f64 #s(approx (+ 1 (* (- (pow (E) x) 1) y)) #s(literal 1 binary64)))) (*.f64 c (log.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(approx (pow (E) x) (+.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 x x) (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) y)))) (*.f64 c #s(approx (log (+ 1 (* (- (pow (E) x) 1) y))) (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (pow.f64 (E.f64) x) #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64)) y) (-.f64 (pow.f64 (E.f64) x) #s(literal 1 binary64))) y))))
(#s(approx (* c (log (+ 1 (* (- (pow (E) x) 1) y)))) (*.f64 (*.f64 c (-.f64 y (*.f64 #s(literal -1/2 binary64) #s(approx (* (- y (* y y)) x) (*.f64 (*.f64 (neg.f64 x) y) y))))) x)) #s(approx (* c (log (+ 1 (* (- (pow (E) x) 1) y)))) (*.f64 (*.f64 c (-.f64 y (*.f64 #s(literal -1/2 binary64) #s(approx (* (- y (* y y)) x) (*.f64 y x))))) x)) #s(approx (* c (log (+ 1 (* (- (pow (E) x) 1) y)))) #s(approx (* (* c (- y (* -1/2 (* (- y (* y y)) x)))) x) (*.f64 (-.f64 (/.f64 (*.f64 y c) x) (*.f64 (*.f64 (-.f64 y (*.f64 y y)) #s(literal -1/2 binary64)) c)) (*.f64 x x)))) (*.f64 c #s(approx (log (+ 1 (* (- (pow (E) x) 1) y))) (*.f64 #s(approx (+ (* (* (pow (- (pow (E) x) 1) 2) -1/2) y) (- (pow (E) x) 1)) (*.f64 (-.f64 (*.f64 (-.f64 (-.f64 (*.f64 (-.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -7/24 binary64) y) #s(literal -1/24 binary64)) x) #s(literal -1/6 binary64)) (*.f64 #s(literal 1/2 binary64) y)) x) #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) y)) x) #s(literal -1 binary64)) x)) y))) (*.f64 c (log.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (pow (E) x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x)) y)))))
((+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z t)) (*.f64 a b)) (*.f64 c i)))
(#s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (+.f64 (*.f64 b a) (+.f64 (*.f64 t z) (*.f64 y x)))) #s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (*.f64 b a)) #s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (*.f64 i c)) #s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (*.f64 t z)) #s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (*.f64 y x)))
(#s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (+.f64 (*.f64 b a) #s(approx (+ (* t z) (* y x)) (*.f64 (+.f64 (*.f64 (/.f64 y z) x) t) z)))) #s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) #s(approx (+ (* b a) (+ (* t z) (* y x))) (+.f64 (*.f64 t z) (*.f64 y x)))) #s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (+.f64 (*.f64 b a) #s(approx (+ (* t z) (* y x)) (*.f64 t z)))) #s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) (+.f64 (*.f64 b a) #s(approx (+ (* t z) (* y x)) (*.f64 y x)))) (+.f64 #s(approx (+ (+ (* x y) (* z t)) (* a b)) (*.f64 b a)) (*.f64 c i)))
(#s(approx (+ (+ (+ (* x y) (* z t)) (* a b)) (* c i)) #s(approx (+ (* b a) (+ (* t z) (* y x))) #s(approx (+ (* t z) (* y x)) (*.f64 (+.f64 (*.f64 (/.f64 y z) x) t) z)))) (+.f64 #s(approx (+ (+ (* x y) (* z t)) (* a b)) (*.f64 y x)) (*.f64 c i)))
((-.f64 (*.f64 x y) (*.f64 z t)))
(#s(approx (- (* x y) (* z t)) (*.f64 y x)) #s(approx (- (* x y) (* z t)) (*.f64 (neg.f64 z) t)))
((+.f64 (+.f64 (*.f64 x y) (*.f64 z t)) (*.f64 a b)))
((+.f64 #s(approx (+ (* x y) (* z t)) (*.f64 (+.f64 (*.f64 (/.f64 t x) z) y) x)) (*.f64 a b)) #s(approx (+ (+ (* x y) (* z t)) (* a b)) (*.f64 b a)) #s(approx (+ (+ (* x y) (* z t)) (* a b)) (*.f64 y x)) (+.f64 #s(approx (+ (* x y) (* z t)) (*.f64 t z)) (*.f64 a b)) #s(approx (+ (+ (* x y) (* z t)) (* a b)) (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 y x) (*.f64 b a)) z) t) z)))
((+.f64 #s(approx (+ (* x y) (* z t)) (*.f64 (+.f64 (/.f64 (*.f64 y x) t) z) t)) (*.f64 a b)) #s(approx (+ (+ (* x y) (* z t)) (* a b)) (*.f64 #s(approx (+ (/ (+ (* y x) (* b a)) z) t) t) z)) #s(approx (+ (+ (* x y) (* z t)) (* a b)) (+.f64 (*.f64 z t) (*.f64 y x))) (+.f64 #s(approx (+ (* x y) (* z t)) (*.f64 #s(approx (+ (* (/ t x) z) y) y) x)) (*.f64 a b)) #s(approx (+ (+ (* x y) (* z t)) (* a b)) (*.f64 (+.f64 (/.f64 #s(approx (+ (* y x) (* b a)) (*.f64 b a)) z) t) z)))
((+.f64 (*.f64 x y) (*.f64 z t)))
(#s(approx (+ (* x y) (* z t)) (*.f64 t z)) #s(approx (+ (* x y) (* z t)) (*.f64 y x)) (+.f64 (/.f64 (pow.f64 (*.f64 t z) #s(literal 2 binary64)) (-.f64 (*.f64 t z) (*.f64 y x))) (/.f64 (*.f64 (neg.f64 (*.f64 (*.f64 y y) x)) x) (-.f64 (*.f64 t z) (*.f64 y x)))) (/.f64 (+.f64 (pow.f64 (*.f64 y x) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (neg.f64 t)) z) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 y x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (neg.f64 t)) z) (*.f64 (neg.f64 (neg.f64 t)) z)) (*.f64 (*.f64 y x) (*.f64 (neg.f64 (neg.f64 t)) z))))))
(#s(approx (/ (+ (pow (* y x) 3) (pow (* (neg (neg t)) z) 3)) (+ (pow (* y x) 2) (- (* (* (neg (neg t)) z) (* (neg (neg t)) z)) (* (* y x) (* (neg (neg t)) z))))) (*.f64 (+.f64 (/.f64 (*.f64 y x) t) z) t)) #s(approx (/ (+ (pow (* y x) 3) (pow (* (neg (neg t)) z) 3)) (+ (pow (* y x) 2) (- (* (* (neg (neg t)) z) (* (neg (neg t)) z)) (* (* y x) (* (neg (neg t)) z))))) (*.f64 (+.f64 (/.f64 (*.f64 y x) z) t) z)))
(#s(approx (/ (+ (pow (* y x) 3) (pow (* (neg (neg t)) z) 3)) (+ (pow (* y x) 2) (- (* (* (neg (neg t)) z) (* (neg (neg t)) z)) (* (* y x) (* (neg (neg t)) z))))) (*.f64 #s(approx (+ (/ (* y x) z) t) (*.f64 (+.f64 (/.f64 y z) (/.f64 t x)) x)) z)))
((/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z))
((*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z)) (/.f64 #s(approx (* x (/ (sin y) y)) x) z) (/.f64 (*.f64 x #s(approx (/ (sin y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal -1/6 binary64)) #s(literal 1 binary64)))) z) (*.f64 (neg.f64 (sin.f64 y)) (/.f64 x (*.f64 (neg.f64 y) z))) (/.f64 (*.f64 x (/.f64 (sin.f64 y) z)) y))
((/.f64 (/.f64 (*.f64 (sin.f64 y) x) y) z) (*.f64 (neg.f64 #s(approx (sin y) y)) (/.f64 x (*.f64 (neg.f64 y) z))) (*.f64 #s(approx (/ (sin y) y) (-.f64 (*.f64 (*.f64 y y) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 x z)) (*.f64 (sin.f64 y) (/.f64 x (*.f64 z y))) (/.f64 (*.f64 (/.f64 x y) (sin.f64 y)) z))
((*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))) (*.f64 #s(approx (sin y) y) (/.f64 x (*.f64 z y))) (/.f64 (*.f64 x (/.f64 #s(approx (sin y) y) z)) y) (*.f64 #s(approx (/ (sin y) y) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) y) y) #s(literal -1 binary64))) (/.f64 x z)) (*.f64 (/.f64 (neg.f64 #s(approx (sin y) y)) z) (/.f64 x (neg.f64 y))))
((/.f64 (*.f64 (cosh.f64 x) (/.f64 y x)) z))
((/.f64 #s(approx (* (cosh x) (/ y x)) (/.f64 (+.f64 (*.f64 (*.f64 y (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal -1/2 binary64)) x)) x) y) x)) z) #s(approx (/ (* (cosh x) (/ y x)) z) (/.f64 (/.f64 y z) x)) (/.f64 #s(approx (* (cosh x) (/ y x)) (/.f64 y x)) z) #s(approx (/ (* (cosh x) (/ y x)) z) (*.f64 (/.f64 (+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) x) (/.f64 y z))) (/.f64 (*.f64 #s(approx (cosh x) (+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (/.f64 y x)) z))
((/.f64 #s(approx (* (cosh x) (/ y x)) (/.f64 (-.f64 y (*.f64 (neg.f64 y) (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) x) x))) x)) z) #s(approx (/ (* (cosh x) (/ y x)) z) (/.f64 y (*.f64 z x))) (/.f64 #s(approx (* (cosh x) (/ y x)) #s(approx (/ (+ (* (* y (* (- (* 1/24 (* x x)) -1/2) x)) x) y) x) (*.f64 (*.f64 x y) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))))) z) (*.f64 (/.f64 y x) (/.f64 #s(approx (cosh x) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x x)) #s(literal -1 binary64))) z)) (/.f64 #s(approx (* (cosh x) (/ y x)) #s(approx (/ (+ (* (* y (* (- (* 1/24 (* x x)) -1/2) x)) x) y) x) (*.f64 (neg.f64 y) (-.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal -1/24 binary64) x) x) #s(literal -1/2 binary64)) x) (/.f64 #s(literal 1 binary64) x))))) z))
((/.f64 #s(approx (* (cosh x) (/ y x)) (/.f64 (-.f64 y (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) (neg.f64 y)))) x)) z) #s(approx (/ (* (cosh x) (/ y x)) z) (*.f64 #s(approx (/ (+ (* (* x x) 1/2) 1) x) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 y z))) (*.f64 y (/.f64 #s(approx (cosh x) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x x)) #s(literal -1 binary64))) (*.f64 z x))) #s(approx (/ (* (cosh x) (/ y x)) z) (*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 #s(literal -1 binary64) x)) z) y)) (/.f64 #s(approx (* (cosh x) (/ y x)) (/.f64 #s(approx (+ (* (* y (* (- (* 1/24 (* x x)) -1/2) x)) x) y) (*.f64 (*.f64 x y) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) x))) x)) z))
((*.f64 (cosh.f64 x) (/.f64 (sin.f64 y) y)))
(#s(approx (* (cosh x) (/ (sin y) y)) (/.f64 (sin.f64 y) y)) (*.f64 (cosh.f64 x) #s(approx (/ (sin y) y) #s(literal 1 binary64))) (*.f64 (cosh.f64 x) #s(approx (/ (sin y) y) (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 y y)) #s(literal 1 binary64)))) (*.f64 (sin.f64 y) (/.f64 (cosh.f64 x) y)))
((*.f64 (sin.f64 y) (/.f64 #s(approx (cosh x) #s(literal 1 binary64)) y)) #s(approx (* (cosh x) (/ (sin y) y)) #s(approx (/ (sin y) y) #s(literal 1 binary64))) (*.f64 #s(approx (cosh x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))) #s(approx (/ (sin y) y) #s(literal 1 binary64))) (*.f64 #s(approx (cosh x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))) #s(approx (/ (sin y) y) (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 y y)) #s(literal 1 binary64)))) (*.f64 (cosh.f64 x) #s(approx (/ (sin y) y) #s(approx (+ (* -1/6 (* y y)) 1) (*.f64 #s(literal -1/6 binary64) (*.f64 y y))))))
((*.f64 #s(approx (cosh x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))) #s(approx (/ (sin y) y) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) (*.f64 y y)) #s(literal 1/6 binary64)) y) y) #s(literal -1 binary64)))) #s(approx (* (cosh x) (/ (sin y) y)) #s(approx (/ (sin y) y) (-.f64 (*.f64 (*.f64 y y) #s(literal -1/6 binary64)) #s(literal -1 binary64)))) (*.f64 #s(approx (sin y) y) (/.f64 #s(approx (cosh x) #s(literal 1 binary64)) y)) (*.f64 #s(approx (cosh x) #s(approx (- (* (* x x) 1/2) -1) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(approx (/ (sin y) y) (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 y y)) #s(literal 1 binary64)))) #s(approx (* (cosh x) (/ (sin y) y)) #s(approx (/ (sin y) y) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/5040 binary64) (*.f64 y y)) #s(literal 1/120 binary64)) y) y) #s(literal 1/6 binary64)) (*.f64 y y)) #s(literal -1 binary64)))))
((*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y)))
((/.f64 (*.f64 (sinh.f64 y) (cos.f64 x)) y) #s(approx (* (cos x) (/ (sinh y) y)) (cos.f64 x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (/.f64 (sinh.f64 y) y)) (*.f64 (cos.f64 x) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))) (*.f64 #s(approx (cos x) (+.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) #s(literal 1 binary64))) (/.f64 (sinh.f64 y) y)))
((*.f64 #s(approx (cos x) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 x x)) #s(literal 1/24 binary64)) x) x) #s(literal 1/2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))) #s(approx (* (cos x) (/ (sinh y) y)) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(approx (/ (sinh y) y) (-.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal -1 binary64)))) (*.f64 #s(approx (cos x) (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) #s(literal -1 binary64))) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))) (*.f64 #s(approx (cos x) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) x) x) #s(literal -1 binary64))) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))))
((*.f64 #s(approx (cos x) (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) #s(literal -1 binary64))) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) y) y) #s(literal 1 binary64)))) #s(approx (* (cos x) (/ (sinh y) y)) #s(approx (cos x) (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) #s(literal -1 binary64)))) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(approx (/ (sinh y) y) (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) y) y) #s(literal -1 binary64)))) (*.f64 #s(approx (cos x) #s(approx (- (* -1/2 (* x x)) -1) (*.f64 #s(literal -1/2 binary64) (*.f64 x x)))) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))) (*.f64 #s(approx (cos x) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) x) x) #s(literal -1 binary64))) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) y) y) #s(literal 1 binary64)))))
((sqrt.f64 (+.f64 (*.f64 x x) y)))
(#s(approx (sqrt (+ (* x x) y)) x) (sqrt.f64 #s(approx (+ (* x x) y) y)) (sqrt.f64 #s(approx (+ (* x x) y) (*.f64 (neg.f64 y) (-.f64 (*.f64 (neg.f64 x) (/.f64 x y)) #s(literal 1 binary64))))) (sqrt.f64 #s(approx (+ (* x x) y) (*.f64 (-.f64 (/.f64 (*.f64 x x) y) #s(literal -1 binary64)) y))))
((sqrt.f64 #s(approx (+ (* x x) y) (*.f64 (-.f64 (*.f64 (/.f64 x y) x) #s(literal -1 binary64)) y))))
((*.f64 x (/.f64 (sin.f64 y) y)))
((*.f64 (/.f64 x y) (sin.f64 y)) #s(approx (* x (/ (sin y) y)) x) (*.f64 x #s(approx (/ (sin y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal -1/6 binary64)) #s(literal 1 binary64)))) #s(approx (* x (/ (sin y) y)) (-.f64 x (*.f64 (*.f64 (*.f64 y y) x) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/120 binary64) (*.f64 y y)))))) (/.f64 (*.f64 (sin.f64 y) x) y))
((*.f64 (/.f64 x y) #s(approx (sin y) y)) (*.f64 x #s(approx (/ (sin y) y) #s(approx (+ (* (* y y) -1/6) 1) (*.f64 #s(literal -1/6 binary64) (*.f64 y y))))) (/.f64 (*.f64 #s(approx (sin y) y) x) y) #s(approx (* (/ x y) (sin y)) (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 y y) x)) x)) (*.f64 x #s(approx (/ (sin y) y) (+.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) y) y) #s(literal 1 binary64)))))
(#s(approx (* (/ x y) (sin y)) (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 y x) y)) x)) #s(approx (* (/ x y) (sin y)) #s(approx (+ (* -1/6 (* (* y y) x)) x) (*.f64 (*.f64 (*.f64 y y) x) #s(literal -1/6 binary64)))) (*.f64 #s(approx (/ (sin y) y) #s(approx (+ (* (* y y) -1/6) 1) (*.f64 (*.f64 #s(literal -1/6 binary64) y) y))) x) #s(approx (* (/ x y) (sin y)) (+.f64 (*.f64 y (*.f64 (*.f64 y x) #s(literal -1/6 binary64))) x)) (/.f64 #s(approx (* (sin y) x) (*.f64 (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 y y) x)) x) y)) y))
((/.f64 (*.f64 (sin.f64 x) (sinh.f64 y)) x))
(#s(approx (/ (* (sin x) (sinh y)) x) (*.f64 (/.f64 (sin.f64 x) x) y)) (*.f64 (/.f64 (sinh.f64 y) x) (sin.f64 x)) (/.f64 (*.f64 #s(approx (sin x) x) (sinh.f64 y)) x) (/.f64 (*.f64 (sin.f64 x) #s(approx (sinh y) y)) x))
((*.f64 #s(approx (/ (sinh y) x) (*.f64 (/.f64 (+.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 1/5040 binary64) (*.f64 y y)) #s(literal -1/120 binary64))) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) y)) (sin.f64 x)) #s(approx (/ (* (sin x) (sinh y)) x) #s(approx (* (/ (sin x) x) y) y)) #s(approx (/ (* (sin x) (sinh y)) x) (*.f64 #s(approx (/ (sin x) x) (+.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 x x)) #s(literal 1 binary64))) y)) #s(approx (/ (* (sin x) (sinh y)) x) (*.f64 #s(approx (/ (sin x) x) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal 1/6 binary64)) x) x) #s(literal 1 binary64))) y)) (*.f64 (/.f64 #s(approx (sinh y) y) x) (sin.f64 x)))
((*.f64 #s(approx (/ (sinh y) x) (*.f64 #s(approx (/ (+ (* (pow y 4) (- (* 1/5040 (* y y)) -1/120)) (+ (* (* y y) 1/6) 1)) x) (/.f64 (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)) x)) y)) (sin.f64 x)) #s(approx (/ (* (sin x) (sinh y)) x) (*.f64 #s(approx (/ (sin x) x) #s(approx (+ (* -1/6 (* x x)) 1) (*.f64 #s(literal -1/6 binary64) (*.f64 x x)))) y)) (/.f64 (*.f64 #s(approx (sin x) x) #s(approx (sinh y) y)) x) #s(approx (/ (* (sin x) (sinh y)) x) (*.f64 #s(approx (/ (sin x) x) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) y)) #s(approx (/ (* (sin x) (sinh y)) x) (*.f64 #s(approx (/ (sin x) x) #s(approx (+ (* -1/6 (* x x)) 1) (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1/6 binary64)) x) x))) y)))
((*.f64 (sin.f64 x) (/.f64 (sinh.f64 y) y)))
(#s(approx (* (sin x) (/ (sinh y) y)) (sin.f64 x)) (*.f64 #s(approx (sin x) x) (/.f64 (sinh.f64 y) y)) (*.f64 (sin.f64 x) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))) (*.f64 (sinh.f64 y) (/.f64 (sin.f64 x) y)))
((*.f64 #s(approx (sin x) (+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/5040 binary64) (*.f64 x x)) #s(literal -1/120 binary64)) x) x) #s(literal 1/6 binary64))) x)) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))) #s(approx (* (sin x) (/ (sinh y) y)) #s(approx (sin x) x)) #s(approx (* (sin x) (/ (sinh y) y)) #s(approx (sin x) (-.f64 x (*.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 3 binary64)))))) (/.f64 (*.f64 (sinh.f64 y) #s(approx (sin x) x)) y) #s(approx (* (sin x) (/ (sinh y) y)) #s(approx (sin x) (+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/5040 binary64) (*.f64 x x)) #s(literal -1/120 binary64)) x) x) #s(literal 1/6 binary64))) x))))
((*.f64 #s(approx (sin x) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -1/5040 binary64)) #s(literal -1/120 binary64)) x) x) #s(literal 1/6 binary64)) x) (*.f64 x x)) x)) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 #s(approx (sinh y) y) #s(approx (sin x) x)) y) #s(approx (* (sin x) (/ (sinh y) y)) #s(approx (sin x) (-.f64 x (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x)))) #s(approx (* (sin x) (/ (sinh y) y)) #s(approx (sin x) (-.f64 x (*.f64 (*.f64 x x) (*.f64 x #s(literal 1/6 binary64)))))) (*.f64 #s(approx (sin x) #s(approx (+ (* (pow x 3) (- (* (* (- (* -1/5040 (* x x)) -1/120) x) x) 1/6)) x) x)) #s(approx (/ (sinh y) y) (+.f64 (*.f64 (*.f64 y y) #s(literal 1/6 binary64)) #s(literal 1 binary64)))))
((+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y)))
(#s(approx (+ (+ (+ (* x x) (* y y)) (* y y)) (* y y)) (-.f64 (*.f64 x x) (*.f64 #s(literal -3 binary64) (*.f64 y y)))) #s(approx (+ (+ (+ (* x x) (* y y)) (* y y)) (* y y)) (*.f64 x x)) (+.f64 (+.f64 #s(approx (+ (* x x) (* y y)) (*.f64 x x)) (*.f64 y y)) (*.f64 y y)) (+.f64 #s(approx (+ (+ (* x x) (* y y)) (* y y)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 y x)) (/.f64 y x))) (*.f64 x x))) (*.f64 y y)) (+.f64 (+.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 (+.f64 x y) (-.f64 x y))) (*.f64 y y)) (*.f64 y y)))
(#s(approx (+ (+ (/ (- (pow x 4) (pow y 4)) (* (+ x y) (- x y))) (* y y)) (* y y)) (-.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal -3 binary64) y) y))) #s(approx (+ (+ (/ (- (pow x 4) (pow y 4)) (* (+ x y) (- x y))) (* y y)) (* y y)) (*.f64 #s(literal 3 binary64) (*.f64 y y))) #s(approx (+ (+ (+ (* x x) (* y y)) (* y y)) (* y y)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -3 binary64) (/.f64 y x)) (/.f64 y x))) (*.f64 x x))) (/.f64 (-.f64 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 y y)) (*.f64 #s(literal 2 binary64) (*.f64 y y)))) (-.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 #s(literal 2 binary64) (*.f64 y y)))) (+.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 y #s(literal 6 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (*.f64 y y)) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (*.f64 #s(literal 2 binary64) (*.f64 y y)))))) (*.f64 y y)))
(#s(approx (+ (+ (/ (- (pow x 4) (pow y 4)) (* (+ x y) (- x y))) (* y y)) (* y y)) (*.f64 (*.f64 #s(literal 3 binary64) y) y)) #s(approx (+ (+ (+ (* x x) (* y y)) (* y y)) (* y y)) (*.f64 #s(approx (- 1 (* (* -3 (/ y x)) (/ y x))) (*.f64 (*.f64 (/.f64 #s(literal 3 binary64) (*.f64 x x)) y) y)) (*.f64 x x))) #s(approx (/ (- (pow (+ (* y y) (* x x)) 2) (* (* 2 (* y y)) (* 2 (* y y)))) (- (+ (* y y) (* x x)) (* 2 (* y y)))) (/.f64 (*.f64 #s(literal -3 binary64) (pow.f64 y #s(literal 4 binary64))) (*.f64 (neg.f64 y) y))) (+.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64))) (-.f64 (*.f64 x x) (*.f64 #s(literal 2 binary64) (*.f64 y y)))) (*.f64 y y)) (+.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 y #s(literal 6 binary64)))) #s(approx (+ (pow x 4) (- (pow (* 2 (* y y)) 2) (* (* x x) (* 2 (* y y))))) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64)))) (*.f64 y y)))
((-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z)))
(#s(approx (- (+ (- (* x y) (* y y)) (* y y)) (* y z)) (*.f64 (-.f64 x z) y)) #s(approx (- (+ (- (* x y) (* y y)) (* y y)) (* y z)) (*.f64 y x)) #s(approx (- (+ (- (* x y) (* y y)) (* y y)) (* y z)) (*.f64 (neg.f64 z) y)) (-.f64 #s(approx (+ (- (* x y) (* y y)) (* y y)) (*.f64 y x)) (*.f64 y z)) #s(approx (- (+ (- (* x y) (* y y)) (* y y)) (* y z)) (*.f64 (-.f64 (/.f64 (*.f64 y x) z) y) z)))
((-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y)))
(#s(approx (- (- (+ (* x y) (* y y)) (* y z)) (* y y)) (*.f64 (-.f64 x z) y)) #s(approx (- (- (+ (* x y) (* y y)) (* y z)) (* y y)) (*.f64 y x)) #s(approx (- (- (+ (* x y) (* y y)) (* y z)) (* y y)) (*.f64 (neg.f64 z) y)) (-.f64 (*.f64 (+.f64 y x) y) (*.f64 y (+.f64 z y))) (-.f64 #s(approx (- (+ (* x y) (* y y)) (* y z)) (*.f64 (*.f64 y (+.f64 (/.f64 (+.f64 y x) z) #s(literal -1 binary64))) z)) (*.f64 y y)))
(#s(approx (- (- (+ (* x y) (* y y)) (* y z)) (* y y)) (*.f64 #s(approx (- x z) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 z x)) x)) y)) (-.f64 (*.f64 (+.f64 y x) y) #s(approx (* y (+ z y)) (*.f64 z y))))
((-.f64 (*.f64 #s(approx (+ y x) x) y) #s(approx (* y (+ z y)) (*.f64 z y))))
((+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y)))
(#s(approx (- (* x y) (* y z)) (*.f64 (-.f64 x z) y)) #s(approx (- (* x y) (* y z)) (*.f64 y x)) #s(approx (- (* x y) (* y z)) (*.f64 (neg.f64 z) y)) (-.f64 (*.f64 y x) (+.f64 (*.f64 z y) #s(literal 0 binary64))) #s(approx (- (* x y) (* y z)) (*.f64 (-.f64 (/.f64 (*.f64 y x) z) y) z)))
((-.f64 (*.f64 y x) (*.f64 z y)))
((+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z)))
(#s(approx (+ (+ (+ (* x y) (* z z)) (* z z)) (* z z)) (-.f64 (*.f64 y x) (*.f64 #s(literal -3 binary64) (*.f64 z z)))) #s(approx (+ (+ (+ (* x y) (* z z)) (* z z)) (* z z)) (*.f64 y x)) (+.f64 #s(approx (+ (+ (* x y) (* z z)) (* z z)) (*.f64 y x)) (*.f64 z z)) #s(approx (+ (+ (+ (* x y) (* z z)) (* z z)) (* z z)) (*.f64 (-.f64 x (*.f64 #s(literal -3 binary64) (/.f64 (*.f64 z z) y))) y)) (+.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (*.f64 y x) #s(literal 2 binary64)) (pow.f64 z #s(literal 4 binary64))) (-.f64 (*.f64 y x) (*.f64 z z))) (*.f64 z z)) (*.f64 z z)))
((+.f64 (+.f64 (*.f64 z z) (*.f64 y x)) (*.f64 #s(literal 2 binary64) (*.f64 z z))) #s(approx (+ (+ (/ (- (pow (* y x) 2) (pow z 4)) (- (* y x) (* z z))) (* z z)) (* z z)) (*.f64 #s(literal 3 binary64) (*.f64 z z))) #s(approx (+ (+ (+ (* x y) (* z z)) (* z z)) (* z z)) (-.f64 (*.f64 y x) (*.f64 (*.f64 #s(literal -3 binary64) z) z))) #s(approx (+ (+ (+ (* x y) (* z z)) (* z z)) (* z z)) (*.f64 #s(approx (- x (* -3 (/ (* z z) y))) (*.f64 (/.f64 (*.f64 z z) y) #s(literal 3 binary64))) y)) #s(approx (+ (+ (/ (- (pow (* y x) 2) (pow z 4)) (- (* y x) (* z z))) (* z z)) (* z z)) (*.f64 (+.f64 (*.f64 (/.f64 (*.f64 z z) x) #s(literal 3 binary64)) y) x)))
(#s(approx (+ (+ (/ (- (pow (* y x) 2) (pow z 4)) (- (* y x) (* z z))) (* z z)) (* z z)) (*.f64 #s(approx (+ (* (/ (* z z) x) 3) y) (*.f64 (/.f64 (*.f64 z z) x) #s(literal 3 binary64))) x)) #s(approx (+ (+ (/ (- (pow (* y x) 2) (pow z 4)) (- (* y x) (* z z))) (* z z)) (* z z)) (*.f64 (*.f64 #s(literal 3 binary64) z) z)) #s(approx (+ (+ (/ (- (pow (* y x) 2) (pow z 4)) (- (* y x) (* z z))) (* z z)) (* z z)) (*.f64 (+.f64 (*.f64 (*.f64 (/.f64 z x) z) #s(literal 3 binary64)) y) x)))
((/.f64 (*.f64 (*.f64 x #s(literal 2 binary64)) y) (-.f64 x y)))
((*.f64 (/.f64 y (-.f64 x y)) (*.f64 #s(literal 2 binary64) x)) #s(approx (/ (* (* x 2) y) (- x y)) (*.f64 #s(literal -2 binary64) x)) #s(approx (/ (* (* x 2) y) (- x y)) (*.f64 #s(literal 2 binary64) y)) (/.f64 (*.f64 (+.f64 x x) y) (-.f64 x y)) (*.f64 y (/.f64 (*.f64 #s(literal 2 binary64) x) (-.f64 x y))))
(#s(approx (/ (* (* x 2) y) (- x y)) (+.f64 y y)) (*.f64 y (/.f64 (+.f64 x x) (-.f64 x y))) (*.f64 (/.f64 y (-.f64 x y)) (+.f64 x x)))
((/.f64 (+.f64 x y) (-.f64 x y)))
((+.f64 (/.f64 y (-.f64 x y)) (/.f64 x (-.f64 x y))) #s(approx (/ (+ x y) (- x y)) #s(literal -1 binary64)) (/.f64 #s(approx (+ x y) x) (-.f64 x y)) (/.f64 (+.f64 x y) #s(approx (- x y) (neg.f64 y))) #s(approx (/ (+ x y) (- x y)) (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) x) y) #s(literal -1 binary64))))
(#s(approx (/ (+ x y) (- x y)) #s(approx (- (* (/ 2 x) y) -1) #s(literal 1 binary64))) #s(approx (/ (+ x y) (- x y)) (-.f64 (*.f64 (/.f64 #s(literal -2 binary64) y) x) #s(literal 1 binary64))) (/.f64 #s(approx (+ x y) y) (-.f64 x y)) (/.f64 (+.f64 x y) #s(approx (- x y) (*.f64 (-.f64 (/.f64 x y) #s(literal 1 binary64)) y))))
((/.f64 (+.f64 x y) (*.f64 (*.f64 x #s(literal 2 binary64)) y)))
(#s(approx (/ (+ x y) (* (* x 2) y)) (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 #s(literal -1/2 binary64) y))) #s(approx (/ (+ x y) (* (* x 2) y)) (/.f64 #s(literal 1/2 binary64) x)) #s(approx (/ (+ x y) (* (* x 2) y)) (/.f64 #s(literal 1/2 binary64) y)) (/.f64 #s(approx (+ x y) x) (*.f64 (*.f64 x #s(literal 2 binary64)) y)) (/.f64 (+.f64 x y) (*.f64 (+.f64 x x) y)))
((/.f64 (/.f64 (+.f64 y x) y) (*.f64 #s(literal 2 binary64) x)))
((/.f64 (/.f64 (+.f64 y x) y) (+.f64 x x)))
((/.f64 (-.f64 x y) (*.f64 (*.f64 x #s(literal 2 binary64)) y)))
(#s(approx (/ (- x y) (* (* x 2) y)) (-.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 #s(literal -1/2 binary64) y))) #s(approx (/ (- x y) (* (* x 2) y)) (/.f64 #s(literal -1/2 binary64) x)) #s(approx (/ (- x y) (* (* x 2) y)) (/.f64 #s(literal 1/2 binary64) y)) (/.f64 (-.f64 x y) (*.f64 (+.f64 x x) y)) (/.f64 (/.f64 (-.f64 x y) y) (*.f64 #s(literal 2 binary64) x)))
((/.f64 (-.f64 (/.f64 x y) (/.f64 y y)) (*.f64 #s(literal 2 binary64) x)))
((/.f64 (-.f64 (/.f64 x y) #s(approx (/ y y) #s(literal 1 binary64))) (*.f64 #s(literal 2 binary64) x)))
((*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t))
((*.f64 (-.f64 x z) (*.f64 t y)) (*.f64 #s(approx (- (* x y) (* z y)) (*.f64 y x)) t) (*.f64 #s(approx (- (* x y) (* z y)) (*.f64 (neg.f64 z) y)) t) (*.f64 #s(approx (- (* x y) (* z y)) (*.f64 y (*.f64 z (-.f64 (/.f64 x z) #s(literal 1 binary64))))) t) (*.f64 (-.f64 (*.f64 x y) (*.f64 (sqrt.f64 (*.f64 z y)) (sqrt.f64 (*.f64 z y)))) t))
((*.f64 (*.f64 (-.f64 x z) t) y) (*.f64 #s(approx (- x z) x) (*.f64 t y)) (*.f64 #s(approx (- x z) (neg.f64 z)) (*.f64 t y)) (*.f64 (/.f64 (*.f64 (*.f64 (+.f64 z x) (-.f64 x z)) y) (+.f64 z x)) t) (*.f64 (+.f64 (/.f64 (/.f64 (pow.f64 (*.f64 y x) #s(literal 2 binary64)) y) (+.f64 z x)) (/.f64 (*.f64 (neg.f64 (*.f64 (*.f64 z z) y)) y) (*.f64 (+.f64 z x) y))) t))
((*.f64 #s(approx (/ (* (* (+ z x) (- x z)) y) (+ z x)) (*.f64 (-.f64 y (*.f64 (/.f64 z x) y)) x)) t) (*.f64 (*.f64 #s(approx (- x z) x) t) y) (*.f64 (*.f64 #s(approx (- x z) (neg.f64 z)) t) y) (*.f64 (/.f64 (*.f64 #s(approx (* (+ z x) (- x z)) (*.f64 (neg.f64 z) z)) y) (+.f64 z x)) t) (*.f64 (*.f64 (+.f64 z x) (-.f64 x z)) (*.f64 (/.f64 y (+.f64 z x)) t)))
((/.f64 (*.f64 x #s(literal 2 binary64)) (-.f64 (*.f64 y z) (*.f64 t z))))
((/.f64 (/.f64 (*.f64 #s(literal 2 binary64) x) z) (-.f64 y t)) #s(approx (/ (* x 2) (- (* y z) (* t z))) (*.f64 (/.f64 x (*.f64 t z)) #s(literal -2 binary64))) (/.f64 (*.f64 x #s(literal 2 binary64)) #s(approx (- (* y z) (* t z)) (*.f64 (neg.f64 t) z))) (/.f64 (+.f64 x x) (-.f64 (*.f64 y z) (*.f64 t z))) (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) z) (-.f64 y t)) x))
((*.f64 #s(approx (/ (/ 2 z) (- y t)) (/.f64 (/.f64 #s(literal 2 binary64) (-.f64 y t)) z)) x) #s(approx (/ (* x 2) (- (* y z) (* t z))) (/.f64 (*.f64 x #s(literal -2 binary64)) (*.f64 t z))) (/.f64 (+.f64 x x) (*.f64 z (-.f64 y t))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 z (-.f64 y t))) x) #s(approx (/ (/ (* 2 x) z) (- y t)) (*.f64 #s(literal -2 binary64) (/.f64 (/.f64 x z) t))))
((*.f64 (/.f64 #s(literal 2 binary64) z) (/.f64 x (-.f64 y t))) (/.f64 (+.f64 x x) (*.f64 z #s(approx (- y t) y))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 z #s(approx (- y t) y))) x) (*.f64 #s(approx (/ (/ 2 (- y t)) z) (/.f64 (/.f64 #s(literal 2 binary64) y) z)) x) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) x) z) #s(approx (- y t) y)))
((*.f64 #s(literal 2 binary64) (+.f64 (*.f64 x x) (*.f64 x y))))
((*.f64 #s(literal 2 binary64) #s(approx (+ (* x x) (* x y)) (*.f64 x x))) (*.f64 #s(literal 2 binary64) #s(approx (+ (* x x) (* x y)) (*.f64 y x))) (*.f64 (+.f64 y x) (+.f64 x x)))
((*.f64 #s(approx (+ y x) x) (+.f64 x x)) (*.f64 #s(approx (+ y x) y) (+.f64 x x)))
((*.f64 #s(literal 2 binary64) (-.f64 (*.f64 x x) (*.f64 x y))))
(#s(approx (* 2 (- (* x x) (* x y))) (*.f64 #s(literal -2 binary64) (*.f64 y x))) (*.f64 #s(literal 2 binary64) #s(approx (- (* x x) (* x y)) (*.f64 x x))) (*.f64 (-.f64 x y) (+.f64 x x)))
((*.f64 #s(approx (- x y) x) (+.f64 x x)) (*.f64 (-.f64 x y) #s(literal 2 binary64)))
(#s(approx (* (- x y) 2) (*.f64 #s(literal -2 binary64) y)) (*.f64 #s(approx (- x y) x) #s(literal 2 binary64)))
((+.f64 (-.f64 (+.f64 (+.f64 (-.f64 (*.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (-.f64 (*.f64 a b) (*.f64 c i))) (*.f64 (-.f64 (*.f64 x j) (*.f64 z k)) (-.f64 (*.f64 y0 b) (*.f64 y1 i)))) (*.f64 (-.f64 (*.f64 x y2) (*.f64 z y3)) (-.f64 (*.f64 y0 c) (*.f64 y1 a)))) (*.f64 (-.f64 (*.f64 t j) (*.f64 y k)) (-.f64 (*.f64 y4 b) (*.f64 y5 i)))) (*.f64 (-.f64 (*.f64 t y2) (*.f64 y y3)) (-.f64 (*.f64 y4 c) (*.f64 y5 a)))) (*.f64 (-.f64 (*.f64 k y2) (*.f64 j y3)) (-.f64 (*.f64 y4 y1) (*.f64 y5 y0)))))
(#s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 y x) (*.f64 t z)) b) (*.f64 (neg.f64 y1) (-.f64 (*.f64 y2 x) (*.f64 y3 z)))) (*.f64 (neg.f64 y5) (-.f64 (*.f64 y2 t) (*.f64 y3 y)))) a)) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 j t) (*.f64 k y)) y4) (*.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)) (*.f64 (-.f64 (*.f64 j x) (*.f64 k z)) y0)) b)) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 y2 k) (*.f64 y3 j)) y1) (*.f64 (-.f64 (*.f64 j t) (*.f64 k y)) b)) (*.f64 (-.f64 (*.f64 y2 t) (*.f64 y3 y)) c)) y4)) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (neg.f64 y5) (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 y2 k) (*.f64 y3 j)) y0) (*.f64 (-.f64 (*.f64 j t) (*.f64 k y)) i)) (*.f64 (-.f64 (*.f64 y2 t) (*.f64 y3 y)) a)))) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 y2 x) (*.f64 y3 z)) c) (*.f64 (neg.f64 y5) (-.f64 (*.f64 y2 k) (*.f64 y3 j)))) (*.f64 (-.f64 (*.f64 j x) (*.f64 k z)) b)) y0)))
(#s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 y0 c) (*.f64 y1 a)) y2) (*.f64 (-.f64 (*.f64 b a) (*.f64 i c)) y)) (*.f64 (-.f64 (*.f64 y0 b) (*.f64 y1 i)) j)) x)) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) #s(approx (* (neg y5) (- (+ (* (- (* y2 k) (* y3 j)) y0) (* (- (* j t) (* k y)) i)) (* (- (* y2 t) (* y3 y)) a))) (*.f64 y (*.f64 y5 (-.f64 (*.f64 i k) (*.f64 a y3)))))) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 #s(approx (- (+ (* (- (* y x) (* t z)) b) (* (neg y1) (- (* y2 x) (* y3 z)))) (* (neg y5) (- (* y2 t) (* y3 y)))) (*.f64 b (-.f64 (*.f64 x y) (*.f64 t z)))) a)) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 #s(approx (- (+ (* (- (* y2 x) (* y3 z)) c) (* (neg y5) (- (* y2 k) (* y3 j)))) (* (- (* j x) (* k z)) b)) (*.f64 x (-.f64 (*.f64 c y2) (*.f64 b j)))) y0)) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (neg.f64 y5) #s(approx (- (+ (* (- (* y2 k) (* y3 j)) y0) (* (- (* j t) (* k y)) i)) (* (- (* y2 t) (* y3 y)) a)) (*.f64 t (-.f64 (*.f64 i j) (*.f64 a y2)))))))
(#s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (neg.f64 i) (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 y x) (*.f64 t z)) c) (*.f64 (-.f64 (*.f64 j t) (*.f64 k y)) y5)) (*.f64 (-.f64 (*.f64 j x) (*.f64 k z)) y1)))) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) #s(approx (* (neg y5) (- (+ (* (- (* y2 k) (* y3 j)) y0) (* (- (* j t) (* k y)) i)) (* (- (* y2 t) (* y3 y)) a))) #s(approx (* y (* y5 (- (* i k) (* a y3)))) (*.f64 i (*.f64 (*.f64 k y) y5))))) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 (neg.f64 y5) #s(approx (- (+ (* (- (* y2 k) (* y3 j)) y0) (* (- (* j t) (* k y)) i)) (* (- (* y2 t) (* y3 y)) a)) #s(approx (* t (- (* i j) (* a y2))) (*.f64 i (*.f64 j t)))))) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 #s(approx (- (+ (* (- (* y x) (* t z)) b) (* (neg y1) (- (* y2 x) (* y3 z)))) (* (neg y5) (- (* y2 t) (* y3 y)))) (*.f64 y3 (-.f64 (*.f64 y1 z) (*.f64 y y5)))) a)) #s(approx (+ (- (+ (+ (- (* (- (* x y) (* z t)) (- (* a b) (* c i))) (* (- (* x j) (* z k)) (- (* y0 b) (* y1 i)))) (* (- (* x y2) (* z y3)) (- (* y0 c) (* y1 a)))) (* (- (* t j) (* y k)) (- (* y4 b) (* y5 i)))) (* (- (* t y2) (* y y3)) (- (* y4 c) (* y5 a)))) (* (- (* k y2) (* j y3)) (- (* y4 y1) (* y5 y0)))) (*.f64 #s(approx (- (+ (* (- (* y0 c) (* y1 a)) y2) (* (- (* b a) (* i c)) y)) (* (- (* y0 b) (* y1 i)) j)) (*.f64 a (+.f64 (*.f64 b y) (neg.f64 (*.f64 y1 y2))))) x)))
((+.f64 (-.f64 (*.f64 x (-.f64 (*.f64 y z) (*.f64 t a))) (*.f64 b (-.f64 (*.f64 c z) (*.f64 i a)))) (*.f64 j (-.f64 (*.f64 c t) (*.f64 i y)))))
((+.f64 #s(approx (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (*.f64 (+.f64 (-.f64 (/.f64 (*.f64 (-.f64 (*.f64 y x) (*.f64 c b)) z) a) (*.f64 (neg.f64 b) i)) (*.f64 (neg.f64 t) x)) a)) (*.f64 j (-.f64 (*.f64 c t) (*.f64 i y)))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (*.f64 (-.f64 (*.f64 c t) (*.f64 i y)) j)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (*.f64 (-.f64 (*.f64 y x) (*.f64 c b)) z)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (*.f64 (+.f64 (*.f64 z x) (*.f64 (neg.f64 i) j)) y)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (-.f64 (*.f64 (-.f64 (*.f64 j c) (*.f64 a x)) t) (*.f64 (-.f64 (*.f64 c z) (*.f64 i a)) b))))
((+.f64 (-.f64 (*.f64 x (-.f64 (*.f64 y z) (*.f64 t a))) #s(approx (* b (- (* c z) (* i a))) (*.f64 (neg.f64 i) (+.f64 (*.f64 (*.f64 (neg.f64 c) z) (/.f64 b i)) (*.f64 b a))))) (*.f64 j (-.f64 (*.f64 c t) (*.f64 i y)))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) #s(approx (* (- (* y x) (* c b)) z) (*.f64 (*.f64 z y) x))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) #s(approx (- (* (- (* j c) (* a x)) t) (* (- (* c z) (* i a)) b)) (*.f64 (neg.f64 a) (*.f64 t x)))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (*.f64 (-.f64 (*.f64 j t) (*.f64 z b)) c)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (-.f64 (*.f64 (-.f64 (*.f64 j c) (*.f64 a x)) t) #s(approx (* (- (* c z) (* i a)) b) (*.f64 (*.f64 z c) b)))))
((+.f64 #s(approx (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (*.f64 #s(approx (+ (- (/ (* (- (* y x) (* c b)) z) a) (* (neg b) i)) (* (neg t) x)) (+.f64 (*.f64 (+.f64 (/.f64 (*.f64 z y) a) (neg.f64 t)) x) (*.f64 i b))) a)) (*.f64 j (-.f64 (*.f64 c t) (*.f64 i y)))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) #s(approx (- (* (- (* j c) (* a x)) t) (* (- (* c z) (* i a)) b)) (*.f64 (*.f64 i b) a))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) #s(approx (- (* (- (* j c) (* a x)) t) (* (- (* c z) (* i a)) b)) (*.f64 (*.f64 (neg.f64 c) z) b))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (*.f64 (-.f64 (*.f64 j c) (*.f64 x a)) t)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* i a)))) (* j (- (* c t) (* i y)))) (*.f64 #s(approx (+ (* z x) (* (neg i) j)) (*.f64 (+.f64 (/.f64 (*.f64 z x) i) (neg.f64 j)) i)) y)))
((+.f64 (*.f64 (+.f64 (*.f64 x y) z) y) t))
((+.f64 (*.f64 #s(approx (+ (* x y) z) (*.f64 y x)) y) t) #s(approx (+ (* (+ (* x y) z) y) t) t) (+.f64 (*.f64 #s(approx (+ (* x y) z) z) y) t) #s(approx (+ (* (+ (* x y) z) y) t) (*.f64 (+.f64 (*.f64 y x) z) y)) (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 z (*.f64 y x)) y) #s(literal 2 binary64)) (*.f64 t t)) (-.f64 (*.f64 (+.f64 z (*.f64 y x)) y) t)))
((+.f64 (*.f64 #s(approx (+ (* y x) z) (*.f64 (-.f64 (*.f64 (neg.f64 x) (/.f64 y z)) #s(literal 1 binary64)) (neg.f64 z))) y) t) #s(approx (/ (- (pow (* (+ z (* y x)) y) 2) (* t t)) (- (* (+ z (* y x)) y) t)) (*.f64 z y)) #s(approx (/ (- (pow (* (+ z (* y x)) y) 2) (* t t)) (- (* (+ z (* y x)) y) t)) (*.f64 (*.f64 y y) x)) #s(approx (+ (* (+ (* x y) z) y) t) (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 z y) t) x) (*.f64 y y)) x)) (+.f64 #s(approx (* (+ z (* y x)) y) (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 y y) x) z) y) z)) t))
((+.f64 #s(approx (* (+ (* y x) z) y) (*.f64 (*.f64 (+.f64 (*.f64 (/.f64 y z) x) #s(literal 1 binary64)) y) z)) t) #s(approx (/ (- (pow (* (+ z (* y x)) y) 2) (* t t)) (- (* (+ z (* y x)) y) t)) (*.f64 (*.f64 y x) y)) #s(approx (+ (* (+ (* x y) z) y) t) (*.f64 (+.f64 (/.f64 #s(approx (+ (* z y) t) t) x) (*.f64 y y)) x)) (+.f64 #s(approx (* (+ z (* y x)) y) (*.f64 #s(approx (+ (/ (* (* y y) x) z) y) (/.f64 (*.f64 (*.f64 y y) x) z)) z)) t) (+.f64 #s(approx (* (+ z (* y x)) y) (*.f64 (+.f64 (*.f64 y (*.f64 y (/.f64 x z))) y) z)) t))
((*.f32 (/.f32 (sin.f32 (*.f32 (*.f32 x (PI.f32)) tau)) (*.f32 (*.f32 x (PI.f32)) tau)) (/.f32 (sin.f32 (*.f32 x (PI.f32))) (*.f32 x (PI.f32)))))
((*.f32 (sin.f32 (*.f32 (PI.f32) x)) (/.f32 (/.f32 (sin.f32 (*.f32 tau (*.f32 (PI.f32) x))) (*.f32 tau (*.f32 (PI.f32) x))) (*.f32 (PI.f32) x))) #s(approx (* (/ (sin (* (* x (PI)) tau)) (* (* x (PI)) tau)) (/ (sin (* x (PI))) (* x (PI)))) #s(literal 1 binary32)) #s(approx (* (/ (sin (* (* x (PI)) tau)) (* (* x (PI)) tau)) (/ (sin (* x (PI))) (* x (PI)))) (-.f32 (/.f32 (sin.f32 (*.f32 (PI.f32) x)) (*.f32 (PI.f32) x)) (*.f32 (*.f32 #s(literal 1/6 binary32) (*.f32 tau tau)) (*.f32 (sin.f32 (*.f32 (PI.f32) x)) (*.f32 (PI.f32) x))))) (/.f32 (*.f32 (/.f32 (sin.f32 (*.f32 (PI.f32) x)) x) (sin.f32 (*.f32 tau (*.f32 (PI.f32) x)))) (*.f32 (*.f32 tau (*.f32 (PI.f32) x)) (PI.f32))) (/.f32 (*.f32 (/.f32 (sin.f32 (*.f32 (PI.f32) x)) (PI.f32)) (/.f32 (sin.f32 (*.f32 tau (*.f32 (PI.f32) x))) tau)) (*.f32 x (*.f32 (PI.f32) x))))
((/.f32 (*.f32 (/.f32 (sin.f32 (*.f32 tau (*.f32 (PI.f32) x))) (*.f32 (PI.f32) x)) (sin.f32 (*.f32 (PI.f32) x))) (*.f32 tau (*.f32 (PI.f32) x))) (/.f32 #s(approx (* (/ (sin (* (PI) x)) (PI)) (/ (sin (* tau (* (PI) x))) tau)) (*.f32 (*.f32 x x) (PI.f32))) (*.f32 x (*.f32 (PI.f32) x))) (/.f32 (*.f32 #s(approx (/ (sin (* (PI) x)) x) (PI.f32)) (sin.f32 (*.f32 tau (*.f32 (PI.f32) x)))) (*.f32 (*.f32 tau (*.f32 (PI.f32) x)) (PI.f32))) #s(approx (* (/ (sin (* (* x (PI)) tau)) (* (* x (PI)) tau)) (/ (sin (* x (PI))) (* x (PI)))) (*.f32 (/.f32 (sin.f32 (*.f32 (*.f32 (PI.f32) x) tau)) (*.f32 (*.f32 (PI.f32) (PI.f32)) tau)) (/.f32 (sin.f32 (*.f32 (PI.f32) x)) (*.f32 x x)))) (/.f32 (/.f32 (*.f32 (sin.f32 (*.f32 (*.f32 (neg.f32 (PI.f32)) tau) x)) (sin.f32 (*.f32 (neg.f32 (PI.f32)) x))) x) (*.f32 (*.f32 tau (*.f32 (PI.f32) x)) (PI.f32))))
((/.f32 (*.f32 (/.f32 (sin.f32 (*.f32 x (PI.f32))) (*.f32 x (PI.f32))) (sin.f32 (*.f32 (*.f32 x (PI.f32)) tau))) (*.f32 tau (*.f32 (PI.f32) x))) (/.f32 (neg.f32 #s(approx (* (/ (sin (* (PI) x)) (PI)) (/ (sin (* tau (* (PI) x))) tau)) (*.f32 (*.f32 x x) (PI.f32)))) (*.f32 (*.f32 x x) (PI.f32))) (*.f32 (/.f32 (sin.f32 (*.f32 (*.f32 x (PI.f32)) tau)) (*.f32 (*.f32 x (PI.f32)) tau)) #s(approx (/ (sin (* x (PI))) (* x (PI))) #s(literal 1 binary32))) (*.f32 (sin.f32 (*.f32 (PI.f32) x)) (/.f32 #s(approx (/ (sin (* tau (* (PI) x))) (* tau (* (PI) x))) (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 #s(literal 1/6 binary32) (*.f32 tau tau)) (*.f32 (*.f32 (PI.f32) (PI.f32)) (*.f32 x x))))) (*.f32 (PI.f32) x))) (/.f32 (*.f32 (/.f32 (sin.f32 (*.f32 (*.f32 x (PI.f32)) tau)) (*.f32 (PI.f32) tau)) (sin.f32 (*.f32 x (PI.f32)))) (*.f32 (*.f32 x x) (PI.f32))))
((/.f64 (-.f64 (exp.f64 x) #s(literal 1 binary64)) x))
((/.f64 #s(approx (- (exp x) 1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x)) x) #s(approx (/ (- (exp x) 1) x) #s(literal 1 binary64)) #s(approx (/ (- (exp x) 1) x) (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) x) #s(approx (/ (- (exp x) 1) x) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64))))
(#s(approx (/ (- (exp x) 1) x) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64))) #s(approx (/ (- (exp x) 1) x) #s(approx (- (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))) #s(approx (/ (- (exp x) 1) x) #s(approx (- (* (- (* 1/6 x) -1/2) x) -1) (*.f64 (*.f64 x x) #s(literal 1/6 binary64)))) #s(approx (/ (- (exp x) 1) x) #s(approx (- (* (- (* 1/6 x) -1/2) x) -1) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x))) (/.f64 #s(approx (- (exp x) 1) (*.f64 #s(approx (- (* (- (* (- (* 1/24 x) -1/6) x) -1/2) x) -1) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x) x)) x)) x))
(#s(approx (/ (- (exp x) 1) x) (-.f64 (*.f64 (-.f64 (/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) #s(literal 1/36 binary64)) x) (+.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))) #s(literal -1/2 binary64)) x) #s(literal -1 binary64))) #s(approx (/ (- (exp x) 1) x) #s(approx (- (* (- (* 1/6 x) -1/2) x) -1) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x))) #s(approx (/ (- (exp x) 1) x) #s(approx (- (* (- (* (- (* 1/24 x) -1/6) x) -1/2) x) -1) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x) x))) #s(approx (/ (- (exp x) 1) x) #s(approx (- (* (- (* (- (* 1/24 x) -1/6) x) -1/2) x) -1) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x) #s(literal -1/2 binary64)) x))) (/.f64 #s(approx (- (exp x) 1) (*.f64 #s(approx (- (* (- (* (- (* 1/24 x) -1/6) x) -1/2) x) -1) (*.f64 #s(approx (* (- (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)) x))
((/.f64 (*.f64 (-.f64 x y) (+.f64 x y)) (+.f64 (*.f64 x x) (*.f64 y y))))
(#s(approx (/ (* (- x y) (+ x y)) (+ (* x x) (* y y))) #s(literal -1 binary64)) #s(approx (/ (* (- x y) (+ x y)) (+ (* x x) (* y y))) #s(literal 1 binary64)) #s(approx (/ (* (- x y) (+ x y)) (+ (* x x) (* y y))) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 y (/.f64 y x))))))
(#s(approx (/ (* (- x y) (+ x y)) (+ (* x x) (* y y))) (-.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 y x) (/.f64 y x))) #s(literal 0 binary64)) (*.f64 (/.f64 y x) (/.f64 y x)))))
(#s(approx (/ (* (- x y) (+ x y)) (+ (* x x) (* y y))) (-.f64 #s(approx (+ (- 1 (* (/ y x) (/ y x))) 0) #s(literal 1 binary64)) (*.f64 (/.f64 y x) (/.f64 y x)))) #s(approx (/ (* (- x y) (+ x y)) (+ (* x x) (* y y))) (-.f64 #s(approx (+ (- 1 (* (/ y x) (/ y x))) 0) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 y x) (/.f64 y x)))) (*.f64 (/.f64 y x) (/.f64 y x)))) #s(approx (/ (* (- x y) (+ x y)) (+ (* x x) (* y y))) (/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 y x) #s(literal 2 binary64))) #s(literal 2 binary64)) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 y x) #s(literal 2 binary64))) (*.f64 (/.f64 y x) y))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 y x) #s(literal 2 binary64))) x))))
((-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))))))))
((-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) #s(approx (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (-.f64 #s(literal 6 binary64) (/.f64 #s(literal 8 binary64) t))))) #s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) #s(literal 1/2 binary64)) #s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) (-.f64 #s(literal 5/6 binary64) (/.f64 #s(literal 2/9 binary64) t))) #s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/27 binary64) t) #s(literal 2/9 binary64)) t) #s(literal 5/6 binary64))) (-.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (-.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 4/81 binary64) t) #s(literal -1/27 binary64)) t) #s(literal 2/9 binary64)) t)))))
(#s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) #s(approx (- 5/6 (/ 2/9 t)) #s(literal 5/6 binary64))) #s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) (+.f64 (*.f64 t t) #s(literal 1/2 binary64))) (-.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 t #s(literal 2 binary64)) t) #s(literal -1 binary64)) t) t)))) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) #s(approx (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))) (*.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 12 binary64) t) #s(literal 8 binary64)) t) #s(literal 4 binary64)) t) t))))) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) #s(approx (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (-.f64 #s(literal 2 binary64) t) t) t) #s(literal 2 binary64)) t) #s(literal -2 binary64)) t)))))))
(#s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) #s(approx (- 5/6 (/ 2/9 t)) (/.f64 (-.f64 (*.f64 #s(literal 5/6 binary64) t) #s(literal 2/9 binary64)) t))) #s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) (-.f64 #s(literal 5/6 binary64) (/.f64 (-.f64 #s(literal 2/9 binary64) (/.f64 (-.f64 (/.f64 #s(literal 4/81 binary64) t) #s(literal -1/27 binary64)) t)) t))) #s(approx (- 1 (/ 1 (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))))) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 t #s(literal 2 binary64)) t) #s(literal -1 binary64)) t) t) #s(literal -1/2 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) #s(approx (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))) (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -16 binary64) t) #s(literal -12 binary64)) t) #s(literal 8 binary64)) t) #s(literal -4 binary64)) t) t))))))
((/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))))) (+.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t))))))))
((/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) t) (-.f64 #s(literal 1 binary64) (pow.f64 t #s(literal -2 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 t #s(literal -1 binary64))))))) (+.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t))))))) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) #s(literal 1/2 binary64)) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (+.f64 (*.f64 t t) #s(literal 1/2 binary64))) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 t #s(literal 2 binary64)) t) #s(literal -1 binary64)) t) t) #s(literal 1/2 binary64))) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (-.f64 #s(literal 5/6 binary64) (/.f64 (-.f64 #s(literal 2/9 binary64) (/.f64 (-.f64 (/.f64 #s(literal 4/81 binary64) t) #s(literal -1/27 binary64)) t)) t))))
(#s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) #s(approx (- 5/6 (/ (- 2/9 (/ (- (/ 4/81 t) -1/27) t)) t)) #s(literal 5/6 binary64))) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (-.f64 #s(literal 5/6 binary64) (/.f64 #s(approx (- 2/9 (/ (- (/ 4/81 t) -1/27) t)) #s(literal 2/9 binary64)) t))) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (-.f64 #s(literal 5/6 binary64) (/.f64 (-.f64 #s(literal 2/9 binary64) (/.f64 #s(literal 1/27 binary64) t)) t))) (/.f64 #s(approx (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (-.f64 #s(literal 5 binary64) (/.f64 #s(literal 8 binary64) t))) (+.f64 #s(literal 2 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t))))))) (/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))))) (+.f64 #s(literal 2 binary64) #s(approx (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))) (*.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -16 binary64) t) #s(literal -12 binary64)) t) #s(literal 8 binary64)) t) #s(literal 4 binary64)) t) t)))))
((/.f64 #s(approx (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (-.f64 #s(literal 5 binary64) (/.f64 #s(literal 8 binary64) t))) (+.f64 #s(literal 2 binary64) #s(approx (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))) (-.f64 #s(literal 4 binary64) (/.f64 #s(literal 8 binary64) t))))) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (+.f64 (*.f64 (*.f64 (-.f64 #s(approx (* (- t 2) t) (*.f64 #s(literal -2 binary64) t)) #s(literal -1 binary64)) t) t) #s(literal 1/2 binary64))) #s(approx (/ (+ 1 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))))) (+ 2 (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))))) (+.f64 (-.f64 #s(literal 5/6 binary64) (/.f64 #s(literal 2/9 binary64) t)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 4/81 binary64) t) #s(literal -1/27 binary64)) t) t))) (/.f64 (+.f64 #s(literal 1 binary64) #s(approx (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))) (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -16 binary64) t) #s(literal -12 binary64)) t) #s(literal 8 binary64)) t) #s(literal 4 binary64)) (*.f64 t t)))) (+.f64 #s(literal 2 binary64) #s(approx (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))) (*.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -16 binary64) t) #s(literal -12 binary64)) t) #s(literal 8 binary64)) t) #s(literal 4 binary64)) t) t)))) (/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) t)))) #s(approx (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -2 binary64) t) #s(literal -2 binary64)) t) #s(literal 2 binary64)) t) #s(literal -2 binary64)) t)))) (+.f64 #s(literal 2 binary64) #s(approx (* (- 2 (/ (/ 2 t) (+ 1 (/ 1 t)))) (- 2 (/ (/ 2 t) (+ 1 (/ 1 t))))) (*.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -16 binary64) t) #s(literal -12 binary64)) t) #s(literal 8 binary64)) t) #s(literal 4 binary64)) t) t)))))
((/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)) (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)))) (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)) (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t))))))
((/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)) (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)))) (+.f64 #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (*.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) (/.f64 t (-.f64 t #s(literal -1 binary64))))))) #s(approx (/ (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (+ 2 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))))) #s(literal 1/2 binary64)) #s(approx (/ (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (+ 2 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))))) (-.f64 #s(literal 5/6 binary64) (/.f64 #s(literal 2/9 binary64) t))) #s(approx (/ (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (+ 2 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))))) (-.f64 #s(literal 5/6 binary64) (/.f64 (-.f64 #s(literal 2/9 binary64) (/.f64 (-.f64 (/.f64 #s(literal 4/81 binary64) t) #s(literal -1/27 binary64)) t)) t))) (/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)) (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)))) (+.f64 #s(literal 2 binary64) #s(approx (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))) (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -16 binary64) t) #s(literal -12 binary64)) t) #s(literal 8 binary64)) t) #s(literal -4 binary64)) t) t)))))
((*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)))) (-.f64 #s(literal 2 binary64) (*.f64 (pow.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) #s(literal 2 binary64)) #s(literal 4 binary64)))) #s(approx (/ (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (+ 2 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))))) #s(approx (- 5/6 (/ (- 2/9 (/ (- (/ 4/81 t) -1/27) t)) t)) #s(literal 5/6 binary64))) #s(approx (/ (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (+ 2 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))))) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 t #s(literal 2 binary64)) t) #s(literal -1 binary64)) t) t) #s(literal 1/2 binary64))) (/.f64 #s(approx (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (-.f64 #s(literal 5 binary64) (/.f64 #s(literal 8 binary64) t))) (+.f64 #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (*.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) (/.f64 t (-.f64 t #s(literal -1 binary64))))))) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) t) #s(literal 4 binary64)) (-.f64 t #s(literal -1 binary64)))) (+.f64 #s(literal 2 binary64) #s(approx (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))) (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -16 binary64) t) #s(literal -12 binary64)) t) #s(literal 8 binary64)) t) #s(literal -4 binary64)) t) t)))))
((/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) t) #s(literal 4 binary64)) (-.f64 t #s(literal -1 binary64)))) (+.f64 #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (*.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) (/.f64 t (-.f64 t #s(literal -1 binary64))))))) #s(approx (/ (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (+ 2 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))))) (+.f64 (*.f64 #s(approx (* (- (* (- t 2) t) -1) t) t) t) #s(literal 1/2 binary64))) #s(approx (/ (+ 1 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t)))) (+ 2 (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))))) (-.f64 #s(literal 5/6 binary64) (/.f64 (-.f64 #s(literal 2/9 binary64) (/.f64 #s(literal 1/27 binary64) t)) t))) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (/.f64 t (-.f64 t #s(literal -1 binary64))) t) #s(literal 4 binary64)) (-.f64 t #s(literal -1 binary64)))) (+.f64 #s(literal 2 binary64) #s(approx (* (/ (* 2 t) (+ 1 t)) (/ (* 2 t) (+ 1 t))) (*.f64 (*.f64 (-.f64 (*.f64 (-.f64 #s(approx (* (- (* -16 t) -12) t) (*.f64 #s(literal 12 binary64) t)) #s(literal 8 binary64)) t) #s(literal -4 binary64)) t) t)))) (/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)) (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)))) (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) t) (+.f64 #s(literal 1 binary64) t)) #s(approx (/ (* 2 t) (+ 1 t)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal -2 binary64) t) #s(literal -2 binary64)) t) #s(literal 2 binary64)) t) #s(literal -2 binary64)) t))))))
((-.f64 wj (/.f64 (-.f64 (*.f64 wj (exp.f64 wj)) x) (+.f64 (exp.f64 wj) (*.f64 wj (exp.f64 wj))))))
(#s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (*.f64 (+.f64 (+.f64 (*.f64 #s(literal -3 binary64) x) #s(literal 1 binary64)) (-.f64 (*.f64 x #s(literal 5 binary64)) (*.f64 #s(literal -2/3 binary64) x))) wj)) (*.f64 #s(literal -5/2 binary64) x)) wj) (*.f64 #s(literal 2 binary64) x)) wj) x)) #s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) wj) (-.f64 wj #s(approx (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj)))) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) x)) wj) x))) #s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) wj)) (exp.f64 wj))) (/.f64 (-.f64 (*.f64 wj wj) (pow.f64 (/.f64 (-.f64 (*.f64 (exp.f64 wj) wj) x) (*.f64 (-.f64 wj #s(literal -1 binary64)) (exp.f64 wj))) #s(literal 2 binary64))) (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 wj) wj) x) (*.f64 (-.f64 wj #s(literal -1 binary64)) (exp.f64 wj))) wj)))
(#s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (+ (* -3 x) 1) (- (* x 5) (* -2/3 x))) #s(literal 1 binary64)) wj)) (*.f64 #s(literal -5/2 binary64) x)) wj) (*.f64 #s(literal 2 binary64) x)) wj) x)) #s(approx (/ (- (* wj wj) (pow (/ (- (* (exp wj) wj) x) (* (- wj -1) (exp wj))) 2)) (+ (/ (- (* (exp wj) wj) x) (* (- wj -1) (exp wj))) wj)) x) #s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) wj)) #s(approx (exp wj) #s(literal 1 binary64)))) #s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) #s(approx (/ (/ x (+ 1 wj)) (exp wj)) (/.f64 x (*.f64 (exp.f64 wj) wj)))) (/.f64 #s(approx (- (* wj wj) (pow (/ (- (* (exp wj) wj) x) (* (- wj -1) (exp wj))) 2)) (-.f64 (*.f64 wj wj) (/.f64 (*.f64 wj wj) (pow.f64 (-.f64 wj #s(literal -1 binary64)) #s(literal 2 binary64))))) (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 wj) wj) x) (*.f64 (-.f64 wj #s(literal -1 binary64)) (exp.f64 wj))) wj)))
(#s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) (+.f64 (*.f64 #s(approx (- (* (- (- 1 (* (+ (+ (* -3 x) 1) (- (* x 5) (* -2/3 x))) wj)) (* -5/2 x)) wj) (* 2 x)) (*.f64 (-.f64 (*.f64 wj (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) wj) x) (-.f64 #s(literal 5/2 binary64) (*.f64 #s(literal 8/3 binary64) wj)))) #s(literal 2 binary64)) x)) wj) x)) (-.f64 wj #s(approx (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj)))) #s(literal 1 binary64))) #s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) (/.f64 x (*.f64 (-.f64 wj #s(literal -1 binary64)) #s(approx (exp wj) #s(literal 1 binary64))))) (-.f64 wj #s(approx (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj)))) (-.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (-.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -2/3 binary64) x)) (+.f64 (*.f64 #s(literal 3 binary64) x) #s(literal 3/2 binary64))) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) x)))) (*.f64 #s(literal -3/2 binary64) x)) #s(literal 2 binary64))) wj) (-.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) x)))) (*.f64 #s(literal -3/2 binary64) x))) wj) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) x))) wj) x))) #s(approx (- wj (/ (- (* wj (exp wj)) x) (+ (exp wj) (* wj (exp wj))))) #s(approx (+ (* (- (* (- (- 1 (* (+ (+ (* -3 x) 1) (- (* x 5) (* -2/3 x))) wj)) (* -5/2 x)) wj) (* 2 x)) wj) x) (*.f64 (-.f64 (-.f64 (+.f64 (/.f64 x (pow.f64 wj #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) wj)) (*.f64 #s(literal 2/3 binary64) x)) (+.f64 (+.f64 (+.f64 (*.f64 #s(literal 2 binary64) x) (*.f64 (/.f64 x wj) #s(literal -5/2 binary64))) (*.f64 (/.f64 x (*.f64 wj wj)) #s(literal 2 binary64))) #s(literal 1 binary64))) (pow.f64 wj #s(literal 3 binary64))))))
((-.f64 (log.f64 x) (log.f64 (log.f64 x))))
((log.f64 (*.f64 (log.f64 x) x)) (log.f64 (/.f64 x (log.f64 x))))
((*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64))) (pow.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64)) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (exp.f64 (neg.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(literal 9999999999998099/10000000000000000 binary64) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))))
((*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64))) (pow.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64)) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (exp.f64 (neg.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (-.f64 #s(literal 1 binary64) z))) #s(literal 9999999999998099/10000000000000000 binary64)) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 #s(approx (* (* (sqrt (* (PI) 2)) (pow (+ (+ (- (- 1 z) 1) 7) 1/2) (+ (- (- 1 z) 1) 1/2))) (exp (neg (+ (+ (- (- 1 z) 1) 7) 1/2)))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 15/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (exp.f64 #s(literal -15/2 binary64))) (sqrt.f64 (PI.f64)))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(literal 9999999999998099/10000000000000000 binary64) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64))) (pow.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64)) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (exp.f64 (neg.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (+ (+ 9999999999998099/10000000000000000 (/ 6765203681218851/10000000000000 (+ (- (- 1 z) 1) 1))) (/ -3147848041806007/2500000000000 (+ (- (- 1 z) 1) 2))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 23912966683069397/40000000000000 binary64) z) #s(literal 2076511864126339/4000000000000 binary64)) z) #s(literal 904338909853211/2500000000000 binary64)) z) #s(literal 479507597606835099/10000000000000000 binary64))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64))) (pow.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64)) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (exp.f64 (neg.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (-.f64 #s(literal 1 binary64) z)) (+.f64 #s(literal 9999999999998099/10000000000000000 binary64) (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64))) (pow.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64)) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1/2 binary64)))) (exp.f64 (neg.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(literal 9999999999998099/10000000000000000 binary64) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 2 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64)))) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))))
((*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 #s(approx (* (* (sqrt (* (PI) 2)) (pow (+ (+ (- (- 1 z) 1) 7) 1/2) (+ (- (- 1 z) 1) 1/2))) (exp (neg (+ (+ (- (- 1 z) 1) 7) 1/2)))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (pow.f64 (-.f64 #s(literal 15/2 binary64) z) (-.f64 #s(literal 1/2 binary64) z))) (sqrt.f64 #s(literal 2 binary64))) (exp.f64 (-.f64 z #s(literal 15/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (-.f64 #s(literal 1 binary64) z))) #s(literal 9999999999998099/10000000000000000 binary64)) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 #s(approx (* (* (sqrt (* (PI) 2)) (pow (+ (+ (- (- 1 z) 1) 7) 1/2) (+ (- (- 1 z) 1) 1/2))) (exp (neg (+ (+ (- (- 1 z) 1) 7) 1/2)))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 15/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (exp.f64 #s(literal -15/2 binary64))) (sqrt.f64 (PI.f64)))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (+ (+ 9999999999998099/10000000000000000 (/ 6765203681218851/10000000000000 (+ (- (- 1 z) 1) 1))) (/ -3147848041806007/2500000000000 (+ (- (- 1 z) 1) 2))) #s(literal 479507597606835099/10000000000000000 binary64)) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (*.f64 (exp.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -13/2 binary64)))) (pow.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -13/2 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1/2 binary64)))) (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64)))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (+ (+ 9999999999998099/10000000000000000 (/ 6765203681218851/10000000000000 (+ (- (- 1 z) 1) 1))) (/ -3147848041806007/2500000000000 (+ (- (- 1 z) 1) 2))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 23912966683069397/40000000000000 binary64) z) #s(literal 2076511864126339/4000000000000 binary64)) z) #s(literal 904338909853211/2500000000000 binary64)) z) #s(literal 479507597606835099/10000000000000000 binary64))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -13/2 binary64)))) (pow.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -13/2 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1/2 binary64)))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (+ (+ 9999999999998099/10000000000000000 (/ 6765203681218851/10000000000000 (+ (- (- 1 z) 1) 1))) (/ -3147848041806007/2500000000000 (+ (- (- 1 z) 1) 2))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 23912966683069397/40000000000000 binary64) z) #s(literal 2076511864126339/4000000000000 binary64)) z) #s(literal 904338909853211/2500000000000 binary64)) z) #s(literal 479507597606835099/10000000000000000 binary64))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64))) (pow.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64)) #s(approx (+ (- (- 1 z) 1) 1/2) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) z) #s(literal 1 binary64)) z)))) (exp.f64 (neg.f64 (+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (-.f64 #s(literal 1 binary64) z))) #s(literal 9999999999998099/10000000000000000 binary64)) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))))
((*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 #s(approx (* (* (sqrt (* (PI) 2)) (pow (+ (+ (- (- 1 z) 1) 7) 1/2) (+ (- (- 1 z) 1) 1/2))) (exp (neg (+ (+ (- (- 1 z) 1) 7) 1/2)))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (pow.f64 (-.f64 #s(literal 15/2 binary64) z) (-.f64 #s(literal 1/2 binary64) z))) (sqrt.f64 #s(literal 2 binary64))) (exp.f64 (-.f64 z #s(literal 15/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (-.f64 #s(literal 1 binary64) z))) #s(literal 9999999999998099/10000000000000000 binary64)) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 2 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64)))) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 #s(approx (* (* (sqrt (* (PI) 2)) (pow (+ (+ (- (- 1 z) 1) 7) 1/2) (+ (- (- 1 z) 1) 1/2))) (exp (neg (+ (+ (- (- 1 z) 1) 7) 1/2)))) (*.f64 (*.f64 (exp.f64 #s(literal -15/2 binary64)) (sqrt.f64 #s(literal 15 binary64))) (sqrt.f64 (PI.f64)))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (+ (+ 9999999999998099/10000000000000000 (/ 6765203681218851/10000000000000 (+ (- (- 1 z) 1) 1))) (/ -3147848041806007/2500000000000 (+ (- (- 1 z) 1) 2))) #s(literal 479507597606835099/10000000000000000 binary64)) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 #s(approx (* (exp (neg (- (- 1 z) -13/2))) (pow (- (- 1 z) -13/2) (- (- 1 z) 1/2))) (*.f64 (exp.f64 (-.f64 z #s(literal 15/2 binary64))) (pow.f64 (-.f64 #s(literal 15/2 binary64) z) (-.f64 #s(literal 1/2 binary64) z)))) (sqrt.f64 (*.f64 (PI.f64) #s(literal 2 binary64)))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (+ (+ 9999999999998099/10000000000000000 (/ 6765203681218851/10000000000000 (+ (- (- 1 z) 1) 1))) (/ -3147848041806007/2500000000000 (+ (- (- 1 z) 1) 2))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 23912966683069397/40000000000000 binary64) z) #s(literal 2076511864126339/4000000000000 binary64)) z) #s(literal 904338909853211/2500000000000 binary64)) z) #s(literal 479507597606835099/10000000000000000 binary64))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 #s(approx (* (* (sqrt (* (PI) 2)) (pow (+ (+ (- (- 1 z) 1) 7) 1/2) (+ (- (- 1 z) 1) 1/2))) (exp (neg (+ (+ (- (- 1 z) 1) 7) 1/2)))) (*.f64 (*.f64 (sqrt.f64 (*.f64 #s(literal 2 binary64) (PI.f64))) (pow.f64 (-.f64 #s(literal 15/2 binary64) z) (-.f64 #s(literal 1/2 binary64) z))) (exp.f64 (-.f64 z #s(literal 15/2 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal -3147848041806007/2500000000000 binary64) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -1 binary64))) (/.f64 #s(literal 6765203681218851/10000000000000 binary64) (-.f64 #s(literal 1 binary64) z))) #s(literal 9999999999998099/10000000000000000 binary64)) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))) (*.f64 (/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z))) (*.f64 (*.f64 (/.f64 (PI.f64) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -13/2 binary64)))) (pow.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal -13/2 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1/2 binary64)))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(approx (+ (+ 9999999999998099/10000000000000000 (/ 6765203681218851/10000000000000 (+ (- (- 1 z) 1) 1))) (/ -3147848041806007/2500000000000 (+ (- (- 1 z) 1) 2))) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 #s(literal 23912966683069397/40000000000000 binary64) z) #s(literal 2076511864126339/4000000000000 binary64)) z) #s(literal 904338909853211/2500000000000 binary64)) z) #s(literal 479507597606835099/10000000000000000 binary64))) (/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 4 binary64)))) (/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 5 binary64)))) (/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 6 binary64)))) (/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 7 binary64)))) (/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z) #s(literal 1 binary64)) #s(literal 8 binary64)))))))
((fabs.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 #s(literal 2 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 2 binary64) #s(literal 3 binary64)) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 5 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 21 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))))
((fabs.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 #s(literal 2 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 2 binary64) #s(literal 3 binary64)) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 5 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 21 binary64)) (*.f64 #s(approx (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (pow.f64 x #s(literal 6 binary64))) (fabs.f64 x)))))) (fabs.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 #s(literal 2 binary64) (fabs.f64 x)) (*.f64 (*.f64 x x) (*.f64 (fabs.f64 x) #s(literal 2/3 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 5 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 21 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))) (fabs.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 #s(literal 2 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 2 binary64) #s(literal 3 binary64)) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 5 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 21 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 (*.f64 x x) x)) (fabs.f64 x)))))) (fabs.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 #s(literal 2 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 2 binary64) #s(literal 3 binary64)) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 5 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 21 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64))) (*.f64 (fabs.f64 x) (-.f64 (+.f64 (*.f64 #s(literal 1/21 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 #s(literal 2/3 binary64) (*.f64 x x)) #s(literal -2 binary64))) (*.f64 #s(literal -1/5 binary64) (pow.f64 x #s(literal 4 binary64)))))))))
((fabs.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 #s(literal 2 binary64) (fabs.f64 x)) (*.f64 (*.f64 x x) (*.f64 (fabs.f64 x) #s(literal 2/3 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 5 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 21 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (fabs.f64 x)))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) #s(approx (* (sqrt (/ 1 (PI))) (* (fabs x) (- (+ (* 1/21 (pow x 6)) (- (* 2/3 (* x x)) -2)) (* -1/5 (pow x 4))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64))) (*.f64 #s(literal 2 binary64) (fabs.f64 x)))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) (*.f64 (*.f64 (pow.f64 (fabs.f64 x) #s(literal 3 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64)))) #s(literal 2/3 binary64)))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64))) (*.f64 (fabs.f64 x) (-.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 2/3 binary64)) #s(literal -2 binary64)) (*.f64 #s(literal -1/5 binary64) (pow.f64 x #s(literal 4 binary64)))))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64))) (*.f64 (fabs.f64 x) (-.f64 (+.f64 (*.f64 #s(literal 1/21 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 #s(literal 2/3 binary64) (*.f64 x x)) #s(literal -2 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal -1/5 binary64)))))))))
((fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64))) (*.f64 (fabs.f64 x) (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/21 binary64) (fabs.f64 x)) (pow.f64 (fabs.f64 x) #s(literal 5 binary64))) (-.f64 (*.f64 #s(literal 2/3 binary64) (*.f64 x x)) #s(literal -2 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal -1/5 binary64)))))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) #s(approx (* (sqrt (/ 1 (PI))) (* (fabs x) (- (+ (* 1/21 (pow x 6)) (- (* 2/3 (* x x)) -2)) (* -1/5 (pow x 4))))) (*.f64 (/.f64 #s(literal 2 binary64) (sqrt.f64 (PI.f64))) (fabs.f64 x))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) (*.f64 (fabs.f64 x) (*.f64 (*.f64 x x) (/.f64 #s(literal 2/3 binary64) (sqrt.f64 (PI.f64))))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) #s(approx (* (sqrt (/ 1 (PI))) (* (fabs x) (- (- (* (* x x) 2/3) -2) (* -1/5 (pow x 4))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64))) (*.f64 (fabs.f64 x) (-.f64 #s(literal 2 binary64) (*.f64 #s(literal -2/3 binary64) (*.f64 x x)))))))) (fabs.f64 #s(approx (* (/ 1 (sqrt (PI))) (+ (+ (+ (* 2 (fabs x)) (* (/ 2 3) (* (* (fabs x) (fabs x)) (fabs x)))) (* (/ 1 5) (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)))) (* (/ 1 21) (* (* (* (* (* (* (fabs x) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x)) (fabs x))))) #s(approx (* (sqrt (/ 1 (PI))) (* (fabs x) (- (- (* (* x x) 2/3) -2) (* -1/5 (pow x 4))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (PI.f64))) (*.f64 (pow.f64 (fabs.f64 x) #s(literal 5 binary64)) #s(literal 1/5 binary64)))))))
((*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 3 binary64) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 15 binary64) #s(literal 8 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x)))))))
((*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 3 binary64) #s(literal 4 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 15 binary64) #s(literal 8 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x)))))))
((*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 3 binary64) #s(literal 4 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 15 binary64) #s(literal 8 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x)))))))
((*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) #s(approx (+ (+ (+ (/ 1 (fabs x)) (* (/ 1 2) (* (* (/ 1 (fabs x)) (/ 1 (fabs x))) (/ 1 (fabs x))))) (* (/ 3 4) (* (/ 1 (* (* x x) (* x x))) (/ 1 (fabs x))))) (* (/ 15 8) (* (* (* (/ (/ 1 (* (neg x) x)) (* (neg x) x)) (/ 1 (fabs x))) (/ 1 (fabs x))) (/ 1 (fabs x))))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 x x)) #s(literal -1 binary64)) (fabs.f64 x)))) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (PI.f64))) (exp.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))) (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fabs.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 3 binary64) #s(literal 4 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))))) (*.f64 (/.f64 #s(literal 15 binary64) #s(literal 8 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) x)) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x))) (/.f64 #s(literal 1 binary64) (fabs.f64 x)))))))
((-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal 31853699/125000000 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal -8890523/31250000 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal 1421413741/1000000000 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal -1453152027/1000000000 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) #s(literal 1061405429/1000000000 binary64)))))))))) (exp.f64 (neg.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))))))
((-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 (*.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) (+.f64 (*.f64 #s(literal -3275911/10000000 binary64) x) #s(literal -1 binary64))) (*.f64 (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)) #s(literal -31853699/125000000 binary64))) (*.f64 (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)) (+.f64 (*.f64 #s(literal -3275911/10000000 binary64) x) #s(literal -1 binary64)))) (exp.f64 (neg.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))))) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 31853699/125000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) (exp.f64 (neg.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal 31853699/125000000 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal -8890523/31250000 binary64) (-.f64 (/.f64 #s(literal 1421413741/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) (/.f64 (neg.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)))) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)))))))) (exp.f64 (neg.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 31853699/125000000 binary64)) (+.f64 (pow.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 10731592879921/100000000000000 binary64) (*.f64 x x))) (*.f64 x #s(literal 3275911/10000000 binary64)))) (exp.f64 (neg.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) x) (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 31853699/125000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) x) (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 31853699/125000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)))) #s(literal 2 binary64)) (*.f64 (pow.f64 (exp.f64 x) x) (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 31853699/125000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))))) #s(literal 1 binary64))))
((-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 31853699/125000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) (exp.f64 (neg.f64 (*.f64 x x))))) #s(approx (/ (- 1 (pow (* (pow (exp x) x) (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1))) 3)) (+ (+ (pow (* (pow (exp x) x) (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1))) 2) (* (pow (exp x) x) (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1)))) 1)) #s(literal 1/1000000000 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1)) (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 20002364838879768868679/20000000000000000000000 binary64) x) #s(literal 564193179035109/500000000000000 binary64)) x) #s(literal 999999999/1000000000 binary64))) (exp.f64 (neg.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal 31853699/125000000 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 3275911/10000000 binary64) (fabs.f64 x)))) (+.f64 #s(literal -8890523/31250000 binary64) #s(approx (- (/ 1421413741/1000000000 (- (* x 3275911/10000000) -1)) (/ (neg (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1))) (- (* x 3275911/10000000) -1))) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -218769265191410913878462666613/1000000000000000000000000000000 binary64) x) #s(literal 18406775705272466545757/50000000000000000000000 binary64)) x) #s(literal 2783420325406157/5000000000000000 binary64)) x) #s(literal 1029667143/1000000000 binary64))))))) (exp.f64 (neg.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)))))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 1421413741/1000000000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -8890523/31250000 binary64)) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal 31853699/125000000 binary64)) (+.f64 (pow.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 10731592879921/100000000000000 binary64) (*.f64 x x))) (*.f64 x #s(literal 3275911/10000000 binary64)))) (exp.f64 (neg.f64 (*.f64 x x))))))
((-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 (+.f64 #s(literal 31853699/125000000 binary64) (/.f64 (+.f64 #s(literal 1421413741/1000000000 binary64) (/.f64 (+.f64 #s(literal -1453152027/1000000000 binary64) (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 #s(literal 3275911/10000000 binary64) x) #s(literal -1 binary64)))) (-.f64 (*.f64 #s(literal 3275911/10000000 binary64) x) #s(literal -1 binary64)))) (pow.f64 (-.f64 (*.f64 #s(literal 3275911/10000000 binary64) x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal -8890523/31250000 binary64) (-.f64 (*.f64 #s(literal 3275911/10000000 binary64) x) #s(literal -1 binary64)))) (-.f64 (*.f64 x #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) (exp.f64 (neg.f64 (*.f64 x x))))) #s(approx (/ (- 1 (pow (* (pow (exp x) x) (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1))) 3)) (+ (+ (pow (* (pow (exp x) x) (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1))) 2) (* (pow (exp x) x) (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1)))) 1)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (* (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1)) (exp (neg (* (fabs x) (fabs x))))) (+.f64 (*.f64 #s(literal -564193179035109/500000000000000 binary64) x) #s(literal 999999999/1000000000 binary64)))) (-.f64 #s(literal 1 binary64) #s(approx (* (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1)) (exp (neg (* (fabs x) (fabs x))))) (+.f64 (*.f64 (-.f64 (*.f64 #s(literal 2364858879768868679/20000000000000000000000 binary64) x) #s(literal 564193179035109/500000000000000 binary64)) x) #s(literal 999999999/1000000000 binary64)))) (-.f64 #s(literal 1 binary64) #s(approx (* (/ (+ (/ (+ (/ (+ (/ (+ (/ 1061405429/1000000000 (- (* x 3275911/10000000) -1)) -1453152027/1000000000) (- (* x 3275911/10000000) -1)) 1421413741/1000000000) (- (* x 3275911/10000000) -1)) -8890523/31250000) (- (* x 3275911/10000000) -1)) 31853699/125000000) (- (* x 3275911/10000000) -1)) (exp (neg (* (fabs x) (fabs x))))) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 #s(literal 375451252922475856043509345477/1000000000000000000000000000000 binary64) x) #s(literal 2364858879768868679/20000000000000000000000 binary64)) x) #s(literal 564193179035109/500000000000000 binary64)) x) #s(literal 999999999/1000000000 binary64)))))
((*.f64 (/.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1049934947/10000000000 binary64) (*.f64 x x))) (*.f64 #s(literal 106015151/2500000000 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 #s(literal 36322091/5000000000 binary64) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 2532017/5000000000 binary64) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 1789971/10000000000 binary64) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 7715471019/10000000000 binary64) (*.f64 x x))) (*.f64 #s(literal 2909738639/10000000000 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 #s(literal 694555761/10000000000 binary64) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 70002721/5000000000 binary64) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 1665589/2000000000 binary64) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)))) (*.f64 (*.f64 #s(literal 2 binary64) #s(literal 1789971/10000000000 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))))) x))
((*.f64 (/.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1049934947/10000000000 binary64) (*.f64 x x))) (*.f64 #s(literal 106015151/2500000000 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 #s(literal 36322091/5000000000 binary64) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 2532017/5000000000 binary64) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 1789971/10000000000 binary64) #s(approx (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (pow.f64 x #s(literal 10 binary64))))) (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 7715471019/10000000000 binary64) (*.f64 x x))) (*.f64 #s(literal 2909738639/10000000000 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 #s(literal 694555761/10000000000 binary64) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 70002721/5000000000 binary64) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)))) (*.f64 #s(literal 1665589/2000000000 binary64) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)))) (*.f64 (*.f64 #s(literal 2 binary64) #s(literal 1789971/10000000000 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))))) x) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) x) (*.f64 #s(approx (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) x) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -1307076337763/8543989815576 binary64) (*.f64 x x)) #s(literal 600041/2386628 binary64)) x) x) #s(literal 1/2 binary64)) (neg.f64 x))) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1307076337763/8543989815576 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal -600041/2386628 binary64) (*.f64 x x))) x)))
(#s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 #s(literal 3321371254951887171/12500000000000000000 binary64) (*.f64 x x)) #s(literal 833192009/1250000000 binary64))) x)) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 #s(approx (- (+ (/ 1307076337763/8543989815576 (pow x 4)) 1/2) (/ -600041/2386628 (* x x))) #s(literal 1/2 binary64)) x)) (*.f64 #s(approx (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 3321371254951887171/12500000000000000000 binary64) (*.f64 x x)) #s(literal 833192009/1250000000 binary64)) x) x) #s(literal -1 binary64))) x) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 (-.f64 (*.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -1307076337763/8543989815576 binary64) (*.f64 x x)) #s(literal 600041/2386628 binary64)) x) x) (neg.f64 x)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64))) (*.f64 x x))) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -344398180852034095277/30586987988352776592 binary64) (*.f64 x x)) #s(literal 1307076337763/8543989815576 binary64)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 600041/2386628 binary64) (*.f64 x x)) #s(literal 1/2 binary64))) (neg.f64 x))))
(#s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 3321371254951887171/12500000000000000000 binary64) (*.f64 x x)) #s(literal 833192009/1250000000 binary64)) x) (*.f64 x x)) x)) (*.f64 #s(approx (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) (-.f64 (*.f64 (*.f64 #s(approx (- (* 3321371254951887171/12500000000000000000 (* x x)) 833192009/1250000000) #s(literal -833192009/1250000000 binary64)) x) x) #s(literal -1 binary64))) x) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -1307076337763/8543989815576 binary64) (*.f64 x x)) #s(literal 600041/2386628 binary64)) (*.f64 x x)) #s(literal 1/2 binary64)) (neg.f64 x))) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -344398180852034095277/30586987988352776592 binary64) (*.f64 x x)) #s(literal 1307076337763/8543989815576 binary64)) (*.f64 x x)) (*.f64 x x)) (+.f64 (/.f64 #s(literal 600041/2386628 binary64) (*.f64 x x)) #s(literal 1/2 binary64))) (neg.f64 x))) #s(approx (* (/ (+ (+ (+ (+ (+ 1 (* 1049934947/10000000000 (* x x))) (* 106015151/2500000000 (* (* x x) (* x x)))) (* 36322091/5000000000 (* (* (* x x) (* x x)) (* x x)))) (* 2532017/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1789971/10000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (+ (+ (+ (+ (+ (+ 1 (* 7715471019/10000000000 (* x x))) (* 2909738639/10000000000 (* (* x x) (* x x)))) (* 694555761/10000000000 (* (* (* x x) (* x x)) (* x x)))) (* 70002721/5000000000 (* (* (* (* x x) (* x x)) (* x x)) (* x x)))) (* 1665589/2000000000 (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)))) (* (* 2 1789971/10000000000) (* (* (* (* (* (* x x) (* x x)) (* x x)) (* x x)) (* x x)) (* x x))))) x) (/.f64 (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -344398180852034095277/30586987988352776592 binary64) (*.f64 x x)) #s(literal 1307076337763/8543989815576 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 600041/2386628 binary64) (*.f64 x x))) #s(literal 1/2 binary64)) (neg.f64 x))))
((log2.f32 (sqrt.f32 (fmax.f32 (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (*.f32 (*.f32 (floor.f32 d) dX.w) (*.f32 (floor.f32 d) dX.w))) (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))))
((log2.f32 (sqrt.f32 (fmax.f32 (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (*.f32 (*.f32 (floor.f32 d) dX.w) (*.f32 (floor.f32 d) dX.w))) (+.f32 (+.f32 (*.f32 (*.f32 (*.f32 dY.u (floor.f32 w)) dY.u) (floor.f32 w)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))) (log2.f32 (sqrt.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (*.f32 (*.f32 (pow.f32 (floor.f32 d) #s(literal 2 binary32)) dX.w) dX.w)) (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))) (log2.f32 (sqrt.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 d) #s(literal 2 binary32)) dX.w) dX.w) (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v))) (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))) (log2.f32 (sqrt.f32 (fmax.f32 (-.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (pow.f32 (*.f32 dX.w (floor.f32 d)) #s(literal 2 binary32))) (-.f32 (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))) (pow.f32 (*.f32 dY.w (floor.f32 d)) #s(literal 2 binary32)))))) (log2.f32 (sqrt.f32 (fmax.f32 (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (*.f32 (*.f32 (floor.f32 d) dX.w) (*.f32 (floor.f32 d) dX.w))) (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (neg.f32 (pow.f32 (*.f32 dY.w (floor.f32 d)) #s(literal 2 binary32))))))))
((log2.f32 (sqrt.f32 (fmax.f32 (+.f32 (+.f32 (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (*.f32 (*.f32 (floor.f32 d) dX.w) (*.f32 (floor.f32 d) dX.w))) (+.f32 (+.f32 (*.f32 (*.f32 (*.f32 dY.u (floor.f32 w)) dY.u) (floor.f32 w)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))) (log2.f32 (sqrt.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (pow.f32 (*.f32 dX.w (floor.f32 d)) #s(literal 2 binary32))) (+.f32 (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))) (pow.f32 (*.f32 dY.w (floor.f32 d)) #s(literal 2 binary32)))))) (log2.f32 (exp.f32 (*.f32 (log.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (pow.f32 (*.f32 dX.w (floor.f32 d)) #s(literal 2 binary32))) (+.f32 (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))) (pow.f32 (*.f32 dY.w (floor.f32 d)) #s(literal 2 binary32))))) #s(literal 1/2 binary32)))) (log2.f32 (sqrt.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (+.f32 (pow.f32 (*.f32 (floor.f32 d) dX.w) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32)))) (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))) (log2.f32 (sqrt.f32 (fmax.f32 (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (*.f32 (*.f32 (floor.f32 d) dX.w) (*.f32 (floor.f32 d) dX.w))) (+.f32 (+.f32 (neg.f32 (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))))
((log2.f32 (sqrt.f32 (fmax.f32 (+.f32 (+.f32 (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (pow.f32 (*.f32 dX.w (floor.f32 d)) #s(literal 2 binary32))) (+.f32 (+.f32 (*.f32 (*.f32 (*.f32 dY.u (floor.f32 w)) dY.u) (floor.f32 w)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))) (log2.f32 (sqrt.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))) (pow.f32 (*.f32 dY.w (floor.f32 d)) #s(literal 2 binary32)))))) (log2.f32 (exp.f32 (log.f32 (sqrt.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (pow.f32 (*.f32 dX.w (floor.f32 d)) #s(literal 2 binary32))) (-.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32))) (pow.f32 (*.f32 dY.w (floor.f32 d)) #s(literal 2 binary32)))))))) (log2.f32 (sqrt.f32 (fmax.f32 #s(approx (+ (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (* (* (floor d) dX.w) (* (floor d) dX.w))) (*.f32 (*.f32 (pow.f32 (floor.f32 d) #s(literal 2 binary32)) dX.w) dX.w)) (+.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (pow.f32 (exp.f32 #s(literal 2 binary32)) (log.f32 (*.f32 dY.v (floor.f32 h))))) (*.f32 (*.f32 (floor.f32 d) dY.w) (*.f32 (floor.f32 d) dY.w)))))) (log2.f32 (sqrt.f32 (fmax.f32 (+.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (pow.f32 (*.f32 dX.w (floor.f32 d)) #s(literal 2 binary32))) (-.f32 (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))) (pow.f32 (*.f32 dY.w (floor.f32 d)) #s(literal 2 binary32)))))))
((-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))))
((-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (acos.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (asin.f64 #s(approx (sqrt (/ (- 1 x) 2)) (sqrt.f64 #s(literal 1/2 binary64)))))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (asin.f64 (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 #s(literal 2 binary64)))))) (-.f64 (acos.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 3 binary64)) #s(literal 8 binary64))) (+.f64 (*.f64 (*.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 2 binary64)) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))))) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 2 binary64)))))
((-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (acos.f64 (sqrt.f64 #s(approx (/ (- 1 x) 2) (*.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) x)))))))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (asin.f64 (/.f64 #s(approx (sqrt (- 1 x)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (acos.f64 #s(approx (sqrt (/ (- 1 x) 2)) (*.f64 (+.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (sqrt.f64 #s(literal 1/2 binary64)))))))) (-.f64 (acos.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (asin.f64 (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 (pow.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal 8 binary64))) (+.f64 (*.f64 (*.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 2 binary64)) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))))) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 2 binary64)))))
(#s(approx (- (/ (PI) 2) (* 2 (- (/ (PI) 2) (acos (sqrt (/ (- 1 x) 2)))))) (-.f64 (*.f64 #s(literal 1/2 binary64) (PI.f64)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (PI.f64)) (acos.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 #s(literal 1/2 binary64))))) #s(literal 2 binary64)))) (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 (asin.f64 (sqrt.f64 #s(approx (/ (- 1 x) 2) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))))) #s(literal 2 binary64))) (-.f64 (acos.f64 (sqrt.f64 #s(approx (/ (- 1 x) 2) #s(literal 1/2 binary64)))) (asin.f64 (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (acos.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (acos.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))) (/.f64 (-.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 (pow.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal 8 binary64))) (+.f64 (+.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (pow.f64 (asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) #s(literal 2 binary64)))) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 2 binary64)))))
((/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))
(#s(approx (/ (- (exp x) (exp (neg x))) (+ (exp x) (exp (neg x)))) x) (tanh.f64 x))
((/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)))
(#s(approx (/ (- (exp x) (exp (neg x))) 2) x) (sinh.f64 x) (/.f64 #s(approx (- (exp x) (exp (neg x))) (*.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal -2 binary64)) x)) #s(literal 2 binary64)))
((/.f64 #s(approx (- (exp x) (exp (neg x))) (*.f64 #s(approx (- (* 1/3 (* x x)) -2) (*.f64 #s(literal 1/3 binary64) (*.f64 x x))) x)) #s(literal 2 binary64)) (/.f64 #s(approx (- (exp x) (exp (neg x))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) x) #s(literal -2 binary64)) x)) #s(literal 2 binary64)))
((/.f64 #s(approx (- (exp x) (exp (neg x))) (*.f64 #s(approx (- (* 1/3 (* x x)) -2) (*.f64 (*.f64 #s(literal 1/3 binary64) x) x)) x)) #s(literal 2 binary64)))
((/.f64 #s(literal 2 binary64) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))
((/.f64 #s(literal 2 binary64) (+.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) (exp.f64 (neg.f64 x)))) #s(approx (/ 2 (+ (exp x) (exp (neg x)))) #s(literal 1 binary64)) #s(approx (/ 2 (+ (exp x) (exp (neg x)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (/.f64 #s(literal 2 binary64) #s(approx (+ (exp x) (exp (neg x))) (-.f64 (*.f64 x x) #s(literal -2 binary64)))) #s(approx (/ 2 (+ (exp x) (exp (neg x)))) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 5/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64))))
((/.f64 #s(literal 1 binary64) (cosh.f64 x)) (/.f64 #s(literal 2 binary64) #s(approx (+ (exp x) (exp (neg x))) #s(approx (- (* x x) -2) (*.f64 x x)))) (/.f64 #s(literal 2 binary64) (+.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(approx (exp (neg x)) #s(literal 1 binary64)))) (/.f64 #s(literal 2 binary64) (-.f64 (cosh.f64 x) (-.f64 (sinh.f64 x) (exp.f64 x)))))
((/.f64 #s(literal 2 binary64) (+.f64 #s(approx (/ 1 (exp (neg x))) (-.f64 x #s(literal -1 binary64))) #s(approx (exp (neg x)) #s(literal 1 binary64)))) (/.f64 #s(literal 2 binary64) (+.f64 #s(approx (/ 1 (exp (neg x))) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal -1/2 binary64)) x) #s(literal -1 binary64)) x) #s(literal -1 binary64))) #s(approx (exp (neg x)) #s(literal 1 binary64)))))
((log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) #s(literal 1 binary64))))))
(#s(approx (log (+ x (sqrt (+ (* x x) 1)))) x) (asinh.f64 x) (log.f64 #s(approx (+ x (sqrt (+ (* x x) 1))) (/.f64 #s(literal -1/2 binary64) x))) (log.f64 (+.f64 x #s(approx (sqrt (+ (* x x) 1)) x))))
((log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) #s(literal 1 binary64))))))
((acosh.f64 x) (log.f64 (+.f64 x #s(approx (sqrt (- (* x x) 1)) x))))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))))
(#s(approx (* (/ 1 2) (log (/ (+ 1 x) (- 1 x)))) x) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) #s(approx (log (/ (+ 1 x) (- 1 x))) (*.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) (*.f64 x x)) #s(literal -2 binary64)) x))))
((*.f64 #s(approx (log (/ (+ 1 x) (- 1 x))) (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 2/3 binary64)) #s(literal -2 binary64)) x)) #s(literal 1/2 binary64)))
((log.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) x))))
((log.f64 #s(approx (+ (/ 1 x) (/ (sqrt (- 1 (* x x))) x)) (sqrt.f64 #s(literal -1 binary64)))) (log.f64 #s(approx (+ (/ 1 x) (/ (sqrt (- 1 (* x x))) x)) (/.f64 #s(literal 2 binary64) x))) (log.f64 #s(approx (+ (/ 1 x) (/ (sqrt (- 1 (* x x))) x)) (/.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -2 binary64)) x))))
((log.f64 #s(approx (+ (/ 1 x) (/ (sqrt (- 1 (* x x))) x)) #s(approx (/ (- (* (* x x) -1/2) -2) x) (*.f64 #s(literal -1/2 binary64) x)))))
((*.f64 w0 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (/.f64 (*.f64 M D) (*.f64 #s(literal 2 binary64) d)) #s(literal 2 binary64)) (/.f64 h l))))))
((*.f64 w0 (sqrt.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 h (pow.f64 (*.f64 (/.f64 D #s(literal 2 binary64)) (/.f64 M d)) #s(literal 2 binary64))) l)))) #s(approx (* w0 (sqrt (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l))))) w0) (*.f64 w0 #s(approx (sqrt (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 D D)) (*.f64 (/.f64 h (*.f64 d d)) (/.f64 (*.f64 M M) l)))))) (*.f64 w0 (sqrt.f64 #s(approx (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l))) (/.f64 (-.f64 l (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 D D)) (*.f64 (/.f64 (*.f64 M M) d) (/.f64 h d)))) l)))) (*.f64 w0 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (/.f64 (*.f64 M (/.f64 D d)) #s(literal 2 binary64)) #s(literal 2 binary64)) (/.f64 h l))))))
((*.f64 w0 (sqrt.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (/.f64 (/.f64 D d) #s(literal 2 binary64)) M) (*.f64 (*.f64 (/.f64 (/.f64 D d) #s(literal 2 binary64)) M) h)) l)))) #s(approx (* w0 (sqrt (- 1 (/ (* h (pow (* (/ D 2) (/ M d)) 2)) l)))) (-.f64 w0 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 M M) h) w0) (*.f64 D D)) (*.f64 (*.f64 d d) l))))) #s(approx (* w0 (sqrt (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l))))) (-.f64 w0 (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 D D)) (*.f64 (/.f64 (*.f64 (*.f64 M M) h) l) (/.f64 w0 (*.f64 d d)))))) (*.f64 w0 #s(approx (sqrt (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l)))) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 M M) l) (*.f64 (*.f64 #s(literal 1/8 binary64) D) (*.f64 D (/.f64 h (*.f64 d d)))))))) (*.f64 w0 (sqrt.f64 #s(approx (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l))) (/.f64 (-.f64 l (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 h (*.f64 d d)) M) M) (*.f64 #s(literal 1/4 binary64) D)) D)) l)))))
((*.f64 w0 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 h (*.f64 M (/.f64 (/.f64 D d) #s(literal 2 binary64)))) l) (*.f64 M (/.f64 (/.f64 D d) #s(literal 2 binary64))))))) #s(approx (* w0 (sqrt (- 1 (/ (* h (pow (* (/ D 2) (/ M d)) 2)) l)))) (-.f64 w0 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 M M) h) w0) D) (/.f64 D (*.f64 (*.f64 d d) l)))))) #s(approx (* w0 (sqrt (- 1 (/ (* h (pow (* (/ D 2) (/ M d)) 2)) l)))) (-.f64 w0 (*.f64 #s(literal 1/8 binary64) (*.f64 w0 (*.f64 (*.f64 (*.f64 M M) h) (*.f64 (/.f64 D l) (/.f64 D (*.f64 d d)))))))) (*.f64 w0 #s(approx (sqrt (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l)))) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 M M) l) (*.f64 (*.f64 #s(literal 1/8 binary64) D) (/.f64 (*.f64 h D) (*.f64 d d))))))) (*.f64 w0 (sqrt.f64 #s(approx (- 1 (* (pow (/ (* M D) (* 2 d)) 2) (/ h l))) (/.f64 (-.f64 l (*.f64 (*.f64 M (*.f64 (/.f64 h (*.f64 d d)) (*.f64 (*.f64 #s(literal 1/4 binary64) D) M))) D)) l)))))
((*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l)))))
((*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A V) l))) (/.f64 (*.f64 (sqrt.f64 A) c0) (sqrt.f64 (*.f64 l V))) (*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A l)) (sqrt.f64 V))) (*.f64 c0 (/.f64 (sqrt.f64 (/.f64 (neg.f64 A) V)) (sqrt.f64 (neg.f64 l)))))
((*.f64 (pow.f64 (/.f64 A (*.f64 l V)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (/.f64 A (*.f64 l V)) #s(literal 1/4 binary64)) c0)) (*.f64 c0 (/.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 l V)))) (*.f64 (/.f64 c0 (sqrt.f64 l)) (sqrt.f64 (/.f64 A V))) (/.f64 (*.f64 (sqrt.f64 A) c0) (*.f64 (sqrt.f64 l) (sqrt.f64 V))) (/.f64 (/.f64 (*.f64 (sqrt.f64 A) c0) (sqrt.f64 V)) (sqrt.f64 l)))
((/.f64 (*.f64 (sqrt.f64 (/.f64 A V)) c0) (sqrt.f64 l)) (*.f64 (/.f64 c0 (sqrt.f64 (*.f64 V l))) (sqrt.f64 A)) (*.f64 (sqrt.f64 (/.f64 (neg.f64 A) V)) (/.f64 c0 (sqrt.f64 (neg.f64 l)))) (/.f64 (*.f64 (sqrt.f64 (neg.f64 A)) c0) (*.f64 (sqrt.f64 l) (sqrt.f64 (neg.f64 V)))) (*.f64 c0 (*.f64 (pow.f64 A #s(literal 1/4 binary64)) (/.f64 (pow.f64 A #s(literal 1/4 binary64)) (sqrt.f64 (*.f64 V l))))))
((*.f64 (/.f64 c0 (*.f64 #s(literal 2 binary64) w)) (+.f64 (/.f64 (*.f64 c0 (*.f64 d d)) (*.f64 (*.f64 w h) (*.f64 D D))) (sqrt.f64 (-.f64 (*.f64 (/.f64 (*.f64 c0 (*.f64 d d)) (*.f64 (*.f64 w h) (*.f64 D D))) (/.f64 (*.f64 c0 (*.f64 d d)) (*.f64 (*.f64 w h) (*.f64 D D)))) (*.f64 M M))))))
((*.f64 (/.f64 c0 (*.f64 #s(literal 2 binary64) w)) #s(approx (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))) (*.f64 (/.f64 (*.f64 d d) (*.f64 (*.f64 (*.f64 h w) D) D)) (*.f64 #s(literal 2 binary64) c0)))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (*.f64 (/.f64 (*.f64 #s(literal 0 binary64) (*.f64 c0 c0)) w) #s(literal -1/2 binary64))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (*.f64 (-.f64 (/.f64 #s(literal 0 binary64) w) (*.f64 (*.f64 (/.f64 (*.f64 D D) (*.f64 c0 c0)) (*.f64 (*.f64 M M) (/.f64 h (*.f64 d d)))) #s(literal -1/4 binary64))) (*.f64 c0 c0))) (*.f64 (/.f64 c0 (*.f64 #s(literal 2 binary64) w)) #s(approx (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))) (/.f64 (+.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 d d) c0)) (*.f64 (*.f64 D D) h)) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 M M) h) (*.f64 w w)) (*.f64 D D)) (*.f64 (*.f64 d d) c0)) #s(literal -1/2 binary64))) w))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (/.f64 (+.f64 (/.f64 (*.f64 (*.f64 d c0) (*.f64 d c0)) (*.f64 (*.f64 w w) h)) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 M M) h) (pow.f64 D #s(literal 4 binary64))) (*.f64 d d)) #s(literal -1/4 binary64))) (*.f64 D D))))
((*.f64 c0 (/.f64 #s(approx (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) c0) d) (/.f64 (/.f64 d (*.f64 D (*.f64 h w))) D))) (*.f64 w #s(literal 2 binary64)))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) #s(literal 0 binary64)) (*.f64 (/.f64 c0 (*.f64 #s(literal 2 binary64) w)) #s(approx (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))) (*.f64 (/.f64 (*.f64 d (/.f64 d D)) (*.f64 D (*.f64 h w))) (*.f64 #s(literal 2 binary64) c0)))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (*.f64 (-.f64 (/.f64 #s(literal 0 binary64) w) (*.f64 (*.f64 (/.f64 (*.f64 D D) (*.f64 c0 c0)) (/.f64 (*.f64 (/.f64 h d) (*.f64 M M)) d)) #s(literal -1/4 binary64))) (*.f64 c0 c0))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 M M) (pow.f64 (/.f64 D c0) #s(literal 2 binary64))) (neg.f64 (/.f64 h (*.f64 d d)))) #s(literal -1/4 binary64)) c0) c0)))
((*.f64 c0 (/.f64 #s(approx (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))) (*.f64 (*.f64 (*.f64 #s(literal 2 binary64) c0) (/.f64 d D)) (/.f64 d (*.f64 (*.f64 h w) D)))) (*.f64 w #s(literal 2 binary64)))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) #s(approx (* (- (/ 0 w) (* (* (/ (* D D) (* c0 c0)) (/ (* (/ h d) (* M M)) d)) -1/4)) (* c0 c0)) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 M M) h) (*.f64 D D)) (*.f64 d d)) #s(literal 1/4 binary64)))) (*.f64 (/.f64 c0 (+.f64 w w)) #s(approx (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))) (*.f64 (/.f64 (*.f64 d (/.f64 d D)) (*.f64 D (*.f64 h w))) (*.f64 #s(literal 2 binary64) c0)))) (*.f64 c0 (/.f64 #s(approx (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))) (*.f64 (/.f64 (*.f64 (/.f64 d D) d) D) (/.f64 (*.f64 #s(literal 2 binary64) c0) (*.f64 h w)))) (*.f64 w #s(literal 2 binary64)))) #s(approx (* (/ c0 (* 2 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (*.f64 (-.f64 (/.f64 #s(literal 0 binary64) w) (*.f64 (*.f64 (/.f64 D c0) (*.f64 (/.f64 D c0) (*.f64 (/.f64 M d) (/.f64 (*.f64 M h) d)))) #s(literal -1/4 binary64))) (*.f64 c0 c0))))
((*.f64 (*.f64 (pow.f64 (/.f64 d h) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))) (pow.f64 (/.f64 d l) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 M D) (*.f64 #s(literal 2 binary64) d)) #s(literal 2 binary64))) (/.f64 h l)))))
((*.f64 (*.f64 (pow.f64 (/.f64 d h) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))) (pow.f64 (/.f64 d l) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (*.f64 (/.f64 D #s(literal 2 binary64)) (/.f64 M d)) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) h)) l))) #s(approx (* (* (pow (/ d h) (/ 1 2)) (pow (/ d l) (/ 1 2))) (- 1 (* (* (/ 1 2) (pow (/ (* M D) (* 2 d)) 2)) (/ h l)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 l h))) d)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 h l) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (/.f64 D #s(literal 2 binary64)) (/.f64 M d)) #s(literal 2 binary64)))) (sqrt.f64 (*.f64 (/.f64 d l) (/.f64 d h)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 h l) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (/.f64 D #s(literal 2 binary64)) (/.f64 M d)) #s(literal 2 binary64)))) (sqrt.f64 (/.f64 d l))) (sqrt.f64 (/.f64 d h))) (*.f64 (*.f64 (/.f64 (sqrt.f64 (neg.f64 d)) (sqrt.f64 (neg.f64 h))) (pow.f64 (/.f64 d l) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 M D) (*.f64 #s(literal 2 binary64) d)) #s(literal 2 binary64))) (/.f64 h l)))))
((*.f64 (*.f64 (pow.f64 (/.f64 d h) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))) (pow.f64 (/.f64 d l) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (/.f64 (/.f64 D d) #s(literal 2 binary64)) M) (*.f64 (*.f64 (/.f64 (/.f64 D d) #s(literal 2 binary64)) M) (*.f64 #s(literal 1/2 binary64) h))) l))) #s(approx (* (* (pow (/ d h) (/ 1 2)) (pow (/ d l) (/ 1 2))) (- 1 (* (* (/ 1 2) (pow (/ (* M D) (* 2 d)) 2)) (/ h l)))) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (*.f64 l h))) d)) (*.f64 (*.f64 #s(approx (- 1 (* (* (/ h l) 1/2) (pow (* (/ D 2) (/ M d)) 2))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (/.f64 (*.f64 D D) d) d)) (/.f64 h l)) (*.f64 M M)))) (sqrt.f64 (/.f64 d l))) (sqrt.f64 (/.f64 d h))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 h l) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (*.f64 M D) (*.f64 d #s(literal 2 binary64))) #s(literal 2 binary64)))) (sqrt.f64 (*.f64 (/.f64 d l) (/.f64 d h)))) (*.f64 #s(approx (* (- 1 (* (* (/ h l) 1/2) (pow (* (/ D 2) (/ M d)) 2))) (sqrt (/ d l))) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 D D)) (*.f64 (*.f64 M M) h)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 l d) #s(literal 3 binary64))))) (sqrt.f64 (/.f64 d l)))) (sqrt.f64 (/.f64 d h))))
((*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 D d) #s(literal 2 binary64)) M) (*.f64 (*.f64 (/.f64 (/.f64 D d) #s(literal 2 binary64)) M) (*.f64 (/.f64 h l) #s(literal 1/2 binary64))))) (sqrt.f64 (/.f64 d l))) (sqrt.f64 (/.f64 d h))) #s(approx (* (* (pow (/ d h) (/ 1 2)) (pow (/ d l) (/ 1 2))) (- 1 (* (* (/ 1 2) (pow (/ (* M D) (* 2 d)) 2)) (/ h l)))) (/.f64 d (sqrt.f64 (*.f64 l h)))) (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (* (* (/ h l) 1/2) (pow (/ (* M D) (* d 2)) 2)) (*.f64 (/.f64 (*.f64 (*.f64 D D) #s(literal 1/8 binary64)) l) (*.f64 h (/.f64 (*.f64 M (/.f64 M d)) d))))) (sqrt.f64 (*.f64 (/.f64 d l) (/.f64 d h)))) (*.f64 (*.f64 #s(approx (- 1 (* (* (/ h l) 1/2) (pow (* (/ D 2) (/ M d)) 2))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 D D)) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 M (/.f64 M d)) d)) (/.f64 h l))) (*.f64 D D))) (sqrt.f64 (/.f64 d l))) (sqrt.f64 (/.f64 d h))) #s(approx (* (- 1 (* (* (/ h l) 1/2) (pow (/ (* M D) (* d 2)) 2))) (sqrt (* (/ d l) (/ d h)))) (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 l h))) d) (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 M (/.f64 M d))) (*.f64 (sqrt.f64 (/.f64 h (pow.f64 l #s(literal 3 binary64)))) (*.f64 D D))))))
((/.f64 (*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 s)))) c_p) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 s))))) c_n)) (*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 t)))) c_p) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 t))))) c_n))))
(#s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64)))) c_n) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 t)) #s(literal 1 binary64)))) c_n))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64))) c_p) (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 t)) #s(literal 1 binary64))) c_p))) (/.f64 (*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 s)))) c_p) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 s))))) c_n)) (*.f64 #s(approx (pow (/ 1 (+ 1 (exp (neg t)))) c_p) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 t))))) c_n))) (/.f64 (*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 s)))) c_p) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 s))))) c_n)) (*.f64 #s(approx (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (-.f64 (pow.f64 #s(literal 1/2 binary64) c_p) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (pow.f64 #s(literal 1/2 binary64) c_p) t) c_p)))) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 t))))) c_n))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (+.f64 (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64)))) c_n) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 t)) #s(literal 1 binary64)))) c_n)) (-.f64 (neg.f64 (log.f64 (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64)))) (neg.f64 (log.f64 (+.f64 (exp.f64 (neg.f64 t)) #s(literal 1 binary64)))))) c_p) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64)))) c_n) (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 t)) #s(literal 1 binary64)))) c_n)))))
(#s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (exp.f64 (-.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (exp.f64 (neg.f64 s)) #s(literal -1 binary64)))) c_p) (*.f64 (neg.f64 (log.f64 (-.f64 (exp.f64 (neg.f64 t)) #s(literal -1 binary64)))) c_p)))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) #s(approx (/ (pow (/ 1 (+ (exp (neg s)) 1)) c_p) (pow (/ 1 (+ (exp (neg t)) 1)) c_p)) #s(literal 1 binary64))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64)))) c_n) #s(approx (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n) #s(literal 1 binary64)))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64)))) c_n) #s(approx (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n) (pow.f64 #s(literal 1/2 binary64) c_n)))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64))) c_p) #s(approx (pow (/ 1 (+ (exp (neg t)) 1)) c_p) (-.f64 (pow.f64 #s(literal 1/2 binary64) c_p) (*.f64 (*.f64 (*.f64 (pow.f64 #s(literal 1/2 binary64) c_p) t) #s(literal -1/2 binary64)) c_p))))))
(#s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (exp.f64 #s(approx (- (* (neg (log (- (exp (neg s)) -1))) c_p) (* (neg (log (- (exp (neg t)) -1))) c_p)) (+.f64 (*.f64 (*.f64 t c_p) #s(literal -1/2 binary64)) (*.f64 (neg.f64 c_p) (-.f64 (log.f64 (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64))) (log.f64 #s(literal 2 binary64)))))))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 #s(approx (- 1 (/ 1 (+ (exp (neg s)) 1))) #s(literal 1/2 binary64)) c_n) #s(approx (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n) #s(literal 1 binary64)))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 s)) #s(literal 1 binary64))) c_p) #s(approx (pow (/ 1 (+ (exp (neg t)) 1)) c_p) #s(approx (- (pow 1/2 c_p) (* (* (* (pow 1/2 c_p) t) -1/2) c_p)) #s(literal 1 binary64))))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (/.f64 (pow.f64 #s(approx (/ 1 (+ (exp (neg s)) 1)) #s(literal 1/2 binary64)) c_p) (pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 t)) #s(literal 1 binary64))) c_p))) #s(approx (/ (* (pow (/ 1 (+ 1 (exp (neg s)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg s))))) c_n)) (* (pow (/ 1 (+ 1 (exp (neg t)))) c_p) (pow (- 1 (/ 1 (+ 1 (exp (neg t))))) c_n))) (exp.f64 (-.f64 (*.f64 (neg.f64 #s(approx (log (- (exp (neg s)) -1)) (log.f64 #s(literal 2 binary64)))) c_p) (*.f64 (neg.f64 (log.f64 (-.f64 (exp.f64 (neg.f64 t)) #s(literal -1 binary64)))) c_p)))))
((+.f64 x (*.f64 (/.f64 (-.f64 y z) (-.f64 (+.f64 t #s(literal 1 binary64)) z)) (-.f64 a x))))
((+.f64 x (*.f64 #s(approx (/ (- y z) (- (+ t 1) z)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 z y)) (-.f64 (+.f64 #s(literal 1 binary64) t) z)) y)) (-.f64 a x))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) a) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) (*.f64 (-.f64 y z) (/.f64 a (-.f64 (+.f64 #s(literal 1 binary64) t) z)))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) (-.f64 x (*.f64 (-.f64 a x) (/.f64 z (-.f64 (+.f64 #s(literal 1 binary64) t) z))))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) (*.f64 (neg.f64 x) (-.f64 (/.f64 (-.f64 y z) (-.f64 (+.f64 #s(literal 1 binary64) t) z)) #s(literal 1 binary64)))))
((+.f64 x (*.f64 #s(approx (/ (- y z) (- (+ t 1) z)) (*.f64 #s(approx (/ (- 1 (/ z y)) (- (+ 1 t) z)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) t))) y)) (-.f64 a x))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) #s(approx (- x (* (- a x) (/ z (- (+ 1 t) z)))) x)) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) #s(approx (* (neg x) (- (/ (- y z) (- (+ 1 t) z)) 1)) (*.f64 x (/.f64 (-.f64 y (+.f64 #s(literal 1 binary64) t)) z)))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) #s(approx (- x (* (- a x) (/ z (- (+ 1 t) z)))) (*.f64 (neg.f64 a) (/.f64 z (-.f64 (+.f64 #s(literal 1 binary64) t) z))))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) (/.f64 (*.f64 (-.f64 a x) y) (-.f64 (+.f64 #s(literal 1 binary64) t) z))))
((+.f64 x (*.f64 #s(approx (/ (- y z) (- (+ t 1) z)) (*.f64 #s(approx (/ (- 1 (/ z y)) (- (+ 1 t) z)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) t))) y)) #s(approx (- a x) a))) (+.f64 x #s(approx (* (/ (- y z) (- (+ t 1) z)) (- a x)) (-.f64 a x))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) (*.f64 (-.f64 y z) (/.f64 a #s(approx (- (+ 1 t) z) t)))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) (*.f64 (-.f64 y z) (/.f64 a #s(approx (- (+ 1 t) z) (+.f64 #s(literal 1 binary64) t))))) #s(approx (+ x (* (/ (- y z) (- (+ t 1) z)) (- a x))) (/.f64 (*.f64 (-.f64 y z) a) (-.f64 (-.f64 t #s(literal -1 binary64)) z))))
((+.f32 #s(literal 1 binary32) (*.f32 v (log.f32 (+.f32 u (*.f32 (-.f32 #s(literal 1 binary32) u) (exp.f32 (/.f32 #s(literal -2 binary32) v))))))))
((+.f32 #s(literal 1 binary32) (*.f32 v (log.f32 #s(approx (+ u (* (- 1 u) (exp (/ -2 v)))) (+.f32 (*.f32 (-.f32 #s(literal 1 binary32) (exp.f32 (/.f32 #s(literal -2 binary32) v))) u) (exp.f32 (/.f32 #s(literal -2 binary32) v))))))) #s(approx (+ 1 (* v (log (+ u (* (- 1 u) (exp (/ -2 v))))))) #s(literal -1 binary32)) (+.f32 #s(literal 1 binary32) (*.f32 v #s(approx (log (+ u (* (- 1 u) (exp (/ -2 v))))) (-.f32 (*.f32 (-.f32 (exp.f32 (/.f32 #s(literal 2 binary32) v)) #s(literal 1 binary32)) u) (/.f32 #s(literal 2 binary32) v))))) (+.f32 #s(literal 1 binary32) (*.f32 v (log.f32 #s(approx (+ u (* (- 1 u) (exp (/ -2 v)))) (*.f32 (-.f32 #s(literal 1 binary32) (exp.f32 (/.f32 #s(literal -2 binary32) v))) u))))) (+.f32 #s(literal 1 binary32) (*.f32 v (-.f32 (log.f32 (+.f32 (pow.f32 (*.f32 (exp.f32 (/.f32 #s(literal -2 binary32) v)) (-.f32 #s(literal 1 binary32) u)) #s(literal 3 binary32)) (pow.f32 u #s(literal 3 binary32)))) (log.f32 (+.f32 (*.f32 (*.f32 (exp.f32 (/.f32 #s(literal -2 binary32) v)) (-.f32 #s(literal 1 binary32) u)) (-.f32 (*.f32 (exp.f32 (/.f32 #s(literal -2 binary32) v)) (-.f32 #s(literal 1 binary32) u)) u)) (*.f32 u u)))))))
((-.f32 (log.f32 (pow.f32 (+.f32 (*.f32 (-.f32 #s(literal 1 binary32) u) (exp.f32 (/.f32 #s(literal -2 binary32) v))) u) v)) #s(literal -1 binary32)) #s(approx (+ 1 (* v (- (log (+ (pow (* (exp (/ -2 v)) (- 1 u)) 3) (pow u 3))) (log (+ (* (* (exp (/ -2 v)) (- 1 u)) (- (* (exp (/ -2 v)) (- 1 u)) u)) (* u u)))))) #s(literal 1 binary32)) (+.f32 #s(literal 1 binary32) (*.f32 v #s(approx (log (+ u (* (- 1 u) (exp (/ -2 v))))) (-.f32 (*.f32 (-.f32 #s(approx (exp (/ 2 v)) (+.f32 (+.f32 (/.f32 #s(literal 2 binary32) v) #s(literal 1 binary32)) (/.f32 #s(literal 2 binary32) (*.f32 v v)))) #s(literal 1 binary32)) u) (/.f32 #s(literal 2 binary32) v))))) (+.f32 #s(literal 1 binary32) #s(approx (* v (log (+ u (* (- 1 u) (exp (/ -2 v)))))) (-.f32 (*.f32 (/.f32 (*.f32 #s(literal -4 binary32) (-.f32 (pow.f32 (-.f32 #s(literal 1 binary32) u) #s(literal 2 binary32)) (-.f32 #s(literal 1 binary32) u))) v) #s(literal 1/2 binary32)) (*.f32 #s(literal 2 binary32) (-.f32 #s(literal 1 binary32) u))))) #s(approx (+ 1 (* v (log (+ u (* (- 1 u) (exp (/ -2 v))))))) (-.f32 (*.f32 (+.f32 (*.f32 (*.f32 #s(literal -1/2 binary32) u) (*.f32 (pow.f32 (-.f32 (exp.f32 (/.f32 #s(literal -2 binary32) v)) #s(literal 1 binary32)) #s(literal 2 binary32)) (/.f32 v (exp.f32 (/.f32 #s(literal -4 binary32) v))))) (*.f32 (-.f32 (exp.f32 (/.f32 #s(literal 2 binary32) v)) #s(literal 1 binary32)) v)) u) #s(literal 1 binary32))))
((/.f32 (+.f32 (pow.f32 (log.f32 (pow.f32 #s(approx (+ u (* (- 1 u) (exp (/ -2 v)))) (+.f32 (*.f32 (-.f32 #s(literal 1 binary32) (exp.f32 (/.f32 #s(literal -2 binary32) v))) u) (exp.f32 (/.f32 #s(literal -2 binary32) v)))) v)) #s(literal 3 binary32)) #s(literal 1 binary32)) (+.f32 (pow.f32 (log.f32 (pow.f32 #s(approx (+ u (* (- 1 u) (exp (/ -2 v)))) (+.f32 (*.f32 (-.f32 #s(literal 1 binary32) (exp.f32 (/.f32 #s(literal -2 binary32) v))) u) (exp.f32 (/.f32 #s(literal -2 binary32) v)))) v)) #s(literal 2 binary32)) (-.f32 #s(literal 1 binary32) (log.f32 (pow.f32 #s(approx (+ u (* (- 1 u) (exp (/ -2 v)))) (+.f32 (*.f32 (-.f32 #s(literal 1 binary32) (exp.f32 (/.f32 #s(literal -2 binary32) v))) u) (exp.f32 (/.f32 #s(literal -2 binary32) v)))) v))))) #s(approx (+ 1 (* v (log (+ u (* (- 1 u) (exp (/ -2 v))))))) (-.f32 (*.f32 #s(approx (+ (* (* -1/2 u) (* (pow (- (exp (/ -2 v)) 1) 2) (/ v (exp (/ -4 v))))) (* (- (exp (/ 2 v)) 1) v)) #s(literal 2 binary32)) u) #s(literal 1 binary32))) #s(approx (+ 1 (* v (log (+ u (* (- 1 u) (exp (/ -2 v))))))) (-.f32 #s(approx (* (+ (* (* -1/2 u) (* (pow (- (exp (/ -2 v)) 1) 2) (/ v (exp (/ -4 v))))) (* (- (exp (/ 2 v)) 1) v)) u) (-.f32 (*.f32 (neg.f32 u) (/.f32 (-.f32 (*.f32 #s(literal 2 binary32) u) #s(literal 2 binary32)) v)) (*.f32 #s(literal -2 binary32) u))) #s(literal 1 binary32))) #s(approx (+ 1 (* v (log (+ u (* (- 1 u) (exp (/ -2 v))))))) #s(approx (- (* (+ (* (* -1/2 u) (* (pow (- (exp (/ -2 v)) 1) 2) (/ v (exp (/ -4 v))))) (* (- (exp (/ 2 v)) 1) v)) u) 1) (+.f32 (neg.f32 (/.f32 (+.f32 (*.f32 (neg.f32 u) (/.f32 (-.f32 (*.f32 (*.f32 #s(literal -8 binary32) u) #s(literal 1/2 binary32)) #s(literal -4/3 binary32)) v)) (*.f32 (-.f32 (*.f32 #s(literal 2 binary32) u) #s(literal 2 binary32)) u)) v)) (-.f32 (*.f32 #s(literal 2 binary32) u) #s(literal 1 binary32))))) #s(approx (+ 1 (* v (log (+ u (* (- 1 u) (exp (/ -2 v))))))) (-.f32 (*.f32 #s(approx (+ (* (* -1/2 u) (* (pow (- (exp (/ -2 v)) 1) 2) (/ v (exp (/ -4 v))))) (* (- (exp (/ 2 v)) 1) v)) (*.f32 (-.f32 (exp.f32 (/.f32 #s(literal 2 binary32) v)) #s(literal 1 binary32)) v)) u) #s(literal 1 binary32))))
((asin.f32 (/.f32 h (sqrt.f32 (-.f32 (*.f32 eta eta) (/.f32 (*.f32 sinTheta_O sinTheta_O) (sqrt.f32 (-.f32 #s(literal 1 binary32) (*.f32 sinTheta_O sinTheta_O)))))))))
((asin.f32 (/.f32 h #s(approx (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O)))))) (+.f32 (*.f32 (/.f32 (*.f32 sinTheta_O sinTheta_O) eta) #s(literal -1/2 binary32)) eta)))) (asin.f32 (/.f32 h #s(approx (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O)))))) eta))) (asin.f32 (/.f32 h (sqrt.f32 #s(approx (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))) (+.f32 (*.f32 (*.f32 (-.f32 (*.f32 #s(literal -1/2 binary32) (*.f32 sinTheta_O sinTheta_O)) #s(literal 1 binary32)) sinTheta_O) sinTheta_O) (*.f32 eta eta)))))) (asin.f32 #s(approx (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))))) (/.f32 (+.f32 (*.f32 (*.f32 (*.f32 #s(literal 1/2 binary32) h) (/.f32 (/.f32 (*.f32 sinTheta_O sinTheta_O) eta) eta)) (sqrt.f32 (/.f32 #s(literal 1 binary32) (-.f32 #s(literal 1 binary32) (*.f32 sinTheta_O sinTheta_O))))) h) eta))) (asin.f32 #s(approx (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))))) (+.f32 (*.f32 (*.f32 (*.f32 (/.f32 h (pow.f32 eta #s(literal 3 binary32))) #s(literal 1/2 binary32)) sinTheta_O) sinTheta_O) (/.f32 h eta)))))
((asin.f32 (/.f32 h #s(approx (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O)))))) (+.f32 (*.f32 (*.f32 (/.f32 sinTheta_O eta) sinTheta_O) #s(literal -1/2 binary32)) eta)))) (-.f32 (/.f32 (PI.f32) #s(literal 2 binary32)) (acos.f32 (/.f32 h #s(approx (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O)))))) eta)))) (asin.f32 #s(approx (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))))) (/.f32 #s(approx (+ (* (* (* 1/2 h) (/ (/ (* sinTheta_O sinTheta_O) eta) eta)) (sqrt (/ 1 (- 1 (* sinTheta_O sinTheta_O))))) h) (-.f32 h (*.f32 (*.f32 #s(literal -1/2 binary32) h) (/.f32 (/.f32 (*.f32 sinTheta_O sinTheta_O) eta) eta)))) eta))) (asin.f32 #s(approx (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))))) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (-.f32 (*.f32 eta eta) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (-.f32 #s(literal 1 binary32) (*.f32 sinTheta_O sinTheta_O)))) (*.f32 sinTheta_O sinTheta_O))))) h))) (asin.f32 (/.f32 h (exp.f32 (*.f32 (log.f32 (-.f32 (*.f32 eta eta) (*.f32 (tan.f32 (asin.f32 sinTheta_O)) sinTheta_O))) #s(literal 1/2 binary32))))))
((asin.f32 (/.f32 h #s(approx (exp (* (log (- (* eta eta) (* (tan (asin sinTheta_O)) sinTheta_O))) 1/2)) (+.f32 (*.f32 (-.f32 (*.f32 (/.f32 #s(literal -1/8 binary32) (pow.f32 (cos.f32 (asin.f32 sinTheta_O)) #s(literal 2 binary32))) (pow.f32 (/.f32 sinTheta_O eta) #s(literal 3 binary32))) (*.f32 #s(literal 1/2 binary32) (/.f32 (/.f32 sinTheta_O eta) (cos.f32 (asin.f32 sinTheta_O))))) sinTheta_O) eta)))) (asin.f32 #s(approx (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))))) (*.f32 #s(approx (sqrt (/ 1 (- (* eta eta) (* (sqrt (/ 1 (- 1 (* sinTheta_O sinTheta_O)))) (* sinTheta_O sinTheta_O))))) (/.f32 #s(literal 1 binary32) eta)) h))) (asin.f32 #s(approx (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))))) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) #s(approx (- (* eta eta) (* (sqrt (/ 1 (- 1 (* sinTheta_O sinTheta_O)))) (* sinTheta_O sinTheta_O))) (+.f32 (*.f32 (neg.f32 sinTheta_O) sinTheta_O) (*.f32 eta eta))))) h))) (asin.f32 #s(approx (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O))))))) (+.f32 (*.f32 (*.f32 (*.f32 (/.f32 (/.f32 h (*.f32 eta eta)) eta) #s(literal 1/2 binary32)) sinTheta_O) sinTheta_O) (/.f32 h eta)))) (/.f32 (-.f32 (/.f32 (*.f32 (PI.f32) (PI.f32)) #s(literal 4 binary32)) (*.f32 (acos.f32 (/.f32 h #s(approx (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O)))))) (-.f32 eta (*.f32 #s(literal 1/2 binary32) (*.f32 (/.f32 sinTheta_O eta) sinTheta_O)))))) (acos.f32 (/.f32 h #s(approx (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O)))))) (-.f32 eta (*.f32 #s(literal 1/2 binary32) (*.f32 (/.f32 sinTheta_O eta) sinTheta_O)))))))) (+.f32 (/.f32 (PI.f32) #s(literal 2 binary32)) (acos.f32 (/.f32 h #s(approx (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1 (* sinTheta_O sinTheta_O)))))) (-.f32 eta (*.f32 #s(literal 1/2 binary32) (*.f32 (/.f32 sinTheta_O eta) sinTheta_O)))))))))
((/.f32 (*.f32 (exp.f32 (neg.f32 (/.f32 (*.f32 sinTheta_i sinTheta_O) v))) (/.f32 (*.f32 cosTheta_i cosTheta_O) v)) (*.f32 (*.f32 (sinh.f32 (/.f32 #s(literal 1 binary32) v)) #s(literal 2 binary32)) v)))
((/.f32 (*.f32 (exp.f32 (neg.f32 (/.f32 (*.f32 sinTheta_i sinTheta_O) v))) (*.f32 cosTheta_O (/.f32 cosTheta_i v))) (*.f32 (*.f32 (sinh.f32 (/.f32 #s(literal 1 binary32) v)) #s(literal 2 binary32)) v)) #s(approx (/ (* (exp (neg (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1 v)) 2) v)) (*.f32 #s(literal 1/2 binary32) (/.f32 (*.f32 cosTheta_O cosTheta_i) v))) (/.f32 #s(approx (* (exp (neg (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (/.f32 (*.f32 cosTheta_O cosTheta_i) v)) (*.f32 (*.f32 (sinh.f32 (/.f32 #s(literal 1 binary32) v)) #s(literal 2 binary32)) v)) (/.f32 (*.f32 (*.f32 cosTheta_O cosTheta_i) (exp.f32 (*.f32 (neg.f32 sinTheta_i) (/.f32 sinTheta_O v)))) (*.f32 v (*.f32 (*.f32 #s(literal 2 binary32) v) (sinh.f32 (/.f32 #s(literal 1 binary32) v))))) (*.f32 (/.f32 (/.f32 (*.f32 cosTheta_O cosTheta_i) v) v) (/.f32 (exp.f32 (*.f32 (neg.f32 sinTheta_i) (/.f32 sinTheta_O v))) (*.f32 #s(literal 2 binary32) (sinh.f32 (/.f32 #s(literal 1 binary32) v))))))
((*.f32 (/.f32 cosTheta_O (*.f32 (*.f32 #s(literal 2 binary32) v) v)) (/.f32 (*.f32 (pow.f32 (exp.f32 (/.f32 sinTheta_O v)) (neg.f32 sinTheta_i)) cosTheta_i) (sinh.f32 (/.f32 #s(literal 1 binary32) v)))) #s(approx (/ (* (exp (neg (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1 v)) 2) v)) (*.f32 #s(literal 1/2 binary32) (*.f32 (/.f32 cosTheta_O v) cosTheta_i))) (*.f32 (/.f32 (/.f32 (*.f32 cosTheta_O cosTheta_i) v) v) #s(approx (/ (exp (* (neg sinTheta_i) (/ sinTheta_O v))) (* 2 (sinh (/ 1 v)))) (*.f32 (neg.f32 v) (-.f32 (/.f32 (*.f32 #s(literal 1/2 binary32) (+.f32 (*.f32 sinTheta_O sinTheta_i) (/.f32 (-.f32 (*.f32 #s(literal -1/2 binary32) (*.f32 (*.f32 (*.f32 sinTheta_i sinTheta_i) sinTheta_O) sinTheta_O)) #s(literal -1/6 binary32)) v))) v) #s(literal 1/2 binary32))))) (/.f32 #s(approx (* (* cosTheta_O cosTheta_i) (exp (* (neg sinTheta_i) (/ sinTheta_O v)))) (+.f32 (*.f32 (neg.f32 cosTheta_O) (*.f32 cosTheta_i (/.f32 (*.f32 sinTheta_O sinTheta_i) v))) (*.f32 cosTheta_i cosTheta_O))) (*.f32 v (*.f32 (*.f32 #s(literal 2 binary32) v) (sinh.f32 (/.f32 #s(literal 1 binary32) v))))) (/.f32 (*.f32 (*.f32 (exp.f32 (*.f32 (neg.f32 sinTheta_i) (/.f32 sinTheta_O v))) cosTheta_i) (/.f32 cosTheta_O v)) (*.f32 (*.f32 (sinh.f32 (/.f32 #s(literal 1 binary32) v)) #s(literal 2 binary32)) v)))
((*.f32 (/.f32 cosTheta_O (*.f32 (*.f32 #s(literal 2 binary32) v) v)) (*.f32 cosTheta_i (/.f32 (pow.f32 (exp.f32 (/.f32 sinTheta_O v)) (neg.f32 sinTheta_i)) (sinh.f32 (/.f32 #s(literal 1 binary32) v))))) #s(approx (/ (* (exp (neg (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1 v)) 2) v)) (*.f32 (/.f32 cosTheta_i v) (*.f32 cosTheta_O #s(literal 1/2 binary32)))) (/.f32 #s(approx (* (* cosTheta_O cosTheta_i) (exp (* (neg sinTheta_i) (/ sinTheta_O v)))) (+.f32 (*.f32 (neg.f32 cosTheta_O) (*.f32 cosTheta_i (/.f32 (*.f32 sinTheta_O sinTheta_i) v))) (*.f32 cosTheta_i cosTheta_O))) (*.f32 v (*.f32 (*.f32 #s(literal 2 binary32) v) #s(approx (sinh (/ 1 v)) (/.f32 (+.f32 (/.f32 #s(literal 1/6 binary32) (*.f32 v v)) #s(literal 1 binary32)) v))))) (/.f32 (/.f32 #s(approx (* (exp (neg (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (*.f32 (/.f32 cosTheta_i v) cosTheta_O)) (*.f32 #s(literal 2 binary32) (sinh.f32 (/.f32 #s(literal 1 binary32) v)))) v) #s(approx (/ (* (* (exp (* (neg sinTheta_i) (/ sinTheta_O v))) cosTheta_i) (/ cosTheta_O v)) (* (* (sinh (/ 1 v)) 2) v)) (/.f32 (/.f32 (*.f32 (/.f32 cosTheta_O v) cosTheta_i) v) (-.f32 (exp.f32 (/.f32 #s(literal 1 binary32) v)) (exp.f32 (/.f32 #s(literal -1 binary32) v))))))
((exp.f32 (+.f32 (+.f32 (-.f32 (-.f32 (/.f32 (*.f32 cosTheta_i cosTheta_O) v) (/.f32 (*.f32 sinTheta_i sinTheta_O) v)) (/.f32 #s(literal 1 binary32) v)) #s(literal 6931/10000 binary32)) (log.f32 (/.f32 #s(literal 1 binary32) (*.f32 #s(literal 2 binary32) v))))))
(#s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (/.f32 #s(literal 1/2 binary32) v) (exp.f32 (-.f32 #s(literal 6931/10000 binary32) (/.f32 (-.f32 (*.f32 sinTheta_O sinTheta_i) #s(literal -1 binary32)) v))))) #s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (*.f32 (exp.f32 #s(literal 6931/10000 binary32)) #s(literal 1/2 binary32)) (/.f32 #s(literal 1 binary32) v))) (exp.f32 (+.f32 (-.f32 #s(literal 6931/10000 binary32) (log.f32 (*.f32 #s(literal 2 binary32) v))) (/.f32 (-.f32 (-.f32 (*.f32 cosTheta_O cosTheta_i) (*.f32 sinTheta_O sinTheta_i)) #s(literal 1 binary32)) v))) #s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (*.f32 (/.f32 #s(literal 1/2 binary32) v) (exp.f32 #s(literal 6931/10000 binary32))) (exp.f32 (/.f32 (-.f32 (*.f32 cosTheta_O cosTheta_i) #s(literal 1 binary32)) v)))) (exp.f32 (+.f32 #s(approx (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (/.f32 (-.f32 (-.f32 (*.f32 cosTheta_O cosTheta_i) (*.f32 #s(literal -6931/10000 binary32) v)) (-.f32 (*.f32 sinTheta_O sinTheta_i) #s(literal -1 binary32))) v)) (log.f32 (/.f32 #s(literal 1 binary32) (*.f32 #s(literal 2 binary32) v))))))
(#s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (/.f32 #s(literal 1/2 binary32) v) (exp.f32 (-.f32 #s(literal 6931/10000 binary32) #s(approx (/ (- (* sinTheta_O sinTheta_i) -1) v) (/.f32 #s(literal 1 binary32) v)))))) #s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (/.f32 #s(literal 1/2 binary32) v) (exp.f32 #s(approx (- 6931/10000 (/ (- (* sinTheta_O sinTheta_i) -1) v)) #s(literal 6931/10000 binary32))))) (exp.f32 #s(approx (+ (- 6931/10000 (log (* 2 v))) (/ (- (- (* cosTheta_O cosTheta_i) (* sinTheta_O sinTheta_i)) 1) v)) (/.f32 (-.f32 (-.f32 (*.f32 cosTheta_O cosTheta_i) #s(literal 1 binary32)) (*.f32 sinTheta_O sinTheta_i)) v))) #s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (/.f32 (*.f32 (exp.f32 #s(literal 6931/10000 binary32)) #s(literal 1/2 binary32)) (*.f32 (exp.f32 (/.f32 (-.f32 (*.f32 sinTheta_O sinTheta_i) #s(literal -1 binary32)) v)) v))) (exp.f32 #s(approx (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v)))) (*.f32 (-.f32 (+.f32 (/.f32 (-.f32 (log.f32 (/.f32 #s(literal 1/2 binary32) v)) #s(literal -6931/10000 binary32)) sinTheta_O) (*.f32 (/.f32 cosTheta_i sinTheta_O) (/.f32 cosTheta_O v))) (/.f32 (+.f32 sinTheta_i (/.f32 #s(literal 1 binary32) sinTheta_O)) v)) sinTheta_O))))
(#s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (*.f32 (pow.f32 (*.f32 #s(literal 2 binary32) v) #s(literal -1/2 binary32)) (pow.f32 (*.f32 #s(literal 2 binary32) v) #s(literal -1/2 binary32))) (exp.f32 (-.f32 #s(literal 6931/10000 binary32) #s(approx (/ (- (* sinTheta_O sinTheta_i) -1) v) (/.f32 #s(literal 1 binary32) v)))))) #s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (/.f32 (*.f32 (exp.f32 #s(approx (- 6931/10000 (/ (- (* sinTheta_O sinTheta_i) -1) v)) #s(literal 6931/10000 binary32))) #s(literal 1/2 binary32)) v)) #s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (/.f32 #s(literal 1/2 binary32) v) (exp.f32 #s(approx (- 6931/10000 (/ (- (* sinTheta_O sinTheta_i) -1) v)) (*.f32 (-.f32 (/.f32 #s(literal 6931/10000 binary32) sinTheta_i) (/.f32 (+.f32 (/.f32 #s(literal 1 binary32) sinTheta_i) sinTheta_O) v)) sinTheta_i))))) #s(approx (exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1 v)) 6931/10000) (log (/ 1 (* 2 v))))) (*.f32 (/.f32 #s(literal 1/2 binary32) v) (/.f32 (exp.f32 #s(literal 6931/10000 binary32)) (exp.f32 #s(approx (/ (- (* sinTheta_O sinTheta_i) -1) v) (/.f32 #s(literal 1 binary32) v)))))) (*.f32 (exp.f32 (/.f32 (-.f32 (-.f32 (*.f32 cosTheta_O cosTheta_i) (*.f32 sinTheta_O sinTheta_i)) #s(literal 1 binary32)) v)) (exp.f32 (-.f32 #s(literal 6931/10000 binary32) (log.f32 (*.f32 #s(literal 2 binary32) v))))))
((fmax.f64 (-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (*.f64 x #s(literal 30 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 y #s(literal 30 binary64)) #s(literal 2 binary64))) (pow.f64 (*.f64 z #s(literal 30 binary64)) #s(literal 2 binary64)))) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))))
((fmax.f64 (-.f64 (sqrt.f64 #s(approx (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2)) (*.f64 (+.f64 (*.f64 x x) (*.f64 z z)) #s(literal 900 binary64)))) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal -30 binary64) x)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal 30 binary64) x)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))) (fmax.f64 (-.f64 #s(approx (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) (*.f64 #s(literal -30 binary64) x)) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))) (fmax.f64 (-.f64 #s(approx (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) (*.f64 #s(literal 30 binary64) y)) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))))
((fmax.f64 (-.f64 (sqrt.f64 #s(approx (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2)) (*.f64 (+.f64 (*.f64 x x) (*.f64 z z)) #s(literal 900 binary64)))) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) #s(literal 1 binary64))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal -30 binary64) x)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) #s(literal 1 binary64))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal 30 binary64) x)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) #s(approx (cos (* z 30)) (+.f64 (*.f64 #s(literal -450 binary64) (*.f64 z z)) #s(literal 1 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal 30 binary64) x)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 33750 binary64) (*.f64 x x)) #s(literal 450 binary64)) x) x) #s(literal 1 binary64)))))) #s(literal 1/5 binary64))) (fmax.f64 (-.f64 #s(approx (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) (*.f64 #s(literal -30 binary64) y)) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) (cos.f64 (*.f64 x #s(literal 30 binary64)))))) #s(literal 1/5 binary64))))
((fmax.f64 (-.f64 (sqrt.f64 #s(approx (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2)) (*.f64 (+.f64 (*.f64 x x) (*.f64 z z)) #s(literal 900 binary64)))) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) #s(approx (cos (* z 30)) #s(literal 1 binary64)))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) #s(literal 1 binary64))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal -30 binary64) x)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) #s(approx (cos (* z 30)) #s(literal 1 binary64)))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) #s(literal 1 binary64))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal 30 binary64) x)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) #s(approx (cos (* z 30)) #s(literal 1 binary64)))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 33750 binary64) (*.f64 x x)) #s(literal 450 binary64)) x) x) #s(literal 1 binary64)))))) #s(literal 1/5 binary64))) (fmax.f64 #s(approx (- (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) 25) (*.f64 #s(literal -30 binary64) z)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) #s(literal 1 binary64))))) #s(literal 1/5 binary64))) (fmax.f64 (-.f64 #s(approx (sqrt (+ (+ (pow (* x 30) 2) (pow (* y 30) 2)) (pow (* z 30) 2))) (*.f64 z #s(literal 30 binary64))) #s(literal 25 binary64)) (-.f64 (fabs.f64 (+.f64 (+.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 30 binary64))) (cos.f64 (*.f64 y #s(literal 30 binary64)))) (*.f64 (sin.f64 (*.f64 y #s(literal 30 binary64))) (cos.f64 (*.f64 z #s(literal 30 binary64))))) (*.f64 (sin.f64 (*.f64 z #s(literal 30 binary64))) #s(approx (cos (* x 30)) #s(literal 1 binary64))))) #s(literal 1/5 binary64))))
((+.f64 (*.f64 x (+.f64 y z)) (*.f64 z #s(literal 5 binary64))))
((+.f64 (*.f64 z (+.f64 x #s(literal 5 binary64))) (*.f64 y x)) #s(approx (+ (* x (+ y z)) (* z 5)) (*.f64 #s(literal 5 binary64) z)) #s(approx (+ (* x (+ y z)) (* z 5)) (*.f64 (+.f64 #s(literal 5 binary64) x) z)) (+.f64 (*.f64 x #s(approx (+ y z) y)) (*.f64 z #s(literal 5 binary64))) (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 z y) x) #s(literal 3 binary64)) (*.f64 #s(literal -125 binary64) (pow.f64 z #s(literal 3 binary64)))) (-.f64 (pow.f64 (*.f64 (+.f64 z y) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -5 binary64) z) (-.f64 (*.f64 #s(literal 5 binary64) z) (*.f64 (+.f64 z y) x))))))
(#s(approx (/ (- (pow (* (+ z y) x) 3) (* -125 (pow z 3))) (- (pow (* (+ z y) x) 2) (* (* -5 z) (- (* 5 z) (* (+ z y) x))))) (*.f64 (+.f64 (+.f64 (*.f64 (/.f64 z x) #s(literal 5 binary64)) z) y) x)) #s(approx (/ (- (pow (* (+ z y) x) 3) (* -125 (pow z 3))) (- (pow (* (+ z y) x) 2) (* (* -5 z) (- (* 5 z) (* (+ z y) x))))) (*.f64 y x)) #s(approx (/ (- (pow (* (+ z y) x) 3) (* -125 (pow z 3))) (- (pow (* (+ z y) x) 2) (* (* -5 z) (- (* 5 z) (* (+ z y) x))))) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 x #s(approx (+ y z) z)) (*.f64 z #s(literal 5 binary64))) (+.f64 (*.f64 z #s(approx (+ 5 x) x)) (*.f64 y x)))
(#s(approx (/ (- (pow (* (+ z y) x) 3) (* -125 (pow z 3))) (- (pow (* (+ z y) x) 2) (* (* -5 z) (- (* 5 z) (* (+ z y) x))))) (*.f64 #s(approx (+ y z) z) x)) #s(approx (/ (- (pow (* (+ z y) x) 3) (* -125 (pow z 3))) (- (pow (* (+ z y) x) 2) (* (* -5 z) (- (* 5 z) (* (+ z y) x))))) (*.f64 #s(approx (+ (+ (* (/ z x) 5) z) y) (*.f64 (/.f64 z x) #s(literal 5 binary64))) x)) #s(approx (/ (- (pow (* (+ z y) x) 3) (* -125 (pow z 3))) (- (pow (* (+ z y) x) 2) (* (* -5 z) (- (* 5 z) (* (+ z y) x))))) (*.f64 (+.f64 (+.f64 (*.f64 z (/.f64 #s(literal 5 binary64) x)) z) y) x)))
((+.f64 (*.f64 x (+.f64 (+.f64 (+.f64 (+.f64 y z) z) y) t)) (*.f64 y #s(literal 5 binary64))))
(#s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) (+.f64 z y)) (-.f64 (*.f64 #s(literal -5 binary64) (/.f64 y x)) t)) x)) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 #s(literal 5 binary64) y)) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 (*.f64 x z) #s(literal 2 binary64))) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) z) t) x)) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 (-.f64 t (*.f64 #s(literal -2 binary64) (+.f64 z y))) x)))
(#s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 (-.f64 (*.f64 (-.f64 (/.f64 (+.f64 (*.f64 #s(literal 2 binary64) y) t) z) #s(literal -2 binary64)) x) (*.f64 (/.f64 y z) #s(literal -5 binary64))) z)) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 #s(approx (- (* 2 (+ z y)) (- (* -5 (/ y x)) t)) t) x)) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 #s(approx (- t (* -2 (+ z y))) (*.f64 (+.f64 z y) #s(literal 2 binary64))) x)) (+.f64 (*.f64 x #s(approx (+ (+ (+ (+ y z) z) y) t) (*.f64 #s(literal 2 binary64) z))) (*.f64 y #s(literal 5 binary64))) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 #s(approx (- (* 2 (+ z y)) (- (* -5 (/ y x)) t)) (*.f64 (+.f64 (/.f64 #s(literal 5 binary64) x) #s(literal 2 binary64)) y)) x)))
(#s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) (+.f64 z y)) #s(approx (- (* -5 (/ y x)) t) (*.f64 (-.f64 (*.f64 (/.f64 (/.f64 y t) x) #s(literal -5 binary64)) #s(literal 1 binary64)) t))) x)) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 #s(approx (- (* 2 (+ z y)) (- (* -5 (/ y x)) t)) #s(approx (* (+ (/ 5 x) 2) y) (*.f64 #s(literal 2 binary64) y))) x)) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 (-.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -5 binary64)) y)) (+.f64 (*.f64 x #s(approx (+ (+ (+ (+ y z) z) y) t) (+.f64 z z))) (*.f64 y #s(literal 5 binary64))) #s(approx (+ (* x (+ (+ (+ (+ y z) z) y) t)) (* y 5)) (*.f64 #s(approx (- (* 2 (+ z y)) (- (* -5 (/ y x)) t)) (*.f64 (/.f64 y x) #s(literal 5 binary64))) x)))
((+.f64 (+.f64 x y) x))
(#s(approx (+ (+ x y) x) y) (+.f64 #s(approx (+ x y) x) x) (+.f64 #s(approx (+ x y) y) x) (+.f64 (*.f64 #s(literal 2 binary64) x) y))
((+.f64 (+.f64 x x) y))
((+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x))
((+.f64 (+.f64 (+.f64 (+.f64 (+.f64 y x) x) y) z) x) #s(approx (+ (+ (+ (+ (+ x y) y) x) z) x) z) #s(approx (+ (+ (+ (+ (+ x y) y) x) z) x) (+.f64 (*.f64 #s(literal 2 binary64) y) z)) #s(approx (+ (+ (+ (+ (+ x y) y) x) z) x) (*.f64 (-.f64 (/.f64 (+.f64 (*.f64 #s(literal 3 binary64) x) z) y) #s(literal -2 binary64)) y)) (/.f64 (-.f64 (pow.f64 (+.f64 z (*.f64 #s(literal 2 binary64) (+.f64 y x))) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (+.f64 z (*.f64 #s(literal 2 binary64) (+.f64 y x))) x)))
((+.f64 #s(approx (+ (+ (+ (+ y x) x) y) z) (*.f64 (+.f64 (/.f64 (*.f64 #s(literal 2 binary64) (+.f64 x y)) z) #s(literal 1 binary64)) z)) x) (+.f64 #s(approx (+ (+ (+ (+ y x) x) y) z) z) x) #s(approx (/ (- (pow (+ z (* 2 (+ y x))) 2) (* x x)) (- (+ z (* 2 (+ y x))) x)) (*.f64 #s(literal 3 binary64) x)) #s(approx (+ (+ (+ (+ (+ x y) y) x) z) x) (+.f64 (*.f64 #s(literal 3 binary64) x) z)) (+.f64 #s(approx (+ (+ (+ (+ y x) x) y) z) (*.f64 #s(literal 2 binary64) (+.f64 x y))) x))
(#s(approx (+ (+ (+ (+ (+ x y) y) x) z) x) (*.f64 (-.f64 #s(approx (/ (+ (* 3 x) z) y) (*.f64 (/.f64 (-.f64 (/.f64 z x) #s(literal -3 binary64)) y) x)) #s(literal -2 binary64)) y)) #s(approx (/ (- (pow (+ z (* 2 (+ y x))) 2) (* x x)) (- (+ z (* 2 (+ y x))) x)) (*.f64 #s(literal 2 binary64) y)) (+.f64 #s(approx (+ (+ (+ (+ y x) x) y) z) (*.f64 #s(literal 2 binary64) #s(approx (+ x y) y))) x) #s(approx (+ (+ (+ (+ (+ x y) y) x) z) x) (*.f64 #s(approx (- (/ (+ (* 3 x) z) y) -2) (*.f64 (/.f64 x y) #s(literal 3 binary64))) y)) #s(approx (+ (+ (+ (+ (+ x y) y) x) z) x) #s(approx (+ (* 3 x) z) (*.f64 (neg.f64 z) (-.f64 (*.f64 #s(literal -3 binary64) (/.f64 x z)) #s(literal 1 binary64))))))
((+.f64 x (*.f64 (-.f64 y x) (/.f64 z t))))
((+.f64 x (/.f64 (*.f64 z (-.f64 y x)) t)) #s(approx (+ x (* (- y x) (/ z t))) x) #s(approx (+ x (* (- y x) (/ z t))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 z t)) x)) (+.f64 x (*.f64 #s(approx (- y x) y) (/.f64 z t))) (+.f64 x (*.f64 (*.f64 (+.f64 y x) (-.f64 y x)) (/.f64 z (*.f64 (+.f64 y x) t)))))
((+.f64 x (/.f64 (*.f64 (+.f64 y x) (*.f64 (-.f64 y x) z)) (*.f64 (+.f64 y x) t))) #s(approx (+ x (/ (* z (- y x)) t)) (*.f64 (/.f64 z t) y)) #s(approx (+ x (* (- y x) (/ z t))) (*.f64 #s(approx (- 1 (/ z t)) (/.f64 (neg.f64 z) t)) x)) #s(approx (+ x (/ (* z (- y x)) t)) (/.f64 (*.f64 (-.f64 y x) z) t)) (+.f64 x (*.f64 #s(approx (* (+ y x) (- y x)) (*.f64 y y)) (/.f64 z (*.f64 (+.f64 y x) t)))))
((+.f64 x (/.f64 (*.f64 (+.f64 y x) (*.f64 (-.f64 y x) z)) (*.f64 #s(approx (+ y x) (*.f64 (+.f64 (/.f64 y x) #s(literal 1 binary64)) x)) t))) #s(approx (+ x (/ (* z (- y x)) t)) (*.f64 z (/.f64 y t))) #s(approx (+ x (* (- y x) (/ z t))) #s(approx (* (- 1 (/ z t)) x) (*.f64 (/.f64 (neg.f64 x) t) z))) (+.f64 x (/.f64 (*.f64 z #s(approx (- y x) (neg.f64 x))) t)) (+.f64 x (/.f64 #s(approx (* (+ y x) (* (- y x) z)) (*.f64 (*.f64 (neg.f64 x) x) z)) (*.f64 (+.f64 y x) t))))
((+.f64 x (/.f64 (*.f64 y (-.f64 z t)) (-.f64 a t))))
((+.f64 (*.f64 (/.f64 y (-.f64 a t)) (-.f64 z t)) x) #s(approx (+ x (/ (* y (- z t)) (- a t))) x) (+.f64 x #s(approx (/ (* y (- z t)) (- a t)) (/.f64 (*.f64 z y) a))) #s(approx (+ x (/ (* y (- z t)) (- a t))) (-.f64 x (/.f64 (*.f64 (-.f64 z t) y) t))) (+.f64 x #s(approx (/ (* y (- z t)) (- a t)) (-.f64 y (/.f64 (*.f64 y (-.f64 z a)) t)))))
((+.f64 (*.f64 (*.f64 (/.f64 y (+.f64 t a)) (/.f64 (-.f64 z t) (-.f64 a t))) (+.f64 t a)) x) (+.f64 #s(approx (* (/ y (- a t)) (- z t)) y) x) #s(approx (+ x (/ (* y (- z t)) (- a t))) (-.f64 x (/.f64 #s(approx (* (- z t) y) (*.f64 z y)) t))) (+.f64 x #s(approx (/ (* y (- z t)) (- a t)) (*.f64 (/.f64 y a) z))) (+.f64 x #s(approx (/ (* y (- z t)) (- a t)) (-.f64 y (/.f64 #s(approx (* y (- z a)) (*.f64 z y)) t)))))
(#s(approx (+ (* (/ y (- a t)) (- z t)) x) (*.f64 (+.f64 (*.f64 (/.f64 y x) (/.f64 (-.f64 z t) (-.f64 a t))) #s(literal 1 binary64)) x)) #s(approx (+ x (/ (* y (- z t)) (- a t))) #s(approx (- x (/ (* (- z t) y) t)) (*.f64 (neg.f64 y) (/.f64 z t)))) #s(approx (+ x (/ (* y (- z t)) (- a t))) #s(approx (- x (/ (* (- z t) y) t)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 z t)) y))) (+.f64 x #s(approx (/ (* y (- z t)) (- a t)) (*.f64 y (/.f64 z a)))) #s(approx (+ (* (/ y (- a t)) (- z t)) x) (*.f64 (/.f64 y (-.f64 a t)) (-.f64 z t))))
((+.f64 x (/.f64 (*.f64 y (-.f64 z t)) (-.f64 z a))))
((+.f64 x (*.f64 (/.f64 (-.f64 z t) (-.f64 z a)) y)) #s(approx (+ x (/ (* y (- z t)) (- z a))) x) #s(approx (+ x (/ (* y (- z t)) (- z a))) (*.f64 (/.f64 y (-.f64 z a)) (neg.f64 t))) (+.f64 x #s(approx (/ (* y (- z t)) (- z a)) (*.f64 (/.f64 z (-.f64 z a)) y))) #s(approx (+ x (/ (* y (- z t)) (- z a))) (*.f64 (+.f64 (/.f64 (-.f64 z t) (-.f64 z a)) (/.f64 x y)) y)))
((+.f64 x (*.f64 (+.f64 a z) (*.f64 (/.f64 y (+.f64 a z)) (/.f64 (-.f64 z t) (-.f64 z a))))) (+.f64 x #s(approx (/ (* y (- z t)) (- z a)) #s(approx (* (/ z (- z a)) y) y))) (+.f64 x (*.f64 #s(approx (/ (- z t) (- z a)) (/.f64 t a)) y)) (+.f64 x #s(approx (/ (* y (- z t)) (- z a)) (*.f64 (/.f64 z #s(approx (- z a) (neg.f64 a))) y))) (+.f64 x (/.f64 (*.f64 y (-.f64 z t)) #s(approx (- z a) z))))
(#s(approx (+ x (/ (* y (- z t)) (- z a))) (*.f64 (neg.f64 x) (-.f64 (*.f64 (+.f64 (neg.f64 z) t) (/.f64 y (*.f64 (-.f64 z a) x))) #s(literal 1 binary64)))) #s(approx (+ x (/ (* y (- z t)) (- z a))) #s(approx (* (/ y (- z a)) (neg t)) (/.f64 (*.f64 y t) a))) #s(approx (+ x (/ (* y (- z t)) (- z a))) (*.f64 #s(approx (+ (/ (- z t) (- z a)) (/ x y)) (/.f64 (neg.f64 t) (-.f64 z a))) y)) #s(approx (+ x (/ (* y (- z t)) (- z a))) #s(approx (* (+ (/ (- z t) (- z a)) (/ x y)) y) (/.f64 (*.f64 (-.f64 z t) y) (-.f64 z a)))) (+.f64 x (*.f64 (+.f64 a z) #s(approx (* (/ y (+ a z)) (/ (- z t) (- z a))) (*.f64 (/.f64 (-.f64 z t) z) (/.f64 y z))))))
((-.f64 (+.f64 x y) (/.f64 (*.f64 (-.f64 z t) y) (-.f64 a t))))
(#s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) (+.f64 (*.f64 (-.f64 (+.f64 (/.f64 t (-.f64 a t)) #s(literal 1 binary64)) (/.f64 z (-.f64 a t))) y) x)) #s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) x) (-.f64 (+.f64 x y) #s(approx (/ (* (- z t) y) (- a t)) y)) #s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) (-.f64 x (/.f64 (*.f64 y (-.f64 a z)) t))) (-.f64 (+.f64 x y) #s(approx (/ (* (- z t) y) (- a t)) (*.f64 (/.f64 z (-.f64 a t)) y))))
(#s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) (+.f64 (*.f64 #s(approx (- (+ (/ t (- a t)) 1) (/ z (- a t))) (*.f64 (neg.f64 z) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 t (-.f64 a t))) (neg.f64 z)) (/.f64 #s(literal 1 binary64) (-.f64 a t))))) y) x)) #s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) (+.f64 #s(approx (* (- (+ (/ t (- a t)) 1) (/ z (- a t))) y) y) x)) #s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) #s(approx (- x (/ (* y (- a z)) t)) (*.f64 (neg.f64 a) (/.f64 y t)))) #s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) (*.f64 (neg.f64 y) (/.f64 z (-.f64 a t)))) (-.f64 (+.f64 x y) #s(approx (/ (* (- z t) y) (- a t)) (/.f64 (*.f64 z y) a))))
(#s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) (+.f64 (*.f64 #s(approx (- (+ (/ t (- a t)) 1) (/ z (- a t))) (/.f64 z t)) y) x)) (-.f64 #s(approx (+ x y) x) #s(approx (/ (* (- z t) y) (- a t)) y)) #s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) #s(approx (- x (/ (* y (- a z)) t)) (/.f64 (*.f64 (neg.f64 a) y) t))) (-.f64 #s(approx (+ x y) y) #s(approx (/ (* (- z t) y) (- a t)) (/.f64 (*.f64 z y) a))) #s(approx (- (+ x y) (/ (* (- z t) y) (- a t))) (+.f64 (*.f64 #s(approx (- (+ (/ t (- a t)) 1) (/ z (- a t))) (-.f64 #s(literal 1 binary64) (/.f64 z a))) y) x)))
((+.f64 x (/.f64 (*.f64 (-.f64 y z) t) (-.f64 a z))))
((+.f64 (*.f64 (/.f64 t (-.f64 a z)) (-.f64 y z)) x) #s(approx (+ x (/ (* (- y z) t) (- a z))) x) (+.f64 x #s(approx (/ (* (- y z) t) (- a z)) (/.f64 (*.f64 t y) a))) (+.f64 x (/.f64 (*.f64 #s(approx (- y z) y) t) (-.f64 a z))) #s(approx (+ x (/ (* (- y z) t) (- a z))) (+.f64 (*.f64 (*.f64 x (/.f64 t x)) (/.f64 (-.f64 y z) (-.f64 a z))) x)))
(#s(approx (+ x (/ (* (- y z) t) (- a z))) (*.f64 (neg.f64 x) (-.f64 (*.f64 (-.f64 z y) (/.f64 t (*.f64 (-.f64 a z) x))) #s(literal 1 binary64)))) (+.f64 #s(approx (* (/ t (- a z)) (- y z)) t) x) (+.f64 x (/.f64 (*.f64 #s(approx (- y z) y) t) #s(approx (- a z) (neg.f64 z)))) #s(approx (+ x (/ (* (- y z) t) (- a z))) (+.f64 (/.f64 (*.f64 (-.f64 y z) (*.f64 x t)) (*.f64 (-.f64 a z) x)) x)) #s(approx (+ x (/ (* (- y z) t) (- a z))) (+.f64 (*.f64 (*.f64 (/.f64 (-.f64 y z) x) (/.f64 t (-.f64 a z))) x) x)))
(#s(approx (+ (* (/ t (- a z)) (- y z)) x) (*.f64 (+.f64 (/.f64 x t) (/.f64 (-.f64 y z) (-.f64 a z))) t)) #s(approx (+ x (/ (* (- y z) t) (- a z))) (*.f64 (/.f64 y (-.f64 a z)) t)) (+.f64 x #s(approx (/ (* (- y z) t) (- a z)) (*.f64 (/.f64 y a) t))) (+.f64 (*.f64 #s(approx (- y z) y) (/.f64 t (-.f64 a z))) x) #s(approx (+ x (/ (* (- y z) t) (- a z))) (+.f64 (*.f64 (*.f64 t (/.f64 (-.f64 y z) (*.f64 (-.f64 a z) x))) x) x)))
((+.f64 x (*.f64 y (/.f64 (-.f64 z t) (-.f64 a t)))))
((+.f64 (*.f64 (-.f64 z t) (/.f64 y (-.f64 a t))) x) #s(approx (+ x (* y (/ (- z t) (- a t)))) x) (+.f64 x (*.f64 y #s(approx (/ (- z t) (- a t)) (/.f64 z a)))) (+.f64 x (*.f64 y (/.f64 (-.f64 z t) #s(approx (- a t) a)))) (+.f64 x (*.f64 (+.f64 a t) (*.f64 (/.f64 y (+.f64 a t)) (/.f64 (-.f64 z t) (-.f64 a t))))))
(#s(approx (+ (* (- z t) (/ y (- a t))) x) (*.f64 (neg.f64 x) (-.f64 (*.f64 (/.f64 (neg.f64 y) x) (/.f64 (-.f64 z t) (-.f64 a t))) #s(literal 1 binary64)))) (+.f64 #s(approx (* (- z t) (/ y (- a t))) y) x) (+.f64 x (*.f64 y (/.f64 #s(approx (- z t) (neg.f64 t)) #s(approx (- a t) a)))) (+.f64 x (*.f64 y #s(approx (/ (- z t) (- a t)) (-.f64 #s(literal 1 binary64) (/.f64 z t))))) (+.f64 x (*.f64 y (/.f64 (*.f64 (+.f64 t z) (-.f64 z t)) (*.f64 (+.f64 t z) #s(approx (- a t) a))))))
((+.f64 x (/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 z (-.f64 a t)) #s(literal 2 binary64)) (pow.f64 (/.f64 t (-.f64 a t)) #s(literal 2 binary64))) y) (/.f64 (+.f64 t z) (-.f64 a t)))) #s(approx (+ (* (- z t) (/ y (- a t))) x) (*.f64 y (/.f64 z (-.f64 a t)))) (+.f64 x (*.f64 y #s(approx (/ (- z t) (- a t)) #s(approx (- 1 (/ z t)) (/.f64 z (neg.f64 t)))))) #s(approx (+ (* (- z t) (/ y (- a t))) x) (-.f64 x (/.f64 (*.f64 (-.f64 z t) y) t))) (+.f64 #s(approx (* (- z t) (/ y (- a t))) (-.f64 y (/.f64 (*.f64 y (-.f64 z a)) t))) x))
((+.f64 x (*.f64 y (/.f64 (-.f64 z t) (-.f64 z a)))))
(#s(approx (+ x (* y (/ (- z t) (- z a)))) (*.f64 (+.f64 (/.f64 x y) (/.f64 (-.f64 z t) (-.f64 z a))) y)) #s(approx (+ x (* y (/ (- z t) (- z a)))) x) (+.f64 x (*.f64 y #s(approx (/ (- z t) (- z a)) (/.f64 t a)))) #s(approx (+ x (* y (/ (- z t) (- z a)))) (-.f64 x (/.f64 (*.f64 (-.f64 z t) y) a))) (+.f64 x (/.f64 (*.f64 (-.f64 z t) y) (-.f64 z a))))
((+.f64 x (*.f64 (+.f64 a z) (*.f64 (/.f64 y (+.f64 a z)) (/.f64 (-.f64 z t) (-.f64 z a))))) (+.f64 x #s(approx (* y (/ (- z t) (- z a))) y)) #s(approx (+ x (* y (/ (- z t) (- z a)))) (-.f64 x (/.f64 (*.f64 #s(approx (- z t) z) y) a))) #s(approx (+ x (* y (/ (- z t) (- z a)))) (*.f64 #s(approx (+ (/ x y) (/ (- z t) (- z a))) (/.f64 (-.f64 z t) (-.f64 z a))) y)) #s(approx (+ x (* y (/ (- z t) (- z a)))) (*.f64 #s(approx (+ (/ x y) (/ (- z t) (- z a))) (+.f64 (/.f64 t a) (/.f64 x y))) y)))
(#s(approx (+ x (* (+ a z) (* (/ y (+ a z)) (/ (- z t) (- z a))))) (*.f64 (+.f64 (*.f64 (/.f64 (-.f64 z t) x) (/.f64 y (-.f64 z a))) #s(literal 1 binary64)) x)) #s(approx (+ x (* y (/ (- z t) (- z a)))) (*.f64 #s(approx (+ (/ x y) (/ (- z t) (- z a))) #s(approx (/ (- z t) (- z a)) #s(literal 1 binary64))) y)) #s(approx (+ x (* y (/ (- z t) (- z a)))) #s(approx (- x (/ (* (- z t) y) a)) (*.f64 (neg.f64 y) (/.f64 z a)))) #s(approx (+ x (* y (/ (- z t) (- z a)))) (*.f64 #s(approx (+ (/ x y) (/ (- z t) (- z a))) #s(approx (/ (- z t) (- z a)) (/.f64 (-.f64 z t) (neg.f64 a)))) y)) #s(approx (+ x (* y (/ (- z t) (- z a)))) (*.f64 #s(approx (+ (/ x y) (/ (- z t) (- z a))) (/.f64 (*.f64 (+.f64 t z) (-.f64 z t)) (*.f64 (+.f64 t z) (-.f64 z a)))) y)))
((-.f64 x (/.f64 (-.f64 y z) (/.f64 (+.f64 (-.f64 t z) #s(literal 1 binary64)) a))))
((-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) (*.f64 (/.f64 y (-.f64 (+.f64 #s(literal 1 binary64) t) z)) a))) #s(approx (- x (/ (- y z) (/ (+ (- t z) 1) a))) x) (-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) (/.f64 (*.f64 (-.f64 y z) a) t))) (-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) (*.f64 (-.f64 y z) (/.f64 a (-.f64 #s(literal 1 binary64) z))))) (-.f64 x (/.f64 (-.f64 y z) (/.f64 #s(approx (+ (- t z) 1) t) a))))
(#s(approx (- x (/ (- y z) (/ (+ (- t z) 1) a))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 y z) x) (/.f64 a (-.f64 (+.f64 #s(literal 1 binary64) t) z)))) x)) (-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) #s(approx (* (- y z) (/ a (- 1 z))) a))) (-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) #s(approx (* (/ y (- (+ 1 t) z)) a) (/.f64 (*.f64 (neg.f64 a) y) z)))) (-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) (*.f64 (/.f64 y (+.f64 #s(literal 1 binary64) t)) a))) (-.f64 x (/.f64 #s(approx (- y z) y) (/.f64 #s(approx (+ (- t z) 1) t) a))))
(#s(approx (- x (/ (- y z) (/ (+ (- t z) 1) a))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 y z) (/.f64 a (*.f64 (-.f64 (-.f64 t #s(literal -1 binary64)) z) x)))) x)) (-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) (*.f64 #s(approx (/ y (+ 1 t)) y) a))) (-.f64 x (/.f64 (*.f64 #s(approx (- y z) y) a) #s(approx (+ (- t z) 1) t))) (-.f64 x #s(approx (/ (- y z) (/ (+ (- t z) 1) a)) (*.f64 (/.f64 a t) (-.f64 y z)))) #s(approx (- x (/ (- y z) (/ (+ (- t z) 1) a))) (*.f64 (neg.f64 (-.f64 y z)) (/.f64 a (-.f64 (+.f64 #s(literal 1 binary64) t) z)))))
((+.f64 x (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) y))))
(#s(approx (+ x (* (- 1 x) (- 1 y))) (-.f64 (-.f64 (*.f64 y x) y) #s(literal -1 binary64))) #s(approx (+ x (* (- 1 x) (- 1 y))) #s(literal 1 binary64)) #s(approx (+ x (* (- 1 x) (- 1 y))) (-.f64 #s(literal 1 binary64) y)) #s(approx (+ x (* (- 1 x) (- 1 y))) (*.f64 y x)) #s(approx (+ x (* (- 1 x) (- 1 y))) (-.f64 (*.f64 y x) y)))
(#s(approx (+ x (* (- 1 x) (- 1 y))) #s(approx (- (* y x) y) (neg.f64 y))) #s(approx (+ x (* (- 1 x) (- 1 y))) (*.f64 (-.f64 x #s(literal 1 binary64)) y)) #s(approx (+ x (* (- 1 x) (- 1 y))) (-.f64 #s(approx (- (* y x) y) (*.f64 y x)) #s(literal -1 binary64))))
((-.f64 (+.f64 x y) x))
(#s(approx (- (+ x y) x) y))
((+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) #s(literal 2 binary64))))
((+.f64 x #s(approx (/ (fabs (- y x)) 2) (*.f64 #s(literal 1/2 binary64) (fabs.f64 (-.f64 x y))))) #s(approx (+ x (/ (fabs (- y x)) 2)) x) #s(approx (+ x (/ (fabs (- y x)) 2)) (*.f64 #s(literal 1/2 binary64) (fabs.f64 (-.f64 x y)))) (/.f64 (-.f64 (/.f64 (pow.f64 (-.f64 y x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (/.f64 (fabs.f64 (-.f64 x y)) #s(literal 2 binary64)) x)) (+.f64 x (/.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 y #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (*.f64 x (+.f64 y x)) (*.f64 y y)))) #s(literal 2 binary64))))
((+.f64 x #s(approx (/ (fabs (- y x)) 2) (*.f64 #s(literal 1/2 binary64) (fabs.f64 #s(approx (- x y) (*.f64 (-.f64 (/.f64 x y) #s(literal 1 binary64)) y)))))) #s(approx (/ (- (/ (pow (- y x) 2) 4) (* x x)) (- (/ (fabs (- x y)) 2) x)) (*.f64 #s(literal 3/4 binary64) x)) #s(approx (+ x (/ (fabs (- y x)) 2)) (*.f64 #s(literal 1/2 binary64) (fabs.f64 #s(approx (- x y) (neg.f64 y))))) (+.f64 x #s(approx (/ (fabs (- y x)) 2) (*.f64 #s(literal 1/2 binary64) (fabs.f64 #s(approx (- x y) (neg.f64 y)))))) (/.f64 #s(approx (- (/ (pow (- y x) 2) 4) (* x x)) (*.f64 (*.f64 x x) #s(literal -3/4 binary64))) (-.f64 (/.f64 (fabs.f64 (-.f64 x y)) #s(literal 2 binary64)) x)))
((+.f64 #s(approx (/ (fabs (- y x)) 2) (*.f64 (-.f64 y x) #s(literal 1/2 binary64))) x) #s(approx (+ x (/ (fabs (- y x)) 2)) (*.f64 #s(literal 1/2 binary64) (fabs.f64 #s(approx (- x y) x)))) (+.f64 x #s(approx (/ (fabs (- y x)) 2) (*.f64 #s(literal 1/2 binary64) (fabs.f64 #s(approx (- x y) #s(approx (* (- (/ x y) 1) y) x)))))) (/.f64 #s(approx (- (/ (pow (- y x) 2) 4) (* x x)) (*.f64 (*.f64 x x) #s(literal -3/4 binary64))) #s(approx (- (/ (fabs (- x y)) 2) x) (-.f64 (*.f64 #s(literal 1/2 binary64) (fabs.f64 (-.f64 y x))) x))) (+.f64 x (/.f64 (fabs.f64 (/.f64 (*.f64 (-.f64 y x) (+.f64 (*.f64 y (+.f64 y x)) (*.f64 x x))) (+.f64 (*.f64 x (+.f64 y x)) (*.f64 y y)))) #s(literal 2 binary64))))
((/.f64 (*.f64 x (-.f64 y z)) (-.f64 t z)))
((*.f64 (/.f64 x (-.f64 t z)) (-.f64 y z)) #s(approx (/ (* x (- y z)) (- t z)) x) #s(approx (/ (* x (- y z)) (- t z)) (*.f64 (/.f64 (-.f64 y z) t) x)) (/.f64 (*.f64 x (-.f64 y z)) #s(approx (- t z) t)) #s(approx (/ (* x (- y z)) (- t z)) (-.f64 x (*.f64 (/.f64 x z) (-.f64 y t)))))
(#s(approx (/ (* x (- y z)) (- t z)) (-.f64 x #s(approx (* (/ x z) (- y t)) (*.f64 (/.f64 y z) x)))) #s(approx (/ (* x (- y z)) (- t z)) #s(approx (- x (* (/ x z) (- y t))) (*.f64 (/.f64 x z) t))) #s(approx (/ (* x (- y z)) (- t z)) (*.f64 (/.f64 #s(approx (- y z) (neg.f64 z)) t) x)) (*.f64 (/.f64 x #s(approx (- t z) t)) (-.f64 y z)) (/.f64 (*.f64 x #s(approx (- y z) (neg.f64 z))) (-.f64 t z)))
(#s(approx (/ (* x (- y z)) (- t z)) (*.f64 (/.f64 (-.f64 z y) z) x)) #s(approx (/ (* x (- y z)) (- t z)) #s(approx (- x (* (/ x z) (- y t))) (*.f64 (/.f64 t z) x))) #s(approx (/ (* x (- y z)) (- t z)) #s(approx (- x (* (/ x z) (- y t))) (*.f64 (neg.f64 y) (/.f64 x z)))) (/.f64 (*.f64 x #s(approx (- y z) y)) (-.f64 t z)) (*.f64 (*.f64 (+.f64 z y) (-.f64 y z)) (/.f64 x (*.f64 (+.f64 z y) #s(approx (- t z) t)))))
((+.f64 (*.f64 x y) (*.f64 (-.f64 x #s(literal 1 binary64)) z)))
(#s(approx (+ (* x y) (* (- x 1) z)) (-.f64 (*.f64 (+.f64 z y) x) z)) #s(approx (+ (* x y) (* (- x 1) z)) (neg.f64 z)) #s(approx (+ (* x y) (* (- x 1) z)) (*.f64 y x)) #s(approx (+ (* x y) (* (- x 1) z)) (*.f64 (+.f64 z y) x)) #s(approx (+ (* x y) (* (- x 1) z)) (*.f64 (-.f64 x #s(literal 1 binary64)) z)))
(#s(approx (+ (* x y) (* (- x 1) z)) (*.f64 #s(approx (- x 1) x) z)) #s(approx (+ (* x y) (* (- x 1) z)) (-.f64 (*.f64 #s(approx (+ z y) y) x) z)) #s(approx (+ (* x y) (* (- x 1) z)) (-.f64 (*.f64 #s(approx (+ z y) z) x) z)) (+.f64 (*.f64 x y) (*.f64 #s(approx (- x 1) x) z)))
((*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t)))
((*.f64 (/.f64 y z) x) (*.f64 (/.f64 x z) y) (/.f64 (*.f64 x y) z) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) z) x) (neg.f64 y)) (*.f64 (/.f64 #s(literal -1 binary64) z) (*.f64 (neg.f64 x) y)))
((/.f64 (*.f64 (*.f64 x t) y) (*.f64 t z)) (/.f64 (*.f64 (*.f64 (neg.f64 y) t) x) (*.f64 (neg.f64 z) t)))
((/.f64 (*.f64 (*.f64 y t) x) (*.f64 t z)) (/.f64 (*.f64 (*.f64 (/.f64 x (neg.f64 z)) t) y) (neg.f64 t)))
((/.f64 (+.f64 x y) (-.f64 #s(literal 1 binary64) (/.f64 y z))))
((/.f64 (+.f64 x y) #s(approx (- 1 (/ y z)) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) y) (/.f64 #s(literal 1 binary64) z)) y))) #s(approx (/ (+ x y) (- 1 (/ y z))) x) #s(approx (/ (+ x y) (- 1 (/ y z))) (+.f64 y x)) #s(approx (/ (+ x y) (- 1 (/ y z))) (+.f64 (+.f64 y x) (*.f64 (/.f64 x z) y))) #s(approx (/ (+ x y) (- 1 (/ y z))) (+.f64 (+.f64 (/.f64 (*.f64 (+.f64 y x) y) z) y) x)))
((/.f64 (+.f64 x y) #s(approx (- 1 (/ y z)) (*.f64 (/.f64 (-.f64 z y) (*.f64 z y)) y))) #s(approx (/ (+ x y) (- 1 (/ y z))) #s(approx (+ (+ y x) (* (/ x z) y)) y)) #s(approx (/ (+ x y) (- 1 (/ y z))) #s(approx (+ (+ (/ (* (+ y x) y) z) y) x) (*.f64 (+.f64 (/.f64 y z) #s(literal 1 binary64)) x))) #s(approx (/ (+ x y) (- 1 (/ y z))) (+.f64 (+.f64 (/.f64 #s(approx (* (+ y x) y) (*.f64 y y)) z) y) x)) (/.f64 #s(approx (+ x y) y) (-.f64 #s(literal 1 binary64) (/.f64 y z))))
(#s(approx (/ (+ x y) (- 1 (/ y z))) (*.f64 z (-.f64 #s(literal -1 binary64) (/.f64 x y)))) #s(approx (/ (+ x y) (- 1 (/ y z))) (neg.f64 z)) #s(approx (/ (+ x y) (- 1 (/ y z))) #s(approx (+ (+ (/ (* (+ y x) y) z) y) x) (+.f64 (*.f64 (/.f64 y z) y) y))) (/.f64 #s(approx (+ x y) x) (-.f64 #s(literal 1 binary64) (/.f64 y z))) (/.f64 (+.f64 x y) #s(approx (- 1 (/ y z)) (*.f64 #s(approx (/ (- z y) (* z y)) (/.f64 #s(literal -1 binary64) z)) y))))
((+.f64 x (/.f64 (*.f64 (-.f64 y x) (-.f64 z t)) (-.f64 a t))))
((+.f64 x (/.f64 #s(approx (* (- y x) (- z t)) (*.f64 (-.f64 (-.f64 z (/.f64 (*.f64 (-.f64 z t) x) y)) t) y)) (-.f64 a t))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) x) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) (*.f64 (-.f64 z t) (/.f64 y (-.f64 a t)))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) (-.f64 y (*.f64 (/.f64 (-.f64 y x) t) (-.f64 z a)))) (+.f64 x (/.f64 (*.f64 (+.f64 y x) (*.f64 (-.f64 z t) (-.f64 y x))) (*.f64 (+.f64 y x) (-.f64 a t)))))
((+.f64 x #s(approx (/ (* (- y x) (- z t)) (- a t)) (*.f64 (/.f64 y (-.f64 a t)) (-.f64 z t)))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) #s(approx (- y (* (/ (- y x) t) (- z a))) y)) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) (*.f64 #s(approx (- z t) z) (/.f64 y (-.f64 a t)))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) (*.f64 (-.f64 y x) (/.f64 z (-.f64 a t)))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) (-.f64 y (/.f64 (*.f64 (-.f64 z a) (-.f64 y x)) t))))
(#s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) (*.f64 (+.f64 (*.f64 (neg.f64 t) (/.f64 (-.f64 y x) (*.f64 (-.f64 a t) z))) (-.f64 (+.f64 (/.f64 x z) (/.f64 y (-.f64 a t))) (/.f64 x (-.f64 a t)))) z)) (+.f64 x #s(approx (/ (* (- y x) (- z t)) (- a t)) #s(approx (* (/ y (- a t)) (- z t)) y))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) #s(approx (- y (* (/ (- y x) t) (- z a))) (/.f64 (*.f64 (-.f64 z a) x) t))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) #s(approx (- y (* (/ (- y x) t) (- z a))) (*.f64 (neg.f64 z) (/.f64 (-.f64 y x) t)))) #s(approx (+ x (/ (* (- y x) (- z t)) (- a t))) #s(approx (- y (* (/ (- y x) t) (- z a))) (*.f64 (neg.f64 (+.f64 (/.f64 (-.f64 z a) t) #s(literal -1 binary64))) y))))
((+.f64 x (/.f64 (*.f64 (-.f64 y z) (-.f64 t x)) (-.f64 a z))))
((+.f64 x (*.f64 (/.f64 (-.f64 t x) (-.f64 a z)) (-.f64 y z))) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) t) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) (*.f64 (-.f64 y z) (/.f64 t (-.f64 a z)))) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) (-.f64 x (*.f64 (-.f64 y z) (/.f64 x (-.f64 a z))))) (+.f64 x #s(approx (/ (* (- y z) (- t x)) (- a z)) (*.f64 (*.f64 (/.f64 (-.f64 t x) (-.f64 a z)) (-.f64 #s(literal 1 binary64) (/.f64 z y))) y))))
((+.f64 x (*.f64 (-.f64 (/.f64 t (-.f64 a z)) (/.f64 x (-.f64 a z))) (-.f64 y z))) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) #s(approx (- x (* (- y z) (/ x (- a z)))) x)) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) (*.f64 #s(approx (- y z) y) (/.f64 t (-.f64 a z)))) #s(approx (+ x (* (/ (- t x) (- a z)) (- y z))) (/.f64 (*.f64 (-.f64 t x) y) (-.f64 a z))) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) #s(approx (- x (* (- y z) (/ x (- a z)))) (/.f64 (+.f64 (*.f64 (neg.f64 x) a) (*.f64 y x)) z))))
((+.f64 x (*.f64 (/.f64 #s(approx (- t x) (*.f64 (-.f64 (/.f64 t x) #s(literal 1 binary64)) x)) (-.f64 a z)) (-.f64 y z))) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) (-.f64 x #s(approx (* (- y z) (/ x (- a z))) x))) #s(approx (+ x (* (/ (- t x) (- a z)) (- y z))) #s(approx (/ (* (- t x) y) (- a z)) (*.f64 (/.f64 (-.f64 t x) a) y))) #s(approx (+ x (/ (* (- y z) (- t x)) (- a z))) #s(approx (- x (* (- y z) (/ x (- a z)))) (*.f64 (neg.f64 x) (/.f64 y (-.f64 a z))))) (+.f64 x (*.f64 (/.f64 (-.f64 t x) #s(approx (- a z) a)) (-.f64 y z))))
((+.f64 x (/.f64 (-.f64 x y) #s(literal 2 binary64))))
(#s(approx (+ x (/ (- x y) 2)) (-.f64 (*.f64 #s(literal 3/2 binary64) x) (*.f64 #s(literal 1/2 binary64) y))) #s(approx (+ x (/ (- x y) 2)) (*.f64 #s(literal -1/2 binary64) y)) (+.f64 x #s(approx (/ (- x y) 2) (*.f64 #s(literal -1/2 binary64) y))) (/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) x)) (/.f64 (+.f64 (pow.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (*.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) (-.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) x)) (*.f64 x x))))
((+.f64 x #s(approx (/ (- x y) 2) (*.f64 (-.f64 x y) #s(literal 1/2 binary64)))) #s(approx (/ (- (pow (/ (- x y) 2) 2) (* x x)) (- (/ (- x y) 2) x)) (*.f64 #s(literal 3/2 binary64) x)) #s(approx (/ (+ (pow (/ (- x y) 2) 3) (pow x 3)) (+ (* (/ (- x y) 2) (- (/ (- x y) 2) x)) (* x x))) (*.f64 (neg.f64 y) (-.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 3 binary64) x) y) #s(literal 1/2 binary64))))) (*.f64 (+.f64 (*.f64 (-.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) x) (/.f64 (-.f64 x y) #s(literal 2 binary64))) (*.f64 x x)) (/.f64 (+.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) x) (+.f64 (*.f64 (-.f64 (/.f64 (-.f64 x y) #s(literal 2 binary64)) x) (/.f64 (-.f64 x y) #s(literal 2 binary64))) (*.f64 x x)))) (+.f64 x (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 y #s(literal 3 binary64))) (*.f64 (+.f64 (*.f64 y (+.f64 y x)) (*.f64 x x)) #s(literal 2 binary64)))))
(#s(approx (/ (+ (pow (/ (- x y) 2) 3) (pow x 3)) (+ (* (/ (- x y) 2) (- (/ (- x y) 2) x)) (* x x))) (*.f64 (neg.f64 y) (-.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 3/2 binary64) x) y)))) #s(approx (/ (+ (pow (/ (- x y) 2) 3) (pow x 3)) (+ (* (/ (- x y) 2) (- (/ (- x y) 2) x)) (* x x))) #s(approx (* (neg y) (- 1/2 (* (/ (* 3 x) y) 1/2))) (*.f64 (-.f64 (*.f64 (/.f64 x y) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) y))) #s(approx (/ (+ (pow (/ (- x y) 2) 3) (pow x 3)) (+ (* (/ (- x y) 2) (- (/ (- x y) 2) x)) (* x x))) (*.f64 (neg.f64 y) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x (/.f64 #s(literal 3 binary64) y)) #s(literal 1/2 binary64))))) #s(approx (/ (- (pow (/ (- x y) 2) 2) (* x x)) (- (/ (- x y) 2) x)) (/.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (*.f64 x x)) (-.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (+.f64 x (/.f64 (*.f64 (-.f64 x y) (+.f64 (*.f64 (+.f64 y x) y) (*.f64 x x))) (*.f64 (+.f64 (*.f64 y (+.f64 y x)) (*.f64 x x)) #s(literal 2 binary64)))))
((+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y))))
((+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 0 binary64) (sin.f64 y))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y))) (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y)))))))) #s(approx (+ (+ x (sin y)) (* z (cos y))) x) #s(approx (+ (+ x (sin y)) (* z (cos y))) (+.f64 (+.f64 y x) z)) #s(approx (+ (+ x (sin y)) (* z (cos y))) (-.f64 (+.f64 (+.f64 y x) z) (*.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) z) (*.f64 #s(literal 1/6 binary64) y)) (*.f64 y y)))) #s(approx (+ (+ x (sin y)) (* z (cos y))) (*.f64 (cos.f64 y) z)))
((+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (/.f64 (sqrt.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 (-.f64 y y)))) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (+ (+ x (sin y)) (* z (cos y))) #s(approx (+ (+ y x) z) y)) #s(approx (+ (+ x (sin y)) (* z (cos y))) (*.f64 #s(approx (cos y) (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 y y)) #s(literal -1 binary64))) z)) #s(approx (+ (+ x (sin y)) (* z (cos y))) (-.f64 (+.f64 (+.f64 y x) z) (*.f64 #s(approx (+ (* 1/2 z) (* 1/6 y)) (*.f64 #s(literal 1/6 binary64) y)) (*.f64 y y)))) #s(approx (+ (+ x (sin y)) (* z (cos y))) (+.f64 (sin.f64 y) x)))
((+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (/.f64 (sqrt.f64 (+.f64 (cos.f64 (+.f64 y y)) #s(approx (cos (- y y)) #s(literal 1 binary64)))) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (+ (+ x (sin y)) (* z (cos y))) #s(approx (+ (+ y x) z) z)) #s(approx (+ (+ x (sin y)) (* z (cos y))) (*.f64 #s(approx (cos y) #s(approx (- (* -1/2 (* y y)) -1) (*.f64 #s(literal -1/2 binary64) (*.f64 y y)))) z)) #s(approx (+ (+ x (sin y)) (* z (cos y))) #s(approx (+ (+ y x) z) (*.f64 (-.f64 (/.f64 (+.f64 z y) x) #s(literal -1 binary64)) x))) #s(approx (+ (+ x (sin y)) (* z (cos y))) (-.f64 (+.f64 (+.f64 y x) z) (*.f64 #s(approx (+ (* 1/2 z) (* 1/6 y)) (*.f64 (+.f64 (*.f64 (/.f64 y z) #s(literal 1/6 binary64)) #s(literal 1/2 binary64)) z)) (*.f64 y y)))))
((-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))
((-.f64 #s(approx (+ x (cos y)) (*.f64 (neg.f64 x) (-.f64 (/.f64 (cos.f64 y) (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 z (sin.f64 y))) #s(approx (- (+ x (cos y)) (* z (sin y))) x) #s(approx (- (+ x (cos y)) (* z (sin y))) (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 z y))) #s(approx (- (+ x (cos y)) (* z (sin y))) (+.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 z y)) #s(literal 1/2 binary64)) y) z) y) x) #s(literal 1 binary64))) #s(approx (- (+ x (cos y)) (* z (sin y))) (*.f64 (neg.f64 z) (sin.f64 y))))
((-.f64 (+.f64 x #s(approx (cos y) #s(literal 1 binary64))) (*.f64 z (sin.f64 y))) #s(approx (- (+ x (cos y)) (* z (sin y))) (-.f64 x #s(literal -1 binary64))) #s(approx (- (+ x (cos y)) (* z (sin y))) (-.f64 #s(approx (+ 1 x) x) (*.f64 z y))) #s(approx (- (+ x (cos y)) (* z (sin y))) (+.f64 (+.f64 (*.f64 (-.f64 #s(approx (* (- (* 1/6 (* z y)) 1/2) y) (*.f64 (*.f64 (*.f64 y y) z) #s(literal 1/6 binary64))) z) y) x) #s(literal 1 binary64))) #s(approx (- (+ x (cos y)) (* z (sin y))) (+.f64 (cos.f64 y) x)))
((-.f64 #s(approx (+ x (cos y)) (*.f64 (neg.f64 x) (-.f64 (/.f64 (cos.f64 y) (neg.f64 x)) #s(literal 1 binary64)))) (*.f64 z #s(approx (sin y) y))) #s(approx (- (+ x (cos y)) (* z (sin y))) #s(approx (+ 1 x) #s(literal 1 binary64))) #s(approx (- (+ x (cos y)) (* z (sin y))) (-.f64 #s(approx (+ 1 x) #s(literal 1 binary64)) (*.f64 z y))) #s(approx (- (+ x (cos y)) (* z (sin y))) #s(approx (- (+ 1 x) (* z y)) (*.f64 (-.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) y) z) y))) #s(approx (- (+ x (cos y)) (* z (sin y))) #s(approx (+ (+ (* (- (* (- (* 1/6 (* z y)) 1/2) y) z) y) x) 1) (*.f64 (/.f64 (+.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 z y) #s(literal 1/6 binary64)) #s(literal 1/2 binary64)) y) z) y) x) #s(literal 1 binary64)) x) x))))
((/.f64 (*.f64 (*.f64 (/.f64 #s(literal 8 binary64) #s(literal 3 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 x)))
((*.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 8/3 binary64))) #s(approx (/ (* (* (/ 8 3) (sin (* x 1/2))) (sin (* x 1/2))) (sin x)) (*.f64 #s(literal 2/3 binary64) x)) #s(approx (/ (* (* (/ 8 3) (sin (* x 1/2))) (sin (* x 1/2))) (sin x)) (-.f64 (*.f64 (+.f64 (*.f64 (*.f64 x x) #s(literal 1/18 binary64)) #s(literal 2/3 binary64)) x) (*.f64 #s(literal -1/180 binary64) (pow.f64 x #s(literal 5 binary64))))) (/.f64 (*.f64 (*.f64 (/.f64 #s(literal 8 binary64) #s(literal 3 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(approx (sin x) x)) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(literal 8/3 binary64) (sin.f64 x))))
((*.f64 (*.f64 (/.f64 #s(literal 8/3 binary64) (sin.f64 x)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(approx (/ (* (* (/ 8 3) (sin (* x 1/2))) (sin (* x 1/2))) (sin x)) (*.f64 (+.f64 (*.f64 (*.f64 x x) #s(literal 1/18 binary64)) #s(literal 2/3 binary64)) x)) (/.f64 (*.f64 #s(approx (* (sin (* 1/2 x)) 8/3) (*.f64 #s(literal 4/3 binary64) x)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(approx (sin x) x)) (/.f64 (*.f64 #s(approx (* (/ 8 3) (sin (* x 1/2))) (*.f64 #s(literal 4/3 binary64) x)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 x)) (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64)) (sin.f64 x)) #s(literal 8/3 binary64)))
((/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 8/3 binary64)) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 x)) (/.f64 #s(approx (* (* (/ 8 3) (sin (* x 1/2))) (sin (* x 1/2))) (*.f64 (*.f64 x x) #s(literal 2/3 binary64))) #s(approx (sin x) x)) (/.f64 #s(approx (* (* (/ 8 3) (sin (* x 1/2))) (sin (* x 1/2))) (*.f64 (*.f64 x x) #s(literal 2/3 binary64))) (sin.f64 x)) (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(approx (sin x) x)) #s(literal 8/3 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1/2 binary64) x))))) (sin.f64 x)) #s(literal 8/3 binary64)))
((+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (/.f64 (*.f64 z z) (*.f64 t t))))
(#s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (+.f64 (*.f64 (/.f64 (/.f64 x y) y) x) (*.f64 (/.f64 (/.f64 z t) t) z))) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (*.f64 (/.f64 (/.f64 x y) y) x)) (+.f64 (/.f64 (*.f64 (/.f64 x y) x) y) (/.f64 (*.f64 z z) (*.f64 t t))) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (/.f64 (+.f64 (*.f64 (*.f64 (*.f64 (/.f64 z t) y) y) (/.f64 z t)) (*.f64 x x)) (*.f64 y y))) (+.f64 (/.f64 (*.f64 x x) (*.f64 y y)) (exp.f64 (*.f64 (log.f64 (/.f64 z t)) #s(literal 2 binary64)))))
(#s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (+.f64 (*.f64 (/.f64 (/.f64 x y) y) x) (*.f64 (/.f64 z (*.f64 t t)) z))) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (*.f64 (/.f64 x (*.f64 y y)) x)) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (/.f64 (*.f64 (/.f64 x y) x) y)) (*.f64 (+.f64 (/.f64 z t) (/.f64 x y)) (-.f64 (/.f64 z t) (/.f64 x y))) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (/.f64 (+.f64 (*.f64 (*.f64 (*.f64 (/.f64 x y) t) t) (/.f64 x y)) (*.f64 z z)) (*.f64 t t))))
(#s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (+.f64 (*.f64 (/.f64 (/.f64 x y) y) x) (/.f64 (/.f64 (*.f64 z z) (neg.f64 t)) (neg.f64 t)))) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (/.f64 #s(approx (+ (* (* (* (/ x y) t) t) (/ x y)) (* z z)) (*.f64 z z)) (*.f64 t t))) #s(approx (* (+ (/ z t) (/ x y)) (- (/ z t) (/ x y))) (*.f64 (+.f64 (/.f64 #s(literal 0 binary64) z) (/.f64 #s(literal 1 binary64) (*.f64 t t))) (*.f64 z z))) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) (/.f64 #s(approx (+ (* (* (* (/ x y) t) t) (/ x y)) (* z z)) (*.f64 (/.f64 (*.f64 t t) y) (*.f64 (/.f64 x y) x))) (*.f64 t t))) #s(approx (+ (/ (* x x) (* y y)) (/ (* z z) (* t t))) #s(approx (/ (+ (* (* (* (/ z t) y) y) (/ z t)) (* x x)) (* y y)) (*.f64 (+.f64 (*.f64 (/.f64 x (*.f64 (*.f64 z z) y)) (/.f64 x y)) (/.f64 (/.f64 #s(literal 1 binary64) t) t)) (*.f64 z z)))))
((-.f64 (*.f64 x x) (*.f64 (*.f64 y #s(literal 4 binary64)) (-.f64 (*.f64 z z) t))))
((-.f64 (*.f64 x x) #s(approx (* (* y 4) (- (* z z) t)) (*.f64 (*.f64 #s(literal 4 binary64) t) (-.f64 (/.f64 (*.f64 (*.f64 z z) y) t) y)))) #s(approx (- (* x x) (* (* y 4) (- (* z z) t))) (*.f64 x x)) #s(approx (- (* x x) (* (* y 4) (- (* z z) t))) (*.f64 (*.f64 t y) #s(literal 4 binary64))) #s(approx (- (* x x) (* (* y 4) (- (* z z) t))) (*.f64 (*.f64 (*.f64 z z) y) #s(literal -4 binary64))) #s(approx (- (* x x) (* (* y 4) (- (* z z) t))) (*.f64 (*.f64 (-.f64 (*.f64 z z) t) y) #s(literal -4 binary64))))
((-.f64 (*.f64 x x) #s(approx (* (* y 4) (- (* z z) t)) (*.f64 (*.f64 #s(literal 4 binary64) t) (-.f64 (*.f64 z (/.f64 (*.f64 z y) t)) y)))) #s(approx (- (* x x) (* (* y 4) (- (* z z) t))) (*.f64 (*.f64 (*.f64 z y) z) #s(literal -4 binary64))) (-.f64 (*.f64 x x) #s(approx (* (* y 4) (- (* z z) t)) (*.f64 (*.f64 t y) #s(literal -4 binary64)))) (-.f64 (*.f64 x x) #s(approx (* (* y 4) (- (* z z) t)) (*.f64 (*.f64 (*.f64 z z) y) #s(literal 4 binary64)))) #s(approx (- (* x x) (* (* y 4) (- (* z z) t))) #s(approx (* (* (- (* z z) t) y) -4) (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 z z) t)) y)) t))))
(#s(approx (- (* x x) (* (* y 4) (- (* z z) t))) #s(approx (* (* (- (* z z) t) y) -4) (*.f64 (*.f64 #s(literal 4 binary64) #s(approx (* (- 1 (/ (* z z) t)) y) (*.f64 (/.f64 (*.f64 (neg.f64 z) y) t) z))) t))))
((+.f64 (*.f64 x x) #s(literal 1 binary64)))
(#s(approx (+ (* x x) 1) #s(literal 1 binary64)) #s(approx (+ (* x x) 1) (*.f64 x x)))
((-.f64 x (*.f64 y y)))
(#s(approx (- x (* y y)) x) #s(approx (- x (* y y)) (*.f64 (neg.f64 y) y)) #s(approx (- x (* y y)) (*.f64 (*.f64 (-.f64 (/.f64 x (*.f64 y y)) #s(literal 1 binary64)) y) y)))
(#s(approx (- x (* y y)) (*.f64 (-.f64 (/.f64 x y) y) y)) #s(approx (- x (* y y)) (/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 x (*.f64 y y)) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 y y)) (-.f64 (/.f64 x (*.f64 y y)) #s(literal -1 binary64)))))
(#s(approx (- x (* y y)) (/.f64 (*.f64 (-.f64 (/.f64 (*.f64 (/.f64 (/.f64 x y) y) x) (*.f64 y y)) #s(literal 1 binary64)) (*.f64 y y)) (-.f64 (/.f64 x (*.f64 y y)) #s(literal -1 binary64)))))
((/.f64 (-.f64 x y) (-.f64 z y)))
((-.f64 (/.f64 x (-.f64 z y)) (/.f64 y (-.f64 z y))) #s(approx (/ (- x y) (- z y)) #s(literal 1 binary64)) #s(approx (/ (- x y) (- z y)) (-.f64 #s(literal 1 binary64) (/.f64 x y))) (/.f64 #s(approx (- x y) x) (-.f64 z y)) #s(approx (/ (- x y) (- z y)) (-.f64 (/.f64 (-.f64 z x) y) #s(literal -1 binary64))))
((/.f64 (-.f64 x y) #s(approx (- z y) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 y z)) z))) #s(approx (/ (- x y) (- z y)) #s(approx (- (/ (- z x) y) -1) (/.f64 z y))) (/.f64 #s(approx (- x y) x) #s(approx (- z y) (neg.f64 y))) #s(approx (/ (- x y) (- z y)) (/.f64 y (-.f64 y z))) (-.f64 (/.f64 x (-.f64 z y)) (/.f64 y #s(approx (- z y) z))))
((/.f64 (-.f64 x y) #s(approx (- z y) #s(approx (* (- 1 (/ y z)) z) z))) (/.f64 #s(approx (- x y) x) #s(approx (- z y) z)) #s(approx (/ (- x y) (- z y)) (/.f64 y #s(approx (- y z) (neg.f64 z)))) #s(approx (/ (- x y) (- z y)) (-.f64 (/.f64 #s(approx (- z x) z) y) #s(literal -1 binary64))) (-.f64 #s(approx (/ x (- z y)) (/.f64 x z)) (/.f64 y #s(approx (- z y) z))))
((-.f64 (*.f64 x x) (*.f64 (*.f64 y #s(literal 4 binary64)) z)))
(#s(approx (- (* x x) (* (* y 4) z)) (*.f64 x x)) #s(approx (- (* x x) (* (* y 4) z)) (*.f64 (*.f64 z y) #s(literal -4 binary64))) #s(approx (- (* x x) (* (* y 4) z)) (*.f64 (-.f64 (/.f64 (*.f64 x x) z) (*.f64 #s(literal 4 binary64) y)) z)))
((+.f64 (*.f64 x x) (*.f64 y y)))
(#s(approx (+ (* x x) (* y y)) (*.f64 y y)) #s(approx (+ (* x x) (* y y)) (*.f64 (+.f64 (*.f64 (*.f64 y (/.f64 x y)) (/.f64 x y)) y) y)))
(#s(approx (+ (* x x) (* y y)) (*.f64 (+.f64 (*.f64 #s(approx (* y (/ x y)) x) (/.f64 x y)) y) y)))
((*.f64 (*.f64 x #s(literal 16 binary64)) x))
((+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 a z) b)))
((+.f64 (+.f64 (+.f64 x (*.f64 y z)) (*.f64 t a)) (*.f64 (*.f64 b z) a)) #s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* a z) b)) x) #s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* a z) b)) (*.f64 z y)) #s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* a z) b)) (+.f64 (*.f64 z y) x)) #s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* a z) b)) (*.f64 (+.f64 (*.f64 b z) t) a)))
(#s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* b z) a)) (+.f64 (*.f64 a t) x)) #s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* b z) a)) (*.f64 a t)) #s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* a z) b)) (*.f64 #s(approx (+ (* b z) t) (*.f64 b z)) a)) #s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* b z) a)) (*.f64 (*.f64 b a) z)) (+.f64 #s(approx (+ (+ x (* y z)) (* t a)) x) (*.f64 (*.f64 a z) b)))
(#s(approx (+ (+ (+ x (* y z)) (* t a)) (* (* b z) a)) (*.f64 (*.f64 a z) b)) (+.f64 #s(approx (+ (+ x (* y z)) (* t a)) (*.f64 a t)) (*.f64 (*.f64 b z) a)))
((sqrt.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 1 binary64) (/.f64 x (sqrt.f64 (+.f64 (*.f64 (*.f64 #s(literal 4 binary64) p) p) (*.f64 x x))))))))
((*.f64 (sqrt.f64 (-.f64 (/.f64 x (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal -4 binary64) (*.f64 p p))))) #s(literal -1 binary64))) (sqrt.f64 #s(literal 1/2 binary64))) (sqrt.f64 #s(approx (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x)))))) #s(literal 1/2 binary64))) (sqrt.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 1 binary64) #s(approx (/ x (sqrt (+ (* (* 4 p) p) (* x x)))) #s(literal -1 binary64))))) (sqrt.f64 #s(approx (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x)))))) (*.f64 (/.f64 p x) (/.f64 p x)))) #s(approx (sqrt (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x))))))) (/.f64 (*.f64 (*.f64 p (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 1/2 binary64))) (neg.f64 x))))
((sqrt.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 1 binary64) (/.f64 x #s(approx (sqrt (+ (* (* 4 p) p) (* x x))) (-.f64 x (*.f64 (/.f64 (*.f64 p p) x) #s(literal -2 binary64)))))))) (sqrt.f64 #s(approx (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x)))))) #s(literal 1 binary64))) #s(approx (sqrt (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x))))))) (/.f64 (*.f64 p #s(literal -1 binary64)) x)) (sqrt.f64 #s(approx (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x)))))) (-.f64 (*.f64 (/.f64 x p) #s(literal 1/4 binary64)) #s(literal -1/2 binary64)))) (sqrt.f64 #s(approx (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x)))))) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 p x) (/.f64 p x))))))
(#s(approx (sqrt (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x))))))) (/.f64 (neg.f64 p) x)) (sqrt.f64 #s(approx (* 1/2 (+ 1 (/ x (sqrt (+ (* (* 4 p) p) (* x x)))))) (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 p p) (*.f64 x x))))) (sqrt.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 1 binary64) (/.f64 x #s(approx (sqrt (+ (* (* 4 p) p) (* x x))) (+.f64 (+.f64 (*.f64 (/.f64 (*.f64 x x) p) #s(literal 1/4 binary64)) p) p)))))))
((/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) (*.f32 (*.f32 (PI.f32) (log.f32 (*.f32 alpha alpha))) (+.f32 #s(literal 1 binary32) (*.f32 (*.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) cosTheta) cosTheta)))))
((/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) (*.f32 (-.f32 (*.f32 (*.f32 cosTheta (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32))) cosTheta) #s(literal -1 binary32)) (log.f32 (pow.f32 (*.f32 alpha alpha) (PI.f32))))) (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) #s(approx (* (* (PI) (log (* alpha alpha))) (+ 1 (* (* (- (* alpha alpha) 1) cosTheta) cosTheta))) (*.f32 (log.f32 (*.f32 alpha alpha)) (PI.f32)))) (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) (*.f32 (*.f32 (-.f32 (*.f32 (*.f32 cosTheta (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32))) cosTheta) #s(literal -1 binary32)) (PI.f32)) (log.f32 (*.f32 alpha alpha)))) (/.f32 (/.f32 (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) (PI.f32)) (log.f32 (*.f32 alpha alpha))) (-.f32 (*.f32 (*.f32 cosTheta (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32))) cosTheta) #s(literal -1 binary32))) (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) #s(approx (* (* (PI) (log (* alpha alpha))) (+ 1 (* (* (- (* alpha alpha) 1) cosTheta) cosTheta))) (*.f32 (-.f32 (*.f32 (*.f32 (*.f32 (*.f32 (*.f32 alpha alpha) cosTheta) cosTheta) (PI.f32)) (log.f32 alpha)) (*.f32 (+.f32 (*.f32 cosTheta cosTheta) #s(literal -1 binary32)) (*.f32 (log.f32 alpha) (PI.f32)))) #s(literal 2 binary32)))))
((/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) (*.f32 (*.f32 (-.f32 (*.f32 (*.f32 cosTheta (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32))) cosTheta) #s(literal -1 binary32)) (log.f32 (*.f32 alpha alpha))) (PI.f32))) (/.f32 #s(approx (- (* alpha alpha) 1) #s(literal -1 binary32)) #s(approx (* (* (PI) (log (* alpha alpha))) (+ 1 (* (* (- (* alpha alpha) 1) cosTheta) cosTheta))) (*.f32 (log.f32 (*.f32 alpha alpha)) (PI.f32)))) (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) #s(approx (* (- (* (* cosTheta (- (* alpha alpha) 1)) cosTheta) -1) (log (pow (* alpha alpha) (PI)))) (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) (*.f32 (-.f32 #s(literal 1 binary32) (*.f32 cosTheta cosTheta)) (log.f32 alpha))))) (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) #s(approx (* (- (* (* cosTheta (- (* alpha alpha) 1)) cosTheta) -1) (log (pow (* alpha alpha) (PI)))) (*.f32 (*.f32 (*.f32 (log.f32 alpha) (PI.f32)) (-.f32 (*.f32 (*.f32 (*.f32 alpha alpha) cosTheta) cosTheta) (-.f32 (*.f32 cosTheta cosTheta) #s(literal 1 binary32)))) #s(literal 2 binary32)))) (/.f32 (/.f32 #s(approx (/ (- (* alpha alpha) 1) (PI)) (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) (PI.f32)) (/.f32 (/.f32 (/.f32 #s(literal 1 binary32) alpha) alpha) (PI.f32))) (*.f32 alpha alpha))) (log.f32 (*.f32 alpha alpha))) (-.f32 (*.f32 (*.f32 cosTheta (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32))) cosTheta) #s(literal -1 binary32))))
((/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) #s(approx (* (* (PI) (log (* alpha alpha))) (+ 1 (* (* (- (* alpha alpha) 1) cosTheta) cosTheta))) (*.f32 #s(approx (- (* (* (* (* (* alpha alpha) cosTheta) cosTheta) (PI)) (log alpha)) (* (+ (* cosTheta cosTheta) -1) (* (log alpha) (PI)))) (*.f32 (+.f32 (/.f32 (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) (*.f32 cosTheta cosTheta)) (PI.f32)) (log.f32 alpha)) (*.f32 alpha alpha)) (*.f32 (*.f32 (*.f32 (log.f32 alpha) (PI.f32)) cosTheta) cosTheta)) (*.f32 alpha alpha))) #s(literal 2 binary32)))) (/.f32 #s(approx (- (* alpha alpha) 1) #s(literal -1 binary32)) #s(approx (* (* (PI) (log (* alpha alpha))) (+ 1 (* (* (- (* alpha alpha) 1) cosTheta) cosTheta))) #s(approx (* (log (* alpha alpha)) (PI)) (*.f32 (*.f32 (log.f32 alpha) (PI.f32)) #s(literal 2 binary32))))) (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) #s(approx (* (- (* (* cosTheta (- (* alpha alpha) 1)) cosTheta) -1) (log (pow (* alpha alpha) (PI)))) (*.f32 (-.f32 #s(literal 1 binary32) (*.f32 cosTheta cosTheta)) (*.f32 (log.f32 alpha) (*.f32 #s(literal 2 binary32) (PI.f32)))))) (*.f32 (-.f32 alpha #s(literal -1 binary32)) (/.f32 (-.f32 alpha #s(literal 1 binary32)) (*.f32 (*.f32 (-.f32 (*.f32 (*.f32 cosTheta (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32))) cosTheta) #s(literal -1 binary32)) (PI.f32)) (log.f32 (*.f32 alpha alpha))))) (/.f32 (-.f32 (*.f32 alpha alpha) #s(literal 1 binary32)) #s(approx (* (- (* (* cosTheta (- (* alpha alpha) 1)) cosTheta) -1) (log (pow (* alpha alpha) (PI)))) (*.f32 (*.f32 (*.f32 (log.f32 alpha) (PI.f32)) #s(approx (- (* (* (* alpha alpha) cosTheta) cosTheta) (- (* cosTheta cosTheta) 1)) (*.f32 (+.f32 (*.f32 cosTheta cosTheta) (/.f32 (/.f32 (-.f32 #s(literal 1 binary32) (*.f32 cosTheta cosTheta)) alpha) alpha)) (*.f32 alpha alpha)))) #s(literal 2 binary32)))))
((+.f64 (+.f64 (+.f64 (*.f64 #s(literal 1335/4 binary64) (pow.f64 #s(literal 33096 binary64) #s(literal 6 binary64))) (*.f64 (*.f64 #s(literal 77617 binary64) #s(literal 77617 binary64)) (+.f64 (+.f64 (+.f64 (*.f64 (*.f64 #s(literal 11 binary64) (*.f64 #s(literal 77617 binary64) #s(literal 77617 binary64))) (*.f64 #s(literal 33096 binary64) #s(literal 33096 binary64))) (neg.f64 (pow.f64 #s(literal 33096 binary64) #s(literal 6 binary64)))) (*.f64 #s(literal -121 binary64) (pow.f64 #s(literal 33096 binary64) #s(literal 4 binary64)))) #s(literal -2 binary64)))) (*.f64 #s(literal 11/2 binary64) (pow.f64 #s(literal 33096 binary64) #s(literal 8 binary64)))) (/.f64 #s(literal 77617 binary64) (*.f64 #s(literal 2 binary64) #s(literal 33096 binary64)))))
(#s(literal -54767/66192 binary64))
((-.f64 (*.f64 #s(literal 9 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) #s(literal 2 binary64)))))
(#s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (*.f64 (*.f64 (-.f64 #s(literal 2 binary64) (*.f64 y y)) y) y)) #s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64))) #s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (-.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 y y)))) (-.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 9 binary64))) (*.f64 (*.f64 y y) (-.f64 (*.f64 y y) #s(literal 2 binary64)))))
(#s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (*.f64 (*.f64 #s(approx (- 2 (* y y)) #s(literal 2 binary64)) y) y)) #s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (-.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) x) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 y y)))) #s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64))) (-.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 (*.f64 y y) #s(literal 2 binary64))))) #s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -8 binary64) (pow.f64 y #s(literal 6 binary64)))) (+.f64 (+.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64)))) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64))) (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64))))))
(#s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 y y)) (*.f64 #s(literal -2 binary64) (*.f64 y y)))) (-.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 (*.f64 y y) #s(literal 2 binary64))))) #s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -8 binary64) (pow.f64 y #s(literal 6 binary64)))) (+.f64 (+.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64)))) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64))) #s(approx (pow (- (* (pow x 4) 9) (pow y 4)) 2) (*.f64 (+.f64 (/.f64 (pow.f64 y #s(literal 8 binary64)) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) (/.f64 #s(literal -18 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -81 binary64))) (pow.f64 x #s(literal 8 binary64))))))) #s(approx (- (* 9 (pow x 4)) (* (* y y) (- (* y y) 2))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 3 binary64)) (*.f64 (pow.f64 y #s(literal 6 binary64)) #s(literal -8 binary64))) (+.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (-.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (*.f64 y y)))) (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64))))))
((+.f64 (-.f64 (*.f64 #s(literal 9 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (*.f64 y y))))
((/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (+.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 y y)))))) #s(approx (+ (- (* 9 (pow x 4)) (pow y 4)) (* 2 (* y y))) (*.f64 (*.f64 (-.f64 #s(literal 2 binary64) (*.f64 y y)) y) y)) #s(approx (+ (- (* 9 (pow x 4)) (pow y 4)) (* 2 (* y y))) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64))) (+.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 9 binary64))) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (*.f64 y y))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64))) (-.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 (*.f64 y y) #s(literal 2 binary64)))))
(#s(approx (+ (- (* 9 (pow x 4)) (pow y 4)) (* 2 (* y y))) (*.f64 (*.f64 #s(approx (- 2 (* y y)) #s(literal 2 binary64)) y) y)) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64))) (-.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) x) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 (*.f64 y y) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) #s(literal 3 binary64))) (+.f64 #s(approx (pow (- (* (pow x 4) 9) (pow y 4)) 2) (*.f64 (+.f64 (-.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) (/.f64 #s(literal -18 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -81 binary64)) (/.f64 (pow.f64 y #s(literal 8 binary64)) (pow.f64 x #s(literal 8 binary64)))) (pow.f64 x #s(literal 8 binary64)))) (+.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 y y)))))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (+.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) x) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 y y)))))))
((/.f64 (-.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) #s(literal 3 binary64)) (pow.f64 y #s(literal 12 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 (+.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64))) (pow.f64 y #s(literal 8 binary64))) (*.f64 #s(literal 81 binary64) (pow.f64 x #s(literal 8 binary64)))) #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) #s(literal 3 binary64))) (+.f64 #s(approx (pow (- (* (pow x 4) 9) (pow y 4)) 2) (*.f64 (+.f64 (-.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) (/.f64 #s(literal -18 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -81 binary64)) (/.f64 (pow.f64 y #s(literal 8 binary64)) (pow.f64 x #s(literal 8 binary64)))) (pow.f64 x #s(literal 8 binary64)))) (+.f64 (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 y y)))))) (/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (*.f64 (*.f64 #s(literal 2 binary64) y) y))) (-.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) x) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 (*.f64 y y) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 y #s(literal 4 binary64)) #s(literal 4 binary64))) (-.f64 (-.f64 (*.f64 (*.f64 (exp.f64 (*.f64 (log.f64 x) #s(literal 3 binary64))) x) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 (*.f64 y y) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 3 binary64)) (*.f64 (pow.f64 y #s(literal 6 binary64)) #s(literal -8 binary64))) (+.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (+.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))))) #s(approx (pow (- (* (pow x 4) 9) (pow y 4)) 2) (*.f64 (+.f64 (/.f64 (pow.f64 y #s(literal 8 binary64)) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 (/.f64 #s(literal -18 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 y #s(literal 4 binary64))) #s(literal -81 binary64))) (pow.f64 x #s(literal 8 binary64)))))) (*.f64 (+.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (+.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))))) (pow.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (-.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 y y))) (+.f64 (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (+.f64 (*.f64 #s(literal -2 binary64) (*.f64 y y)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 y #s(literal 4 binary64))))) #s(approx (pow (- (* (pow x 4) 9) (pow y 4)) 2) (*.f64 (+.f64 (/.f64 (pow.f64 y #s(literal 8 binary64)) (pow.f64 x #s(literal 8 binary64))) (-.f64 (*.f64 (/.f64 #s(literal -18 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 y #s(literal 4 binary64))) #s(literal -81 binary64))) (pow.f64 x #s(literal 8 binary64))))))))
((*.f64 (*.f64 d1 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 d1 (*.f64 d1 d1)) d1) d1) (*.f64 d1 d1)) d1)) d1))
(#s(approx (* (* d1 (* (* (* (* (* d1 (* d1 d1)) d1) d1) (* d1 d1)) d1)) d1) (pow.f64 d1 #s(literal 10 binary64))))
((+.f64 (+.f64 (*.f64 d1 #s(literal 3 binary64)) (*.f64 d1 d2)) (*.f64 d1 d3)))
((*.f64 (+.f64 (+.f64 d3 d2) #s(literal 3 binary64)) d1) #s(approx (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)) (*.f64 d2 d1)) #s(approx (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)) (*.f64 (-.f64 d2 #s(literal -3 binary64)) d1)) (+.f64 #s(approx (+ (* d1 3) (* d1 d2)) (*.f64 #s(literal 3 binary64) d1)) (*.f64 d1 d3)) (-.f64 (*.f64 (+.f64 d3 d2) d1) (*.f64 #s(literal -3 binary64) d1)))
((+.f64 (*.f64 (+.f64 d2 #s(literal 3 binary64)) d1) (*.f64 d3 d1)) #s(approx (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)) (*.f64 #s(approx (- d2 -3) #s(literal 3 binary64)) d1)) (*.f64 (+.f64 #s(approx (+ d3 d2) d3) #s(literal 3 binary64)) d1) #s(approx (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)) (/.f64 (*.f64 (-.f64 (*.f64 d2 d2) #s(literal 9 binary64)) d1) (+.f64 #s(literal -3 binary64) d2))) (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 d1 #s(literal 3 binary64)) (+.f64 #s(literal 27 binary64) (pow.f64 d2 #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 d1 d1) d2) (-.f64 d2 #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 3 binary64) d1) #s(literal 6 binary64)))) (+.f64 (*.f64 (*.f64 (*.f64 (*.f64 d1 d1) d2) (-.f64 d2 #s(literal 3 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 d1 d1) d2) (-.f64 d2 #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 3 binary64) d1) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) d1) #s(literal 4 binary64)))) (*.f64 d1 d3)))
(#s(approx (* (+ (+ d3 d2) 3) d1) (*.f64 (+.f64 (/.f64 (*.f64 (-.f64 d2 #s(literal -3 binary64)) d1) d3) d1) d3)) (*.f64 #s(approx (+ (+ d3 d2) 3) d3) d1) (-.f64 (*.f64 #s(approx (+ d3 d2) d2) d1) (*.f64 #s(literal -3 binary64) d1)) #s(approx (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)) (/.f64 (*.f64 #s(approx (- (* d2 d2) 9) #s(literal -9 binary64)) d1) (+.f64 #s(literal -3 binary64) d2))) #s(approx (+ (+ (* d1 3) (* d1 d2)) (* d1 d3)) (/.f64 (*.f64 (-.f64 (pow.f64 d2 #s(literal 4 binary64)) #s(literal 81 binary64)) d1) (*.f64 (-.f64 (*.f64 d2 d2) #s(literal -9 binary64)) (+.f64 #s(literal -3 binary64) d2)))))
((+.f64 (+.f64 (*.f64 d1 #s(literal 10 binary64)) (*.f64 d1 d2)) (*.f64 d1 #s(literal 20 binary64))))
((*.f64 d1 (-.f64 (+.f64 d2 #s(literal 10 binary64)) #s(literal -20 binary64))) #s(approx (+ (+ (* d1 10) (* d1 d2)) (* d1 20)) (*.f64 #s(literal 30 binary64) d1)) #s(approx (+ (+ (* d1 10) (* d1 d2)) (* d1 20)) (*.f64 d2 d1)) (*.f64 (+.f64 #s(literal 30 binary64) d2) d1) (+.f64 (*.f64 d2 d1) (*.f64 d1 #s(literal 30 binary64))))
((+.f64 (/.f64 (*.f64 (*.f64 d1 d1) (-.f64 (*.f64 d2 d2) #s(literal 100 binary64))) (*.f64 (+.f64 d2 #s(literal -10 binary64)) d1)) (*.f64 d1 #s(literal 20 binary64))) (/.f64 (*.f64 (*.f64 d1 d1) (-.f64 (pow.f64 (+.f64 d2 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 400 binary64))) (*.f64 (+.f64 d2 #s(literal -10 binary64)) d1)) (/.f64 (*.f64 (-.f64 (pow.f64 d2 #s(literal 3 binary64)) #s(literal -27000 binary64)) d1) (-.f64 (*.f64 d2 (-.f64 d2 #s(literal 30 binary64))) #s(literal -900 binary64))))
(#s(approx (/ (* (- (pow d2 3) -27000) d1) (- (* d2 (- d2 30)) -900)) (*.f64 (+.f64 (*.f64 (/.f64 d1 d2) #s(literal 30 binary64)) d1) d2)) (/.f64 (*.f64 #s(approx (- (pow d2 3) -27000) #s(literal 27000 binary64)) d1) (-.f64 (*.f64 d2 (-.f64 d2 #s(literal 30 binary64))) #s(literal -900 binary64))))
((+.f64 (*.f64 d #s(literal 10 binary64)) (*.f64 d #s(literal 20 binary64))))
((*.f64 d #s(literal 30 binary64)))
((*.f64 (*.f64 (*.f64 d1 d1) d1) d1))
((*.f64 (*.f64 d1 d1) (*.f64 d1 d1)) (pow.f64 d1 #s(literal 4 binary64)))
((-.f64 (+.f64 (-.f64 (*.f64 d1 d2) (*.f64 d1 d3)) (*.f64 d4 d1)) (*.f64 d1 d1)))
((+.f64 (*.f64 (-.f64 d2 d3) d1) (*.f64 d1 (-.f64 d4 d1))) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 d2 d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (neg.f64 d1) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (-.f64 (+.f64 d4 d2) d1) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (-.f64 (-.f64 d4 d1) d3) d1)))
(#s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (-.f64 (-.f64 d2 d3) d1) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 d1 d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (neg.f64 d3) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (-.f64 #s(approx (+ d4 d2) d2) d1) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (-.f64 #s(approx (- d4 d1) d4) d3) d1)))
((+.f64 (*.f64 (-.f64 d2 d3) d1) (*.f64 d1 #s(approx (- d4 d1) d4))) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 #s(approx (- (- d4 d1) d3) d4) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 #s(approx (- (+ d4 d2) d1) (+.f64 d4 d2)) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 #s(approx (- (- d2 d3) d1) (-.f64 d2 d3)) d1)) #s(approx (- (+ (- (* d1 d2) (* d1 d3)) (* d4 d1)) (* d1 d1)) (*.f64 (-.f64 #s(approx (+ d4 d2) d4) d1) d1)))
((+.f64 (+.f64 (*.f64 d1 d2) (*.f64 (+.f64 d3 #s(literal 5 binary64)) d1)) (*.f64 d1 #s(literal 32 binary64))))
((*.f64 d1 (+.f64 (+.f64 (+.f64 #s(literal 5 binary64) d3) d2) #s(literal 32 binary64))) #s(approx (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)) (*.f64 d2 d1)) #s(approx (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)) (*.f64 (+.f64 #s(literal 37 binary64) d2) d1)) (*.f64 d1 (+.f64 (+.f64 d3 #s(literal 37 binary64)) d2)) (+.f64 #s(approx (+ (* d1 d2) (* (+ d3 5) d1)) (*.f64 (*.f64 d1 (-.f64 (/.f64 (-.f64 d2 #s(literal -5 binary64)) d3) #s(literal -1 binary64))) d3)) (*.f64 d1 #s(literal 32 binary64))))
((+.f64 (*.f64 d3 d1) (*.f64 (+.f64 #s(literal 37 binary64) d2) d1)) #s(approx (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)) (*.f64 #s(approx (+ 37 d2) #s(literal 37 binary64)) d1)) (*.f64 d1 #s(approx (+ (+ (+ 5 d3) d2) 32) (-.f64 d3 #s(literal -37 binary64)))) (*.f64 d1 (+.f64 #s(approx (+ (+ 5 d3) d2) (-.f64 d3 #s(literal -5 binary64))) #s(literal 32 binary64))) #s(approx (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)) (/.f64 (*.f64 (-.f64 #s(literal 1369 binary64) (*.f64 d2 d2)) d1) (-.f64 #s(literal 37 binary64) d2))))
((*.f64 d1 (+.f64 #s(approx (+ d3 37) d3) d2)) (*.f64 d1 #s(approx (+ (+ (+ 5 d3) d2) 32) #s(approx (- d3 -37) d3))) (+.f64 (*.f64 d3 d1) (*.f64 #s(approx (+ 37 d2) #s(literal 37 binary64)) d1)) #s(approx (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)) (/.f64 (*.f64 #s(approx (- 1369 (* d2 d2)) #s(literal 1369 binary64)) d1) (-.f64 #s(literal 37 binary64) d2))) #s(approx (+ (+ (* d1 d2) (* (+ d3 5) d1)) (* d1 32)) #s(approx (/ (* (- 1369 (* d2 d2)) d1) (- 37 d2)) (*.f64 (/.f64 d1 (-.f64 #s(literal 37 binary64) d2)) (-.f64 #s(literal 1369 binary64) (*.f64 d2 d2))))))
((+.f64 (*.f64 d1 d2) (*.f64 d1 d3)))
(#s(approx (+ (* d1 d2) (* d1 d3)) (*.f64 d2 d1)) #s(approx (+ (* d1 d2) (* d1 d3)) (*.f64 d3 d1)) (*.f64 (+.f64 d3 d2) d1) (/.f64 (*.f64 (*.f64 (+.f64 d3 d2) (-.f64 d2 d3)) d1) (-.f64 d2 d3)))
((*.f64 #s(approx (+ d3 d2) (*.f64 (+.f64 (/.f64 d3 d2) #s(literal 1 binary64)) d2)) d1))
((*.f64 #s(approx (+ d3 d2) (*.f64 #s(approx (+ (/ d3 d2) 1) (/.f64 d3 d2)) d2)) d1))
((/.f64 #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) (PI.f64)) (-.f64 #s(literal 1 binary64) (*.f64 v v))) (sqrt.f64 (-.f64 #s(literal 2 binary64) (*.f64 #s(literal 6 binary64) (*.f64 v v)))))))
(#s(approx (/ 4 (* (* (* 3 (PI)) (- 1 (* v v))) (sqrt (- 2 (* 6 (* v v)))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 1/2 binary64)) (PI.f64)) #s(literal 4/3 binary64))) (/.f64 #s(literal 4 binary64) (*.f64 #s(approx (* (* 3 (PI)) (- 1 (* v v))) (*.f64 (PI.f64) #s(literal 3 binary64))) (sqrt.f64 (-.f64 #s(literal 2 binary64) (*.f64 #s(literal 6 binary64) (*.f64 v v)))))) (/.f64 #s(literal 4 binary64) (*.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 2 binary64) (*.f64 #s(literal 6 binary64) (*.f64 v v)))) #s(literal 3 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 v v)) (PI.f64)))))
(#s(approx (/ 4 (* (* (* 3 (PI)) (- 1 (* v v))) (sqrt (- 2 (* 6 (* v v)))))) (*.f64 (sqrt.f64 #s(literal 1/2 binary64)) (/.f64 #s(literal 4/3 binary64) (PI.f64)))))
((/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (*.f64 v v)))))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))))
((/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (PI.f64)) (*.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 3 binary64))) #s(literal 2 binary64))) t)) (-.f64 #s(literal 1 binary64) (*.f64 v v))) #s(approx (/ (- 1 (* 5 (* v v))) (* (* (* (PI) t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (PI.f64)) t))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 #s(approx (* 2 (- 1 (* 3 (* v v)))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 3 binary64))) #s(literal 2 binary64))) t) (PI.f64)) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 3 binary64)))) (*.f64 t (PI.f64)))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))))
((/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (* (- 1 (* (* v v) 3)) 2) (-.f64 (*.f64 (*.f64 v v) #s(literal -6 binary64)) #s(literal -2 binary64)))) t) (PI.f64)) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(approx (/ (- 1 (* 5 (* v v))) (* (* (* (PI) t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 t (PI.f64)) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (/ (- 1 (* 5 (* v v))) (* (* (* (PI) t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))) (/.f64 (/.f64 #s(literal 1 binary64) t) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (PI.f64)))) #s(approx (/ (- 1 (* 5 (* v v))) (* (* (* (PI) t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))) (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 t (PI.f64))))) (/.f64 #s(approx (/ (/ (- 1 (* 5 (* v v))) (PI)) (* (sqrt (* (- 1 (* (* v v) 3)) 2)) t)) (/.f64 (+.f64 (*.f64 #s(literal -7/2 binary64) (*.f64 v v)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (PI.f64)) t))) (-.f64 #s(literal 1 binary64) (*.f64 v v))))
((/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (*.f64 t (sqrt.f64 #s(approx (* (- 1 (* (* v v) 3)) 2) (-.f64 (*.f64 #s(literal -6 binary64) (*.f64 v v)) #s(literal -2 binary64)))))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 v v)) (PI.f64))) #s(approx (/ (- 1 (* 5 (* v v))) (* (* (* (PI) t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) t) (PI.f64)))) #s(approx (/ (- 1 (* 5 (* v v))) (* (* (* (PI) t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (PI.f64))) t)) #s(approx (/ (- 1 (* 5 (* v v))) (* (* (* (PI) t) (sqrt (* 2 (- 1 (* 3 (* v v)))))) (- 1 (* v v)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 t (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (PI.f64)) (*.f64 (sqrt.f64 #s(approx (* (- 1 (* (* v v) 3)) 2) #s(literal 2 binary64))) t)) (-.f64 #s(literal 1 binary64) (*.f64 v v))))
((*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 4 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (*.f64 v v))))) (-.f64 #s(literal 1 binary64) (*.f64 v v))))
(#s(approx (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))) (-.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -5/8 binary64)) v) v) (*.f64 #s(literal -1/4 binary64) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(approx (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 v v))) (*.f64 #s(approx (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal -3/8 binary64) (*.f64 v v)) #s(literal -1/4 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 v v))) (*.f64 (*.f64 (/.f64 (exp.f64 (*.f64 (log.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 4 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) (*.f64 v v))))) (-.f64 #s(literal 1 binary64) (*.f64 v v))))
(#s(approx (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))) (*.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))))) #s(approx (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 v v) #s(literal -5/8 binary64)) #s(literal -1/4 binary64)))))
(#s(approx (* (* (/ (sqrt 2) 4) (sqrt (- 1 (* 3 (* v v))))) (- 1 (* v v))) (*.f64 #s(literal 1/4 binary64) (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) #s(literal 2 binary64)))))
((acos.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))))
((acos.f64 #s(approx (/ (- 1 (* 5 (* v v))) (- (* v v) 1)) #s(literal -1 binary64))) (acos.f64 #s(approx (/ (- 1 (* 5 (* v v))) (- (* v v) 1)) (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 v v)) #s(literal 1 binary64)))) (acos.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 v #s(literal -1 binary64))) (-.f64 v #s(literal 1 binary64)))) (/.f64 (-.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64))) (*.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))))) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))))))
((/.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 3 binary64))) (acos.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64))))) (+.f64 (*.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (-.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (/.f64 (PI.f64) #s(literal 2 binary64)))) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 2 binary64)))) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))))) #s(approx (/ (- (* (/ (PI) 2) (/ (PI) 2)) (* (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))) (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))))) (+ (/ (PI) 2) (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))))) (/.f64 (-.f64 (*.f64 (*.f64 (PI.f64) (PI.f64)) #s(literal 1/4 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(literal 2 binary64))) (-.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) (*.f64 #s(literal -1/2 binary64) (PI.f64))))) (-.f64 (/.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 2 binary64)) (+.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (/.f64 (PI.f64) #s(literal 2 binary64)))) (/.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (/.f64 (PI.f64) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 6 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 4 binary64))) (pow.f64 (*.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (/.f64 (PI.f64) #s(literal 2 binary64))) #s(literal 2 binary64))) (+.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (/.f64 (PI.f64) #s(literal 2 binary64))))) (/.f64 (-.f64 (/.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 4 binary64)) (+.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 4 binary64)) (+.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 2 binary64))))) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))))))
(#s(approx (/ (- (* (/ (PI) 2) (/ (PI) 2)) (* (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))) (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))))) (+ (/ (PI) 2) (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))))) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (PI.f64) (PI.f64))) #s(literal 2 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(literal 4 binary64))) (*.f64 (+.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 (PI.f64) (PI.f64)))) (-.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) (*.f64 #s(literal -1/2 binary64) (PI.f64)))))) #s(approx (/ (- (* (/ (PI) 2) (/ (PI) 2)) (* (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))) (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))))) (+ (/ (PI) 2) (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))))) (-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (PI.f64) (PI.f64))) (-.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) (*.f64 #s(literal -1/2 binary64) (PI.f64)))) (/.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(literal 2 binary64)) (-.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) (*.f64 #s(literal -1/2 binary64) (PI.f64)))))) #s(approx (/ (- (/ (pow (/ (PI) 2) 4) (+ (pow (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))) 2) (pow (/ (PI) 2) 2))) (/ (pow (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))) 4) (+ (pow (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))) 2) (pow (/ (PI) 2) 2)))) (+ (/ (PI) 2) (asin (/ (- 1 (* (* v v) 5)) (- (* v v) 1))))) (/.f64 (-.f64 (/.f64 (*.f64 (pow.f64 (PI.f64) #s(literal 4 binary64)) #s(literal 1/16 binary64)) (-.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(literal 2 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 (PI.f64) (PI.f64))))) (/.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(literal 4 binary64)) (-.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) #s(literal 2 binary64)) (*.f64 #s(literal -1/4 binary64) (*.f64 (PI.f64) (PI.f64)))))) (-.f64 (asin.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -5 binary64) (*.f64 v v))) (-.f64 #s(literal 1 binary64) (*.f64 v v)))) (*.f64 #s(literal -1/2 binary64) (PI.f64))))) (/.f64 (-.f64 (pow.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 3 binary64)) #s(literal 2 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 6 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 4 binary64))) (pow.f64 (*.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (/.f64 (PI.f64) #s(literal 2 binary64))) #s(literal 2 binary64))) (+.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) (/.f64 (PI.f64) #s(literal 2 binary64))))) (/.f64 (/.f64 (-.f64 (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 12 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 12 binary64))) (*.f64 (+.f64 (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 6 binary64)) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 6 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (-.f64 (*.f64 v v) #s(literal 1 binary64))))) #s(literal 2 binary64)) (pow.f64 (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 5 binary64) (*.f64 v v))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))) #s(literal 4 binary64))) (pow.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(literal 4 binary64))))) (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 v v) #s(literal 5 binary64))) (-.f64 (*.f64 v v) #s(literal 1 binary64)))))))
((/.f64 (*.f64 a (pow.f64 k m)) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 10 binary64) k)) (*.f64 k k))))
((*.f64 (/.f64 (pow.f64 k m) (+.f64 (*.f64 k (+.f64 #s(literal 10 binary64) k)) #s(literal 1 binary64))) a) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) (/.f64 a (-.f64 (*.f64 (-.f64 k #s(literal -10 binary64)) k) #s(literal -1 binary64)))) (/.f64 #s(approx (* a (pow k m)) a) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal 10 binary64) k)) (*.f64 k k))) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) (*.f64 (pow.f64 k m) a)) (/.f64 (*.f64 a (pow.f64 k m)) #s(approx (+ (+ 1 (* 10 k)) (* k k)) (*.f64 k k))))
((*.f64 (/.f64 #s(approx (pow k m) #s(literal 1 binary64)) (+.f64 (*.f64 k (+.f64 #s(literal 10 binary64) k)) #s(literal 1 binary64))) a) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) #s(approx (/ a (- (* (- k -10) k) -1)) a)) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) (/.f64 a #s(approx (- (* (- k -10) k) -1) (*.f64 (-.f64 k #s(literal -10 binary64)) k)))) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) #s(approx (/ a (- (* (- k -10) k) -1)) (/.f64 (/.f64 (+.f64 (*.f64 (/.f64 a k) #s(literal -10 binary64)) a) k) k))) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) (/.f64 a #s(approx (- (* (- k -10) k) -1) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) k) #s(literal -10 binary64)) k) #s(literal 1 binary64)) (*.f64 k k))))))
(#s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) #s(approx (/ a (- (* (- k -10) k) -1)) (/.f64 (-.f64 a (/.f64 (-.f64 (*.f64 #s(literal -99 binary64) (/.f64 a k)) (*.f64 #s(literal -10 binary64) a)) k)) (*.f64 k k)))) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) #s(approx (/ a (- (* (- k -10) k) -1)) (+.f64 (*.f64 (*.f64 a k) #s(literal -10 binary64)) a))) (*.f64 (/.f64 #s(approx (pow k m) #s(literal 1 binary64)) #s(approx (+ (* k (+ 10 k)) 1) (*.f64 k k))) a) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) #s(approx (/ a (- (* (- k -10) k) -1)) (/.f64 #s(approx (/ (+ (* (/ a k) -10) a) k) (*.f64 (/.f64 (/.f64 a k) k) #s(literal -10 binary64))) k))) #s(approx (/ (* a (pow k m)) (+ (+ 1 (* 10 k)) (* k k))) #s(approx (/ a (- (* (- k -10) k) -1)) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal -98 binary64) a) #s(literal 10 binary64)) k) (*.f64 #s(literal -99 binary64) a)) k) (*.f64 #s(literal 10 binary64) a)) k) a))))
((sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))))
(#s(approx (sqrt (+ (+ (* x x) (* y y)) (* z z))) z) (sqrt.f64 (+.f64 #s(approx (+ (* x x) (* y y)) (*.f64 y y)) (*.f64 z z))))
((*.f64 (+.f64 a (+.f64 b (+.f64 c d))) #s(literal 2 binary64)))
((*.f64 (+.f64 (+.f64 c b) (+.f64 d a)) #s(literal 2 binary64)) (*.f64 #s(approx (+ a (+ b (+ c d))) b) #s(literal 2 binary64)) (*.f64 #s(approx (+ a (+ b (+ c d))) c) #s(literal 2 binary64)) (*.f64 (+.f64 a #s(approx (+ b (+ c d)) d)) #s(literal 2 binary64)) (*.f64 (+.f64 a #s(approx (+ b (+ c d)) (+.f64 d c))) #s(literal 2 binary64)))
((*.f64 (+.f64 #s(approx (+ c b) c) (+.f64 d a)) #s(literal 2 binary64)) (+.f64 #s(approx (+ a (+ b (+ c d))) b) #s(approx (+ a (+ b (+ c d))) b)) (+.f64 #s(approx (+ a (+ b (+ c d))) c) #s(approx (+ a (+ b (+ c d))) c)))
(#s(literal 2 binary64))
((*.f64 a (+.f64 (+.f64 b c) d)))
((*.f64 a #s(approx (+ (+ b c) d) d)) (*.f64 a (+.f64 #s(approx (+ b c) c) d)) (+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a)) (/.f64 (-.f64 (pow.f64 (*.f64 d a) #s(literal 2 binary64)) (pow.f64 (*.f64 (+.f64 c b) a) #s(literal 2 binary64))) (-.f64 (*.f64 d a) (*.f64 (+.f64 c b) a))))
((*.f64 a #s(approx (+ (+ b c) d) (*.f64 (+.f64 (/.f64 (+.f64 d b) c) #s(literal 1 binary64)) c))) (+.f64 (*.f64 #s(approx (+ d b) d) a) (*.f64 c a)) (/.f64 #s(approx (- (pow (* d a) 2) (pow (* (+ c b) a) 2)) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 (neg.f64 a) a) c) (*.f64 (*.f64 (*.f64 b a) a) #s(literal 2 binary64))) c) (*.f64 (*.f64 (+.f64 d b) (-.f64 d b)) (*.f64 a a)))) (-.f64 (*.f64 d a) (*.f64 (+.f64 c b) a))))
((*.f64 a #s(approx (+ (+ b c) d) (*.f64 (+.f64 #s(approx (/ (+ d b) c) (/.f64 d c)) #s(literal 1 binary64)) c))) (/.f64 #s(approx (- (pow (* d a) 2) (pow (* (+ c b) a) 2)) (+.f64 (*.f64 (*.f64 (-.f64 (-.f64 (neg.f64 c) b) b) (*.f64 a a)) c) (*.f64 (*.f64 (-.f64 d b) (+.f64 d b)) (*.f64 a a)))) (-.f64 (*.f64 d a) (*.f64 (+.f64 c b) a))))
((*.f64 (+.f64 a b) (+.f64 a b)))
(#s(approx (* (+ a b) (+ a b)) (*.f64 b b)) #s(approx (* (+ a b) (+ a b)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) a) b) b)) (*.f64 (+.f64 a b) #s(approx (+ a b) b)))
(#s(approx (* (+ a b) (+ a b)) (*.f64 (+.f64 (+.f64 a a) b) b)))
((+.f64 (*.f64 x (*.f64 x x)) (*.f64 x x)))
(#s(approx (+ (* x (* x x)) (* x x)) (*.f64 x x)) (*.f64 (+.f64 (*.f64 x x) x) x))
((+.f64 x (*.f64 x x)))
(#s(approx (+ x (* x x)) x))
((+.f64 (+.f64 (+.f64 (+.f64 e d) c) b) a))
((+.f64 e (+.f64 (+.f64 c d) (+.f64 a b))) #s(approx (+ (+ (+ (+ e d) c) b) a) e) (+.f64 (+.f64 #s(approx (+ (+ e d) c) e) b) a) (+.f64 c (+.f64 (+.f64 d e) (+.f64 a b))) (+.f64 (+.f64 e (+.f64 (+.f64 c d) b)) a))
((+.f64 (+.f64 (+.f64 (+.f64 b a) c) d) e) (+.f64 e #s(approx (+ (+ c d) (+ a b)) d)) #s(approx (+ (+ (+ (+ e d) c) b) a) (+.f64 (+.f64 b e) (+.f64 c d))) (+.f64 e (+.f64 (+.f64 c d) #s(approx (+ a b) b))) (+.f64 c #s(approx (+ (+ d e) (+ a b)) (+.f64 (*.f64 (/.f64 (+.f64 (+.f64 d e) b) a) a) a))))
((+.f64 (+.f64 (+.f64 d c) a) (+.f64 e b)) #s(approx (+ (+ (+ (+ e d) c) b) a) #s(approx (+ (+ b e) (+ c d)) (+.f64 (+.f64 e d) c))) #s(approx (+ (+ (+ (+ e d) c) b) a) (+.f64 (+.f64 (+.f64 e b) c) d)) (+.f64 c (+.f64 (+.f64 #s(approx (+ a b) b) d) e)) (+.f64 (+.f64 e c) (+.f64 #s(approx (+ a b) b) d)))
((-.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))
(#s(approx (- (* (+ x 1) (+ x 1)) 1) (*.f64 (-.f64 x #s(literal -2 binary64)) x)) (-.f64 #s(approx (* (+ x 1) (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (- (* (+ x 1) (+ x 1)) 1) (*.f64 #s(literal 2 binary64) x)) #s(approx (- (* (+ x 1) (+ x 1)) 1) (*.f64 x x)) (+.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 x #s(literal 0 binary64))))
(#s(approx (- (* (+ x 1) (+ x 1)) 1) (+.f64 x x)) (+.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) #s(approx (+ x 0) x)))
(#s(approx (- (* (+ x 1) (+ x 1)) 1) #s(literal 0 binary64)))
((exp.f64 (+.f64 (log.f64 a) (log.f64 b))))
((*.f64 b a))
((+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x #s(literal 2 binary64)) y)) (*.f64 y y)))
((+.f64 (*.f64 y (+.f64 (*.f64 #s(literal 2 binary64) x) y)) (*.f64 x x)) #s(approx (+ (+ (* x x) (* (* x 2) y)) (* y y)) (*.f64 x x)) #s(approx (+ (+ (* x x) (* (* x 2) y)) (* y y)) (*.f64 y y)) #s(approx (+ (+ (* x x) (* (* x 2) y)) (* y y)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) x) y) y)) #s(approx (+ (+ (* x x) (* (* x 2) y)) (* y y)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) y) x) x)))
(#s(approx (+ (+ (* x x) (* (* x 2) y)) (* y y)) (*.f64 (+.f64 (+.f64 x x) y) y)) #s(approx (+ (+ (* x x) (* (* x 2) y)) (* y y)) (*.f64 (+.f64 (+.f64 y y) x) x)) (+.f64 (*.f64 y #s(approx (+ (* 2 x) y) (*.f64 #s(literal 2 binary64) x))) (*.f64 x x)) (+.f64 (*.f64 y (+.f64 (+.f64 y x) x)) (*.f64 x x)))
((+.f64 (*.f64 y (+.f64 #s(approx (+ y x) x) x)) (*.f64 x x)))
((*.f64 (+.f64 x y) (+.f64 x y)))
(#s(approx (* (+ x y) (+ x y)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) x) y) y)) #s(approx (* (+ x y) (+ x y)) (*.f64 x x)) #s(approx (* (+ x y) (+ x y)) (*.f64 y y)) (*.f64 (+.f64 x y) #s(approx (+ x y) x)) (*.f64 (+.f64 x y) #s(approx (+ x y) y)))
(#s(approx (* (+ x y) (+ x y)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) y) x) x)) #s(approx (* (+ x y) (+ x y)) (*.f64 (+.f64 (+.f64 x x) y) y)) (+.f64 (*.f64 x x) (-.f64 (*.f64 y x) (*.f64 (-.f64 y x) y))))
(#s(approx (* (+ x y) (+ x y)) (*.f64 (+.f64 (+.f64 y y) x) x)) (+.f64 (*.f64 x x) #s(approx (- (* y x) (* (- y x) y)) (*.f64 (*.f64 y x) #s(literal 2 binary64)))))
((-.f64 (*.f64 x x) (*.f64 y y)))
(#s(approx (- (* x x) (* y y)) (*.f64 x x)) #s(approx (- (* x x) (* y y)) (*.f64 (neg.f64 y) y)) (*.f64 (-.f64 x y) (+.f64 y x)))
((*.f64 (+.f64 x y) (-.f64 x y)))
(#s(approx (* (+ x y) (- x y)) (*.f64 x x)) #s(approx (* (+ x y) (- x y)) (*.f64 (neg.f64 y) y)))
((fabs.f64 (+.f64 (*.f64 (*.f64 ew (sin.f64 t)) (cos.f64 (atan.f64 (/.f64 (/.f64 eh ew) (tan.f64 t))))) (*.f64 (*.f64 eh (cos.f64 t)) (sin.f64 (atan.f64 (/.f64 (/.f64 eh ew) (tan.f64 t))))))))
((fabs.f64 (+.f64 (*.f64 (*.f64 ew (sin.f64 t)) (cos.f64 (atan.f64 (/.f64 (/.f64 eh ew) (tan.f64 t))))) (*.f64 (*.f64 eh (cos.f64 t)) (sin.f64 (atan.f64 (/.f64 eh (*.f64 (tan.f64 t) ew))))))) (fabs.f64 #s(approx (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))) (*.f64 (sin.f64 (atan.f64 (*.f64 (/.f64 (cos.f64 t) ew) (/.f64 eh (sin.f64 t))))) eh))) (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (/.f64 eh ew) eh) (tan.f64 t)) (cos.f64 t)) (*.f64 (sin.f64 t) ew)) (cosh.f64 (asinh.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew)))) (pow.f64 (sqrt.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (/.f64 eh ew) eh) (tan.f64 t)) (cos.f64 t)) (*.f64 (sin.f64 t) ew)) (cosh.f64 (asinh.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew))))) #s(literal 2 binary64)) (fabs.f64 (+.f64 (/.f64 (*.f64 (-.f64 (cos.f64 (-.f64 (-.f64 t (/.f64 (PI.f64) #s(literal 2 binary64))) (atan.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew)))) (cos.f64 (+.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) t) (atan.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew))))) ew) #s(literal 2 binary64)) (*.f64 (*.f64 eh (cos.f64 t)) (sin.f64 (atan.f64 (/.f64 (/.f64 eh ew) (tan.f64 t))))))))
((fabs.f64 #s(approx (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* (tan t) ew)))))) (*.f64 (+.f64 (*.f64 ew (/.f64 (*.f64 (cos.f64 (atan.f64 (/.f64 (/.f64 (*.f64 (cos.f64 t) eh) ew) (sin.f64 t)))) (sin.f64 t)) eh)) (*.f64 (sin.f64 (atan.f64 (/.f64 (/.f64 (*.f64 (cos.f64 t) eh) ew) (sin.f64 t)))) (cos.f64 t))) eh))) #s(approx (pow (sqrt (/ (+ (* (/ (* (/ eh ew) eh) (tan t)) (cos t)) (* (sin t) ew)) (cosh (asinh (/ (/ eh (tan t)) ew))))) 2) (*.f64 (sin.f64 t) ew)) (fabs.f64 #s(approx (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))) (*.f64 (sin.f64 (atan.f64 (*.f64 (/.f64 (cos.f64 t) ew) #s(approx (/ eh (sin t)) (/.f64 (+.f64 (*.f64 (-.f64 (neg.f64 (*.f64 (*.f64 eh #s(literal -7/360 binary64)) (*.f64 t t))) (*.f64 #s(literal -1/6 binary64) eh)) (*.f64 t t)) eh) t))))) eh))) (/.f64 #s(approx (+ (* (/ (* (/ eh ew) eh) (tan t)) (cos t)) (* (sin t) ew)) (/.f64 (+.f64 (*.f64 (-.f64 (+.f64 (+.f64 (*.f64 (-.f64 (-.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) ew) (*.f64 #s(literal -1/24 binary64) (*.f64 (/.f64 eh ew) eh))) (*.f64 #s(literal 2/15 binary64) (*.f64 (/.f64 eh ew) eh))) (*.f64 (*.f64 (*.f64 (/.f64 eh ew) eh) #s(literal -5/6 binary64)) #s(literal 1/3 binary64))) (*.f64 t t)) (*.f64 (*.f64 (/.f64 eh ew) eh) #s(literal -1/2 binary64))) ew) (*.f64 #s(literal 1/3 binary64) (*.f64 (/.f64 eh ew) eh))) (*.f64 t t)) (*.f64 (/.f64 eh ew) eh)) t)) (cosh.f64 (asinh.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew)))) (pow.f64 (sqrt.f64 (+.f64 (/.f64 (*.f64 (sin.f64 t) ew) (cosh.f64 (asinh.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew)))) (*.f64 (tanh.f64 (asinh.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew))) (*.f64 (cos.f64 t) eh)))) #s(literal 2 binary64)))
((fabs.f64 #s(approx (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* (tan t) ew)))))) (*.f64 #s(approx (+ (* ew (/ (* (cos (atan (/ (/ (* (cos t) eh) ew) (sin t)))) (sin t)) eh)) (* (sin (atan (/ (/ (* (cos t) eh) ew) (sin t)))) (cos t))) (*.f64 ew (+.f64 (*.f64 (cos.f64 t) (/.f64 (sin.f64 (atan.f64 (/.f64 (/.f64 (*.f64 eh (cos.f64 t)) ew) (sin.f64 t)))) ew)) (*.f64 (cos.f64 (atan.f64 (/.f64 (/.f64 (*.f64 eh (cos.f64 t)) ew) (sin.f64 t)))) (/.f64 (sin.f64 t) eh))))) eh))) #s(approx (pow (sqrt (/ (+ (* (/ (* (/ eh ew) eh) (tan t)) (cos t)) (* (sin t) ew)) (cosh (asinh (/ (/ eh (tan t)) ew))))) 2) (*.f64 #s(approx (sin t) t) ew)) #s(approx (pow (sqrt (/ (+ (* (/ (* (/ eh ew) eh) (tan t)) (cos t)) (* (sin t) ew)) (cosh (asinh (/ (/ eh (tan t)) ew))))) 2) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 eh eh)) (*.f64 (*.f64 t ew) (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 t #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 eh ew)))) (*.f64 (pow.f64 t #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 eh ew))))))) (fabs.f64 #s(approx (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))) (*.f64 (/.f64 (/.f64 eh (tan.f64 t)) (*.f64 ew (cosh.f64 (asinh.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew))))) eh))) (fabs.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (/.f64 eh ew) eh) (tan.f64 t)) (cos.f64 t)) (*.f64 (sin.f64 t) ew)) (cosh.f64 (asinh.f64 (/.f64 (/.f64 eh (tan.f64 t)) ew))))))
((fabs.f64 (-.f64 (*.f64 (*.f64 ew (cos.f64 t)) (cos.f64 (atan.f64 (/.f64 (*.f64 (neg.f64 eh) (tan.f64 t)) ew)))) (*.f64 (*.f64 eh (sin.f64 t)) (sin.f64 (atan.f64 (/.f64 (*.f64 (neg.f64 eh) (tan.f64 t)) ew)))))))
((fabs.f64 (-.f64 (*.f64 (*.f64 (cos.f64 (atan.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))) (cos.f64 t)) ew) (*.f64 (*.f64 eh (sin.f64 t)) (sin.f64 (atan.f64 (/.f64 (*.f64 (neg.f64 eh) (tan.f64 t)) ew)))))) (fabs.f64 #s(approx (- (* (* ew (cos t)) (cos (atan (/ (* (neg eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (neg eh) (tan t)) ew))))) (*.f64 (cos.f64 (atan.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 t) ew)) (/.f64 eh (cos.f64 t))))) ew))) (fabs.f64 (/.f64 (+.f64 (*.f64 (sin.f64 t) (*.f64 (/.f64 (tan.f64 t) ew) (*.f64 eh eh))) (*.f64 (cos.f64 t) ew)) (cosh.f64 (asinh.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))))) (pow.f64 (sqrt.f64 (/.f64 (+.f64 (*.f64 (sin.f64 t) (*.f64 (/.f64 (tan.f64 t) ew) (*.f64 eh eh))) (*.f64 (cos.f64 t) ew)) (cosh.f64 (asinh.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))))) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 t) ew) (cos.f64 (atan.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh)))) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 (atan.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))) (*.f64 (sin.f64 t) eh)) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (cos.f64 t) ew) (*.f64 (sin.f64 t) (*.f64 (/.f64 (tan.f64 t) ew) (*.f64 eh eh)))) (cosh.f64 (asinh.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))))))
((fabs.f64 (+.f64 (*.f64 (*.f64 (cos.f64 t) ew) (cos.f64 (atan.f64 (*.f64 eh (/.f64 (tan.f64 t) ew))))) (*.f64 (neg.f64 eh) (*.f64 (tanh.f64 (asinh.f64 (*.f64 (neg.f64 eh) (/.f64 (tan.f64 t) ew)))) (sin.f64 t))))) (fabs.f64 #s(approx (pow (sqrt (/ (+ (* (sin t) (* (/ (tan t) ew) (* eh eh))) (* (cos t) ew)) (cosh (asinh (* (/ (tan t) ew) eh))))) 2) ew)) (fabs.f64 (/.f64 #s(approx (+ (* (sin t) (* (/ (tan t) ew) (* eh eh))) (* (cos t) ew)) (+.f64 (*.f64 (*.f64 t t) (+.f64 (/.f64 (*.f64 eh eh) ew) (*.f64 #s(literal -1/2 binary64) ew))) ew)) (cosh.f64 (asinh.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))))) (fabs.f64 (/.f64 #s(approx (+ (* (sin t) (* (/ (tan t) ew) (* eh eh))) (* (cos t) ew)) (/.f64 (*.f64 (*.f64 eh eh) (pow.f64 (sin.f64 t) #s(literal 2 binary64))) (*.f64 ew (cos.f64 t)))) (cosh.f64 (asinh.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))))) (pow.f64 (/.f64 (sqrt.f64 (+.f64 (*.f64 (cos.f64 t) ew) (*.f64 (*.f64 (*.f64 eh (/.f64 (tan.f64 t) ew)) eh) (sin.f64 t)))) (sqrt.f64 (cosh.f64 (asinh.f64 (*.f64 eh (/.f64 (tan.f64 t) ew)))))) #s(literal 2 binary64)))
((fabs.f64 (+.f64 (*.f64 #s(approx (* (cos t) ew) ew) (cos.f64 (atan.f64 (*.f64 eh (/.f64 (tan.f64 t) ew))))) (*.f64 (neg.f64 eh) (*.f64 (tanh.f64 (asinh.f64 (*.f64 (neg.f64 eh) (/.f64 (tan.f64 t) ew)))) (sin.f64 t))))) #s(approx (pow (/ (sqrt (+ (* (cos t) ew) (* (* (* eh (/ (tan t) ew)) eh) (sin t)))) (sqrt (cosh (asinh (* eh (/ (tan t) ew)))))) 2) ew) (fabs.f64 (/.f64 #s(approx (+ (* (sin t) (* (/ (tan t) ew) (* eh eh))) (* (cos t) ew)) (+.f64 #s(approx (* (* t t) (+ (/ (* eh eh) ew) (* -1/2 ew))) (*.f64 #s(literal -1/2 binary64) (*.f64 ew (*.f64 t t)))) ew)) (cosh.f64 (asinh.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))))) (fabs.f64 (/.f64 #s(approx (+ (* (sin t) (* (/ (tan t) ew) (* eh eh))) (* (cos t) ew)) (+.f64 #s(approx (* (* t t) (+ (/ (* eh eh) ew) (* -1/2 ew))) (/.f64 (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 ew ew)) (*.f64 t t)) (*.f64 (*.f64 eh eh) (*.f64 t t))) ew)) ew)) (cosh.f64 (asinh.f64 (*.f64 (/.f64 (tan.f64 t) ew) eh))))) (pow.f64 (/.f64 (sqrt.f64 (+.f64 (*.f64 (cos.f64 t) ew) (*.f64 (*.f64 (*.f64 eh (/.f64 (tan.f64 t) ew)) eh) (sin.f64 t)))) (sqrt.f64 (cosh.f64 #s(approx (asinh (* eh (/ (tan t) ew))) (/.f64 (*.f64 eh t) ew))))) #s(literal 2 binary64)))
((*.f64 R (sqrt.f64 (+.f64 (*.f64 (*.f64 (-.f64 lambda1 lambda2) (cos.f64 (/.f64 (+.f64 phi1 phi2) #s(literal 2 binary64)))) (*.f64 (-.f64 lambda1 lambda2) (cos.f64 (/.f64 (+.f64 phi1 phi2) #s(literal 2 binary64))))) (*.f64 (-.f64 phi1 phi2) (-.f64 phi1 phi2))))))
(#s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (neg.f64 phi1) (+.f64 (*.f64 (neg.f64 R) (/.f64 phi2 phi1)) R))) (*.f64 R #s(approx (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2)))) phi2)) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (*.f64 R lambda1) (cos.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 phi2 phi1))))) (*.f64 R #s(approx (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2)))) (*.f64 (neg.f64 lambda1) (cos.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 phi2 phi1)))))) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (+.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 phi2 phi1))) R) (/.f64 (*.f64 (*.f64 R lambda2) (cos.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 phi2 phi1)))) (neg.f64 lambda1))) lambda1)))
(#s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (neg.f64 phi1) #s(approx (+ (* (neg R) (/ phi2 phi1)) R) (*.f64 (+.f64 (/.f64 R phi2) (/.f64 (neg.f64 R) phi1)) phi2)))) (*.f64 R #s(approx (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2)))) (neg.f64 phi1))) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (*.f64 R lambda1) (cos.f64 #s(approx (* -1/2 (+ phi2 phi1)) (*.f64 #s(literal -1/2 binary64) phi1))))) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (*.f64 R lambda1) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (+.f64 phi2 phi1)))))) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (+.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 phi2 phi1))) R) (/.f64 (*.f64 (*.f64 R lambda2) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (+.f64 phi2 phi1))))) (neg.f64 lambda1))) lambda1)))
(#s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (neg.f64 phi1) #s(approx (+ (* (neg R) (/ phi2 phi1)) R) (*.f64 #s(approx (+ (/ R phi2) (/ (neg R) phi1)) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) phi2) (/.f64 #s(literal 1 binary64) phi1)) R)) phi2)))) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) #s(approx (* (neg phi1) (+ (* (neg R) (/ phi2 phi1)) R)) (-.f64 (*.f64 phi2 R) (*.f64 phi1 R)))) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) (*.f64 (neg.f64 phi1) #s(approx (+ (* (neg R) (/ phi2 phi1)) R) (/.f64 (*.f64 (+.f64 (*.f64 (neg.f64 R) phi2) (*.f64 phi1 R)) phi2) (*.f64 phi1 phi2))))) (*.f64 R #s(approx (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2)))) (*.f64 (neg.f64 lambda2) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 phi2 phi1)))))) #s(approx (* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2)))) (* (- phi1 phi2) (- phi1 phi2))))) #s(approx (* (+ (* (cos (* -1/2 (+ phi2 phi1))) R) (/ (* (* R lambda2) (cos (* -1/2 (+ phi2 phi1)))) (neg lambda1))) lambda1) (*.f64 (-.f64 (/.f64 (*.f64 (*.f64 lambda1 R) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 phi2 phi1)))) lambda2) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 phi2 phi1))) R)) lambda2))))
((sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a)))))
((sqrt.f64 (fabs.f64 (/.f64 (*.f64 (+.f64 b a) (/.f64 (-.f64 a b) a)) a))) (sqrt.f64 (fabs.f64 #s(approx (/ (- (* a a) (* b b)) (* a a)) #s(literal 1 binary64)))) (sqrt.f64 (fabs.f64 (+.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 b) b) (*.f64 a a))))) (sqrt.f64 (fabs.f64 (/.f64 (*.f64 (-.f64 a b) (+.f64 b a)) (*.f64 a a)))) (sqrt.f64 (fabs.f64 (-.f64 (*.f64 (/.f64 b a) (/.f64 b a)) #s(literal 1 binary64)))))
((sqrt.f64 (fabs.f64 #s(approx (/ (- (* a a) (* b b)) (* a a)) (/.f64 (-.f64 a (*.f64 b (/.f64 b a))) a)))) (sqrt.f64 (fabs.f64 (/.f64 #s(approx (- (* a a) (* b b)) (*.f64 (neg.f64 b) b)) (*.f64 a a)))) (/.f64 (sqrt.f64 (fabs.f64 (*.f64 (+.f64 a b) (-.f64 b a)))) (fabs.f64 a)))
((/.f64 (sqrt.f64 (fabs.f64 #s(approx (* (+ a b) (- b a)) (*.f64 b b)))) (fabs.f64 a)))
((/.f64 #s(literal 10 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))))
((/.f64 #s(literal 10 binary64) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x))) #s(approx (/ 10 (- 1 (* x x))) #s(literal 10 binary64)) #s(approx (/ 10 (- 1 (* x x))) (-.f64 (*.f64 (*.f64 x x) #s(literal 10 binary64)) #s(literal -10 binary64))) #s(approx (/ 10 (- 1 (* x x))) (/.f64 #s(literal -10 binary64) (*.f64 x x))) (*.f64 (/.f64 #s(literal 10 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 x x))))
((/.f64 #s(literal 10 binary64) (+.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))) #s(approx (/ 10 (- 1 (* x x))) (-.f64 (*.f64 (*.f64 #s(literal 10 binary64) x) x) #s(literal -10 binary64))) (/.f64 (/.f64 #s(literal 10 binary64) (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 10 binary64) (-.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 10 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 (*.f64 x x) x) #s(literal 1 binary64)))))
((/.f64 #s(literal 10 binary64) (+.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) x))) (/.f64 #s(approx (/ 10 (- x -1)) #s(literal 10 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 #s(literal 10 binary64) (-.f64 (-.f64 (*.f64 x x) x) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 #s(literal 10 binary64) (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (-.f64 (*.f64 x x) x) #s(literal -1 binary64)))) (*.f64 (/.f64 (/.f64 #s(literal 10 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)) (-.f64 (-.f64 (*.f64 x x) x) #s(literal -1 binary64))))
((-.f64 #s(literal 1 binary64) (cos.f64 x)))
(#s(approx (- 1 (cos x)) (*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 #s(literal 1/720 binary64) (*.f64 x x)) #s(literal 1/24 binary64))) (*.f64 #s(literal -1/2 binary64) x)) x)) (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (-.f64 #s(literal 1 binary64) #s(approx (cos x) (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) #s(literal -1 binary64)))) #s(approx (- 1 (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) (*.f64 x x)) #s(literal -1/2 binary64)) (*.f64 x x))))
(#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) #s(approx (- 1 (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/720 binary64)) #s(literal 1/24 binary64)) (*.f64 x x)) x) (*.f64 #s(literal -1/2 binary64) x)) x)))
(#s(approx (- 1 (cos x)) (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/720 binary64) (*.f64 x x)) #s(literal 1/24 binary64)) x) x) #s(literal -1/2 binary64)) x) x)))
((-.f64 x (sqrt.f64 (-.f64 (*.f64 x x) eps))))
((/.f64 (-.f64 (*.f64 x x) (-.f64 (*.f64 x x) eps)) (+.f64 (sqrt.f64 (-.f64 (*.f64 x x) eps)) x)) (-.f64 x #s(approx (sqrt (- (* x x) eps)) x)) (-.f64 x (sqrt.f64 #s(approx (- (* x x) eps) (neg.f64 eps)))) (-.f64 (/.f64 (*.f64 x x) (+.f64 (sqrt.f64 (-.f64 (*.f64 x x) eps)) x)) (/.f64 (-.f64 (*.f64 x x) eps) (+.f64 (sqrt.f64 (-.f64 (*.f64 x x) eps)) x))) #s(approx (- x (sqrt (- (* x x) eps))) (*.f64 (-.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (/.f64 eps (pow.f64 x #s(literal 5 binary64))) #s(literal -1/16 binary64))) eps) (/.f64 #s(literal -1/2 binary64) x)) eps)))
((/.f64 #s(approx (- (* x x) (- (* x x) eps)) eps) (+.f64 (sqrt.f64 (-.f64 (*.f64 x x) eps)) x)) (-.f64 x #s(approx (sqrt (- (* x x) eps)) (neg.f64 x))) #s(approx (- (/ (* x x) (+ (sqrt (- (* x x) eps)) x)) (/ (- (* x x) eps) (+ (sqrt (- (* x x) eps)) x))) (*.f64 (/.f64 eps x) #s(literal 1/2 binary64))) #s(approx (- x (sqrt (- (* x x) eps))) (*.f64 #s(approx (- (* (- (/ 1/8 (pow x 3)) (* (/ eps (pow x 5)) -1/16)) eps) (/ -1/2 x)) (/.f64 (-.f64 (*.f64 (/.f64 eps (*.f64 x x)) #s(literal 1/8 binary64)) #s(literal -1/2 binary64)) x)) eps)) #s(approx (- x (sqrt (- (* x x) eps))) (*.f64 (-.f64 (*.f64 #s(approx (- (/ 1/8 (pow x 3)) (* (/ eps (pow x 5)) -1/16)) (/.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 x x)) (*.f64 #s(literal -1/16 binary64) eps)) (pow.f64 x #s(literal 5 binary64)))) eps) (/.f64 #s(literal -1/2 binary64) x)) eps)))
((/.f64 #s(approx (- (* x x) (- (* x x) eps)) eps) #s(approx (+ (sqrt (- (* x x) eps)) x) (-.f64 (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 (/.f64 eps x) x) #s(literal -1/8 binary64)) #s(literal 1/2 binary64)) x) eps) (*.f64 #s(literal -2 binary64) x)))) (/.f64 #s(approx (- (* x x) (- (* x x) eps)) eps) (+.f64 #s(approx (sqrt (- (* x x) eps)) x) x)) (/.f64 #s(approx (- (* x x) (- (* x x) eps)) eps) (+.f64 #s(approx (sqrt (- (* x x) eps)) (-.f64 x (*.f64 (/.f64 eps x) #s(literal 1/2 binary64)))) x)) (/.f64 #s(approx (- (* x x) (- (* x x) eps)) eps) (+.f64 (sqrt.f64 #s(approx (- (* x x) eps) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 eps x) x)) x) x))) x)))
((-.f64 (pow.f64 (+.f64 x eps) #s(literal 5 binary64)) (pow.f64 x #s(literal 5 binary64))))
(#s(approx (- (pow (+ x eps) 5) (pow x 5)) (-.f64 (pow.f64 eps #s(literal 5 binary64)) (*.f64 (*.f64 #s(literal -5 binary64) (pow.f64 eps #s(literal 4 binary64))) x))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (pow.f64 eps #s(literal 5 binary64))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 5 binary64)) eps)) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (+.f64 (*.f64 (/.f64 x eps) #s(literal 5 binary64)) #s(literal 1 binary64)) (pow.f64 eps #s(literal 5 binary64)))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (+.f64 (+.f64 (/.f64 (*.f64 #s(literal 10 binary64) (*.f64 eps eps)) x) (*.f64 #s(literal 4 binary64) eps)) eps) (pow.f64 x #s(literal 4 binary64)))))
(#s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (-.f64 eps (*.f64 #s(literal -5 binary64) x)) (pow.f64 eps #s(literal 4 binary64)))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal 5 binary64) eps)))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 5 binary64)) eps)) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (pow.f64 (*.f64 eps eps) #s(literal 5/2 binary64))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -4 binary64))) #s(literal 5 binary64)) eps)))
(#s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 (-.f64 eps (*.f64 #s(literal -5 binary64) x)) (*.f64 eps eps)) (*.f64 eps eps))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 5 binary64) x) eps) x))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 5 binary64)) (*.f64 x x)) eps)) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 5 binary64) eps) (neg.f64 x)) (neg.f64 x)))) #s(approx (- (pow (+ x eps) 5) (pow x 5)) (*.f64 (*.f64 (+.f64 (*.f64 #s(literal 5 binary64) eps) (*.f64 (/.f64 (*.f64 eps eps) x) #s(literal 10 binary64))) (*.f64 x x)) (*.f64 x x))))
((-.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (pow.f64 x #s(literal 2 binary64))))
(#s(approx (- (pow (+ x eps) 2) (pow x 2)) (*.f64 eps eps)) #s(approx (- (pow (+ x eps) 2) (pow x 2)) (*.f64 (*.f64 eps x) #s(literal 2 binary64))) #s(approx (- (pow (+ x eps) 2) (pow x 2)) (*.f64 (*.f64 (+.f64 (*.f64 (/.f64 x eps) #s(literal 2 binary64)) #s(literal 1 binary64)) eps) eps)) #s(approx (- (pow (+ x eps) 2) (pow x 2)) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) x) eps) eps)))
(#s(approx (- (pow (+ x eps) 2) (pow x 2)) (*.f64 (*.f64 eps #s(literal 2 binary64)) x)) #s(approx (- (pow (+ x eps) 2) (pow x 2)) (*.f64 (+.f64 (+.f64 x x) eps) eps)) #s(approx (- (pow (+ x eps) 2) (pow x 2)) (+.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) eps) (*.f64 eps eps))))
((/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)))
(#s(approx (/ (- x (sin x)) (tan x)) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -143/604800 binary64) (*.f64 x x)) #s(literal 11/15120 binary64)) x) x) #s(literal 23/360 binary64))) (*.f64 #s(literal -1/6 binary64) (*.f64 x x)))) #s(approx (/ (- x (sin x)) (tan x)) (*.f64 (*.f64 x x) #s(literal 1/6 binary64))) #s(approx (/ (- x (sin x)) (tan x)) (*.f64 (+.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 (-.f64 (*.f64 #s(literal -11/15120 binary64) (*.f64 x x)) #s(literal 23/360 binary64)) (pow.f64 x #s(literal 3 binary64)))) x)) (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 (+.f64 (PI.f64) x))) (/.f64 #s(approx (- x (sin x)) (*.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 (+.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/362880 binary64)) (-.f64 #s(literal 1/120 binary64) (*.f64 #s(literal 1/5040 binary64) (*.f64 x x)))) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))) (tan.f64 x)))
(#s(approx (/ (- x (sin x)) (tan x)) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal -143/604800 binary64)) #s(literal 11/15120 binary64)) x) x) #s(literal 23/360 binary64)) (*.f64 x x)) (*.f64 x x)) (*.f64 #s(literal -1/6 binary64) (*.f64 x x)))) #s(approx (/ (- x (sin x)) (tan (+ (PI) x))) #s(literal 0 binary64)) #s(approx (/ (- x (sin x)) (tan x)) (*.f64 (+.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -11/15120 binary64) (*.f64 x x)) #s(literal 23/360 binary64)) (*.f64 x x)) x)) x)) (/.f64 #s(approx (- x (sin x)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) x)) x)) (tan.f64 (+.f64 (PI.f64) x))) (/.f64 #s(approx (- x (sin x)) (*.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/362880 binary64)) (-.f64 #s(literal 1/120 binary64) (*.f64 #s(literal 1/5040 binary64) (*.f64 x x)))) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))) (tan.f64 x)))
(#s(approx (/ (- x (sin x)) (tan x)) (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -143/604800 binary64) (*.f64 x x)) #s(literal 11/15120 binary64)) x) x) #s(literal 23/360 binary64)) x) x) #s(literal -1/6 binary64)) (*.f64 x x))) #s(approx (/ (- x (sin x)) (tan x)) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x)) #s(approx (/ (- x (sin x)) (tan x)) (-.f64 (*.f64 #s(approx (* (- (* (* (- (* (* x x) -143/604800) 11/15120) x) x) 23/360) (* x x)) (*.f64 (*.f64 x x) #s(literal -23/360 binary64))) (*.f64 x x)) (*.f64 #s(literal -1/6 binary64) (*.f64 x x)))) (/.f64 #s(approx (- x (sin x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) (tan.f64 x)) (/.f64 #s(approx (- x (sin x)) (*.f64 (*.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 (-.f64 (+.f64 #s(literal 1/120 binary64) (*.f64 #s(literal 1/362880 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 #s(literal 1/5040 binary64) (*.f64 x x))) (*.f64 x x))) (*.f64 x x)) x)) (tan.f64 x)))
((*.f64 (cos.f64 x) (exp.f64 (*.f64 #s(literal 10 binary64) (*.f64 x x)))))
((*.f64 (cos.f64 x) (/.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 #s(literal 10 binary64)) (neg.f64 x)) x))) #s(approx (* (cos x) (exp (* 10 (* x x)))) #s(literal 1 binary64)) (*.f64 #s(approx (cos x) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64))) (exp.f64 (*.f64 #s(literal 10 binary64) (*.f64 x x)))) (*.f64 (cos.f64 x) (pow.f64 (exp.f64 #s(literal 10 binary64)) (*.f64 x x))) (*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) x) #s(literal 10 binary64))))
((*.f64 (+.f64 (*.f64 (sin.f64 x) (cos.f64 (/.f64 (PI.f64) #s(literal 2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 (/.f64 (PI.f64) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 #s(literal 10 binary64)) (neg.f64 x)) x))) (*.f64 (cos.f64 x) #s(approx (/ 1 (pow (pow (exp 10) (neg x)) x)) #s(literal 1 binary64))) (*.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 10 binary64) x)) (cos.f64 x)) (*.f64 (cos.f64 x) (/.f64 #s(literal 1 binary64) #s(approx (pow (pow (exp 10) (neg x)) x) (pow.f64 (pow.f64 (exp.f64 x) x) #s(literal -10 binary64))))) (*.f64 (cos.f64 x) (*.f64 (pow.f64 (exp.f64 x) (/.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64))))))
((*.f64 (+.f64 (*.f64 (sin.f64 x) (cos.f64 (/.f64 (PI.f64) #s(literal 2 binary64)))) (*.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 #s(literal 10 binary64)) (neg.f64 x)) x))) (*.f64 #s(approx (cos x) (+.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) #s(literal 1 binary64))) #s(approx (/ 1 (pow (pow (exp 10) (neg x)) x)) #s(literal 1 binary64))) (*.f64 (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)) (pow.f64 (exp.f64 #s(literal 10 binary64)) (*.f64 x x))) (*.f64 (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)) (/.f64 #s(literal 1 binary64) #s(approx (pow (pow (exp 10) (neg x)) x) (pow.f64 (pow.f64 (exp.f64 x) x) #s(literal -10 binary64))))) (*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) #s(literal 5 binary64)) (pow.f64 (exp.f64 x) (/.f64 (*.f64 x #s(literal 10 binary64)) #s(literal 2 binary64))))))
((*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))))))))
((*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (sin.f64 (/.f64 phi1 #s(literal 2 binary64))) (cos.f64 (/.f64 phi2 #s(literal 2 binary64)))) (*.f64 (cos.f64 (/.f64 phi1 #s(literal 2 binary64))) (sin.f64 (/.f64 phi2 #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 #s(approx (- 1 (+ (pow (sin (/ (- phi1 phi2) 2)) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) (-.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) phi1)) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 lambda2 lambda1) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (cos.f64 phi1)))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) #s(approx (sin (/ (- lambda1 lambda2) 2)) (sin.f64 (*.f64 #s(literal -1/2 binary64) lambda2)))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (exp.f64 (*.f64 (log.f64 (+.f64 (*.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 phi2) (cos.f64 phi1))) (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 #s(approx (- 1 (+ (pow (sin (/ (- phi1 phi2) 2)) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) (-.f64 (-.f64 (+.f64 (*.f64 (*.f64 (*.f64 (cos.f64 phi1) lambda2) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) lambda1)) (cos.f64 phi2))) (sin.f64 (*.f64 #s(literal 1/2 binary64) lambda1))) #s(literal 1 binary64)) (pow.f64 (sin.f64 (*.f64 (-.f64 phi2 phi1) #s(literal -1/2 binary64))) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) lambda1)) #s(literal 2 binary64)) (*.f64 (cos.f64 phi2) (cos.f64 phi1))))))))))
((*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (sin.f64 (/.f64 phi1 #s(literal 2 binary64))) (cos.f64 (/.f64 phi2 #s(literal 2 binary64)))) (*.f64 (cos.f64 (/.f64 phi1 #s(literal 2 binary64))) (sin.f64 (/.f64 phi2 #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (-.f64 (*.f64 (cos.f64 (/.f64 phi2 #s(literal -2 binary64))) (sin.f64 (/.f64 phi1 #s(literal 2 binary64)))) (*.f64 (sin.f64 (/.f64 phi2 #s(literal 2 binary64))) (cos.f64 (/.f64 phi1 #s(literal -2 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 #s(approx (- 1 (+ (pow (sin (/ (- phi1 phi2) 2)) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) #s(approx (- (- (+ (* (* (* (cos phi1) lambda2) (* (cos (* -1/2 lambda1)) (cos phi2))) (sin (* 1/2 lambda1))) 1) (pow (sin (* (- phi2 phi1) -1/2)) 2)) (* (pow (sin (* 1/2 lambda1)) 2) (* (cos phi2) (cos phi1)))) (-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 (*.f64 (-.f64 phi2 phi1) #s(literal -1/2 binary64))) #s(literal 2 binary64))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 #s(approx (- 1 (+ (pow (sin (/ (- phi1 phi2) 2)) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) (-.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) phi1)) #s(literal 2 binary64)) (*.f64 (pow.f64 #s(approx (sin (* (- lambda2 lambda1) -1/2)) (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) lambda2) (cos.f64 (*.f64 #s(literal -1/2 binary64) lambda1))) (sin.f64 (*.f64 #s(literal 1/2 binary64) lambda1)))) #s(literal 2 binary64)) (cos.f64 phi1)))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (sin.f64 (/.f64 phi1 #s(literal 2 binary64))) (cos.f64 (/.f64 phi2 #s(literal 2 binary64)))) (*.f64 (cos.f64 (/.f64 phi1 #s(literal 2 binary64))) (sin.f64 (/.f64 phi2 #s(literal 2 binary64))))) #s(literal 2 binary64)) #s(approx (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 lambda1 lambda2))) #s(literal 2 binary64)) (cos.f64 phi2))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (sin.f64 (/.f64 phi1 #s(literal 2 binary64))) (cos.f64 (/.f64 phi2 #s(literal 2 binary64)))) (*.f64 (cos.f64 (/.f64 phi1 #s(literal 2 binary64))) (sin.f64 (/.f64 phi2 #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (sin (/ (- phi1 phi2) 2)) (+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) phi1) (cos.f64 (*.f64 #s(literal -1/2 binary64) phi2))) (sin.f64 (*.f64 #s(literal -1/2 binary64) phi2)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))))))))
((*.f64 R (*.f64 #s(literal 2 binary64) #s(approx (atan2 (sqrt (+ (pow (- (* (sin (/ phi1 2)) (cos (/ phi2 2))) (* (cos (/ phi1 2)) (sin (/ phi2 2)))) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) (sqrt (- 1 (+ (pow (- (* (cos (/ phi2 -2)) (sin (/ phi1 2))) (* (sin (/ phi2 2)) (cos (/ phi1 -2)))) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))))) (atan2.f64 (sqrt.f64 (+.f64 (*.f64 (*.f64 (cos.f64 phi2) (cos.f64 phi1)) (pow.f64 (sin.f64 (*.f64 (-.f64 lambda2 lambda1) #s(literal -1/2 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) phi2)) (sin.f64 (*.f64 #s(literal 1/2 binary64) phi1))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) phi2)) (cos.f64 (*.f64 #s(literal -1/2 binary64) phi1)))) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (cos.f64 phi2) (cos.f64 phi1)) (pow.f64 (sin.f64 (*.f64 (-.f64 lambda2 lambda1) #s(literal -1/2 binary64))) #s(literal 2 binary64)))) (pow.f64 (-.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) phi2)) (sin.f64 (*.f64 #s(literal 1/2 binary64) phi1))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) phi2)) (cos.f64 (*.f64 #s(literal -1/2 binary64) phi1)))) #s(literal 2 binary64)))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 #s(approx (sqrt (+ (pow (sin (/ (- phi1 phi2) 2)) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) phi2)) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 lambda2 lambda1) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (cos.f64 phi2))))) (sqrt.f64 #s(approx (- 1 (+ (pow (sin (/ (- phi1 phi2) 2)) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) #s(approx (- (- (+ (* (* (* (cos phi1) lambda2) (* (cos (* -1/2 lambda1)) (cos phi2))) (sin (* 1/2 lambda1))) 1) (pow (sin (* (- phi2 phi1) -1/2)) 2)) (* (pow (sin (* 1/2 lambda1)) 2) (* (cos phi2) (cos phi1)))) (-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 (*.f64 (-.f64 phi2 phi1) #s(literal -1/2 binary64))) #s(literal 2 binary64))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) #s(approx (sin (/ (- lambda1 lambda2) 2)) (sin.f64 (*.f64 #s(literal -1/2 binary64) lambda2)))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) #s(approx (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 lambda1 lambda2))) #s(literal 2 binary64)) (cos.f64 phi2))))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 (sin.f64 (/.f64 phi1 #s(literal 2 binary64))) (cos.f64 (/.f64 phi2 #s(literal 2 binary64)))) (*.f64 (cos.f64 (/.f64 phi1 #s(literal 2 binary64))) (sin.f64 (/.f64 phi2 #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))))) (sqrt.f64 #s(approx (- 1 (+ (pow (- (* (cos (/ phi2 -2)) (sin (/ phi1 2))) (* (sin (/ phi2 2)) (cos (/ phi1 -2)))) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) (-.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) phi2)) #s(literal 2 binary64)) (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 lambda2 lambda1) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (cos.f64 phi2)))))))) (*.f64 R (*.f64 #s(literal 2 binary64) (atan2.f64 (sqrt.f64 (+.f64 (pow.f64 (sin.f64 (/.f64 (-.f64 phi1 phi2) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 phi1) (cos.f64 phi2)) (sin.f64 (/.f64 (-.f64 lambda1 lambda2) #s(literal 2 binary64)))) #s(approx (sin (/ (- lambda1 lambda2) 2)) (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) lambda2) (cos.f64 (*.f64 #s(literal -1/2 binary64) lambda1))) (sin.f64 (*.f64 #s(literal 1/2 binary64) lambda1))))))) (sqrt.f64 #s(approx (- 1 (+ (pow (sin (/ (- phi1 phi2) 2)) 2) (* (* (* (cos phi1) (cos phi2)) (sin (/ (- lambda1 lambda2) 2))) (sin (/ (- lambda1 lambda2) 2))))) (-.f64 (-.f64 (+.f64 (*.f64 (*.f64 (*.f64 (cos.f64 phi1) lambda2) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) lambda1)) (cos.f64 phi2))) (sin.f64 (*.f64 #s(literal 1/2 binary64) lambda1))) #s(literal 1 binary64)) (pow.f64 (sin.f64 (*.f64 (-.f64 phi2 phi1) #s(literal -1/2 binary64))) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) lambda1)) #s(literal 2 binary64)) (*.f64 (cos.f64 phi2) (cos.f64 phi1))))))))))
((*.f32 (*.f32 #s(literal 3 binary32) s) (log.f32 (/.f32 #s(literal 1 binary32) (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 u #s(literal 1/4 binary32)) #s(literal 3/4 binary32)))))))
((*.f32 (*.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 u #s(literal 1/4 binary32)) #s(literal 3/4 binary32))))) #s(literal 3 binary32)) s) #s(approx (* (* 3 s) (log (/ 1 (- 1 (/ (- u 1/4) 3/4))))) (*.f32 (*.f32 (log.f32 #s(literal 3/4 binary32)) s) #s(literal 3 binary32))) #s(approx (* (* 3 s) (log (/ 1 (- 1 (/ (- u 1/4) 3/4))))) (*.f32 (*.f32 #s(literal -3 binary32) s) (log.f32 (-.f32 #s(literal 1 binary32) (*.f32 #s(literal 4/3 binary32) (-.f32 u #s(literal 1/4 binary32))))))) (*.f32 (*.f32 #s(literal 3 binary32) s) (log.f32 (/.f32 #s(literal 1 binary32) (+.f32 (-.f32 #s(literal 1 binary32) (/.f32 u #s(literal 3/4 binary32))) #s(literal 1/3 binary32))))) (*.f32 (*.f32 #s(literal 3 binary32) s) (log.f32 (*.f32 (pow.f32 (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 u #s(literal 1/4 binary32)) #s(literal 3/4 binary32))) #s(literal -1/2 binary32)) (pow.f32 (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 u #s(literal 1/4 binary32)) #s(literal 3/4 binary32))) #s(literal -1/2 binary32))))))
((*.f32 (*.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 u #s(literal 1/4 binary32)) #s(literal 3/4 binary32))))) s) #s(literal 3 binary32)) (*.f32 (*.f32 #s(literal 3 binary32) s) (log.f32 #s(approx (/ 1 (- 1 (/ (- u 1/4) 3/4))) #s(literal 3/4 binary32)))) (*.f32 (*.f32 #s(literal 3 binary32) s) (log.f32 (/.f32 #s(literal 1 binary32) #s(approx (- 1 (/ (- u 1/4) 3/4)) (-.f32 (*.f32 #s(literal -4/3 binary32) u) #s(literal -4/3 binary32)))))) (*.f32 (log.f32 (pow.f32 (/.f32 #s(literal 1 binary32) (-.f32 #s(literal 4/3 binary32) (/.f32 u #s(literal 3/4 binary32)))) #s(literal 3 binary32))) s) (*.f32 (*.f32 (neg.f32 (-.f32 (log.f32 (-.f32 (pow.f32 (-.f32 #s(literal 1 binary32) (/.f32 u #s(literal 3/4 binary32))) #s(literal 2 binary32)) #s(literal 1/9 binary32))) (log.f32 (-.f32 (-.f32 #s(literal 1 binary32) (/.f32 u #s(literal 3/4 binary32))) #s(literal 1/3 binary32))))) #s(literal 3 binary32)) s))
((*.f32 (*.f32 (log.f32 (-.f32 #s(literal 1 binary32) (/.f32 (-.f32 u #s(literal 1/4 binary32)) #s(literal 3/4 binary32)))) #s(literal -3 binary32)) s) (*.f32 (log.f32 #s(approx (pow (/ 1 (- 4/3 (/ u 3/4))) 3) #s(literal 27/64 binary32))) s) (*.f32 (*.f32 (neg.f32 (log.f32 (+.f32 (-.f32 #s(literal 1 binary32) (/.f32 u #s(literal 3/4 binary32))) #s(literal 1/3 binary32)))) #s(literal 3 binary32)) s) (*.f32 (*.f32 (*.f32 #s(literal -1/2 binary32) (log.f32 (pow.f32 (-.f32 #s(literal 4/3 binary32) (/.f32 u #s(literal 3/4 binary32))) #s(literal 2 binary32)))) #s(literal 3 binary32)) s) (*.f32 (*.f32 (neg.f32 (-.f32 (log.f32 (-.f32 #s(literal 1 binary32) (pow.f32 (/.f32 (-.f32 u #s(literal 1/4 binary32)) #s(literal 3/4 binary32)) #s(literal 2 binary32)))) (log.f32 (-.f32 (+.f32 (/.f32 u #s(literal 3/4 binary32)) #s(literal 1 binary32)) #s(literal 1/3 binary32))))) #s(literal 3 binary32)) s))
((*.f32 s (log.f32 (/.f32 #s(literal 1 binary32) (-.f32 #s(literal 1 binary32) (*.f32 #s(literal 4 binary32) u))))))
((*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) (*.f32 (+.f32 (*.f32 (+.f32 (*.f32 (+.f32 (*.f32 #s(literal 64 binary32) u) #s(literal 64/3 binary32)) u) #s(literal 8 binary32)) u) #s(literal 4 binary32)) u))) (*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) (*.f32 #s(literal 4 binary32) u))) (*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) (*.f32 (+.f32 (*.f32 #s(literal 8 binary32) u) #s(literal 4 binary32)) u))) #s(approx (* s (log (/ 1 (- 1 (* 4 u))))) (*.f32 (-.f32 (*.f32 (*.f32 s (+.f32 (*.f32 #s(literal 64/3 binary32) u) #s(literal 8 binary32))) u) (*.f32 #s(literal -4 binary32) s)) u)) (*.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) (*.f32 u #s(literal 4 binary32))))) s))
((*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) (+.f32 (*.f32 (*.f32 (+.f32 #s(literal 8 binary32) (*.f32 (+.f32 #s(literal 64/3 binary32) (*.f32 #s(literal 64 binary32) u)) u)) u) u) (*.f32 u #s(literal 4 binary32))))) #s(approx (* s (log (/ 1 (- 1 (* 4 u))))) (*.f32 (*.f32 u s) #s(literal 4 binary32))) #s(approx (* s (log (/ 1 (- 1 (* 4 u))))) (*.f32 (*.f32 s (-.f32 (*.f32 (+.f32 (*.f32 #s(literal 64/3 binary32) u) #s(literal 8 binary32)) u) #s(literal -4 binary32))) u)) (*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) (/.f32 (*.f32 (-.f32 (*.f32 (*.f32 #s(literal 64 binary32) u) u) #s(literal 16 binary32)) u) (-.f32 (*.f32 #s(literal 8 binary32) u) #s(literal 4 binary32))))) (*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) #s(approx (* (+ (* (+ (* (+ (* 64 u) 64/3) u) 8) u) 4) u) (*.f32 (+.f32 (/.f32 (-.f32 (/.f32 (-.f32 (/.f32 #s(literal 4 binary32) u) #s(literal -8 binary32)) u) #s(literal -64/3 binary32)) u) #s(literal 64 binary32)) (pow.f32 u #s(literal 4 binary32)))))))
(#s(approx (* s (log (/ 1 (- 1 (* 4 u))))) (*.f32 (-.f32 (*.f32 (+.f32 (*.f32 (-.f32 (*.f32 #s(literal 64/3 binary32) u) #s(literal -8 binary32)) s) (*.f32 (*.f32 (*.f32 u u) s) #s(literal 64 binary32))) u) (*.f32 #s(literal -4 binary32) s)) u)) #s(approx (* s (log (/ 1 (- 1 (* 4 u))))) (*.f32 (*.f32 s (-.f32 (*.f32 #s(literal 8 binary32) u) #s(literal -4 binary32))) u)) (*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 64/3 binary32) u) #s(literal -8 binary32)) u) #s(literal -4 binary32)) u))) #s(approx (* s (log (/ 1 (- 1 (* 4 u))))) (+.f32 (*.f32 (*.f32 (*.f32 (+.f32 (*.f32 #s(literal 64/3 binary32) u) #s(literal 8 binary32)) s) u) u) (*.f32 (*.f32 #s(literal 4 binary32) s) u))) (*.f32 s #s(approx (log (/ 1 (- 1 (* 4 u)))) #s(approx (* (+ (* (+ (* (+ (* 64 u) 64/3) u) 8) u) 4) u) (*.f32 (+.f32 (/.f32 (-.f32 #s(approx (/ (- (/ 4 u) -8) u) (/.f32 #s(literal 4 binary32) (*.f32 u u))) #s(literal -64/3 binary32)) u) #s(literal 64 binary32)) (pow.f32 u #s(literal 4 binary32)))))))
((+.f32 (/.f32 (*.f32 #s(literal 1/4 binary32) (exp.f32 (/.f32 (neg.f32 r) s))) (*.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) s) r)) (/.f32 (*.f32 #s(literal 3/4 binary32) (exp.f32 (/.f32 (neg.f32 r) (*.f32 #s(literal 3 binary32) s)))) (*.f32 (*.f32 (*.f32 #s(literal 6 binary32) (PI.f32)) s) r))))
((+.f32 (/.f32 (*.f32 #s(literal 1/4 binary32) (exp.f32 (/.f32 (neg.f32 r) s))) (*.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) s) r)) (*.f32 #s(literal 1/8 binary32) (/.f32 (exp.f32 (/.f32 (/.f32 r #s(literal -3 binary32)) s)) (*.f32 (PI.f32) (*.f32 s r))))) #s(approx (+ (/ (* 1/4 (exp (/ (neg r) s))) (* (* (* 2 (PI)) s) r)) (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r))) (/.f32 (/.f32 #s(literal 1/4 binary32) (*.f32 (PI.f32) s)) r)) #s(approx (+ (/ (* 1/4 (exp (/ (neg r) s))) (* (* (* 2 (PI)) s) r)) (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r))) (/.f32 (-.f32 (/.f32 (-.f32 (/.f32 (-.f32 (/.f32 (*.f32 #s(literal -7/324 binary32) (*.f32 r (/.f32 r (PI.f32)))) (neg.f32 s)) (*.f32 #s(literal 5/72 binary32) (/.f32 r (PI.f32)))) (neg.f32 s)) (/.f32 #s(literal 1/6 binary32) (PI.f32))) (neg.f32 s)) (/.f32 #s(literal 1/4 binary32) (*.f32 (PI.f32) r))) (neg.f32 s))) (+.f32 (/.f32 (*.f32 #s(literal 1/4 binary32) (exp.f32 (/.f32 (neg.f32 r) s))) (*.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) s) r)) #s(approx (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r)) (/.f32 (+.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) r)) (/.f32 (/.f32 (+.f32 #s(literal -1/24 binary32) (/.f32 (*.f32 #s(literal 1/144 binary32) r) s)) (PI.f32)) s)) s))) (/.f32 (+.f32 (*.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) s)) (exp.f32 (/.f32 (/.f32 r #s(literal -3 binary32)) s))) (*.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) s)) (exp.f32 (/.f32 (neg.f32 r) s)))) r))
((/.f32 (+.f32 (*.f32 (/.f32 #s(literal 1/8 binary32) s) (/.f32 (exp.f32 (/.f32 (/.f32 r #s(literal -3 binary32)) s)) (PI.f32))) (*.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) s)) (exp.f32 (/.f32 (neg.f32 r) s)))) r) #s(approx (+ (/ (* 1/4 (exp (/ (neg r) s))) (* (* (* 2 (PI)) s) r)) (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r))) (/.f32 #s(literal 1/4 binary32) (*.f32 (*.f32 s r) (PI.f32)))) (/.f32 #s(approx (+ (* (/ 1/8 (* (PI) s)) (exp (/ (/ r -3) s))) (* (/ 1/8 (* (PI) s)) (exp (/ (neg r) s)))) (/.f32 (-.f32 (*.f32 (/.f32 (/.f32 r (PI.f32)) s) #s(literal -1/6 binary32)) (/.f32 #s(literal -1/4 binary32) (PI.f32))) s)) r) #s(approx (+ (/ (* 1/4 (exp (/ (neg r) s))) (* (* (* 2 (PI)) s) r)) (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r))) #s(approx (/ (- (/ (- (/ (- (/ (* -7/324 (* r (/ r (PI)))) (neg s)) (* 5/72 (/ r (PI)))) (neg s)) (/ 1/6 (PI))) (neg s)) (/ 1/4 (* (PI) r))) (neg s)) (/.f32 (/.f32 (+.f32 (*.f32 #s(literal 5/72 binary32) (*.f32 s r)) (*.f32 (*.f32 #s(literal -7/324 binary32) r) r)) (PI.f32)) (pow.f32 s #s(literal 4 binary32))))) (/.f32 (*.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) s)) (+.f32 (exp.f32 (/.f32 (/.f32 r #s(literal -3 binary32)) s)) (exp.f32 (/.f32 (neg.f32 r) s)))) r))
((/.f32 (+.f32 (*.f32 (/.f32 (/.f32 #s(literal 1/8 binary32) s) (sqrt.f32 (PI.f32))) (/.f32 (exp.f32 (/.f32 (/.f32 r #s(literal -3 binary32)) s)) (sqrt.f32 (PI.f32)))) (*.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) s)) (exp.f32 (/.f32 (neg.f32 r) s)))) r) #s(approx (/ (* (/ 1/8 (* (PI) s)) (+ (exp (/ (/ r -3) s)) (exp (/ (neg r) s)))) r) (/.f32 #s(literal 1/4 binary32) (*.f32 (*.f32 (PI.f32) r) s))) #s(approx (+ (/ (* 1/4 (exp (/ (neg r) s))) (* (* (* 2 (PI)) s) r)) (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r))) (/.f32 (/.f32 (+.f32 (/.f32 #s(literal 1/4 binary32) s) (/.f32 (*.f32 #s(literal -1/6 binary32) r) (*.f32 s s))) (PI.f32)) r)) (+.f32 #s(approx (/ (* 1/4 (exp (/ (neg r) s))) (* (* (* 2 (PI)) s) r)) (/.f32 (-.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) r)) (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) s))) s)) #s(approx (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r)) (/.f32 (+.f32 (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) r)) (/.f32 (/.f32 (+.f32 #s(literal -1/24 binary32) (/.f32 (*.f32 #s(literal 1/144 binary32) r) s)) (PI.f32)) s)) s))) (+.f32 (/.f32 (*.f32 #s(literal 1/4 binary32) (exp.f32 (/.f32 (neg.f32 r) s))) (*.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) s) r)) #s(approx (/ (* 3/4 (exp (/ (neg r) (* 3 s)))) (* (* (* 6 (PI)) s) r)) (/.f32 (-.f32 (/.f32 (-.f32 (/.f32 (/.f32 (+.f32 (/.f32 (*.f32 #s(literal 1/1296 binary32) (*.f32 r r)) s) (*.f32 #s(literal -1/144 binary32) r)) (PI.f32)) (neg.f32 s)) (/.f32 #s(literal 1/24 binary32) (PI.f32))) (neg.f32 s)) (/.f32 #s(literal 1/8 binary32) (*.f32 (PI.f32) r))) (neg.f32 s)))))
((-.f64 (*.f64 a a) (*.f64 b b)))
(#s(approx (- (* a a) (* b b)) (*.f64 a a)) #s(approx (- (* a a) (* b b)) (*.f64 (neg.f64 b) b)) (*.f64 (-.f64 a b) (+.f64 b a)))
((+.f64 (*.f64 x y) (*.f64 z (-.f64 #s(literal 1 binary64) y))))
(#s(approx (+ (* x y) (* z (- 1 y))) (-.f64 z (*.f64 (-.f64 z x) y))) #s(approx (+ (* x y) (* z (- 1 y))) z) #s(approx (+ (* x y) (* z (- 1 y))) (*.f64 y x)) #s(approx (+ (* x y) (* z (- 1 y))) (*.f64 (-.f64 #s(literal 1 binary64) y) z)) (+.f64 (*.f64 x y) #s(approx (* z (- 1 y)) z)))
(#s(approx (+ (* x y) (* z (- 1 y))) (*.f64 #s(approx (- 1 y) (neg.f64 y)) z)) #s(approx (+ (* x y) (* z (- 1 y))) (-.f64 z (*.f64 #s(approx (- z x) z) y))))
((/.f64 (*.f64 x (+.f64 (-.f64 y z) #s(literal 1 binary64))) z))
((*.f64 (/.f64 (-.f64 (-.f64 y z) #s(literal -1 binary64)) z) x) #s(approx (/ (* x (+ (- y z) 1)) z) (neg.f64 x)) #s(approx (/ (* x (+ (- y z) 1)) z) (-.f64 (/.f64 x z) x)) (/.f64 (*.f64 x #s(approx (+ (- y z) 1) y)) z) #s(approx (/ (* x (+ (- y z) 1)) z) (*.f64 (+.f64 #s(literal 1 binary64) y) (/.f64 x z))))
((*.f64 (/.f64 (/.f64 (-.f64 (*.f64 y y) (*.f64 (-.f64 z #s(literal 1 binary64)) (-.f64 z #s(literal 1 binary64)))) (+.f64 y (-.f64 z #s(literal 1 binary64)))) z) x) #s(approx (/ (* x (+ (- y z) 1)) z) #s(approx (- (/ x z) x) (/.f64 x z))) (*.f64 #s(approx (+ (- y z) 1) y) (/.f64 x z)) (*.f64 (/.f64 #s(approx (- (- y z) -1) y) z) x) (/.f64 (*.f64 x (+.f64 #s(approx (- y z) y) #s(literal 1 binary64))) z))
(#s(approx (* (/ (- (- y z) -1) z) x) (-.f64 (/.f64 (*.f64 (+.f64 #s(literal 1 binary64) y) x) z) x)) #s(approx (/ (* x (+ (- y z) 1)) z) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 y y)) x) (*.f64 (-.f64 #s(literal 1 binary64) y) z))) (*.f64 (/.f64 (/.f64 (-.f64 (*.f64 y y) #s(approx (* (- z 1) (- z 1)) (*.f64 z z))) (+.f64 y (-.f64 z #s(literal 1 binary64)))) z) x))
((/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64)))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64)))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 #s(literal 3 binary64) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (cos.f64 x))) (*.f64 (/.f64 (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))) #s(literal 2 binary64)) (cos.f64 y))))))
((/.f64 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64))))) #s(literal 2 binary64)) #s(literal 3 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(approx (/ (+ 2 (* (* (* (sqrt 2) (- (sin x) (/ (sin y) 16))) (- (sin y) (/ (sin x) 16))) (- (cos x) (cos y)))) (* 3 (+ (+ 1 (* (/ (- (sqrt 5) 1) 2) (cos x))) (* (/ (- 3 (sqrt 5)) 2) (cos y))))) (*.f64 (/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64))))) (+.f64 (*.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64)))) #s(literal 1/2 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64))) (/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(approx (* (sqrt 2) (- (sin x) (/ (sin y) 16))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 (*.f64 #s(literal -1/16 binary64) y) (sin.f64 x)))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64)))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 #s(literal 3 binary64) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (cos.f64 x))) (*.f64 (/.f64 (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))) #s(literal 2 binary64)) (cos.f64 y))))) (/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64)))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64)))) (-.f64 (cos.f64 x) (cos.f64 y)))) #s(approx (* 3 (+ (+ 1 (* (/ (- (sqrt 5) 1) 2) (cos x))) (* (/ (- 3 (sqrt 5)) 2) (cos y)))) (+.f64 (*.f64 #s(literal 3/2 binary64) (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64)))))) #s(literal 3 binary64)))) (/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64)))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64)))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 #s(literal 3 binary64) (/.f64 (+.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (cos.f64 x) (/.f64 (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (/.f64 (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64)))))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) (/.f64 (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64))))))
((/.f64 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64))))) #s(literal 2 binary64)) #s(literal 3 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (/.f64 #s(literal 4 binary64) (+.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 3 binary64))))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(approx (/ (+ 2 (* (* (* (sqrt 2) (- (sin x) (/ (sin y) 16))) (- (sin y) (/ (sin x) 16))) (- (cos x) (cos y)))) (* 3 (+ (+ 1 (* (/ (- (sqrt 5) 1) 2) (cos x))) (* (/ (- 3 (sqrt 5)) 2) (cos y))))) #s(approx (* (/ (- 2 (* (* 1/16 (pow (sin x) 2)) (* (- (cos x) 1) (sqrt 2)))) (+ (* (+ (* (cos x) (- (sqrt 5) 1)) (- 3 (sqrt 5))) 1/2) 1)) 1/3) #s(literal 1/3 binary64))) (/.f64 (/.f64 (+.f64 #s(approx (* (* (* (sqrt 2) (- (sin x) (/ (sin y) 16))) (- (sin y) (/ (sin x) 16))) (- (cos x) (cos y))) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1/16 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64))))) #s(literal 2 binary64)) #s(literal 3 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 #s(approx (* (- (sin y) (/ (sin x) 16)) (sqrt 2)) (*.f64 (sin.f64 y) (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64))))) #s(literal 2 binary64)) #s(literal 3 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 (*.f64 (*.f64 (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (sqrt.f64 #s(literal 2 binary64))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64)))) (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64))) #s(literal 3 binary64))) #s(literal 2/3 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))))) #s(literal 2 binary64)) #s(literal 1 binary64))))
((/.f64 (/.f64 (+.f64 #s(approx (* (* (* (sqrt 2) (- (sin x) (/ (sin y) 16))) (- (sin y) (/ (sin x) 16))) (- (cos x) (cos y))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (cos.f64 x) (cos.f64 y))) (*.f64 (-.f64 (sin.f64 y) (*.f64 #s(literal 1/16 binary64) (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 #s(literal 1/16 binary64) (sin.f64 y)))))) #s(literal 2 binary64)) #s(literal 3 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(approx (/ (+ 2 (* (* (* (sqrt 2) (- (sin x) (/ (sin y) 16))) (- (sin y) (/ (sin x) 16))) (- (cos x) (cos y)))) (* 3 (+ (+ 1 (* (/ (- (sqrt 5) 1) 2) (cos x))) (* (/ (- 3 (sqrt 5)) 2) (cos y))))) #s(approx (* (/ (- 2 (* (* 1/16 (pow (sin x) 2)) (* (- (cos x) 1) (sqrt 2)))) (+ (* (+ (* (cos x) (- (sqrt 5) 1)) (- 3 (sqrt 5))) 1/2) 1)) 1/3) (+.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/24 binary64)) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) #s(literal 1/3 binary64)))) (/.f64 (+.f64 #s(approx (* (* (* (sqrt 2) (- (sin x) (/ (sin y) 16))) (- (sin y) (/ (sin x) 16))) (- (cos x) (cos y))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal -1/16 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) #s(literal 2 binary64)) (*.f64 (-.f64 (/.f64 (-.f64 (*.f64 (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64)) (cos.f64 x)) (*.f64 (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 3 binary64)) (cos.f64 y))) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (/.f64 (+.f64 (*.f64 #s(approx (* (* (- (cos x) (cos y)) (sqrt 2)) (- (sin y) (/ (sin x) 16))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 y)) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (*.f64 #s(literal -1/16 binary64) x) (sin.f64 y)))) (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64))) #s(literal 3 binary64))) #s(literal 2/3 binary64)) (+.f64 (/.f64 (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64))))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) #s(literal 16 binary64)))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) #s(literal 16 binary64)))) #s(approx (- (cos x) (cos y)) (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 x x)) #s(literal 1/24 binary64)) (*.f64 x x)) #s(literal 1/2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (cos.f64 y))))) #s(approx (* 3 (+ (+ 1 (* (/ (- (sqrt 5) 1) 2) (cos x))) (* (/ (- 3 (sqrt 5)) 2) (cos y)))) (+.f64 (*.f64 #s(literal 3/2 binary64) (+.f64 (*.f64 (cos.f64 x) (-.f64 (sqrt.f64 #s(literal 5 binary64)) #s(literal 1 binary64))) (*.f64 (cos.f64 y) (-.f64 #s(literal 3 binary64) (sqrt.f64 #s(literal 5 binary64)))))) #s(literal 3 binary64)))))
((/.f64 (tan.f64 (/.f64 x (*.f64 y #s(literal 2 binary64)))) (sin.f64 (/.f64 x (*.f64 y #s(literal 2 binary64))))))
(#s(approx (/ (tan (/ x (* y 2))) (sin (/ x (* y 2)))) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 x y))))) #s(approx (/ (tan (/ x (* y 2))) (sin (/ x (* y 2)))) #s(literal 1 binary64)) (/.f64 (tan.f64 (/.f64 x (*.f64 y #s(literal 2 binary64)))) #s(approx (sin (/ x (* y 2))) (*.f64 (/.f64 x y) #s(literal 1/2 binary64)))) (/.f64 (tan.f64 (+.f64 (+.f64 (PI.f64) (/.f64 x (*.f64 #s(literal 2 binary64) y))) (PI.f64))) (sin.f64 (/.f64 x (*.f64 y #s(literal 2 binary64))))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (/.f64 x y))) (sin.f64 (/.f64 x y))) (sin.f64 (/.f64 x (*.f64 y #s(literal 2 binary64))))))
(#s(approx (/ (tan (/ x (* y 2))) (sin (/ x (* y 2)))) (/.f64 #s(literal 1 binary64) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (*.f64 (/.f64 x y) #s(literal -1/2 binary64)))))) #s(approx (/ (tan (/ x (* y 2))) (sin (/ x (* y 2)))) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) x) y) (/.f64 x y)))) (/.f64 (tan.f64 (+.f64 (+.f64 (PI.f64) (/.f64 x (*.f64 #s(literal 2 binary64) y))) (PI.f64))) (sin.f64 (/.f64 x (+.f64 y y)))) (/.f64 (/.f64 (neg.f64 (sin.f64 (/.f64 x (*.f64 #s(literal 2 binary64) y)))) (cos.f64 (+.f64 (PI.f64) (/.f64 x (*.f64 #s(literal 2 binary64) y))))) (sin.f64 (/.f64 x (*.f64 y #s(literal 2 binary64))))) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sin.f64 (/.f64 x y)) (sin.f64 (/.f64 (/.f64 x y) #s(literal 2 binary64))))) (/.f64 (cos.f64 (/.f64 x y)) (*.f64 (sin.f64 (/.f64 x y)) (sin.f64 (/.f64 (/.f64 x y) #s(literal 2 binary64)))))))
(#s(approx (/ (tan (/ x (* y 2))) (sin (/ x (* y 2)))) (/.f64 #s(literal 1 binary64) (sin.f64 #s(approx (+ (/ (PI) 2) (* (/ x y) -1/2)) (*.f64 (-.f64 (*.f64 (/.f64 (PI.f64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) y)) x))))) #s(approx (/ (tan (+ (+ (PI) (/ x (* 2 y))) (PI))) (sin (/ x (+ y y)))) (*.f64 (*.f64 (/.f64 y x) #s(literal 0 binary64)) #s(literal 2 binary64))) (/.f64 (tan.f64 (/.f64 x (+.f64 y y))) (sin.f64 (/.f64 x (*.f64 y #s(literal 2 binary64))))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (sin.f64 (+.f64 (/.f64 (neg.f64 x) y) (/.f64 (PI.f64) #s(literal 2 binary64))))) (sin.f64 (/.f64 x y))) (sin.f64 (/.f64 x (*.f64 y #s(literal 2 binary64))))) #s(approx (- (/ 1 (* (sin (/ x y)) (sin (/ (/ x y) 2)))) (/ (cos (/ x y)) (* (sin (/ x y)) (sin (/ (/ x y) 2))))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 x y)))) (sin.f64 (/.f64 x y))) (/.f64 (cos.f64 (/.f64 x y)) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 x y))) (sin.f64 (/.f64 x y)))))))
((sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))
(#s(approx (sqrt (- 1 (* x x))) #s(literal 1 binary64)) #s(approx (sqrt (- 1 (* x x))) (-.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64))))
((/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 3 binary64) x)) (*.f64 y #s(literal 3 binary64))))
((/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) y) (-.f64 #s(literal 3 binary64) x)) #s(literal 3 binary64)) #s(approx (/ (* (- 1 x) (- 3 x)) (* y 3)) (/.f64 #s(literal 1 binary64) y)) #s(approx (/ (* (- 1 x) (- 3 x)) (* y 3)) (/.f64 (-.f64 (*.f64 #s(literal -4/3 binary64) x) #s(literal -1 binary64)) y)) (/.f64 #s(approx (* (- 1 x) (- 3 x)) (*.f64 x x)) (*.f64 y #s(literal 3 binary64))) (/.f64 (*.f64 #s(approx (- 1 x) (neg.f64 x)) (-.f64 #s(literal 3 binary64) x)) (*.f64 y #s(literal 3 binary64))))
(#s(approx (/ (* (/ (- 1 x) y) (- 3 x)) 3) (*.f64 (*.f64 (/.f64 (-.f64 #s(literal 3 binary64) x) y) #s(literal 1/3 binary64)) (-.f64 #s(literal 1 binary64) x))) #s(approx (/ (* (- 1 x) (- 3 x)) (* y 3)) #s(approx (/ (- (* -4/3 x) -1) y) (*.f64 (/.f64 x y) #s(literal -4/3 binary64)))) (/.f64 #s(approx (* (- 1 x) (- 3 x)) #s(literal 3 binary64)) (*.f64 y #s(literal 3 binary64))) (/.f64 #s(approx (* (- 1 x) (- 3 x)) (-.f64 (*.f64 #s(literal -4 binary64) x) #s(literal -3 binary64))) (*.f64 y #s(literal 3 binary64))) (/.f64 #s(approx (* (/ (- 1 x) y) (- 3 x)) (*.f64 (/.f64 x y) x)) #s(literal 3 binary64)))
(#s(approx (/ (* (/ (- 1 x) y) (- 3 x)) 3) (*.f64 (/.f64 (*.f64 #s(literal 1/3 binary64) (-.f64 #s(literal 3 binary64) x)) y) (-.f64 #s(literal 1 binary64) x))) #s(approx (/ (* (- 1 x) (- 3 x)) (* y 3)) #s(approx (/ (- (* -4/3 x) -1) y) (*.f64 x (/.f64 #s(literal -4/3 binary64) y)))) #s(approx (/ (* (- 1 x) (- 3 x)) (* y 3)) (/.f64 #s(approx (- (* -4/3 x) -1) (*.f64 #s(literal -4/3 binary64) x)) y)) #s(approx (/ (* (/ (- 1 x) y) (- 3 x)) 3) (*.f64 (*.f64 (/.f64 x y) x) #s(literal 1/3 binary64))) #s(approx (/ (* (/ (- 1 x) y) (- 3 x)) 3) (*.f64 #s(approx (* (/ (- 3 x) y) 1/3) (*.f64 #s(literal -1/3 binary64) (/.f64 x y))) (-.f64 #s(literal 1 binary64) x))))
((/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y #s(literal 4 binary64)) y)) (+.f64 (*.f64 x x) (*.f64 (*.f64 y #s(literal 4 binary64)) y))))
(#s(approx (/ (- (* x x) (* (* y 4) y)) (+ (* x x) (* (* y 4) y))) #s(literal -1 binary64)) #s(approx (/ (- (* x x) (* (* y 4) y)) (+ (* x x) (* (* y 4) y))) #s(literal 1 binary64)) #s(approx (/ (- (* x x) (* (* y 4) y)) (+ (* x x) (* (* y 4) y))) (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) x) y) (/.f64 x y)) #s(literal 1 binary64))))
(#s(approx (/ (- (* x x) (* (* y 4) y)) (+ (* x x) (* (* y 4) y))) (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 y y)) #s(literal 1 binary64))))
((*.f64 x (sqrt.f64 (-.f64 (*.f64 y y) (*.f64 z z)))))
((*.f64 x #s(approx (sqrt (- (* y y) (* z z))) y)) (*.f64 x (*.f64 (sqrt.f64 (+.f64 z y)) (sqrt.f64 (-.f64 y z)))) (*.f64 (sqrt.f64 (*.f64 (-.f64 y z) (+.f64 z y))) x))
((/.f64 (-.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) (*.f64 y #s(literal 2 binary64))))
(#s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 (+.f64 (*.f64 (+.f64 z x) (/.f64 (-.f64 x z) y)) y) #s(literal 1/2 binary64))) #s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 #s(literal 1/2 binary64) y)) (/.f64 #s(approx (- (+ (* x x) (* y y)) (* z z)) (*.f64 x x)) (*.f64 y #s(literal 2 binary64))) #s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 (+.f64 (/.f64 (*.f64 x x) y) y) #s(literal 1/2 binary64))) #s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 (*.f64 (-.f64 x z) (+.f64 z x)) (/.f64 #s(literal 1/2 binary64) y))))
(#s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 #s(approx (+ (* (+ z x) (/ (- x z) y)) y) (*.f64 (+.f64 (*.f64 (/.f64 (/.f64 (-.f64 x z) y) y) (+.f64 z x)) #s(literal 1 binary64)) y)) #s(literal 1/2 binary64))) (/.f64 #s(approx (- (+ (* x x) (* y y)) (* z z)) (*.f64 x x)) (+.f64 y y)) (/.f64 #s(approx (- (+ (* x x) (* y y)) (* z z)) (*.f64 y y)) (*.f64 y #s(literal 2 binary64))) #s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 (+.f64 (*.f64 (/.f64 x y) x) y) #s(literal 1/2 binary64))) #s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 (-.f64 x z) (*.f64 (/.f64 #s(literal 1/2 binary64) y) (+.f64 z x)))))
(#s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) (*.f64 #s(approx (+ (* (+ z x) (/ (- x z) y)) y) (*.f64 (+.f64 (*.f64 (/.f64 #s(approx (/ (- x z) y) (*.f64 (neg.f64 z) (+.f64 (/.f64 (neg.f64 x) (*.f64 y z)) (/.f64 #s(literal 1 binary64) y)))) y) (+.f64 z x)) #s(literal 1 binary64)) y)) #s(literal 1/2 binary64))) (/.f64 #s(approx (- (+ (* x x) (* y y)) (* z z)) (*.f64 y y)) (+.f64 y y)) (/.f64 #s(approx (- (+ (* x x) (* y y)) (* z z)) (*.f64 (neg.f64 z) z)) (+.f64 y y)) #s(approx (/ (- (+ (* x x) (* y y)) (* z z)) (* y 2)) #s(approx (* (- x z) (* (/ 1/2 y) (+ z x))) (*.f64 (*.f64 (-.f64 #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) y)) z) z))) (/.f64 #s(approx (- (+ (* x x) (* y y)) (* z z)) (*.f64 (-.f64 x z) (+.f64 z x))) (+.f64 y y)))
((*.f64 #s(literal 2 binary64) (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))))
((*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) (*.f64 (+.f64 (+.f64 (/.f64 (*.f64 z x) y) z) x) y)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) (*.f64 y x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) (*.f64 z y)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) (*.f64 (+.f64 z y) x)))) #s(approx (* 2 (sqrt (+ (+ (* x y) (* x z)) (* y z)))) (-.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 z y))) (+.f64 z y)) x) (*.f64 #s(literal -2 binary64) (sqrt.f64 (*.f64 z y))))))
(#s(approx (* 2 (sqrt (+ (+ (* x y) (* x z)) (* y z)))) (-.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 z y))) (+.f64 z y)) x) (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 z) (sqrt.f64 y))))) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) (*.f64 z x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) #s(approx (* (+ z y) x) (*.f64 (+.f64 (*.f64 x (/.f64 y z)) x) z))))) #s(approx (* 2 (sqrt (+ (+ (* x y) (* x z)) (* y z)))) (-.f64 #s(approx (* (* (sqrt (/ 1 (* z y))) (+ z y)) x) (*.f64 (neg.f64 x) (sqrt.f64 (/.f64 y z)))) (*.f64 #s(literal -2 binary64) (sqrt.f64 (*.f64 z y))))) #s(approx (* 2 (sqrt (+ (+ (* x y) (* x z)) (* y z)))) #s(approx (- (* (* (sqrt (/ 1 (* z y))) (+ z y)) x) (* -2 (sqrt (* z y)))) (*.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 z y))) x) (*.f64 (sqrt.f64 (/.f64 z y)) #s(literal -2 binary64))) y))))
(#s(approx (* 2 (sqrt (+ (+ (* x y) (* x z)) (* y z)))) (-.f64 (*.f64 #s(approx (* (sqrt (/ 1 (* z y))) (+ z y)) (sqrt.f64 (/.f64 y z))) x) (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 z) (sqrt.f64 y))))) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) (*.f64 (+.f64 y x) z)))) #s(approx (* 2 (sqrt (+ (+ (* x y) (* x z)) (* y z)))) #s(approx (- (* (* (sqrt (/ 1 (* z y))) (+ z y)) x) (* -2 (sqrt (* z y)))) (*.f64 #s(approx (- (* (sqrt (/ 1 (* z y))) x) (* (sqrt (/ z y)) -2)) (*.f64 (sqrt.f64 (/.f64 z y)) #s(literal 2 binary64))) y))) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (+ (+ (* x y) (* x z)) (* y z)) #s(approx (* (+ (+ (/ (* z x) y) z) x) y) (*.f64 (*.f64 z y) (+.f64 (/.f64 x y) #s(literal 1 binary64))))))) #s(approx (* 2 (sqrt (+ (+ (* x y) (* x z)) (* y z)))) (-.f64 #s(approx (* (* (sqrt (/ 1 (* z y))) (+ z y)) x) (*.f64 (neg.f64 x) (sqrt.f64 (/.f64 z y)))) (*.f64 #s(literal -2 binary64) (sqrt.f64 (*.f64 z y))))))
((-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) y) (+.f64 y #s(literal 1 binary64)))))
((-.f64 #s(literal 1 binary64) #s(approx (/ (* (- 1 x) y) (+ y 1)) (*.f64 (neg.f64 y) (/.f64 x (-.f64 y #s(literal -1 binary64)))))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (/ (* (- 1 x) y) (+ y 1)) (-.f64 #s(literal 1 binary64) x))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) (-.f64 x (/.f64 (-.f64 x #s(literal 1 binary64)) y))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) (*.f64 (/.f64 y (-.f64 y #s(literal -1 binary64))) x)))
(#s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) (-.f64 x (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) y) (-.f64 (/.f64 #s(literal -1 binary64) y) #s(literal -1 binary64))))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) #s(approx (- x (/ (- x 1) y)) x)) (-.f64 #s(literal 1 binary64) #s(approx (/ (* (- 1 x) y) (+ y 1)) (*.f64 (neg.f64 y) #s(approx (/ x (- y -1)) x)))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) (*.f64 #s(approx (/ y (- y -1)) (*.f64 (-.f64 #s(literal 1 binary64) y) y)) x)) (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (- 1 x) y) y) (+.f64 y #s(literal 1 binary64)))))
(#s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) (-.f64 x (/.f64 #s(approx (- x 1) #s(literal -1 binary64)) y))) (-.f64 #s(literal 1 binary64) #s(approx (/ (* (- 1 x) y) (+ y 1)) #s(approx (- 1 x) #s(literal 1 binary64)))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) #s(approx (- x (/ (- x 1) y)) (/.f64 #s(literal 1 binary64) y))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) (-.f64 x (/.f64 #s(approx (- x 1) x) y))) #s(approx (- 1 (/ (* (- 1 x) y) (+ y 1))) #s(approx (- x (* (/ (- x 1) y) (- (/ -1 y) -1))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) y)) y))))
((/.f64 (-.f64 x y) (-.f64 #s(literal 1 binary64) y)))
((*.f64 (/.f64 (-.f64 x y) (-.f64 #s(literal 1 binary64) (*.f64 y y))) (+.f64 #s(literal 1 binary64) y)) #s(approx (/ (- x y) (- 1 y)) #s(literal 1 binary64)) #s(approx (/ (- x y) (- 1 y)) x) #s(approx (/ (- x y) (- 1 y)) (-.f64 x (*.f64 (-.f64 #s(literal 1 binary64) x) y))) #s(approx (/ (- x y) (- 1 y)) (/.f64 y (-.f64 y #s(literal 1 binary64)))))
(#s(approx (/ (- x y) (- 1 y)) (-.f64 x #s(approx (* (- 1 x) y) y))) #s(approx (/ (- x y) (- 1 y)) #s(approx (/ y (- y 1)) (neg.f64 y))) (*.f64 #s(approx (/ (- x y) (- 1 (* y y))) x) (+.f64 #s(literal 1 binary64) y)) #s(approx (/ (- x y) (- 1 y)) #s(approx (/ y (- y 1)) (*.f64 (-.f64 (neg.f64 y) #s(literal 1 binary64)) y))) (/.f64 #s(approx (- x y) x) (-.f64 #s(literal 1 binary64) y)))
(#s(approx (/ (- x y) (- 1 y)) #s(approx (/ y (- y 1)) (*.f64 #s(approx (- (neg y) 1) (neg.f64 y)) y))) (*.f64 (/.f64 #s(approx (- x y) x) (-.f64 #s(literal 1 binary64) (*.f64 y y))) (-.f64 y #s(literal -1 binary64))) (/.f64 #s(approx (- x y) x) #s(approx (- 1 y) (neg.f64 y))) (/.f64 (-.f64 x y) #s(approx (- 1 y) (neg.f64 y))))
((/.f64 (*.f64 x y) (+.f64 y #s(literal 1 binary64))))
((*.f64 y (/.f64 x (-.f64 y #s(literal -1 binary64)))) #s(approx (/ (* x y) (+ y 1)) x) #s(approx (/ (* x y) (+ y 1)) (*.f64 y x)) #s(approx (/ (* x y) (+ y 1)) (*.f64 (-.f64 x (*.f64 y x)) y)) #s(approx (/ (* x y) (+ y 1)) (-.f64 x (/.f64 x y))))
(#s(approx (/ (* x y) (+ y 1)) (*.f64 (*.f64 (+.f64 (neg.f64 y) #s(literal 1 binary64)) x) y)) (*.f64 (/.f64 (*.f64 y x) (-.f64 (*.f64 y y) #s(literal 1 binary64))) (-.f64 y #s(literal 1 binary64))))
(#s(approx (/ (* x y) (+ y 1)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) y) y) x)))
((/.f64 (+.f64 x (/.f64 (-.f64 (*.f64 y z) x) (-.f64 (*.f64 t z) x))) (+.f64 x #s(literal 1 binary64))))
((/.f64 (+.f64 x (/.f64 (-.f64 (*.f64 y z) x) #s(approx (- (* t z) x) (*.f64 (-.f64 z (/.f64 x t)) t)))) (+.f64 x #s(literal 1 binary64))) #s(approx (/ (+ x (/ (- (* y z) x) (- (* t z) x))) (+ x 1)) #s(literal 1 binary64)) #s(approx (/ (+ x (/ (- (* y z) x) (- (* t z) x))) (+ x 1)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 z (*.f64 x x)) (-.f64 y t)))) (/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) (+.f64 (-.f64 x (/.f64 (*.f64 z y) x)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 x (/.f64 #s(approx (- (* y z) x) (*.f64 z y)) (-.f64 (*.f64 t z) x))) (+.f64 x #s(literal 1 binary64))))
((/.f64 (+.f64 x #s(approx (/ (- (* y z) x) (- (* t z) x)) (*.f64 (neg.f64 y) (/.f64 (-.f64 (/.f64 x y) z) (-.f64 (*.f64 t z) x))))) (+.f64 x #s(literal 1 binary64))) #s(approx (/ (+ x (/ (- (* y z) x) (- (* t z) x))) (+ x 1)) (/.f64 y t)) (/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) (/.f64 y t)) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) #s(approx (+ (- x (/ (* z y) x)) 1) (*.f64 (neg.f64 z) (/.f64 y x)))) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) (-.f64 x (/.f64 (-.f64 (/.f64 x z) y) t))) (+.f64 x #s(literal 1 binary64))))
((/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) (-.f64 x (/.f64 x (-.f64 (*.f64 t z) x)))) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) #s(approx (- x (/ (- (/ x z) y) t)) x)) (+.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 x #s(approx (/ (- (* y z) x) (- (* t z) x)) (/.f64 y t))) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) #s(approx (- x (/ (- (/ x z) y) t)) (/.f64 (neg.f64 x) (*.f64 t z)))) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (+ x (/ (- (* y z) x) (- (* t z) x))) (-.f64 x (/.f64 (-.f64 (/.f64 x z) y) t))) #s(approx (+ x 1) #s(literal 1 binary64))))
((+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))
((+.f64 (*.f64 x (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 0 binary64) (sin.f64 y))) (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y)))) (-.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y))))) (*.f64 z (sin.f64 y))) #s(approx (+ (* x (cos y)) (* z (sin y))) x) #s(approx (+ (* x (cos y)) (* z (sin y))) (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 y x) #s(literal -1/2 binary64)) z) y) x)) #s(approx (+ (* x (cos y)) (* z (sin y))) (*.f64 (cos.f64 y) x)) (+.f64 (*.f64 x (sin.f64 (+.f64 (neg.f64 y) (/.f64 (PI.f64) #s(literal 2 binary64))))) (*.f64 z (sin.f64 y))))
((+.f64 (*.f64 x (/.f64 (neg.f64 (pow.f64 (cos.f64 y) #s(literal 6 binary64))) (*.f64 (pow.f64 (cos.f64 y) #s(literal 4 binary64)) (neg.f64 (cos.f64 y))))) (*.f64 z (sin.f64 y))) #s(approx (+ (* x (cos y)) (* z (sin y))) #s(approx (+ (* (+ (* (* y x) -1/2) z) y) x) (*.f64 z y))) #s(approx (+ (* x (cos y)) (* z (sin y))) (+.f64 (*.f64 #s(approx (+ (* (* y x) -1/2) z) (*.f64 (*.f64 x y) #s(literal -1/2 binary64))) y) x)) #s(approx (+ (* x (cos y)) (* z (sin y))) #s(approx (* x (sin (+ (neg y) (/ (PI) 2)))) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 y y)) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 y y)) x))) #s(approx (+ (* x (cos y)) (* z (sin y))) (/.f64 (*.f64 (pow.f64 (cos.f64 y) #s(literal 2 binary64)) x) (cos.f64 y))))
((+.f64 (/.f64 (/.f64 (neg.f64 (*.f64 x (pow.f64 (cos.f64 y) #s(literal 6 binary64)))) (neg.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) #s(literal 4 binary64))) (*.f64 z (sin.f64 y))) #s(approx (+ (* x (/ (neg (pow (cos y) 6)) (* (pow (cos y) 4) (neg (cos y))))) (* z (sin y))) (+.f64 (*.f64 z y) x)) #s(approx (+ (* x (cos y)) (* z (sin y))) #s(approx (* x (sin (+ (neg y) (/ (PI) 2)))) (+.f64 (*.f64 (*.f64 (*.f64 y y) x) (-.f64 (*.f64 (*.f64 y y) #s(literal 1/24 binary64)) #s(literal 1/2 binary64))) x))) #s(approx (+ (* x (/ (neg (pow (cos y) 6)) (* (pow (cos y) 4) (neg (cos y))))) (* z (sin y))) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 z y)) (*.f64 #s(literal 1/2 binary64) x)) y) z) y) x)) #s(approx (+ (* x (cos y)) (* z (sin y))) (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) y)))) x) (cos.f64 y))))
((+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y))))
((+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 0 binary64) (sin.f64 y))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y))) (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y)))))))) #s(approx (+ (* x (sin y)) (* z (cos y))) z) #s(approx (+ (* x (sin y)) (* z (cos y))) (-.f64 z (*.f64 y (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) y) z) x)))) #s(approx (+ (* x (sin y)) (* z (cos y))) (*.f64 (cos.f64 y) z)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 y) z) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 y) x) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (sin.f64 y) x) (-.f64 (*.f64 (sin.f64 y) x) (*.f64 (cos.f64 y) z))) (pow.f64 (*.f64 (cos.f64 y) z) #s(literal 2 binary64)))))
((+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (cos.f64 y) #s(literal 3 binary64)) (pow.f64 (cos.f64 y) #s(literal 3 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 (cos.f64 y) #s(literal 3 binary64)))) (+.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 0 binary64) (sin.f64 y))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y))) (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y)))))))) #s(approx (+ (* x (sin y)) (* z (cos y))) #s(approx (- z (* y (- (* (* 1/2 y) z) x))) (*.f64 x y))) #s(approx (+ (* x (sin y)) (* z (cos y))) (*.f64 #s(approx (cos y) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 y y)) #s(literal 1/2 binary64)) y) y) #s(literal -1 binary64))) z)) #s(approx (+ (* x (sin y)) (* z (cos y))) (*.f64 #s(approx (cos y) (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 y y)) #s(literal 1/24 binary64)) y) y) #s(literal 1/2 binary64)) (*.f64 y y)) #s(literal -1 binary64))) z)) #s(approx (/ (+ (pow (* (cos y) z) 3) (pow (* (sin y) x) 3)) (+ (* (* (sin y) x) (- (* (sin y) x) (* (cos y) z))) (pow (* (cos y) z) 2))) (*.f64 (-.f64 (*.f64 (neg.f64 z) (/.f64 (cos.f64 y) x)) (sin.f64 y)) (neg.f64 x))))
((+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (cos.f64 y) #s(literal 3 binary64)) (pow.f64 (cos.f64 y) #s(literal 3 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 (cos.f64 y) #s(literal 3 binary64)))) (+.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 0 binary64) (sin.f64 y))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y))) (*.f64 (cos.f64 y) #s(literal 0 binary64))))))) #s(approx (/ (+ (pow (* (cos y) z) 3) (pow (* (sin y) x) 3)) (+ (* (* (sin y) x) (- (* (sin y) x) (* (cos y) z))) (pow (* (cos y) z) 2))) (+.f64 (*.f64 x y) z)) #s(approx (/ (+ (pow (* (cos y) z) 3) (pow (* (sin y) x) 3)) (+ (* (* (sin y) x) (- (* (sin y) x) (* (cos y) z))) (pow (* (cos y) z) 2))) #s(approx (* (- (* (neg z) (/ (cos y) x)) (sin y)) (neg x)) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 x y)) (*.f64 #s(literal 1/2 binary64) z)) y) x) y) z))) #s(approx (/ (+ (pow (* (cos y) z) 3) (pow (* (sin y) x) 3)) (+ (* (* (sin y) x) (- (* (sin y) x) (* (cos y) z))) (pow (* (cos y) z) 2))) (*.f64 (sin.f64 y) x)) (/.f64 (+.f64 (*.f64 (pow.f64 (cos.f64 y) #s(literal 3 binary64)) (pow.f64 z #s(literal 3 binary64))) (pow.f64 (*.f64 (sin.f64 y) x) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (sin.f64 y) x) (-.f64 (*.f64 (sin.f64 y) x) (*.f64 (cos.f64 y) z))) (pow.f64 (*.f64 (cos.f64 y) z) #s(literal 2 binary64)))))
((-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))
((-.f64 (*.f64 x (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 0 binary64) (sin.f64 y))) (*.f64 (*.f64 #s(literal 1 binary64) (cos.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y)))) (-.f64 (*.f64 #s(literal 0 binary64) (sin.f64 y)) (*.f64 #s(literal 1 binary64) (cos.f64 y))))) (*.f64 z (sin.f64 y))) #s(approx (- (* x (cos y)) (* z (sin y))) x) #s(approx (- (* x (cos y)) (* z (sin y))) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 y x) #s(literal -1/2 binary64)) z) y) x)) #s(approx (- (* x (cos y)) (* z (sin y))) (*.f64 (cos.f64 y) x)) #s(approx (- (* x (cos y)) (* z (sin y))) (*.f64 (-.f64 (*.f64 (/.f64 x z) (cos.f64 y)) (sin.f64 y)) z)))
((-.f64 (*.f64 x (/.f64 (neg.f64 (pow.f64 (cos.f64 y) #s(literal 6 binary64))) (*.f64 (pow.f64 (cos.f64 y) #s(literal 4 binary64)) (neg.f64 (cos.f64 y))))) (*.f64 z (sin.f64 y))) #s(approx (- (* x (cos y)) (* z (sin y))) #s(approx (+ (* (- (* (* y x) -1/2) z) y) x) (*.f64 (neg.f64 y) z))) #s(approx (- (* x (cos y)) (* z (sin y))) (+.f64 #s(approx (* (- (* (* y x) -1/2) z) y) (*.f64 (*.f64 (*.f64 y y) x) #s(literal -1/2 binary64))) x)) #s(approx (- (* x (cos y)) (* z (sin y))) #s(approx (* (cos y) x) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 y y)) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 y y)) x))) (-.f64 (*.f64 x (sin.f64 (+.f64 (neg.f64 y) (/.f64 (PI.f64) #s(literal 2 binary64))))) (*.f64 z (sin.f64 y))))
((-.f64 (/.f64 (/.f64 (neg.f64 (*.f64 x (pow.f64 (cos.f64 y) #s(literal 6 binary64)))) (neg.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) #s(literal 4 binary64))) (*.f64 z (sin.f64 y))) #s(approx (- (* x (/ (neg (pow (cos y) 6)) (* (pow (cos y) 4) (neg (cos y))))) (* z (sin y))) (-.f64 x (*.f64 z y))) #s(approx (- (* x (cos y)) (* z (sin y))) #s(approx (* (cos y) x) (+.f64 (*.f64 #s(approx (- (* (* 1/24 (* y y)) x) (* 1/2 x)) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 y y)) x)) (*.f64 y y)) x))) #s(approx (- (* x (cos y)) (* z (sin y))) #s(approx (* (cos y) x) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/24 binary64) y)) y) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 y y)) x))) #s(approx (- (* x (sin (+ (neg y) (/ (PI) 2)))) (* z (sin y))) (*.f64 (sin.f64 (-.f64 (*.f64 (PI.f64) #s(literal 1/2 binary64)) y)) x)))
((+.f64 x (*.f64 (-.f64 y x) z)))
((+.f64 x (*.f64 #s(approx (- y x) y) z)) #s(approx (+ x (* (- y x) z)) x) #s(approx (+ x (* (- y x) z)) (*.f64 z y)) #s(approx (+ x (* (- y x) z)) (*.f64 (-.f64 #s(literal 1 binary64) z) x)) #s(approx (+ x (* (- y x) z)) (*.f64 (-.f64 y x) z)))
(#s(approx (+ x (* (- y x) z)) (*.f64 #s(approx (- 1 z) (neg.f64 z)) x)) #s(approx (+ x (* (- y x) z)) (/.f64 (*.f64 (*.f64 (+.f64 y x) (-.f64 y x)) z) (+.f64 y x))) #s(approx (+ x (* (- y x) z)) (/.f64 (*.f64 (-.f64 (pow.f64 y #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) z) (+.f64 (*.f64 x (+.f64 y x)) (*.f64 y y)))) (+.f64 x (*.f64 #s(approx (- y x) (neg.f64 x)) z)))
(#s(approx (+ x (* (- y x) z)) (*.f64 (+.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) z) x) y) z) y)) #s(approx (+ x (* (- y x) z)) (*.f64 (-.f64 (+.f64 (/.f64 x z) y) x) z)) #s(approx (+ x (* (- y x) z)) (/.f64 (*.f64 (-.f64 y x) (*.f64 (+.f64 y x) z)) (+.f64 y x))))
((*.f64 #s(literal 2 binary64) (-.f64 (+.f64 (*.f64 x y) (*.f64 z t)) (*.f64 (*.f64 (+.f64 a (*.f64 b c)) c) i))))
(#s(approx (* 2 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))) (*.f64 (*.f64 #s(literal 2 binary64) z) (+.f64 (/.f64 (-.f64 (*.f64 y x) (*.f64 (*.f64 (+.f64 (*.f64 c b) a) i) c)) z) t))) (*.f64 #s(literal 2 binary64) #s(approx (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i)) (*.f64 t z))) (*.f64 #s(literal 2 binary64) #s(approx (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i)) (*.f64 (neg.f64 i) (*.f64 c a)))) (*.f64 #s(literal 2 binary64) #s(approx (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i)) (*.f64 (neg.f64 i) (*.f64 (*.f64 c c) b)))) (*.f64 #s(literal 2 binary64) (-.f64 #s(approx (+ (* x y) (* z t)) (*.f64 t z)) (*.f64 (*.f64 (+.f64 a (*.f64 b c)) c) i))))
((*.f64 #s(literal 2 binary64) (-.f64 (+.f64 (*.f64 x y) (*.f64 z t)) #s(approx (* (* (+ a (* b c)) c) i) (*.f64 (*.f64 (*.f64 c c) i) b)))) #s(approx (* 2 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))) (*.f64 (*.f64 z #s(literal 2 binary64)) t)) (*.f64 #s(approx (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i)) (*.f64 (*.f64 (neg.f64 i) a) c)) #s(literal 2 binary64)) #s(approx (* 2 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))) (*.f64 (*.f64 (*.f64 (*.f64 i c) b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) #s(approx (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i)) (-.f64 (*.f64 y x) (*.f64 (*.f64 (+.f64 (*.f64 c b) a) i) c)))))
((*.f64 #s(literal 2 binary64) (-.f64 #s(approx (+ (* x y) (* z t)) (*.f64 y x)) #s(approx (* (* (+ a (* b c)) c) i) (*.f64 (*.f64 (*.f64 c c) i) b)))) #s(approx (* 2 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))) (*.f64 (+.f64 z z) t)) #s(approx (* 2 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))) (*.f64 (*.f64 (*.f64 i c) a) #s(literal -2 binary64))) #s(approx (* 2 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))) (*.f64 i (*.f64 (*.f64 c b) (*.f64 #s(literal -2 binary64) c)))) #s(approx (* 2 (- (+ (* x y) (* z t)) (* (* (+ a (* b c)) c) i))) (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 (+.f64 (*.f64 c b) a) i)) c)))
((*.f64 (*.f64 x #s(literal 3 binary64)) x))
((*.f64 (*.f64 x x) #s(literal 3 binary64)))
((*.f64 (*.f64 #s(literal 3 binary64) (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 3 binary64)))) x))
((*.f64 #s(approx (* 3 (- 2 (* x 3))) (-.f64 (*.f64 #s(literal -9 binary64) x) #s(literal -6 binary64))) x) (*.f64 #s(approx (* 3 (- 2 (* x 3))) #s(literal 6 binary64)) x) #s(approx (* (* 3 (- 2 (* x 3))) x) (*.f64 (*.f64 x x) #s(literal -9 binary64))) (*.f64 #s(approx (* 3 (- 2 (* x 3))) (*.f64 #s(literal -9 binary64) x)) x) (*.f64 (*.f64 (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 3 binary64))) x) #s(literal 3 binary64)))
((*.f64 (*.f64 #s(approx (- 2 (* x 3)) (*.f64 #s(literal -3 binary64) x)) x) #s(literal 3 binary64)) (*.f64 (-.f64 #s(literal 2 binary64) (*.f64 x #s(literal 3 binary64))) (*.f64 x #s(literal 3 binary64))))
(#s(approx (* (* (- 2 (* x 3)) x) 3) (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 6 binary64) x) #s(literal 9 binary64)) x) x)))
((*.f64 #s(literal 3 binary64) (+.f64 (-.f64 (*.f64 (*.f64 x #s(literal 3 binary64)) x) (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))
(#s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 9 binary64) x) #s(literal 12 binary64)) x) #s(literal -3 binary64))) #s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) #s(literal 3 binary64)) #s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) (-.f64 (*.f64 #s(literal -12 binary64) x) #s(literal -3 binary64))) #s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) (*.f64 (*.f64 x x) #s(literal 9 binary64))) (*.f64 #s(literal 3 binary64) #s(approx (+ (- (* (* x 3) x) (* x 4)) 1) (*.f64 (*.f64 x x) #s(literal 3 binary64)))))
((-.f64 (*.f64 (*.f64 x (-.f64 (*.f64 x #s(literal 3 binary64)) #s(literal 4 binary64))) #s(literal 3 binary64)) #s(literal -3 binary64)) #s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) #s(approx (- (* -12 x) -3) (*.f64 #s(literal -12 binary64) x))) #s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) (*.f64 (*.f64 #s(literal 9 binary64) x) x)) #s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) (*.f64 (-.f64 (*.f64 #s(literal 9 binary64) x) #s(literal 12 binary64)) x)) (*.f64 #s(literal 3 binary64) #s(approx (+ (- (* (* x 3) x) (* x 4)) 1) (*.f64 (-.f64 (*.f64 x #s(literal 3 binary64)) #s(literal 4 binary64)) x))))
(#s(approx (* 3 (+ (- (* (* x 3) x) (* x 4)) 1)) (*.f64 (*.f64 (-.f64 #s(literal 9 binary64) (/.f64 #s(literal 12 binary64) x)) x) x)) (-.f64 (pow.f64 (pow.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 3 binary64) x) #s(literal 4 binary64)) #s(literal 3 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -3 binary64)))
((-.f64 x (*.f64 y z)))
(#s(approx (- x (* y z)) x) #s(approx (- x (* y z)) (*.f64 (neg.f64 y) z)))
((/.f64 x (-.f64 y (*.f64 z t))))
((/.f64 x #s(approx (- y (* z t)) y)) (/.f64 x #s(approx (- y (* z t)) (*.f64 (neg.f64 t) z))) #s(approx (/ x (- y (* z t))) (/.f64 (/.f64 (neg.f64 x) z) t)) (/.f64 x (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 t z) y) (*.f64 t z)) (*.f64 y y)) (/.f64 (-.f64 y (*.f64 t z)) (+.f64 (*.f64 (+.f64 (*.f64 t z) y) (*.f64 t z)) (*.f64 y y))))) (/.f64 (*.f64 x (+.f64 (*.f64 t z) y)) (-.f64 (*.f64 y y) (pow.f64 (*.f64 t z) #s(literal 2 binary64)))))
(#s(approx (/ (* x (+ (* t z) y)) (- (* y y) (pow (* t z) 2))) (/.f64 (/.f64 (neg.f64 x) t) z)) (/.f64 x (*.f64 #s(approx (+ (* (+ (* t z) y) (* t z)) (* y y)) (*.f64 (*.f64 (+.f64 (*.f64 t z) y) z) t)) (/.f64 (-.f64 y (*.f64 t z)) (+.f64 (*.f64 (+.f64 (*.f64 t z) y) (*.f64 t z)) (*.f64 y y))))))
((/.f64 x (*.f64 #s(approx (+ (* (+ (* t z) y) (* t z)) (* y y)) (*.f64 (*.f64 (+.f64 (*.f64 t z) y) z) t)) #s(approx (/ (- y (* t z)) (+ (* (+ (* t z) y) (* t z)) (* y y))) (/.f64 #s(literal -1 binary64) (*.f64 z t))))))
((/.f64 (-.f64 x (*.f64 y z)) (-.f64 t (*.f64 a z))))
((-.f64 (/.f64 x (-.f64 t (*.f64 a z))) (*.f64 (/.f64 y (-.f64 t (*.f64 a z))) z)) #s(approx (/ (- x (* y z)) (- t (* a z))) (/.f64 x t)) (/.f64 (-.f64 x (*.f64 y z)) #s(approx (- t (* a z)) t)) #s(approx (/ (- x (* y z)) (- t (* a z))) (/.f64 (/.f64 (-.f64 (*.f64 z y) x) a) z)) (/.f64 #s(approx (- x (* y z)) (*.f64 (-.f64 (/.f64 x z) y) z)) (-.f64 t (*.f64 a z))))
(#s(approx (/ (- x (* y z)) (- t (* a z))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 z y) x)) (-.f64 t (*.f64 a z))) x)) #s(approx (/ (- x (* y z)) (- t (* a z))) (/.f64 y a)) (/.f64 #s(approx (- x (* y z)) (*.f64 (neg.f64 z) y)) #s(approx (- t (* a z)) t)) #s(approx (/ (- x (* y z)) (- t (* a z))) (/.f64 (-.f64 (*.f64 y z) x) (*.f64 z a))) #s(approx (- (/ x (- t (* a z))) (* (/ y (- t (* a z))) z)) (*.f64 (neg.f64 z) (/.f64 y (-.f64 t (*.f64 z a))))))
(#s(approx (/ (- x (* y z)) (- t (* a z))) (*.f64 (/.f64 (-.f64 (/.f64 x y) z) (-.f64 t (*.f64 a z))) y)) #s(approx (/ (- x (* y z)) (- t (* a z))) (*.f64 #s(approx (/ (- 1 (/ (* z y) x)) (- t (* a z))) (/.f64 #s(literal 1 binary64) t)) x)) #s(approx (- (/ x (- t (* a z))) (* (/ y (- t (* a z))) z)) (*.f64 (neg.f64 z) #s(approx (/ y (- t (* z a))) (/.f64 y t)))) (/.f64 #s(approx (- x (* y z)) #s(approx (* (- (/ x z) y) z) x)) (-.f64 t (*.f64 a z))) #s(approx (/ (- x (* y z)) (- t (* a z))) (/.f64 (/.f64 #s(approx (- (* z y) x) (neg.f64 x)) a) z)))
((/.f64 (+.f64 x (/.f64 (*.f64 y z) t)) (+.f64 (+.f64 a #s(literal 1 binary64)) (/.f64 (*.f64 y b) t))))
((/.f64 (+.f64 x (*.f64 (/.f64 z t) y)) (+.f64 (+.f64 a #s(literal 1 binary64)) (/.f64 (*.f64 y b) t))) #s(approx (/ (+ x (/ (* y z) t)) (+ (+ a 1) (/ (* y b) t))) (/.f64 z b)) (/.f64 (+.f64 x (/.f64 (*.f64 y z) t)) #s(approx (+ (+ a 1) (/ (* y b) t)) (+.f64 #s(literal 1 binary64) a))) #s(approx (/ (+ x (/ (* y z) t)) (+ (+ a 1) (/ (* y b) t))) (*.f64 (/.f64 (+.f64 (/.f64 y t) (/.f64 x z)) (+.f64 (+.f64 (/.f64 (*.f64 b y) t) #s(literal 1 binary64)) a)) z)) #s(approx (/ (+ x (/ (* y z) t)) (+ (+ a 1) (/ (* y b) t))) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (*.f64 (*.f64 y x) b) (+.f64 #s(literal 1 binary64) a)) (*.f64 (neg.f64 y) z)) (+.f64 #s(literal 1 binary64) a)) (neg.f64 t)) (/.f64 x (+.f64 #s(literal 1 binary64) a)))))
((/.f64 (+.f64 x (*.f64 (/.f64 z t) y)) (+.f64 (+.f64 a #s(literal 1 binary64)) (*.f64 (/.f64 y t) b))) #s(approx (/ (+ x (/ (* y z) t)) (+ (+ a 1) (/ (* y b) t))) (/.f64 x (+.f64 #s(literal 1 binary64) a))) (/.f64 #s(approx (+ x (/ (* y z) t)) x) (+.f64 (+.f64 a #s(literal 1 binary64)) (/.f64 (*.f64 y b) t))) #s(approx (/ (+ x (* (/ z t) y)) (+ (+ a 1) (/ (* y b) t))) (*.f64 (/.f64 t b) (/.f64 (+.f64 (/.f64 (*.f64 y z) t) x) y))) #s(approx (/ (+ x (/ (* y z) t)) (+ (+ a 1) (/ (* y b) t))) (+.f64 (/.f64 (/.f64 #s(approx (+ (/ (* (* y x) b) (+ 1 a)) (* (neg y) z)) (*.f64 (neg.f64 y) z)) (+.f64 #s(literal 1 binary64) a)) (neg.f64 t)) (/.f64 x (+.f64 #s(literal 1 binary64) a)))))
((/.f64 #s(approx (+ x (/ (* y z) t)) (*.f64 (neg.f64 x) (-.f64 (*.f64 (neg.f64 y) (/.f64 (/.f64 z x) t)) #s(literal 1 binary64)))) (+.f64 (+.f64 a #s(literal 1 binary64)) (/.f64 (*.f64 y b) t))) #s(approx (/ (+ x (/ (* y z) t)) (+ (+ a 1) (/ (* y b) t))) #s(approx (/ x (+ 1 a)) x)) #s(approx (/ (+ x (* (/ z t) y)) (+ (+ a 1) (/ (* y b) t))) (*.f64 (/.f64 t b) #s(approx (/ (+ (/ (* y z) t) x) y) (/.f64 z t)))) (/.f64 (+.f64 x (/.f64 (*.f64 y z) t)) #s(approx (+ (+ a 1) (/ (* y b) t)) a)) #s(approx (/ (+ x (/ (* y z) t)) (+ (+ a 1) (/ (* y b) t))) (+.f64 #s(approx (/ (/ (+ (/ (* (* y x) b) (+ 1 a)) (* (neg y) z)) (+ 1 a)) (neg t)) (*.f64 (/.f64 y a) (/.f64 z t))) (/.f64 x (+.f64 #s(literal 1 binary64) a)))))
((/.f64 (*.f64 x y) z))
((*.f64 (/.f64 x z) y) (*.f64 (/.f64 y z) x))
((-.f64 x (/.f64 y #s(literal 4 binary64))))
(#s(approx (- x (/ y 4)) x) #s(approx (- x (/ y 4)) (*.f64 #s(literal -1/4 binary64) y)) (-.f64 x #s(approx (/ y 4) (*.f64 #s(literal 1/4 binary64) y))))
((-.f64 (/.f64 (*.f64 x y) #s(literal 2 binary64)) (/.f64 z #s(literal 8 binary64))))
(#s(approx (- (/ (* x y) 2) (/ z 8)) (*.f64 #s(literal -1/8 binary64) z)) #s(approx (- (/ (* x y) 2) (/ z 8)) (*.f64 #s(literal 1/2 binary64) (*.f64 y x))) #s(approx (- (/ (* x y) 2) (/ z 8)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 y x)) (*.f64 #s(literal 1/8 binary64) z))))
((+.f64 (-.f64 (+.f64 (*.f64 x y) (/.f64 (*.f64 z t) #s(literal 16 binary64))) (/.f64 (*.f64 a b) #s(literal 4 binary64))) c))
((+.f64 #s(approx (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) (*.f64 (-.f64 (/.f64 (-.f64 (*.f64 y x) (*.f64 (*.f64 #s(literal -1/16 binary64) z) t)) b) (*.f64 #s(literal 1/4 binary64) a)) b)) c) #s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) c) (+.f64 #s(approx (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) (*.f64 y x)) c) #s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) (*.f64 (*.f64 t z) #s(literal 1/16 binary64))) (+.f64 #s(approx (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) (*.f64 (*.f64 t z) #s(literal 1/16 binary64))) c))
(#s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) (-.f64 (-.f64 (*.f64 y x) (*.f64 (*.f64 #s(literal -1/16 binary64) z) t)) (*.f64 #s(literal 1/4 binary64) (*.f64 b a)))) #s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) (*.f64 y x)) (+.f64 #s(approx (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) (*.f64 #s(approx (- (/ (- (* y x) (* (* -1/16 z) t)) b) (* 1/4 a)) (*.f64 #s(literal -1/4 binary64) a)) b)) c) (+.f64 #s(approx (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) (-.f64 (*.f64 y x) (*.f64 (*.f64 #s(literal -1/16 binary64) z) t))) c) (+.f64 #s(approx (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) (*.f64 (-.f64 (/.f64 #s(approx (- (* y x) (* (* -1/16 z) t)) (*.f64 #s(literal 1/16 binary64) (*.f64 t z))) b) (*.f64 #s(literal 1/4 binary64) a)) b)) c))
(#s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) #s(approx (- (- (* y x) (* (* -1/16 z) t)) (* 1/4 (* b a))) (-.f64 (*.f64 y x) (*.f64 (*.f64 t z) #s(literal -1/16 binary64))))) #s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) (*.f64 #s(literal -1/4 binary64) (*.f64 b a))) #s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) (-.f64 #s(approx (- (* y x) (* (* -1/16 z) t)) (*.f64 y x)) (*.f64 #s(literal 1/4 binary64) (*.f64 b a)))) #s(approx (+ (- (+ (* x y) (/ (* z t) 16)) (/ (* a b) 4)) c) (-.f64 #s(approx (- (* y x) (* (* -1/16 z) t)) (*.f64 (*.f64 t z) #s(literal 1/16 binary64))) (*.f64 #s(literal 1/4 binary64) (*.f64 b a)))))
((+.f64 (-.f64 (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 8 binary64)) x) (/.f64 (*.f64 y z) #s(literal 2 binary64))) t))
(#s(approx (+ (- (* (/ 1 8) x) (/ (* y z) 2)) t) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) z) (/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) x) t) y)) y)) #s(approx (+ (- (* (/ 1 8) x) (/ (* y z) 2)) t) t) #s(approx (+ (- (* (/ 1 8) x) (/ (* y z) 2)) t) (*.f64 #s(literal 1/8 binary64) x)) (+.f64 #s(approx (- (* (/ 1 8) x) (/ (* y z) 2)) (*.f64 #s(literal 1/8 binary64) x)) t) #s(approx (+ (- (* (/ 1 8) x) (/ (* y z) 2)) t) (*.f64 #s(literal -1/2 binary64) (*.f64 z y))))
(#s(approx (+ (- (* (/ 1 8) x) (/ (* y z) 2)) t) #s(approx (* (- (* -1/2 z) (/ (- (* -1/8 x) t) y)) y) (*.f64 (-.f64 (*.f64 (/.f64 y x) (-.f64 (/.f64 t y) (*.f64 #s(literal 1/2 binary64) z))) #s(literal -1/8 binary64)) x))) #s(approx (+ (- (* (/ 1 8) x) (/ (* y z) 2)) t) (*.f64 #s(approx (- (* -1/2 z) (/ (- (* -1/8 x) t) y)) (-.f64 (/.f64 t y) (*.f64 #s(literal 1/2 binary64) z))) y)) #s(approx (+ (- (* (/ 1 8) x) (/ (* y z) 2)) t) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) z) y) (*.f64 #s(literal -1/8 binary64) x))) (+.f64 #s(approx (- (* (/ 1 8) x) (/ (* y z) 2)) (*.f64 (*.f64 #s(literal -1/2 binary64) z) y)) t))
((-.f64 x (*.f64 (/.f64 #s(literal 3 binary64) #s(literal 8 binary64)) y)))
((-.f64 x (*.f64 y #s(literal 3/8 binary64))) #s(approx (- x (* (/ 3 8) y)) x) #s(approx (- x (* (/ 3 8) y)) (*.f64 #s(literal -3/8 binary64) y)) (*.f64 (+.f64 (*.f64 y #s(literal 3/8 binary64)) x) (/.f64 (-.f64 x (*.f64 y #s(literal 3/8 binary64))) (+.f64 (*.f64 y #s(literal 3/8 binary64)) x))) (-.f64 (*.f64 x (/.f64 x (+.f64 (*.f64 y #s(literal 3/8 binary64)) x))) (*.f64 (*.f64 #s(literal 9/64 binary64) y) (/.f64 y (+.f64 (*.f64 y #s(literal 3/8 binary64)) x)))))
((-.f64 (*.f64 x (/.f64 x (+.f64 (*.f64 y #s(literal 3/8 binary64)) x))) (*.f64 (*.f64 (/.f64 y (+.f64 (*.f64 #s(literal 3/8 binary64) y) x)) y) #s(literal 9/64 binary64))) #s(approx (- (* x (/ x (+ (* y 3/8) x))) (* (* 9/64 y) (/ y (+ (* y 3/8) x)))) (*.f64 (-.f64 (/.f64 x y) #s(literal 3/8 binary64)) y)) #s(approx (- (* x (/ x (+ (* y 3/8) x))) (* (* 9/64 y) (/ y (+ (* y 3/8) x)))) (*.f64 (+.f64 (*.f64 (/.f64 y x) #s(literal -3/8 binary64)) #s(literal 1 binary64)) x)) (-.f64 #s(approx (* x (/ x (+ (* y 3/8) x))) x) (*.f64 (*.f64 #s(literal 9/64 binary64) y) (/.f64 y (+.f64 (*.f64 y #s(literal 3/8 binary64)) x)))) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 9/64 binary64) y) y) (*.f64 x x)) (-.f64 (*.f64 #s(literal -3/8 binary64) y) x)))
((-.f64 #s(approx (* x (/ x (+ (* y 3/8) x))) x) (*.f64 (*.f64 #s(literal 9/64 binary64) y) (/.f64 y #s(approx (+ (* 3/8 y) x) (*.f64 #s(literal 3/8 binary64) y))))) #s(approx (- (* x (/ x (+ (* y 3/8) x))) (* (* 9/64 y) (/ y (+ (* y 3/8) x)))) (*.f64 #s(approx (+ (* (/ y x) -3/8) 1) (*.f64 (/.f64 y x) #s(literal -3/8 binary64))) x)) #s(approx (- (* x (/ x (+ (* y 3/8) x))) (* (* 9/64 y) (/ y (+ (* y 3/8) x)))) (*.f64 (+.f64 (*.f64 y (/.f64 #s(literal -3/8 binary64) x)) #s(literal 1 binary64)) x)) (-.f64 #s(approx (* x (/ x (+ (* y 3/8) x))) x) (*.f64 (*.f64 (/.f64 y (+.f64 (*.f64 #s(literal 3/8 binary64) y) x)) y) #s(literal 9/64 binary64))) #s(approx (- (* x (/ x (+ (* y 3/8) x))) (* (* 9/64 y) (/ y (+ (* y 3/8) x)))) (/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 x y) #s(literal 2 binary64)) #s(literal 9/64 binary64)) y) (+.f64 (/.f64 x y) #s(literal 3/8 binary64)))))
((/.f64 x (*.f64 y #s(literal 2 binary64))))
((/.f64 x (+.f64 y y)) (/.f64 (/.f64 x y) #s(literal 2 binary64)))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (+.f64 x (*.f64 y (sqrt.f64 z)))))
((*.f64 (+.f64 (*.f64 (sqrt.f64 z) y) x) #s(literal 1/2 binary64)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 (*.f64 (sqrt.f64 z) y) #s(literal 1/2 binary64))) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 (-.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 z) y) x) #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) x)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 (*.f64 #s(literal 1/2 binary64) z) (+.f64 (/.f64 x z) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) z)) y)))))
((*.f64 #s(approx (+ (* (sqrt z) y) x) (+.f64 (*.f64 (*.f64 y z) (sqrt.f64 (/.f64 #s(literal 1 binary64) z))) x)) #s(literal 1/2 binary64)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 #s(approx (- (* (/ (* (sqrt z) y) x) 1/2) -1/2) (*.f64 (/.f64 (*.f64 (sqrt.f64 z) y) x) #s(literal 1/2 binary64))) x)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 (-.f64 (*.f64 (*.f64 y (/.f64 (sqrt.f64 z) x)) #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) x)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 (*.f64 #s(literal 1/2 binary64) z) (+.f64 (/.f64 x z) (/.f64 (*.f64 y #s(literal 1 binary64)) (sqrt.f64 z))))) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 x z) #s(literal 2 binary64)) (pow.f64 (*.f64 (pow.f64 z #s(literal -1/2 binary64)) y) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) z)) (-.f64 (/.f64 x z) (*.f64 (pow.f64 z #s(literal -1/2 binary64)) y)))))
((*.f64 #s(approx (+ (* (sqrt z) y) x) (+.f64 (/.f64 (*.f64 y z) (sqrt.f64 z)) x)) #s(literal 1/2 binary64)) (*.f64 #s(approx (+ (* (sqrt z) y) x) (+.f64 (*.f64 (/.f64 y (sqrt.f64 z)) z) x)) #s(literal 1/2 binary64)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 #s(approx (- (* (/ (* (sqrt z) y) x) 1/2) -1/2) (*.f64 (*.f64 (/.f64 y x) (sqrt.f64 z)) #s(literal 1/2 binary64))) x)) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (*.f64 (*.f64 #s(literal 1/2 binary64) z) #s(approx (+ (/ x z) (/ (* y 1) (sqrt z))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) z)) y)))) #s(approx (* (/ 1 2) (+ x (* y (sqrt z)))) (/.f64 #s(approx (* (- (pow (/ x z) 2) (pow (* (pow z -1/2) y) 2)) (* 1/2 z)) (*.f64 (*.f64 y y) #s(literal -1/2 binary64))) (-.f64 (/.f64 x z) (*.f64 (pow.f64 z #s(literal -1/2 binary64)) y)))))
((-.f64 x (*.f64 (*.f64 y #s(literal 4 binary64)) z)))
(#s(approx (- x (* (* y 4) z)) x) #s(approx (- x (* (* y 4) z)) (*.f64 (*.f64 z y) #s(literal -4 binary64))))
((-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) #s(literal 3 binary64))))) (/.f64 a (*.f64 b #s(literal 3 binary64)))))
(#s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (cos.f64 y)) (sqrt.f64 x)) (*.f64 (/.f64 a b) #s(literal 1/3 binary64)))) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) (*.f64 #s(literal -1/3 binary64) (/.f64 a b))) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 x)) (cos.f64 (-.f64 y (*.f64 (/.f64 t #s(literal 3 binary64)) z)))) (/.f64 a (*.f64 b #s(literal 3 binary64)))) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 (*.f64 (*.f64 t z) #s(literal 1/3 binary64)) y)) #s(literal 2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (/.f64 a b) x) #s(literal 1/3 binary64))) x)) (-.f64 (*.f64 (/.f64 (+.f64 (pow.f64 (sqrt.f64 x) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 x) #s(literal 3 binary64))) (+.f64 (*.f64 (sqrt.f64 x) (sqrt.f64 x)) (-.f64 (*.f64 (sqrt.f64 x) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (sqrt.f64 x))))) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) #s(literal 3 binary64))))) (/.f64 a (*.f64 b #s(literal 3 binary64)))))
((-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 x)) #s(approx (cos (- y (/ (* z t) 3))) (cos.f64 y))) (/.f64 a (*.f64 b #s(literal 3 binary64)))) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) (/.f64 (*.f64 #s(literal -1/3 binary64) a) b)) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) #s(approx (- (* (* 2 (cos y)) (sqrt x)) (* (/ a b) 1/3)) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) b) (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 #s(literal 1/3 binary64) a)) b))) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) #s(literal 3 binary64))))) (/.f64 (/.f64 a #s(literal 3 binary64)) b)) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) (*.f64 #s(approx (- (* (* (cos (- (* (* t z) 1/3) y)) 2) (sqrt (/ 1 x))) (* (/ (/ a b) x) 1/3)) (*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (cos.f64 (-.f64 (*.f64 (*.f64 t z) #s(literal 1/3 binary64)) y)) a)) (/.f64 #s(literal -1/3 binary64) (*.f64 b x))))) x)))
((-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 x)) #s(approx (cos (- y (/ (* z t) 3))) (cos.f64 y))) (/.f64 (/.f64 a #s(literal 3 binary64)) b)) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) (*.f64 a (/.f64 #s(literal -1/3 binary64) b))) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) #s(approx (- (* (* 2 (cos y)) (sqrt x)) (* (/ a b) 1/3)) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b #s(literal 2 binary64)) (sqrt.f64 x)) (cos.f64 y)) (*.f64 #s(literal 1/3 binary64) a)) b))) #s(approx (- (* (* 2 (sqrt x)) (cos (- y (/ (* z t) 3)))) (/ a (* b 3))) #s(approx (- (* (* 2 (cos y)) (sqrt x)) (* (/ a b) 1/3)) (/.f64 #s(approx (- (* (* 2 b) (* (cos y) (sqrt x))) (* 1/3 a)) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (cos.f64 y) b)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 a x) #s(literal 1/3 binary64))) x)) b))) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 x)) #s(approx (cos (- y (/ (* z t) 3))) (-.f64 (cos.f64 y) (*.f64 (*.f64 (*.f64 (sin.f64 y) z) #s(literal -1/3 binary64)) t)))) (/.f64 a (*.f64 b #s(literal 3 binary64)))))
((/.f64 (+.f64 (-.f64 (*.f64 (*.f64 x #s(literal 9 binary64)) y) (*.f64 (*.f64 (*.f64 z #s(literal 4 binary64)) t) a)) b) (*.f64 z c)))
(#s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (/.f64 (-.f64 (/.f64 (+.f64 (*.f64 (*.f64 y x) #s(literal 9 binary64)) b) z) (*.f64 (*.f64 a t) #s(literal 4 binary64))) c)) (/.f64 #s(approx (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) b) (*.f64 z c)) (/.f64 (+.f64 #s(approx (- (* (* x 9) y) (* (* (* z 4) t) a)) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 t z) a))) b) (*.f64 z c)) (/.f64 (+.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) z) a) t) (*.f64 #s(literal -9 binary64) (*.f64 y x))) b) (*.f64 z c)) #s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (*.f64 a (-.f64 (*.f64 (/.f64 t c) #s(literal -4 binary64)) (/.f64 (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -9 binary64) x) y) b) c) (*.f64 a z))))))
((/.f64 (+.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) z) a) t) (*.f64 (*.f64 #s(literal -9 binary64) y) x)) b) (*.f64 z c)) #s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a t) c))) (/.f64 #s(approx (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 t z) a))) (*.f64 z c)) #s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (/.f64 (-.f64 #s(approx (/ (+ (* (* y x) 9) b) z) (/.f64 b z)) (*.f64 (*.f64 a t) #s(literal 4 binary64))) c)) #s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (/.f64 #s(approx (- (/ (+ (* (* y x) 9) b) z) (* (* a t) 4)) (-.f64 (*.f64 #s(literal -4 binary64) (*.f64 a t)) (*.f64 (*.f64 (/.f64 x z) #s(literal -9 binary64)) y))) c)))
(#s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (*.f64 (-.f64 (/.f64 (+.f64 (*.f64 (*.f64 y x) #s(literal 9 binary64)) b) (*.f64 a z)) (*.f64 t #s(literal 4 binary64))) (/.f64 a c))) #s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (*.f64 #s(literal -4 binary64) (*.f64 t (/.f64 a c)))) (/.f64 #s(approx (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (*.f64 (*.f64 y x) #s(literal 9 binary64))) (*.f64 z c)) #s(approx (/ (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (* z c)) (/.f64 #s(approx (- (/ (+ (* (* y x) 9) b) z) (* (* a t) 4)) (*.f64 (/.f64 (*.f64 y x) z) #s(literal 9 binary64))) c)) (/.f64 #s(approx (+ (- (* (* x 9) y) (* (* (* z 4) t) a)) b) (-.f64 (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 t z) a)) (*.f64 (*.f64 #s(literal -9 binary64) x) y))) (*.f64 z c)))
((/.f64 (-.f64 (*.f64 x y) (*.f64 (*.f64 z #s(literal 9 binary64)) t)) (*.f64 a #s(literal 2 binary64))))
((/.f64 (-.f64 (*.f64 x y) (*.f64 (*.f64 z #s(literal 9 binary64)) t)) (+.f64 a a)) #s(approx (/ (- (* x y) (* (* z 9) t)) (* a 2)) (*.f64 (/.f64 (*.f64 t z) a) #s(literal -9/2 binary64))) (/.f64 #s(approx (- (* x y) (* (* z 9) t)) (*.f64 #s(literal -9 binary64) (*.f64 t z))) (*.f64 a #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 x y) (*.f64 (*.f64 t #s(literal 9 binary64)) z)) (*.f64 a #s(literal 2 binary64))) #s(approx (/ (- (* x y) (* (* z 9) t)) (* a 2)) (*.f64 (/.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) y) (*.f64 t (*.f64 (/.f64 z x) #s(literal -9/2 binary64)))) a) x)))
(#s(approx (/ (- (* x y) (* (* z 9) t)) (+ a a)) (*.f64 (-.f64 (*.f64 y x) (*.f64 (*.f64 #s(literal 9 binary64) z) t)) (/.f64 #s(literal 1/2 binary64) a))) (/.f64 #s(approx (- (* x y) (* (* z 9) t)) (*.f64 y x)) (+.f64 a a)) #s(approx (/ (- (* x y) (* (* z 9) t)) (* a 2)) (*.f64 (/.f64 #s(approx (+ (* 1/2 y) (* t (* (/ z x) -9/2))) (*.f64 #s(literal 1/2 binary64) y)) a) x)) (/.f64 #s(approx (- (* x y) (* (* z 9) t)) (*.f64 (*.f64 #s(literal -9 binary64) t) z)) (*.f64 a #s(literal 2 binary64))) #s(approx (/ (- (* x y) (* (* z 9) t)) (* a 2)) (*.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 y x) t) #s(literal 1/2 binary64)) (*.f64 #s(literal -9/2 binary64) z)) a) t)))
(#s(approx (/ (- (* x y) (* (* z 9) t)) (+ a a)) (*.f64 (/.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 x z)) y) (*.f64 #s(literal -9/2 binary64) t)) a) z)) #s(approx (/ (- (* x y) (* (* z 9) t)) (* a 2)) (*.f64 #s(approx (/ (+ (* (/ (* y x) t) 1/2) (* -9/2 z)) a) (*.f64 (/.f64 z a) #s(literal -9/2 binary64))) t)) #s(approx (/ (- (* x y) (* (* z 9) t)) (* a 2)) (/.f64 (*.f64 (*.f64 t z) #s(literal -9/2 binary64)) a)) #s(approx (/ (- (* x y) (* (* z 9) t)) (+ a a)) (*.f64 #s(approx (- (* x y) (* (* z 9) t)) (*.f64 #s(literal -9 binary64) (*.f64 t z))) (/.f64 #s(literal 1/2 binary64) a))) #s(approx (/ (- (* x y) (* (* z 9) t)) (+ a a)) (*.f64 (/.f64 (+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(literal -9/2 binary64) (/.f64 t y)) z)) a) y)))
((+.f64 (-.f64 x (/.f64 y (*.f64 z #s(literal 3 binary64)))) (/.f64 t (*.f64 (*.f64 z #s(literal 3 binary64)) y))))
((-.f64 x (/.f64 (-.f64 y (/.f64 t y)) (*.f64 #s(literal 3 binary64) z))) #s(approx (+ (- x (/ y (* z 3))) (/ t (* (* z 3) y))) x) #s(approx (+ (- x (/ y (* z 3))) (/ t (* (* z 3) y))) (-.f64 x (*.f64 (/.f64 y z) #s(literal 1/3 binary64)))) (+.f64 #s(approx (- x (/ y (* z 3))) x) (/.f64 t (*.f64 (*.f64 z #s(literal 3 binary64)) y))) (+.f64 (-.f64 x (/.f64 y (*.f64 z #s(literal 3 binary64)))) (/.f64 t (*.f64 (*.f64 y z) #s(literal 3 binary64)))))
((-.f64 x (/.f64 (/.f64 (-.f64 y (/.f64 t y)) z) #s(literal 3 binary64))) #s(approx (- x (/ (- y (/ t y)) (* 3 z))) (*.f64 (/.f64 y z) #s(literal -1/3 binary64))) #s(approx (+ (- x (/ y (* z 3))) (/ t (* (* z 3) y))) (-.f64 x (/.f64 (*.f64 #s(literal 1/3 binary64) y) z))) #s(approx (+ (- x (/ y (* z 3))) (/ t (* (* z 3) y))) (*.f64 (/.f64 t (*.f64 z y)) #s(literal 1/3 binary64))) #s(approx (- x (/ (- y (/ t y)) (* 3 z))) (*.f64 (/.f64 (/.f64 t y) z) #s(literal 1/3 binary64))))
((+.f64 #s(approx (- x (/ y (* z 3))) x) (/.f64 t (*.f64 (*.f64 z y) #s(literal 3 binary64)))) #s(approx (- x (/ (- y (/ t y)) (* 3 z))) (*.f64 y (/.f64 #s(literal -1/3 binary64) z))) (-.f64 x (/.f64 #s(approx (- y (/ t y)) y) (*.f64 #s(literal 3 binary64) z))) #s(approx (+ (- x (/ y (* z 3))) (/ t (* (* z 3) y))) (/.f64 (*.f64 #s(literal 1/3 binary64) t) (*.f64 z y))) #s(approx (+ (- x (/ y (* z 3))) (/ t (* (* z 3) y))) (/.f64 (/.f64 (*.f64 #s(literal 1/3 binary64) t) z) y)))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (+.f64 x y)))
(#s(approx (* (/ 1 2) (+ x y)) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (* (/ 1 2) (+ x y)) (*.f64 #s(literal 1/2 binary64) y)) (*.f64 (+.f64 y x) #s(literal 1/2 binary64)))
((*.f64 (*.f64 x #s(literal 27 binary64)) y))
((*.f64 (*.f64 y #s(literal 27 binary64)) x) (*.f64 (*.f64 y x) #s(literal 27 binary64)))
((-.f64 (-.f64 (+.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x #s(literal 18 binary64)) y) z) t) (*.f64 (*.f64 a #s(literal 4 binary64)) t)) (*.f64 b c)) (*.f64 (*.f64 x #s(literal 4 binary64)) i)) (*.f64 (*.f64 j #s(literal 27 binary64)) k)))
((-.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 z (*.f64 y (*.f64 #s(literal 18 binary64) x))) (*.f64 #s(literal 4 binary64) a)) t) (*.f64 c b)) (*.f64 (*.f64 x #s(literal 4 binary64)) i)) (*.f64 (*.f64 j #s(literal 27 binary64)) k)) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (*.f64 c b)) (-.f64 #s(approx (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (*.f64 c b)) (*.f64 (*.f64 j #s(literal 27 binary64)) k)) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 z y) t) #s(literal 18 binary64)) (*.f64 #s(literal 4 binary64) i)) x)) (-.f64 #s(approx (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 z y) x) t) #s(literal 18 binary64)) (*.f64 (+.f64 (*.f64 i x) (*.f64 a t)) #s(literal 4 binary64)))) (*.f64 (*.f64 j #s(literal 27 binary64)) k)))
((-.f64 #s(approx (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (*.f64 (+.f64 (/.f64 (-.f64 (*.f64 c b) (*.f64 (+.f64 (*.f64 i x) (*.f64 a t)) #s(literal 4 binary64))) y) (*.f64 (*.f64 (*.f64 z x) t) #s(literal 18 binary64))) y)) (*.f64 (*.f64 j #s(literal 27 binary64)) k)) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (*.f64 #s(literal -27 binary64) (*.f64 k j))) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (*.f64 #s(approx (- (* (* (* z y) t) 18) (* 4 i)) (*.f64 (*.f64 (*.f64 y z) t) #s(literal 18 binary64))) x)) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 t y) z) #s(literal 18 binary64)) (*.f64 #s(literal 4 binary64) i)) x)) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (+.f64 (*.f64 t (*.f64 (*.f64 (*.f64 x #s(literal 18 binary64)) y) z)) (*.f64 x (*.f64 #s(literal -4 binary64) i)))))
(#s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (*.f64 (-.f64 (/.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 z y) x) #s(literal 18 binary64)) (*.f64 #s(literal 4 binary64) a)) t) (*.f64 b c)) (*.f64 (*.f64 x i) #s(literal 4 binary64))) j) (*.f64 #s(literal 27 binary64) k)) j)) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (*.f64 (*.f64 #s(literal -27 binary64) j) k)) (-.f64 #s(approx (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (*.f64 c b)) (*.f64 (*.f64 k #s(literal 27 binary64)) j)) (-.f64 #s(approx (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (*.f64 (*.f64 t a) #s(literal -4 binary64))) (*.f64 (*.f64 j #s(literal 27 binary64)) k)) #s(approx (- (- (+ (- (* (* (* (* x 18) y) z) t) (* (* a 4) t)) (* b c)) (* (* x 4) i)) (* (* j 27) k)) (+.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal 18 binary64) x) y) t) z) (*.f64 x (*.f64 #s(literal -4 binary64) i)))))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 3 binary64)) (acos.f64 (*.f64 (/.f64 (*.f64 #s(literal 3 binary64) (/.f64 x (*.f64 y #s(literal 27 binary64)))) (*.f64 z #s(literal 2 binary64))) (sqrt.f64 t)))))
(#s(approx (* (/ 1 3) (acos (* (/ (* 3 (/ x (* y 27))) (* z 2)) (sqrt t)))) (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 #s(literal 1/18 binary64) z) y) (*.f64 (sqrt.f64 t) x))) #s(literal 1/3 binary64))) #s(approx (* (/ 1 3) (acos (* (/ (* 3 (/ x (* y 27))) (* z 2)) (sqrt t)))) (*.f64 (acos.f64 (/.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 t) y) x) #s(literal -1/18 binary64)) z)) #s(literal 1/3 binary64))))
(#s(approx (* (/ 1 3) (acos (* (/ (* 3 (/ x (* y 27))) (* z 2)) (sqrt t)))) (*.f64 (acos.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 t) x) #s(literal 1/18 binary64)) (*.f64 z y))) #s(literal 1/3 binary64))))
(#s(approx (* (/ 1 3) (acos (* (/ (* 3 (/ x (* y 27))) (* z 2)) (sqrt t)))) (*.f64 (acos.f64 (*.f64 (sqrt.f64 t) (/.f64 (*.f64 #s(literal 1/18 binary64) x) (*.f64 z y)))) #s(literal 1/3 binary64))))
((/.f64 x (*.f64 y #s(literal 3 binary64))))
(#s(approx (/ x (* y 3)) (*.f64 (/.f64 x y) #s(literal 1/3 binary64))) (/.f64 (/.f64 x #s(literal 3 binary64)) y) (/.f64 (/.f64 x y) #s(literal 3 binary64)))
(#s(approx (/ x (* y 3)) (*.f64 (/.f64 #s(literal 1/3 binary64) y) x)) (/.f64 #s(approx (/ x 3) (*.f64 #s(literal 1/3 binary64) x)) y))
((-.f64 (*.f64 (*.f64 x #s(literal 3 binary64)) y) z))
((-.f64 (*.f64 (*.f64 y #s(literal 3 binary64)) x) z) #s(approx (- (* (* x 3) y) z) (neg.f64 z)) #s(approx (- (* (* x 3) y) z) (*.f64 (*.f64 y x) #s(literal 3 binary64))) (-.f64 (*.f64 (*.f64 y x) #s(literal 3 binary64)) z) (*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 y (*.f64 #s(literal 3 binary64) x)) #s(literal 3 binary64)) (pow.f64 z #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 z (*.f64 y (*.f64 #s(literal 3 binary64) x))) z) #s(literal 3 binary64)) (pow.f64 (*.f64 y (*.f64 #s(literal 3 binary64) x)) #s(literal 6 binary64)))) (+.f64 (*.f64 (*.f64 (+.f64 z (*.f64 y (*.f64 #s(literal 3 binary64) x))) z) (-.f64 (*.f64 (+.f64 z (*.f64 y (*.f64 #s(literal 3 binary64) x))) z) (pow.f64 (*.f64 y (*.f64 #s(literal 3 binary64) x)) #s(literal 2 binary64)))) (pow.f64 (*.f64 y (*.f64 #s(literal 3 binary64) x)) #s(literal 4 binary64)))))
(#s(approx (- (* (* x 3) y) z) (*.f64 (*.f64 x #s(literal 3 binary64)) y)) #s(approx (- (* (* y 3) x) z) (*.f64 (-.f64 (*.f64 (/.f64 (*.f64 x y) z) #s(literal 3 binary64)) #s(literal 1 binary64)) z)))
(#s(approx (- (* (* x 3) y) z) (*.f64 (*.f64 y #s(literal 3 binary64)) x)) #s(approx (- (* (* y 3) x) z) (*.f64 #s(approx (- (* (/ (* x y) z) 3) 1) (*.f64 (/.f64 (*.f64 y x) z) #s(literal 3 binary64))) z)))
((+.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 y #s(literal 9 binary64)) z) t)) (*.f64 (*.f64 a #s(literal 27 binary64)) b)))
((+.f64 (-.f64 (+.f64 x x) (*.f64 (*.f64 (*.f64 y #s(literal 9 binary64)) z) t)) (*.f64 (*.f64 a #s(literal 27 binary64)) b)) #s(approx (+ (- (* x 2) (* (* (* y 9) z) t)) (* (* a 27) b)) (*.f64 #s(literal 2 binary64) x)) (+.f64 #s(approx (- (* x 2) (* (* (* y 9) z) t)) (*.f64 #s(literal 2 binary64) x)) (*.f64 (*.f64 a #s(literal 27 binary64)) b)) (+.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) (*.f64 #s(literal 9 binary64) (*.f64 y (*.f64 t z)))) (*.f64 (*.f64 a #s(literal 27 binary64)) b)) (+.f64 (-.f64 (*.f64 x #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 y #s(literal 9 binary64)) z) t)) (*.f64 (*.f64 b #s(literal 27 binary64)) a)))
((+.f64 (+.f64 x (-.f64 x (*.f64 t (*.f64 z (*.f64 #s(literal 9 binary64) y))))) (*.f64 (*.f64 a #s(literal 27 binary64)) b)) #s(approx (+ (- (* x 2) (* (* (* y 9) z) t)) (* (* a 27) b)) (*.f64 (*.f64 b a) #s(literal 27 binary64))) #s(approx (+ (- (* x 2) (* (* (* y 9) z) t)) (* (* a 27) b)) (-.f64 (*.f64 #s(literal -9 binary64) (*.f64 (*.f64 z y) t)) (*.f64 #s(literal -2 binary64) x))) (+.f64 (-.f64 (+.f64 x x) (*.f64 (*.f64 (*.f64 t z) y) #s(literal 9 binary64))) (*.f64 (*.f64 a #s(literal 27 binary64)) b)) #s(approx (+ (- (* x 2) (* (* (* y 9) z) t)) (* (* a 27) b)) (*.f64 (-.f64 (/.f64 (-.f64 (*.f64 #s(literal -9 binary64) (*.f64 (*.f64 z y) t)) (*.f64 #s(literal -2 binary64) x)) b) (*.f64 #s(literal -27 binary64) a)) b)))
((+.f64 (-.f64 (+.f64 x x) #s(approx (* 9 (* y (* t z))) (*.f64 (*.f64 #s(literal 9 binary64) z) (*.f64 t y)))) (*.f64 (*.f64 a #s(literal 27 binary64)) b)) #s(approx (+ (- (* x 2) (* (* (* y 9) z) t)) (* (* a 27) b)) (*.f64 a (*.f64 #s(literal 27 binary64) b))) #s(approx (+ (- (* x 2) (* (* (* y 9) z) t)) (* (* a 27) b)) (-.f64 (*.f64 #s(literal -9 binary64) (*.f64 z (*.f64 y t))) (*.f64 #s(literal -2 binary64) x))) (+.f64 #s(approx (- (+ x x) (* (* (* t z) y) 9)) (*.f64 #s(literal -9 binary64) (*.f64 (*.f64 y z) t))) (*.f64 (*.f64 a #s(literal 27 binary64)) b)) #s(approx (+ (- (+ x x) (* (* (* t z) y) 9)) (* (* a 27) b)) (*.f64 (-.f64 (/.f64 (-.f64 (*.f64 #s(literal 2 binary64) x) (*.f64 (*.f64 #s(literal -27 binary64) b) a)) y) (*.f64 (*.f64 z t) #s(literal 9 binary64))) y)))
((*.f64 (*.f64 x x) x))
((pow.f64 x #s(literal 3 binary64)))
((*.f64 (*.f64 (*.f64 x #s(literal 3 binary64)) y) y))
((*.f64 (*.f64 (*.f64 y x) #s(literal 3 binary64)) y) (*.f64 (*.f64 y x) (*.f64 y #s(literal 3 binary64))) (*.f64 (*.f64 y y) (*.f64 #s(literal 3 binary64) x)) (*.f64 (*.f64 (*.f64 y #s(literal 3 binary64)) y) x) (*.f64 (*.f64 (*.f64 y x) y) #s(literal 3 binary64)))
((*.f64 (*.f64 (*.f64 y y) #s(literal 3 binary64)) x))
((*.f64 (*.f64 (*.f64 x #s(literal 3 binary64)) x) y))
((*.f64 (*.f64 (*.f64 y x) x) #s(literal 3 binary64)) (*.f64 (*.f64 y #s(literal 3 binary64)) (*.f64 x x)) (*.f64 (*.f64 y x) (*.f64 #s(literal 3 binary64) x)) (*.f64 (*.f64 (*.f64 y x) #s(literal 3 binary64)) x) (*.f64 (*.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)) y) (neg.f64 x)))
((*.f64 (*.f64 (*.f64 #s(literal 3 binary64) x) y) x) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) y) x) x) (*.f64 (*.f64 (*.f64 x x) y) #s(literal 3 binary64)))
((+.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) y) (*.f64 x z)))
((+.f64 #s(approx (* (- 1 x) y) y) (*.f64 x z)) #s(approx (+ (* (- 1 x) y) (* x z)) y) #s(approx (+ (* (- 1 x) y) (* x z)) (*.f64 z x)) #s(approx (+ (* (- 1 x) y) (* x z)) (*.f64 (-.f64 #s(literal 1 binary64) x) y)) #s(approx (+ (* (- 1 x) y) (* x z)) (*.f64 (-.f64 z y) x)))
(#s(approx (+ (* (- 1 x) y) (* x z)) (*.f64 #s(approx (- z y) (neg.f64 y)) x)) (+.f64 (*.f64 #s(approx (- 1 x) (neg.f64 x)) y) (*.f64 x z)) (/.f64 (-.f64 (pow.f64 (*.f64 z x) #s(literal 2 binary64)) (pow.f64 (*.f64 y (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 (*.f64 z x) (*.f64 y (-.f64 #s(literal 1 binary64) x)))))
(#s(approx (+ (* (- 1 x) y) (* x z)) #s(approx (* (- z y) x) (*.f64 (-.f64 x (/.f64 (*.f64 y x) z)) z))) #s(approx (/ (- (pow (* z x) 2) (pow (* y (- 1 x)) 2)) (- (* z x) (* y (- 1 x)))) (*.f64 (+.f64 (/.f64 (*.f64 y (-.f64 #s(literal 1 binary64) x)) z) x) z)))
((/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z))
((/.f64 (+.f64 x (*.f64 y (*.f64 (+.f64 z x) (/.f64 (-.f64 z x) (+.f64 z x))))) z) #s(approx (/ (+ x (* y (- z x))) z) y) (/.f64 #s(approx (+ x (* y (- z x))) (*.f64 z y)) z) (/.f64 #s(approx (+ x (* y (- z x))) (*.f64 (-.f64 #s(literal 1 binary64) y) x)) z) (/.f64 (+.f64 x (*.f64 y #s(approx (- z x) z))) z))
((+.f64 (/.f64 x z) (*.f64 (-.f64 z x) (/.f64 y z))) (/.f64 #s(approx (+ x (* y (- z x))) #s(approx (* (- 1 y) x) x)) z) #s(approx (/ (+ x (* y (- z x))) z) (*.f64 (/.f64 x z) (-.f64 #s(literal 1 binary64) y))) (+.f64 (/.f64 (*.f64 #s(approx (- z x) z) y) z) (/.f64 x z)) (/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 z x) y) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (*.f64 (*.f64 (-.f64 z x) y) (-.f64 (*.f64 (-.f64 z x) y) x)) (*.f64 x x)) z)))
(#s(approx (+ (/ (* (- z x) y) z) (/ x z)) (+.f64 (/.f64 (-.f64 x (*.f64 y x)) z) y)) (+.f64 (/.f64 x z) #s(approx (/ (* (- z x) y) z) y)) #s(approx (/ (+ x (* y (- z x))) z) (*.f64 (/.f64 x z) #s(approx (- 1 y) (neg.f64 y)))) #s(approx (/ (+ (pow (* (- z x) y) 3) (pow x 3)) (* (+ (* (* (- z x) y) (- (* (- z x) y) x)) (* x x)) z)) (*.f64 (/.f64 y z) (-.f64 z x))) #s(approx (/ (+ x (* y (- z x))) z) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 y y)) x) (*.f64 (+.f64 #s(literal 1 binary64) y) z))))
((+.f64 (*.f64 x y) (*.f64 (-.f64 #s(literal 1 binary64) x) z)))
(#s(approx (+ (* x y) (* (- 1 x) z)) (-.f64 z (*.f64 (-.f64 z y) x))) #s(approx (+ (* x y) (* (- 1 x) z)) z) #s(approx (+ (* x y) (* (- 1 x) z)) (*.f64 (-.f64 #s(literal 1 binary64) x) z)) (+.f64 (*.f64 x y) #s(approx (* (- 1 x) z) z)) (/.f64 (-.f64 (pow.f64 (*.f64 z (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 y x) #s(literal 2 binary64))) (-.f64 (*.f64 z (-.f64 #s(literal 1 binary64) x)) (*.f64 y x))))
(#s(approx (/ (- (pow (* z (- 1 x)) 2) (pow (* y x) 2)) (- (* z (- 1 x)) (* y x))) (*.f64 (-.f64 (+.f64 (/.f64 (*.f64 y x) z) #s(literal 1 binary64)) x) z)) #s(approx (/ (- (pow (* z (- 1 x)) 2) (pow (* y x) 2)) (- (* z (- 1 x)) (* y x))) (*.f64 y x)) #s(approx (+ (* x y) (* (- 1 x) z)) (*.f64 #s(approx (- 1 x) (neg.f64 x)) z)) #s(approx (+ (* x y) (* (- 1 x) z)) (*.f64 (-.f64 y z) x)) #s(approx (+ (* x y) (* (- 1 x) z)) (-.f64 z (*.f64 #s(approx (- z y) z) x))))
(#s(approx (/ (- (pow (* z (- 1 x)) 2) (pow (* y x) 2)) (- (* z (- 1 x)) (* y x))) (*.f64 (-.f64 #s(approx (+ (/ (* y x) z) 1) (*.f64 (/.f64 y z) x)) x) z)) (+.f64 (*.f64 x y) (*.f64 #s(approx (- 1 x) (neg.f64 x)) z)))
((/.f64 (*.f64 x (-.f64 y z)) y))
((*.f64 (/.f64 (-.f64 y z) y) x) #s(approx (/ (* x (- y z)) y) x) (/.f64 (*.f64 x #s(approx (- y z) y)) y) #s(approx (/ (* x (- y z)) y) (*.f64 (/.f64 (neg.f64 x) y) z)) (/.f64 (*.f64 x #s(approx (- y z) (neg.f64 z))) y))
((*.f64 (-.f64 #s(literal 1 binary64) (/.f64 z y)) x) (*.f64 (/.f64 x y) #s(approx (- y z) y)) (*.f64 (/.f64 #s(approx (- y z) (neg.f64 z)) y) x) (/.f64 (*.f64 (*.f64 (-.f64 y z) y) x) (*.f64 y y)) (*.f64 (*.f64 (-.f64 y z) (/.f64 (-.f64 y z) (*.f64 (-.f64 y z) y))) x))
((*.f64 (/.f64 #s(literal 1 binary64) y) (*.f64 (-.f64 y z) x)) (/.f64 (*.f64 (*.f64 (+.f64 z y) (neg.f64 (-.f64 y z))) x) (*.f64 (neg.f64 (+.f64 z y)) y)))
((/.f64 (*.f64 x #s(literal 100 binary64)) (+.f64 x y)))
((*.f64 (/.f64 #s(literal 100 binary64) (+.f64 y x)) x) #s(approx (/ (* x 100) (+ x y)) #s(literal 100 binary64)) #s(approx (/ (* x 100) (+ x y)) (*.f64 (/.f64 x y) #s(literal 100 binary64))) (/.f64 (*.f64 x #s(literal 100 binary64)) #s(approx (+ x y) y)) (*.f64 (-.f64 x y) (*.f64 (/.f64 x (+.f64 y x)) (/.f64 #s(literal 100 binary64) (-.f64 x y)))))
((*.f64 (-.f64 x y) #s(approx (* (/ x (+ y x)) (/ 100 (- x y))) (*.f64 (/.f64 (/.f64 x y) y) #s(literal -100 binary64)))) (*.f64 (/.f64 #s(literal 100 binary64) #s(approx (+ y x) y)) x) (/.f64 (*.f64 (*.f64 (-.f64 x y) x) #s(literal 100 binary64)) (*.f64 (-.f64 x y) (+.f64 x y))))
((*.f64 #s(approx (- x y) (neg.f64 y)) #s(approx (* (/ x (+ y x)) (/ 100 (- x y))) (*.f64 (/.f64 (/.f64 x y) y) #s(literal -100 binary64)))) (*.f64 (-.f64 x y) #s(approx (* (/ x (+ y x)) (/ 100 (- x y))) (*.f64 (/.f64 x (*.f64 y y)) #s(literal -100 binary64)))) (/.f64 (/.f64 (*.f64 (*.f64 (-.f64 x y) x) #s(literal -100 binary64)) (+.f64 y x)) (neg.f64 (-.f64 x y))))
((/.f64 (+.f64 (*.f64 x y) (*.f64 z (-.f64 t a))) (+.f64 y (*.f64 z (-.f64 b y)))))
((/.f64 (+.f64 (*.f64 x y) (*.f64 z (-.f64 t a))) #s(approx (+ y (* z (- b y))) (*.f64 (+.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) z) y) b) z) b))) #s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) x) #s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) (*.f64 (/.f64 y (+.f64 (*.f64 (-.f64 b y) z) y)) x)) (/.f64 (+.f64 (*.f64 x y) (*.f64 z (-.f64 t a))) #s(approx (+ y (* z (- b y))) y)) (/.f64 (+.f64 (*.f64 x y) (*.f64 z (-.f64 t a))) #s(approx (+ y (* z (- b y))) (*.f64 (-.f64 b y) z))))
(#s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) (/.f64 (-.f64 t a) (-.f64 b y))) #s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) (/.f64 x (-.f64 #s(literal 1 binary64) z))) #s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) (*.f64 (/.f64 y #s(approx (+ y (* z (- b y))) (*.f64 b z))) x)) #s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) #s(approx (* (/ y (+ (* (- b y) z) y)) x) (*.f64 (/.f64 x z) (/.f64 y b)))) (/.f64 (+.f64 (*.f64 x y) (*.f64 z (-.f64 t a))) #s(approx (+ y (* z (- b y))) #s(approx (* (- b y) z) (*.f64 (neg.f64 z) y)))))
(#s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 (*.f64 y x) t) z) (+.f64 (*.f64 (-.f64 b y) z) y)) (*.f64 (/.f64 (neg.f64 a) t) (/.f64 z (+.f64 (*.f64 (-.f64 b y) z) y)))) t)) #s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) #s(approx (/ x (- 1 z)) (+.f64 (*.f64 z x) x))) #s(approx (/ (+ (* x y) (* z (- t a))) (+ y (* z (- b y)))) (/.f64 (-.f64 t a) #s(approx (- b y) (neg.f64 y)))) (/.f64 #s(approx (+ (* x y) (* z (- t a))) (*.f64 t z)) #s(approx (+ y (* z (- b y))) (*.f64 (-.f64 b y) z))) (/.f64 #s(approx (+ (* x y) (* z (- t a))) (*.f64 (neg.f64 z) a)) (+.f64 y (*.f64 z (-.f64 b y)))))
((*.f64 #s(literal 1000000 binary64) (-.f64 x x)))
(#s(approx (* 1000000 (- x x)) #s(literal 0 binary64)))
((+.f64 lambda1 (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (-.f64 (cos.f64 delta) (*.f64 (sin.f64 phi1) (sin.f64 (asin.f64 (+.f64 (*.f64 (sin.f64 phi1) (cos.f64 delta)) (*.f64 (*.f64 (cos.f64 phi1) (sin.f64 delta)) (cos.f64 theta))))))))))
((+.f64 lambda1 (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (-.f64 (cos.f64 delta) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 phi1) (cos.f64 delta)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 theta) (*.f64 (cos.f64 phi1) (sin.f64 delta))) #s(literal 2 binary64))) (sin.f64 phi1)) (-.f64 (*.f64 (sin.f64 phi1) (cos.f64 delta)) (*.f64 (cos.f64 theta) (*.f64 (cos.f64 phi1) (sin.f64 delta)))))))) #s(approx (+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta))))))))) lambda1) (+.f64 lambda1 (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (-.f64 (cos.f64 delta) #s(approx (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))) (*.f64 (+.f64 (*.f64 (cos.f64 delta) phi1) (*.f64 (cos.f64 theta) (sin.f64 delta))) phi1))))) (+.f64 lambda1 #s(approx (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))) (atan2.f64 (*.f64 (*.f64 (cos.f64 phi1) (sin.f64 theta)) (sin.f64 delta)) (-.f64 (cos.f64 delta) (*.f64 (+.f64 (*.f64 (*.f64 (cos.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (*.f64 (sin.f64 phi1) (cos.f64 delta))) (sin.f64 phi1)))))) (/.f64 (-.f64 (pow.f64 (atan2.f64 (*.f64 (cos.f64 phi1) (*.f64 (sin.f64 delta) (sin.f64 theta))) (-.f64 (cos.f64 delta) (*.f64 (+.f64 (*.f64 (cos.f64 theta) (*.f64 (cos.f64 phi1) (sin.f64 delta))) (*.f64 (sin.f64 phi1) (cos.f64 delta))) (sin.f64 phi1)))) #s(literal 2 binary64)) (*.f64 lambda1 lambda1)) (-.f64 (atan2.f64 (*.f64 (cos.f64 phi1) (*.f64 (sin.f64 delta) (sin.f64 theta))) (-.f64 (cos.f64 delta) (*.f64 (+.f64 (*.f64 (cos.f64 theta) (*.f64 (cos.f64 phi1) (sin.f64 delta))) (*.f64 (sin.f64 phi1) (cos.f64 delta))) (sin.f64 phi1)))) lambda1)))
((+.f64 lambda1 (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (-.f64 (cos.f64 delta) (+.f64 (*.f64 (*.f64 (*.f64 (sin.f64 delta) (cos.f64 phi1)) (cos.f64 theta)) (sin.f64 phi1)) (*.f64 (*.f64 (cos.f64 delta) (sin.f64 phi1)) (sin.f64 phi1)))))) (+.f64 lambda1 #s(approx (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))) (atan2.f64 (*.f64 (*.f64 (cos.f64 phi1) (sin.f64 theta)) (sin.f64 delta)) #s(approx (- (cos delta) (* (+ (* (* (cos theta) (sin delta)) (cos phi1)) (* (sin phi1) (cos delta))) (sin phi1))) (cos.f64 delta))))) (+.f64 lambda1 (atan2.f64 #s(approx (* (* (cos phi1) (sin theta)) (sin delta)) (*.f64 (sin.f64 delta) (sin.f64 theta))) (-.f64 (cos.f64 delta) #s(approx (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))) (*.f64 (+.f64 (*.f64 (cos.f64 delta) phi1) (*.f64 (cos.f64 theta) (sin.f64 delta))) phi1))))) (+.f64 lambda1 #s(approx (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))) (atan2.f64 (*.f64 (*.f64 (cos.f64 phi1) (sin.f64 theta)) (sin.f64 delta)) (-.f64 (cos.f64 delta) #s(approx (* (+ (* (cos theta) (* (cos phi1) (sin delta))) (* (sin phi1) (cos delta))) (sin phi1)) (*.f64 (+.f64 (*.f64 (sin.f64 phi1) (cos.f64 delta)) (*.f64 (cos.f64 phi1) (sin.f64 delta))) (sin.f64 phi1))))))) (+.f64 lambda1 (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (-.f64 (cos.f64 delta) (*.f64 (sin.f64 phi1) (sin.f64 (-.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (acos.f64 (+.f64 (*.f64 (cos.f64 theta) (*.f64 (cos.f64 phi1) (sin.f64 delta))) (*.f64 (sin.f64 phi1) (cos.f64 delta)))))))))))
((+.f64 lambda1 (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (-.f64 (cos.f64 delta) (*.f64 (sin.f64 phi1) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 phi1) (sin.f64 delta)) (cos.f64 theta)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 delta) (sin.f64 phi1)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (cos.f64 phi1) (sin.f64 delta)) (cos.f64 theta)) (*.f64 (cos.f64 delta) (sin.f64 phi1)))))))) (+.f64 lambda1 (atan2.f64 #s(approx (* (* (cos phi1) (sin theta)) (sin delta)) (*.f64 (sin.f64 delta) (sin.f64 theta))) #s(approx (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta))))))) (cos.f64 delta)))) (+.f64 lambda1 (atan2.f64 #s(approx (* (* (cos phi1) (sin theta)) (sin delta)) #s(approx (* (sin delta) (sin theta)) (*.f64 (sin.f64 theta) delta))) (-.f64 (cos.f64 delta) #s(approx (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))) (*.f64 (+.f64 (*.f64 (cos.f64 delta) phi1) (*.f64 (cos.f64 theta) (sin.f64 delta))) phi1))))) (+.f64 lambda1 (atan2.f64 #s(approx (* (* (cos phi1) (sin theta)) (sin delta)) (*.f64 (sin.f64 delta) (sin.f64 theta))) (-.f64 (cos.f64 delta) #s(approx (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))) (*.f64 (+.f64 (*.f64 (*.f64 (cos.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) (*.f64 (sin.f64 phi1) (cos.f64 delta))) (sin.f64 phi1)))))) (/.f64 (-.f64 (pow.f64 #s(approx (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))) (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) #s(approx (- (cos delta) (* (+ (* (* (cos theta) (sin delta)) (cos phi1)) (* (sin phi1) (cos delta))) (sin phi1))) (cos.f64 delta)))) #s(literal 2 binary64)) (*.f64 lambda1 lambda1)) (-.f64 #s(approx (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))) (atan2.f64 (*.f64 (*.f64 (sin.f64 theta) (sin.f64 delta)) (cos.f64 phi1)) #s(approx (- (cos delta) (* (+ (* (* (cos theta) (sin delta)) (cos phi1)) (* (sin phi1) (cos delta))) (sin phi1))) (cos.f64 delta)))) lambda1)))
((*.f64 (*.f64 x x) (-.f64 #s(literal 3 binary64) (*.f64 x #s(literal 2 binary64)))))
((*.f64 (*.f64 x x) (-.f64 #s(literal 3 binary64) (+.f64 x x))) (*.f64 (*.f64 x x) #s(approx (- 3 (* x 2)) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 3 binary64) (*.f64 #s(literal 2 binary64) x)) x) x) (/.f64 (*.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 4 binary64) (*.f64 x x))) (*.f64 x x)) (+.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (/.f64 (*.f64 (-.f64 #s(literal 27 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (*.f64 x x)) (+.f64 (+.f64 #s(literal 9 binary64) (*.f64 #s(literal 4 binary64) (*.f64 x x))) (*.f64 #s(literal 6 binary64) x))))
((*.f64 (*.f64 x x) (-.f64 (-.f64 #s(literal 3 binary64) x) x)) (*.f64 #s(approx (* (- 3 (* 2 x)) x) (*.f64 #s(literal 3 binary64) x)) x) (/.f64 (*.f64 #s(approx (- 9 (* 4 (* x x))) #s(literal 9 binary64)) (*.f64 x x)) (+.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 #s(literal 9 binary64) (*.f64 #s(literal 4 binary64) (*.f64 x x))) x) x) (+.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) #s(approx (/ (* (- 27 (pow (* 2 x) 3)) (* x x)) (+ (+ 9 (* 4 (* x x))) (* 6 x))) (*.f64 (-.f64 (/.f64 #s(literal 3 binary64) x) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64)))))
((+.f64 (*.f64 (*.f64 x x) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (*.f64 #s(literal -2 binary64) x))) (*.f64 (*.f64 x x) (-.f64 #s(approx (- 3 x) #s(literal 3 binary64)) x)) (*.f64 (*.f64 x x) (-.f64 #s(approx (- 3 x) (neg.f64 x)) x)) (/.f64 (*.f64 #s(approx (- 9 (* 4 (* x x))) #s(literal 9 binary64)) (*.f64 x x)) (+.f64 (+.f64 x x) #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 #s(approx (- 9 (* 4 (* x x))) #s(literal 9 binary64)) x) x) (+.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))
((/.f64 x (*.f64 (-.f64 y z) (-.f64 t z))))
((/.f64 (/.f64 x (-.f64 y z)) (-.f64 t z)) (/.f64 x #s(approx (* (- y z) (- t z)) (*.f64 t y))) (/.f64 x (*.f64 #s(approx (- y z) (neg.f64 z)) (-.f64 t z))) (/.f64 (/.f64 x (-.f64 t z)) (-.f64 y z)) (*.f64 (/.f64 x (*.f64 (pow.f64 (-.f64 y z) #s(literal 2 binary64)) (-.f64 t z))) (-.f64 y z)))
((/.f64 x #s(approx (* (- y z) (- t z)) (*.f64 (-.f64 (-.f64 t (/.f64 (*.f64 (-.f64 t z) z) y)) z) y))) (/.f64 x #s(approx (* (- y z) (- t z)) (*.f64 z z))) (/.f64 x (*.f64 (-.f64 y z) #s(approx (- t z) t))) (/.f64 (/.f64 x (-.f64 t z)) #s(approx (- y z) y)) (*.f64 (/.f64 x (*.f64 #s(approx (pow (- y z) 2) (*.f64 z z)) (-.f64 t z))) (-.f64 y z)))
((*.f64 (/.f64 (/.f64 x (-.f64 y z)) (*.f64 (+.f64 t z) (-.f64 t z))) (+.f64 t z)) (/.f64 x (*.f64 #s(approx (- y z) (neg.f64 z)) #s(approx (- t z) t))) (/.f64 #s(approx (/ x (- t z)) (/.f64 (neg.f64 x) z)) #s(approx (- y z) y)) (/.f64 (/.f64 x #s(approx (- y z) (neg.f64 z))) (-.f64 t z)) (/.f64 x #s(approx (* (- y z) (- t z)) (*.f64 #s(approx (- (- t (/ (* (- t z) z) y)) z) (/.f64 (*.f64 z z) y)) y))))
((-.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (-.f64 y z) (-.f64 y t)))))
((-.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 y z)) (-.f64 y t))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 x #s(approx (* (- y z) (- y t)) (*.f64 y y)))) (-.f64 #s(literal 1 binary64) (/.f64 x (*.f64 #s(approx (- y z) y) (-.f64 y t)))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) (/.f64 (neg.f64 x) (*.f64 (-.f64 y t) (-.f64 y z)))))
((-.f64 #s(literal 1 binary64) (/.f64 (/.f64 x #s(approx (- y z) (neg.f64 z))) (-.f64 y t))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) #s(approx (/ (neg x) (* (- y t) (- y z))) (/.f64 (neg.f64 x) (*.f64 y y)))) (-.f64 #s(literal 1 binary64) (/.f64 x #s(approx (* (- y z) (- y t)) (*.f64 t z)))) (-.f64 #s(literal 1 binary64) (/.f64 x (*.f64 #s(approx (- y z) y) #s(approx (- y t) (neg.f64 t))))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) #s(approx (/ (neg x) (* (- y t) (- y z))) (/.f64 (/.f64 (neg.f64 x) y) (-.f64 y z)))))
((-.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 y z)) #s(approx (- y t) y))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) #s(approx (/ (neg x) (* (- y t) (- y z))) (/.f64 x (*.f64 (-.f64 y t) z)))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) (/.f64 (neg.f64 x) (*.f64 #s(approx (- y t) y) (-.f64 y z)))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) #s(approx (/ (neg x) (* (- y t) (- y z))) #s(approx (/ (/ (neg x) y) (- y z)) (/.f64 (/.f64 x y) z)))) #s(approx (- 1 (/ x (* (- y z) (- y t)))) #s(approx (/ (neg x) (* (- y t) (- y z))) (/.f64 (/.f64 (neg.f64 x) y) y))))
((/.f64 (+.f64 x y) (+.f64 y y)))
(#s(approx (/ (+ x y) (+ y y)) #s(literal 1/2 binary64)) #s(approx (/ (+ x y) (+ y y)) (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal -1 binary64) (/.f64 x y)))) (/.f64 #s(approx (+ x y) x) (+.f64 y y)))
((+.f64 (+.f64 (*.f64 x x) y) y))
((+.f64 (*.f64 x x) (*.f64 #s(literal 2 binary64) y)) (+.f64 #s(approx (+ (* x x) y) y) y) #s(approx (+ (+ (* x x) y) y) (*.f64 x x)) (+.f64 #s(approx (+ (* x x) y) (*.f64 x x)) y) (+.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 y y)) (-.f64 (*.f64 x x) y)) y))
((+.f64 (*.f64 x x) (+.f64 y y)) (+.f64 (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) x) x) (*.f64 y y)) (-.f64 (*.f64 x x) y)) y))
(#s(approx (+ (/ (- (* (* (* x x) x) x) (* y y)) (- (* x x) y)) y) (*.f64 (neg.f64 y) (-.f64 (*.f64 (neg.f64 x) (/.f64 x y)) #s(literal 2 binary64)))))
((exp.f64 (*.f64 (*.f64 x y) y)))
(#s(approx (exp (* (* x y) y)) #s(literal 1 binary64)) #s(approx (exp (* (* x y) y)) (+.f64 (*.f64 (*.f64 y y) x) #s(literal 1 binary64))) (exp.f64 (*.f64 (*.f64 y y) x)) (/.f64 #s(literal 1 binary64) (exp.f64 (*.f64 (neg.f64 x) (*.f64 y y)))))
(#s(approx (exp (* (* x y) y)) #s(approx (+ (* (* y y) x) 1) (*.f64 (*.f64 y y) x))) #s(approx (exp (* (* x y) y)) (+.f64 (*.f64 (*.f64 y x) y) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) #s(approx (exp (* (neg x) (* y y))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 y y) x)))) (/.f64 #s(literal 1 binary64) (+.f64 (sinh.f64 (*.f64 (*.f64 (neg.f64 x) y) y)) (cosh.f64 (*.f64 (*.f64 y y) x)))))
((/.f64 #s(literal 1 binary64) #s(approx (exp (* (neg x) (* y y))) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 y y) x) x) #s(literal 1/2 binary64)) x) y) y) #s(literal 1 binary64)))) #s(approx (exp (* (* x y) y)) #s(approx (+ (* (* y y) x) 1) (*.f64 (*.f64 y x) y))) (/.f64 #s(literal 1 binary64) #s(approx (exp (* (neg x) (* y y))) #s(approx (- 1 (* (* y y) x)) (*.f64 (*.f64 (neg.f64 y) y) x)))) (/.f64 #s(literal 1 binary64) #s(approx (exp (* (neg x) (* y y))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 y x) y)))) #s(approx (/ 1 (+ (sinh (* (* (neg x) y) y)) (cosh (* (* y y) x)))) (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 (*.f64 y y) x) x) #s(literal 1/2 binary64)) x) y) y) #s(literal 1 binary64))))
((-.f64 (+.f64 x x) #s(literal 1 binary64)))
(#s(approx (- (+ x x) 1) #s(literal -1 binary64)) #s(approx (- (+ x x) 1) (*.f64 #s(literal 2 binary64) x)))
(#s(approx (- (+ x x) 1) (+.f64 x x)))
((-.f64 (*.f64 x x) #s(literal 1 binary64)))
(#s(approx (- (* x x) 1) #s(literal -1 binary64)) #s(approx (- (* x x) 1) (*.f64 x x)))
((sqrt.f64 (+.f64 (*.f64 x x) (*.f64 y y))))
(#s(approx (sqrt (+ (* x x) (* y y))) y))
((*.f64 x (exp.f64 (*.f64 y y))))
(#s(approx (* x (exp (* y y))) x) (*.f64 x #s(approx (exp (* y y)) (+.f64 #s(literal 1 binary64) (*.f64 y y)))) (*.f64 x (pow.f64 (exp.f64 (neg.f64 y)) (neg.f64 y))))
((*.f64 x #s(approx (exp (* y y)) #s(approx (+ 1 (* y y)) (*.f64 y y)))))
((-.f64 x (/.f64 y (+.f64 #s(literal 1 binary64) (/.f64 (*.f64 x y) #s(literal 2 binary64))))))
((-.f64 x (/.f64 y (+.f64 #s(literal 1 binary64) #s(approx (/ (* x y) 2) (*.f64 #s(literal 1/2 binary64) (*.f64 y x)))))) #s(approx (- x (/ y (+ 1 (/ (* x y) 2)))) x) (-.f64 x #s(approx (/ y (+ 1 (/ (* x y) 2))) y)) (-.f64 x #s(approx (/ y (+ 1 (/ (* x y) 2))) (+.f64 (*.f64 (*.f64 (*.f64 y y) x) #s(literal -1/2 binary64)) y))) #s(approx (- x (/ y (+ 1 (/ (* x y) 2)))) (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (*.f64 x x) y) #s(literal 1/4 binary64))) y) #s(literal 1 binary64)) y) x)))
((-.f64 x (/.f64 y #s(approx (+ 1 (/ (* x y) 2)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) x) (/.f64 #s(literal 1 binary64) y)) (neg.f64 y))))) #s(approx (- x (/ y (+ 1 (/ (* x y) 2)))) (neg.f64 y)) (-.f64 x #s(approx (/ y (+ 1 (/ (* x y) 2))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(approx (/ y (+ 1 (/ (* x y) 2))) (+.f64 (*.f64 (*.f64 (*.f64 y x) y) #s(literal -1/2 binary64)) y))) #s(approx (- x (/ y (+ 1 (/ (* x y) 2)))) (*.f64 (-.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) #s(literal -1 binary64)) x)))
(#s(approx (- x (/ y (+ 1 (/ (* x y) 2)))) #s(approx (* (- (/ -2 (* x x)) -1) x) (/.f64 #s(literal -2 binary64) x))) #s(approx (- x (/ y (+ 1 (/ (* x y) 2)))) (*.f64 #s(approx (- (/ -2 (* x x)) -1) (/.f64 #s(literal -2 binary64) (*.f64 x x))) x)))
((*.f64 (*.f64 (-.f64 (*.f64 x #s(literal 1/2 binary64)) y) (sqrt.f64 (*.f64 z #s(literal 2 binary64)))) (exp.f64 (/.f64 (*.f64 t t) #s(literal 2 binary64)))))
((*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) y) (sqrt.f64 (*.f64 (*.f64 z #s(literal 2 binary64)) (pow.f64 (exp.f64 t) t)))) (*.f64 (*.f64 (-.f64 (*.f64 x #s(literal 1/2 binary64)) y) (sqrt.f64 (*.f64 z #s(literal 2 binary64)))) #s(approx (exp (/ (* t t) 2)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 (*.f64 x #s(literal 1/2 binary64)) y) (sqrt.f64 (*.f64 z #s(literal 2 binary64)))) #s(approx (exp (/ (* t t) 2)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 t t) #s(literal 1/2 binary64))))) #s(approx (* (* (- (* x 1/2) y) (sqrt (* z 2))) (exp (/ (* t t) 2))) (+.f64 (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) x) y)) (sqrt.f64 z)) (-.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 t t)) #s(literal -1/2 binary64))) (*.f64 t t)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) x) y)) (sqrt.f64 z)))) (*.f64 #s(approx (* (- (* x 1/2) y) (sqrt (* z 2))) (*.f64 (*.f64 y (neg.f64 (sqrt.f64 z))) (sqrt.f64 #s(literal 2 binary64)))) (exp.f64 (/.f64 (*.f64 t t) #s(literal 2 binary64)))))
((*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) y) (sqrt.f64 (*.f64 (*.f64 z #s(literal 2 binary64)) (pow.f64 #s(approx (exp t) (+.f64 #s(literal 1 binary64) t)) t)))) (*.f64 #s(approx (* (- (* x 1/2) y) (sqrt (* z 2))) (*.f64 (*.f64 y (neg.f64 (sqrt.f64 z))) (sqrt.f64 #s(literal 2 binary64)))) #s(approx (exp (/ (* t t) 2)) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 x #s(literal 1/2 binary64)) y) (*.f64 #s(approx (exp (/ (* t t) 2)) (-.f64 (*.f64 (*.f64 t t) #s(literal 1/2 binary64)) #s(literal -1 binary64))) (sqrt.f64 (*.f64 #s(literal 2 binary64) z)))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) y) #s(approx (sqrt (* (* z 2) (pow (exp t) t))) (*.f64 (sqrt.f64 z) (+.f64 (*.f64 (*.f64 (*.f64 t t) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 #s(approx (* (- (* x 1/2) y) (sqrt (* z 2))) (*.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 z) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) y) x) (sqrt.f64 z))) x)) #s(approx (exp (/ (* t t) 2)) #s(literal 1 binary64))))
((*.f64 (*.f64 (-.f64 (*.f64 x #s(literal 1/2 binary64)) y) (sqrt.f64 (*.f64 z #s(literal 2 binary64)))) (exp.f64 #s(approx (/ (* t t) 2) (*.f64 (*.f64 t t) #s(literal 1/2 binary64))))) (*.f64 #s(approx (* (- (* x 1/2) y) (sqrt (* z 2))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 #s(literal 2 binary64) z))) y)) #s(approx (exp (/ (* t t) 2)) #s(literal 1 binary64))) (*.f64 #s(approx (* (- (* x 1/2) y) (sqrt (* z 2))) (*.f64 #s(approx (- (* (* (sqrt z) 1/2) (sqrt 2)) (* (/ (* (sqrt 2) y) x) (sqrt z))) (/.f64 (*.f64 (*.f64 (sqrt.f64 z) y) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 x))) x)) #s(approx (exp (/ (* t t) 2)) #s(literal 1 binary64))) (*.f64 #s(approx (* (- (* x 1/2) y) (sqrt (* z 2))) (*.f64 (*.f64 y (neg.f64 (sqrt.f64 z))) (sqrt.f64 #s(literal 2 binary64)))) #s(approx (exp (/ (* t t) 2)) (-.f64 #s(literal 1 binary64) (*.f64 (+.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 t t)) #s(literal -1/2 binary64)) (*.f64 t t))))) #s(approx (* (* (- (* x 1/2) y) (sqrt (* z 2))) (exp (/ (* t t) 2))) (-.f64 (*.f64 (sqrt.f64 (*.f64 #s(literal 2 binary64) z)) (-.f64 (*.f64 x #s(literal 1/2 binary64)) y)) (*.f64 (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 #s(literal 2 binary64) z)) (-.f64 (*.f64 x #s(literal 1/2 binary64)) y)) (*.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 t t)) #s(literal -1/2 binary64)) t))) t))))
((+.f64 x (*.f64 (-.f64 y z) (-.f64 t x))))
((+.f64 x (*.f64 (-.f64 y z) #s(approx (- t x) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 x t)) t)))) #s(approx (+ x (* (- y z) (- t x))) (*.f64 (-.f64 t x) y)) #s(approx (+ x (* (- y z) (- t x))) (*.f64 (neg.f64 z) (-.f64 t x))) (+.f64 x (*.f64 #s(approx (- y z) y) (-.f64 t x))) (+.f64 x #s(approx (* (- y z) (- t x)) (*.f64 (neg.f64 y) (*.f64 (-.f64 t x) (+.f64 (/.f64 z y) #s(literal -1 binary64)))))))
((+.f64 x #s(approx (* (- y z) (- t x)) (*.f64 (*.f64 (-.f64 y z) (+.f64 (/.f64 t x) #s(literal -1 binary64))) x))) #s(approx (+ x (* (- y z) (- t x))) #s(approx (* (neg z) (- t x)) (*.f64 z x))) #s(approx (+ x (* (- y z) (- t x))) #s(approx (* (neg z) (- t x)) (*.f64 (neg.f64 t) z))) #s(approx (+ x (* (- y z) (- t x))) (*.f64 (-.f64 x t) z)) (+.f64 x #s(approx (* (- y z) (- t x)) (*.f64 (-.f64 z y) x))))
((+.f64 x (*.f64 (-.f64 y z) #s(approx (- t x) #s(approx (* (- 1 (/ x t)) t) t)))) #s(approx (+ x (* (- y z) (- t x))) #s(approx (* (- t x) y) (*.f64 t y))) #s(approx (+ x (* (- y z) (- t x))) (*.f64 (-.f64 y z) t)) (+.f64 x #s(approx (* (- y z) (- t x)) (*.f64 #s(approx (- z y) (neg.f64 y)) x))) #s(approx (+ x (* (- y z) (- t x))) #s(approx (* (- x t) z) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 t x)) (*.f64 x z)))))
((*.f64 x (log.f64 (/.f64 x y))))
((*.f64 x (*.f64 (log.f64 (*.f64 y x)) (/.f64 (log.f64 (/.f64 x y)) (log.f64 (*.f64 y x))))) (*.f64 x (-.f64 (log.f64 x) (log.f64 y))) (*.f64 x (log.f64 (/.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 y))))) (*.f64 x (-.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (log.f64 (*.f64 y x))) (/.f64 (pow.f64 (log.f64 y) #s(literal 2 binary64)) (log.f64 (*.f64 y x))))) (/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 (neg.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 (neg.f64 y)) #s(literal 3 binary64))) x) (+.f64 (*.f64 (log.f64 (neg.f64 y)) (log.f64 (*.f64 (neg.f64 x) (neg.f64 y)))) (pow.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)))))
((*.f64 (*.f64 x (/.f64 (log.f64 (/.f64 x y)) (log.f64 (*.f64 x y)))) (log.f64 (*.f64 x y))) (*.f64 x (-.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))) (*.f64 x (log.f64 (/.f64 (exp.f64 (log.f64 (neg.f64 x))) (exp.f64 (log.f64 (neg.f64 y)))))) (*.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 y) #s(literal 3 binary64))) (/.f64 x (+.f64 (*.f64 (log.f64 (*.f64 y x)) (log.f64 y)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) (/.f64 (*.f64 (*.f64 (+.f64 (pow.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)) (*.f64 (log.f64 (*.f64 (neg.f64 y) (neg.f64 x))) (log.f64 (neg.f64 y)))) (log.f64 (/.f64 x y))) x) (+.f64 (*.f64 (log.f64 (neg.f64 y)) (log.f64 (*.f64 (neg.f64 x) (neg.f64 y)))) (pow.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)))))
((*.f64 (/.f64 (log.f64 (/.f64 x y)) (log.f64 (*.f64 y x))) (*.f64 x (log.f64 (*.f64 y x)))) (*.f64 x (log.f64 (/.f64 (exp.f64 (log.f64 x)) #s(approx (exp (log y)) y)))) (*.f64 x (-.f64 (exp.f64 (*.f64 (log.f64 (log.f64 (neg.f64 x))) #s(literal 1 binary64))) (log.f64 (neg.f64 y)))) (*.f64 (-.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 y) #s(literal 2 binary64))) (/.f64 x (log.f64 (*.f64 y x)))) (*.f64 (*.f64 x #s(approx (/ (log (/ x y)) (log (* x y))) (/.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) y)) (log.f64 (neg.f64 x))) (-.f64 (log.f64 (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) y)))))) (log.f64 (*.f64 x y))))
((*.f64 (*.f64 x #s(literal 1 binary64)) (log.f64 (-.f64 #s(literal 1 binary64) (/.f64 y x)))))
(#s(approx (* (* x 1) (log (- 1 (/ y x)))) (neg.f64 y)) (*.f64 (*.f64 x #s(literal 1 binary64)) #s(approx (log (- 1 (/ y x))) (/.f64 (neg.f64 y) x))) #s(approx (* (* x 1) (log (- 1 (/ y x)))) (*.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -1/3 binary64) y) x)) x) y) #s(literal 1 binary64)) y)) (*.f64 (*.f64 x #s(literal 1 binary64)) (log.f64 #s(approx (- 1 (/ y x)) #s(literal 1 binary64)))) #s(approx (* (* x 1) (log (- 1 (/ y x)))) (*.f64 (+.f64 (log.f64 y) (log.f64 (/.f64 #s(literal -1 binary64) x))) x)))
(#s(approx (* (* x 1) (log (- 1 (/ y x)))) (neg.f64 (-.f64 y (*.f64 (*.f64 y (/.f64 y x)) #s(literal -1/2 binary64))))) (*.f64 #s(approx (* x 1) x) #s(approx (log (- 1 (/ y x))) (/.f64 (neg.f64 y) x))) (*.f64 (*.f64 x #s(literal 1 binary64)) #s(approx (log (- 1 (/ y x))) (*.f64 (-.f64 (*.f64 (/.f64 (+.f64 (*.f64 #s(literal -1/3 binary64) (/.f64 y x)) #s(literal -1/2 binary64)) (*.f64 x x)) y) (/.f64 #s(literal 1 binary64) x)) y))) #s(approx (* (* x 1) (log (- 1 (/ y x)))) (*.f64 (-.f64 (log.f64 (neg.f64 y)) (log.f64 x)) x)) #s(approx (* (* x 1) (log (- 1 (/ y x)))) (-.f64 (*.f64 (neg.f64 x) (+.f64 (/.f64 x y) (log.f64 x))) (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) y)) x))))
(#s(approx (* (* x 1) (log (- 1 (/ y x)))) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 y x)) #s(literal 1 binary64)) y)) #s(approx (* (* x 1) (log (- 1 (/ y x)))) #s(approx (- (* (neg x) (+ (/ x y) (log x))) (* (log (/ -1 y)) x)) (*.f64 (neg.f64 x) (/.f64 x y)))) #s(approx (* (* x 1) (log (- 1 (/ y x)))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 (*.f64 #s(literal -1/4 binary64) y) x)) (*.f64 x x)) y) (/.f64 #s(literal 1/2 binary64) x)) y) #s(literal 1 binary64)) y)) #s(approx (* (* x 1) (log (- 1 (/ y x)))) (-.f64 #s(approx (* (neg x) (+ (/ x y) (log x))) (*.f64 (neg.f64 x) (/.f64 x y))) (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) y)) x))) #s(approx (* (* x 1) (log (- 1 (/ y x)))) (-.f64 #s(approx (* (neg x) (+ (/ x y) (log x))) (*.f64 (neg.f64 x) (log.f64 x))) (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) y)) x))))
((*.f64 (*.f64 x y) y))
((*.f64 (*.f64 y y) x))
((-.f64 (*.f64 x y) x))
(#s(approx (- (* x y) x) (neg.f64 x)) #s(approx (- (* x y) x) (*.f64 y x)) #s(approx (- (* x y) x) (*.f64 (-.f64 y #s(literal 1 binary64)) x)))
((+.f64 (+.f64 (/.f64 x #s(literal 2 binary64)) (*.f64 y x)) z))
((+.f64 #s(approx (+ (/ x 2) (* y x)) (*.f64 (-.f64 y #s(literal -1/2 binary64)) x)) z) #s(approx (+ (+ (/ x 2) (* y x)) z) z) #s(approx (+ (+ (/ x 2) (* y x)) z) (*.f64 y x)) #s(approx (+ (+ (/ x 2) (* y x)) z) (*.f64 (-.f64 y #s(literal -1/2 binary64)) x)) (+.f64 #s(approx (+ (/ x 2) (* y x)) (*.f64 #s(literal 1/2 binary64) x)) z))
(#s(approx (+ (+ (/ x 2) (* y x)) z) (*.f64 #s(approx (- y -1/2) #s(literal 1/2 binary64)) x)) (+.f64 #s(approx (+ (/ x 2) (* y x)) (*.f64 #s(approx (- y -1/2) y) x)) z) (+.f64 (+.f64 #s(approx (/ x 2) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 y x)) z))
((+.f64 (/.f64 x y) (/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 z #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) t))) (*.f64 t z))))
((+.f64 (/.f64 x y) #s(approx (/ (+ 2 (* (* z 2) (- 1 t))) (* t z)) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) z) #s(literal -2 binary64)) t) #s(literal 2 binary64)))) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (/.f64 x y)) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (/.f64 #s(literal 2 binary64) (*.f64 t z))) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) z) #s(literal -2 binary64)) t) #s(literal 2 binary64))) (+.f64 (/.f64 x y) (/.f64 #s(approx (+ 2 (* (* z 2) (- 1 t))) #s(literal 2 binary64)) (*.f64 t z))))
((+.f64 (/.f64 x y) (/.f64 (/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) z) (-.f64 #s(literal 1 binary64) t))) t) z)) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (-.f64 (/.f64 #s(approx (- (/ 2 z) -2) #s(literal 2 binary64)) t) #s(literal 2 binary64))) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (-.f64 #s(approx (/ (- (/ 2 z) -2) t) (/.f64 #s(literal 2 binary64) (*.f64 t z))) #s(literal 2 binary64))) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (-.f64 (/.f64 #s(approx (- (/ 2 z) -2) (/.f64 #s(literal 2 binary64) z)) t) #s(literal 2 binary64))) (+.f64 (/.f64 x y) #s(approx (/ (+ 2 (* (* z 2) (- 1 t))) (* t z)) (-.f64 (/.f64 #s(approx (- (/ 2 z) -2) #s(literal 2 binary64)) t) #s(literal 2 binary64)))))
((+.f64 (/.f64 x y) #s(approx (/ (+ 2 (* (* z 2) (- 1 t))) (* t z)) (-.f64 (/.f64 #s(approx (- (/ 2 z) -2) (/.f64 #s(literal 2 binary64) z)) t) #s(literal 2 binary64)))) (+.f64 (/.f64 x y) #s(approx (/ (+ 2 (* (* z 2) (- 1 t))) (* t z)) #s(literal -2 binary64))) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) z) #s(literal -2 binary64)) t)) #s(approx (+ (/ x y) (/ (+ 2 (* (* z 2) (- 1 t))) (* t z))) (-.f64 (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) z) t) (*.f64 t #s(literal -2 binary64))) (*.f64 t t)) #s(literal 2 binary64))) (/.f64 (+.f64 (*.f64 y (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) t) #s(literal -2 binary64)) z))) (*.f64 (*.f64 x z) t)) (*.f64 (*.f64 y z) t)))
((-.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) y) x))
((-.f64 #s(approx (* (+ x 1) y) y) x) #s(approx (- (* (+ x 1) y) x) y) #s(approx (- (* (+ x 1) y) x) (neg.f64 x)) #s(approx (- (* (+ x 1) y) x) (*.f64 (-.f64 x #s(literal -1 binary64)) y)) (-.f64 (*.f64 #s(approx (+ x 1) x) y) x))
(#s(approx (- (* (+ x 1) y) x) (*.f64 #s(approx (- x -1) x) y)))
((/.f64 (+.f64 x y) (+.f64 y #s(literal 1 binary64))))
((*.f64 (/.f64 (+.f64 y x) (-.f64 (*.f64 y y) #s(literal 1 binary64))) (-.f64 y #s(literal 1 binary64))) #s(approx (/ (+ x y) (+ y 1)) #s(literal 1 binary64)) #s(approx (/ (+ x y) (+ y 1)) (-.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) y))) (/.f64 #s(approx (+ x y) y) (+.f64 y #s(literal 1 binary64))) #s(approx (/ (+ x y) (+ y 1)) (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) y))))
((*.f64 (/.f64 #s(approx (+ y x) (*.f64 (neg.f64 y) (-.f64 (/.f64 (neg.f64 x) y) #s(literal 1 binary64)))) (-.f64 (*.f64 y y) #s(literal 1 binary64))) (-.f64 y #s(literal 1 binary64))) #s(approx (/ (+ x y) (+ y 1)) #s(approx (- x (* (- x 1) y)) x)) #s(approx (/ (+ x y) (+ y 1)) (-.f64 x #s(approx (* (- x 1) y) (neg.f64 y)))) #s(approx (/ (+ x y) (+ y 1)) #s(approx (- 1 (/ (- 1 x) y)) (/.f64 x y))) (/.f64 #s(approx (+ x y) x) (+.f64 y #s(literal 1 binary64))))
((*.f64 (/.f64 #s(approx (+ y x) (*.f64 (neg.f64 y) #s(approx (- (/ (neg x) y) 1) (-.f64 #s(literal -1 binary64) (/.f64 x y))))) (-.f64 (*.f64 y y) #s(literal 1 binary64))) (-.f64 y #s(literal 1 binary64))) #s(approx (/ (+ x y) (+ y 1)) #s(approx (- x (* (- x 1) y)) y)) (*.f64 #s(approx (/ (+ y x) (- (* y y) 1)) (-.f64 (neg.f64 x) y)) (-.f64 y #s(literal 1 binary64))) #s(approx (/ (+ x y) (+ y 1)) (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (- 1 x) (neg.f64 x)) y))) (*.f64 (/.f64 #s(approx (+ y x) #s(approx (* (neg y) (- (/ (neg x) y) 1)) x)) (-.f64 (*.f64 y y) #s(literal 1 binary64))) (-.f64 y #s(literal 1 binary64))))
((*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) y) z))))
(#s(approx (* x (- 1 (* (- 1 y) z))) (-.f64 x (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) y) x) z))) #s(approx (* x (- 1 (* (- 1 y) z))) x) (*.f64 x #s(approx (- 1 (* (- 1 y) z)) (*.f64 z y))) (*.f64 x #s(approx (- 1 (* (- 1 y) z)) (-.f64 (*.f64 z y) z))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 z (-.f64 #s(literal 1 binary64) y)) #s(literal 2 binary64))) x) (+.f64 (*.f64 z (-.f64 #s(literal 1 binary64) y)) #s(literal 1 binary64))))
(#s(approx (* x (- 1 (* (- 1 y) z))) (-.f64 x (*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 y y)) x) (+.f64 y #s(literal 1 binary64))) z))) (*.f64 x #s(approx (- 1 (* (- 1 y) z)) #s(approx (- (* z y) z) (neg.f64 z)))) (*.f64 x (-.f64 #s(literal 1 binary64) #s(approx (* (- 1 y) z) z))) #s(approx (/ (* (- 1 (pow (* z (- 1 y)) 2)) x) (+ (* z (- 1 y)) 1)) (*.f64 (-.f64 y #s(literal 1 binary64)) (*.f64 z x))) (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- 1 y) (neg.f64 y)) z))))
(#s(approx (* x (- 1 (* (- 1 y) z))) (-.f64 x (*.f64 (*.f64 z (-.f64 #s(literal 1 binary64) (*.f64 y y))) (/.f64 x (-.f64 y #s(literal -1 binary64)))))) #s(approx (* x (- 1 (* (- 1 y) z))) (-.f64 x (*.f64 #s(approx (/ (* (- 1 (* y y)) x) (+ y 1)) x) z))) #s(approx (/ (* (- 1 (pow (* z (- 1 y)) 2)) x) (+ (* z (- 1 y)) 1)) (*.f64 #s(approx (- y 1) y) (*.f64 z x))) #s(approx (/ (* (- 1 (pow (* z (- 1 y)) 2)) x) (+ (* z (- 1 y)) 1)) (*.f64 (*.f64 y x) z)) #s(approx (* x (- 1 (* (- 1 y) z))) (-.f64 x (*.f64 #s(approx (/ (* (- 1 (* y y)) x) (+ y 1)) (*.f64 (neg.f64 x) y)) z))))
((*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 y z))))
((+.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x (*.f64 (neg.f64 y) z))) #s(approx (* x (- 1 (* y z))) x) (*.f64 x #s(approx (- 1 (* y z)) (*.f64 (neg.f64 y) z))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 z y) #s(literal 2 binary64))) x) (+.f64 (*.f64 z y) #s(literal 1 binary64))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 z y) #s(literal 3 binary64))) x) (+.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 z y) #s(literal 2 binary64))) (*.f64 z y))))
((-.f64 x (*.f64 (*.f64 z y) x)) (-.f64 x (*.f64 (neg.f64 (*.f64 (neg.f64 y) x)) z)) (-.f64 x (*.f64 (*.f64 (neg.f64 x) z) (neg.f64 y))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 z y) (*.f64 z y))) x) (+.f64 (*.f64 z y) #s(literal 1 binary64))) (/.f64 #s(approx (* (- 1 (pow (* z y) 2)) x) (*.f64 (-.f64 (/.f64 (/.f64 x z) z) (*.f64 (*.f64 y y) x)) (*.f64 z z))) (+.f64 (*.f64 z y) #s(literal 1 binary64))))
((-.f64 x (*.f64 (*.f64 y x) z)) (-.f64 x (*.f64 (*.f64 z x) y)) (/.f64 #s(approx (* (- 1 (pow (* z y) 2)) x) (*.f64 #s(approx (- (/ (/ x z) z) (* (* y y) x)) (*.f64 (*.f64 (neg.f64 y) y) x)) (*.f64 z z))) (+.f64 (*.f64 z y) #s(literal 1 binary64))) (/.f64 #s(approx (* (- 1 (pow (* z y) 2)) x) (*.f64 (-.f64 (/.f64 (/.f64 x z) z) (*.f64 (*.f64 y x) y)) (*.f64 z z))) (+.f64 (*.f64 z y) #s(literal 1 binary64))))
((*.f64 x (-.f64 #s(literal 1 binary64) y)))
(#s(approx (* x (- 1 y)) x) (*.f64 x #s(approx (- 1 y) (neg.f64 y))))
((-.f64 x (/.f64 #s(literal 1 binary64) #s(literal 3 binary64))))
((-.f64 (*.f64 x (/.f64 x (+.f64 x #s(literal 1/3 binary64)))) (/.f64 #s(literal 1/9 binary64) (+.f64 x #s(literal 1/3 binary64)))) #s(approx (- x (/ 1 3)) #s(literal -1/3 binary64)) #s(approx (- x (/ 1 3)) x) (-.f64 x #s(literal 1/3 binary64)) (/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/81 binary64)) (*.f64 (-.f64 (*.f64 x x) #s(literal -1/9 binary64)) (+.f64 x #s(literal 1/3 binary64)))))
((/.f64 #s(approx (- (pow x 4) 1/81) #s(literal -1/81 binary64)) (*.f64 (-.f64 (*.f64 x x) #s(literal -1/9 binary64)) (+.f64 x #s(literal 1/3 binary64)))))
((/.f64 #s(approx (- (pow x 4) 1/81) #s(literal -1/81 binary64)) (*.f64 #s(approx (- (* x x) -1/9) #s(literal 1/9 binary64)) (+.f64 x #s(literal 1/3 binary64)))))
((+.f64 x (/.f64 #s(literal 1 binary64) #s(literal 3 binary64))))
((+.f64 x #s(literal 1/3 binary64)) #s(approx (+ x (/ 1 3)) #s(literal 1/3 binary64)) #s(approx (+ x (/ 1 3)) x) (-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1/3 binary64) x))) (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1/3 binary64))) (*.f64 (-.f64 x #s(literal 1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (-.f64 x #s(literal 1/3 binary64)) (-.f64 x #s(literal 1/3 binary64)))))
((/.f64 #s(approx (- (* (* x x) (- x 1/3)) (* (- x 1/3) 1/9)) (*.f64 (-.f64 #s(literal 1/3 binary64) x) #s(literal 1/9 binary64))) (*.f64 (-.f64 x #s(literal 1/3 binary64)) (-.f64 x #s(literal 1/3 binary64)))) (/.f64 #s(approx (- (* (* x x) (- x 1/3)) (* (- x 1/3) 1/9)) (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 x #s(literal 1/3 binary64)) x) #s(literal 1/9 binary64)) x) #s(literal -1/27 binary64))) (*.f64 (-.f64 x #s(literal 1/3 binary64)) (-.f64 x #s(literal 1/3 binary64)))) (/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1/3 binary64))) (/.f64 (*.f64 (-.f64 (*.f64 x x) #s(literal 1/9 binary64)) #s(literal 1/9 binary64)) (+.f64 #s(literal 1/3 binary64) x))) (*.f64 (-.f64 x #s(literal 1/3 binary64)) (-.f64 x #s(literal 1/3 binary64)))))
((/.f64 #s(approx (- (* (* x x) (- x 1/3)) (* (- x 1/3) 1/9)) (*.f64 (-.f64 #s(literal 1/3 binary64) x) #s(literal 1/9 binary64))) #s(approx (* (- x 1/3) (- x 1/3)) (-.f64 (*.f64 #s(literal -2/3 binary64) x) #s(literal -1/9 binary64)))) (/.f64 #s(approx (- (* (* x x) (- x 1/3)) (* (- x 1/3) 1/9)) (/.f64 (*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 x x)) #s(literal 1/9 binary64)) (+.f64 #s(literal 1/3 binary64) x))) (*.f64 (-.f64 x #s(literal 1/3 binary64)) (-.f64 x #s(literal 1/3 binary64)))))
((+.f64 x (*.f64 (*.f64 (-.f64 y x) #s(literal 6 binary64)) z)))
((+.f64 x (*.f64 (-.f64 y x) (*.f64 z #s(literal 6 binary64)))) #s(approx (+ x (* (* (- y x) 6) z)) x) #s(approx (+ x (* (* (- y x) 6) z)) (*.f64 (*.f64 #s(literal 6 binary64) (-.f64 y x)) z)) (+.f64 x (*.f64 #s(approx (* (- y x) 6) (*.f64 #s(literal -6 binary64) x)) z)) (+.f64 x (*.f64 (*.f64 z (-.f64 y x)) #s(literal 6 binary64))))
((+.f64 x (*.f64 (*.f64 #s(approx (- y x) y) #s(literal 6 binary64)) z)) #s(approx (+ x (* (* (- y x) 6) z)) (*.f64 #s(approx (* (- y x) 6) (*.f64 #s(literal -6 binary64) x)) z)) #s(approx (+ x (* (- y x) (* z 6))) (*.f64 (*.f64 z y) #s(literal 6 binary64))) #s(approx (+ x (* (- y x) (* z 6))) (*.f64 (-.f64 x y) (*.f64 #s(literal -6 binary64) z))) (-.f64 (*.f64 x (/.f64 x (-.f64 x (*.f64 (*.f64 z (-.f64 y x)) #s(literal 6 binary64))))) (*.f64 (pow.f64 (*.f64 z (-.f64 y x)) #s(literal 2 binary64)) (/.f64 #s(literal 36 binary64) (-.f64 x (*.f64 (*.f64 z (-.f64 y x)) #s(literal 6 binary64)))))))
((+.f64 x (*.f64 #s(approx (* (- y x) 6) (*.f64 (-.f64 (*.f64 (/.f64 y x) #s(literal 6 binary64)) #s(literal 6 binary64)) x)) z)) #s(approx (+ x (* (- y x) (* z 6))) (*.f64 #s(approx (- x y) x) (*.f64 #s(literal -6 binary64) z))) #s(approx (+ x (* (- y x) (* z 6))) (*.f64 (*.f64 #s(literal 6 binary64) y) z)) #s(approx (+ x (* (- y x) (* z 6))) (*.f64 (*.f64 z #s(literal 6 binary64)) y)) #s(approx (+ x (* (- y x) (* z 6))) (*.f64 (*.f64 (-.f64 x y) z) #s(literal -6 binary64))))
((+.f64 x (*.f64 (*.f64 (-.f64 y x) #s(literal 6 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) #s(literal 3 binary64)) z))))
((+.f64 x #s(approx (* (* (- y x) 6) (- (/ 2 3) z)) (*.f64 (-.f64 (*.f64 #s(literal -6 binary64) z) #s(literal -4 binary64)) (-.f64 y x)))) (+.f64 x #s(approx (* (* (- y x) 6) (- (/ 2 3) z)) (*.f64 #s(literal 4 binary64) (-.f64 y x)))) #s(approx (+ x (* (* (- y x) 6) (- (/ 2 3) z))) (*.f64 (-.f64 (*.f64 #s(literal -6 binary64) (-.f64 #s(literal 2/3 binary64) z)) #s(literal -1 binary64)) x)) (+.f64 x (*.f64 (*.f64 (-.f64 #s(literal 2/3 binary64) z) (-.f64 y x)) #s(literal 6 binary64))) (+.f64 x #s(approx (* (* (- y x) 6) (- (/ 2 3) z)) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 2/3 binary64) z) #s(literal 6 binary64)) x) (-.f64 (/.f64 y x) #s(literal 1 binary64))))))
((-.f64 x (*.f64 (*.f64 (-.f64 y x) #s(literal -6 binary64)) (-.f64 #s(literal 2/3 binary64) z))) #s(approx (+ x (* (* (- y x) 6) (- (/ 2 3) z))) (*.f64 #s(approx (- (* -6 (- 2/3 z)) -1) #s(literal -3 binary64)) x)) #s(approx (+ x (* (* (- y x) 6) (- (/ 2 3) z))) (*.f64 (*.f64 (-.f64 #s(literal 2/3 binary64) z) y) #s(literal 6 binary64))) (+.f64 x (*.f64 (*.f64 (-.f64 y x) #s(literal 6 binary64)) #s(approx (- (/ 2 3) z) (neg.f64 z)))) #s(approx (+ x (* (* (- y x) 6) (- (/ 2 3) z))) (*.f64 (-.f64 (/.f64 x z) (*.f64 (-.f64 y x) (-.f64 (/.f64 #s(literal -4 binary64) z) #s(literal -6 binary64)))) z)))
((+.f64 x #s(approx (* (* (- y x) 6) (- (/ 2 3) z)) (*.f64 (*.f64 (*.f64 #s(literal -6 binary64) (-.f64 #s(literal 2/3 binary64) z)) y) (+.f64 #s(literal -1 binary64) (/.f64 x y))))) #s(approx (+ x (* (* (- y x) 6) (- (/ 2 3) z))) #s(approx (* (* (- 2/3 z) y) 6) (*.f64 #s(literal 4 binary64) y))) #s(approx (+ x (* (* (- y x) 6) (- (/ 2 3) z))) (*.f64 #s(approx (- (* -6 (- 2/3 z)) -1) (-.f64 (*.f64 z #s(literal 6 binary64)) #s(literal 3 binary64))) x)) (-.f64 x (*.f64 #s(approx (* (- y x) -6) (*.f64 #s(literal 6 binary64) x)) (-.f64 #s(literal 2/3 binary64) z))) #s(approx (+ x (* (* (- y x) 6) (- (/ 2 3) z))) (*.f64 (-.f64 (/.f64 x z) #s(approx (* (- y x) (- (/ -4 z) -6)) (*.f64 (/.f64 (-.f64 y x) z) #s(literal -4 binary64)))) z)))
((-.f64 (*.f64 x #s(literal 2 binary64)) y))
(#s(approx (- (* x 2) y) (neg.f64 y)) #s(approx (- (* x 2) y) (*.f64 #s(literal 2 binary64) x)) (-.f64 (+.f64 x x) y))
(#s(approx (- (* x 2) y) (+.f64 x x)))
((*.f64 x (+.f64 y #s(literal 1 binary64))))
(#s(approx (* x (+ y 1)) x) (*.f64 x #s(approx (+ y 1) y)) (+.f64 (*.f64 y x) x))
((-.f64 (+.f64 x y) (*.f64 x y)))
(#s(approx (- (+ x y) (* x y)) x) #s(approx (- (+ x y) (* x y)) y) #s(approx (- (+ x y) (* x y)) (*.f64 (-.f64 #s(literal 1 binary64) x) y)) #s(approx (- (+ x y) (* x y)) (*.f64 (-.f64 #s(literal 1 binary64) y) x)))
(#s(approx (- (+ x y) (* x y)) (*.f64 #s(approx (- 1 y) (neg.f64 y)) x)))
((/.f64 (-.f64 x y) x))
(#s(approx (/ (- x y) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 y x)) (/.f64 #s(approx (- x y) (neg.f64 y)) x))
((/.f64 (-.f64 x y) (+.f64 x y)))
((-.f64 (/.f64 x (+.f64 y x)) (/.f64 y (+.f64 y x))) #s(approx (/ (- x y) (+ x y)) #s(literal -1 binary64)) (/.f64 #s(approx (- x y) x) (+.f64 x y)) (/.f64 (-.f64 x y) #s(approx (+ x y) y)) #s(approx (/ (- x y) (+ x y)) (-.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) y) #s(literal -1 binary64))))
((/.f64 #s(approx (- x y) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 y x)) x)) (+.f64 x y)) #s(approx (/ (- x y) (+ x y)) #s(approx (- (* (/ -2 x) y) -1) #s(literal 1 binary64))) (/.f64 (-.f64 x y) #s(approx (+ x y) x)) (/.f64 #s(approx (- x y) (neg.f64 y)) (+.f64 x y)) #s(approx (/ (- x y) (+ x y)) (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) y) x) #s(literal 1 binary64))))
((*.f64 (/.f64 (-.f64 x y) (*.f64 (+.f64 y x) (-.f64 y x))) (-.f64 y x)))
((/.f64 (-.f64 x y) (-.f64 #s(literal 2 binary64) (+.f64 x y))))
((/.f64 #s(approx (- x y) (*.f64 (-.f64 (/.f64 x y) #s(literal 1 binary64)) y)) (-.f64 #s(literal 2 binary64) (+.f64 x y))) #s(approx (/ (- x y) (- 2 (+ x y))) #s(literal -1 binary64)) #s(approx (/ (- x y) (- 2 (+ x y))) (/.f64 y (-.f64 y #s(literal 2 binary64)))) (/.f64 #s(approx (- x y) x) (-.f64 #s(literal 2 binary64) (+.f64 x y))) #s(approx (/ (- x y) (- 2 (+ x y))) (-.f64 (/.f64 (-.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -2 binary64)) y) #s(literal -1 binary64))))
((/.f64 (-.f64 x y) (-.f64 #s(literal 2 binary64) #s(approx (+ x y) y))) #s(approx (/ (- x y) (- 2 (+ x y))) #s(approx (/ y (- y 2)) #s(literal 1 binary64))) #s(approx (/ (- x y) (- 2 (+ x y))) #s(approx (/ y (- y 2)) (*.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) y) #s(literal 1/2 binary64)) y))) (/.f64 (-.f64 x y) #s(approx (- 2 (+ x y)) (neg.f64 x))) #s(approx (/ (- x y) (- 2 (+ x y))) (-.f64 (/.f64 #s(approx (- (* -2 x) -2) (*.f64 #s(literal -2 binary64) x)) y) #s(literal -1 binary64))))
((/.f64 (*.f64 (+.f64 y x) (-.f64 x y)) (*.f64 (+.f64 y x) (-.f64 #s(literal 2 binary64) (+.f64 y x)))) #s(approx (/ (- x y) (- 2 (+ x y))) #s(approx (/ y (- y 2)) (*.f64 #s(approx (- (* -1/4 y) 1/2) #s(literal -1/2 binary64)) y))) #s(approx (/ (- x y) (- 2 (+ x y))) #s(approx (/ y (- y 2)) (*.f64 #s(approx (- (* -1/4 y) 1/2) (*.f64 #s(literal -1/4 binary64) y)) y))) (/.f64 #s(approx (- x y) x) (-.f64 #s(literal 2 binary64) #s(approx (+ x y) x))) (/.f64 (-.f64 x y) #s(approx (- 2 (+ x y)) (neg.f64 y))))
((+.f64 (/.f64 (*.f64 #s(literal 60 binary64) (-.f64 x y)) (-.f64 z t)) (*.f64 a #s(literal 120 binary64))))
(#s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 (-.f64 #s(literal 120 binary64) (*.f64 (-.f64 y x) (/.f64 #s(literal 60 binary64) (*.f64 (-.f64 z t) a)))) a)) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 #s(literal 120 binary64) a)) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 (-.f64 x y) (/.f64 #s(literal 60 binary64) (-.f64 z t)))) (+.f64 (/.f64 (*.f64 #s(literal 60 binary64) #s(approx (- x y) x)) (-.f64 z t)) (*.f64 a #s(literal 120 binary64))) (+.f64 (/.f64 (*.f64 (*.f64 (-.f64 x y) #s(literal 60 binary64)) (+.f64 t z)) (*.f64 (+.f64 t z) (-.f64 z t))) (*.f64 a #s(literal 120 binary64))))
(#s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 (+.f64 (*.f64 (/.f64 a y) #s(literal 120 binary64)) (/.f64 (*.f64 #s(literal -60 binary64) (-.f64 #s(literal 1 binary64) (/.f64 x y))) (-.f64 z t))) y)) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 (-.f64 x y) #s(approx (/ 60 (- z t)) (/.f64 #s(literal -60 binary64) t)))) #s(approx (+ (/ (* (* (- x y) 60) (+ t z)) (* (+ t z) (- z t))) (* a 120)) (*.f64 (/.f64 y (-.f64 z t)) #s(literal -60 binary64))) (+.f64 (/.f64 #s(approx (* 60 (- x y)) (*.f64 #s(literal -60 binary64) y)) (-.f64 z t)) (*.f64 a #s(literal 120 binary64))) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 (-.f64 #s(literal 120 binary64) (*.f64 (-.f64 y x) (/.f64 #s(literal 60 binary64) #s(approx (* (- z t) a) (*.f64 a z))))) a)))
(#s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) #s(approx (* (- 120 (* (- y x) (/ 60 (* (- z t) a)))) a) (*.f64 (neg.f64 x) (-.f64 (*.f64 (neg.f64 a) (/.f64 (-.f64 #s(literal 120 binary64) (*.f64 (/.f64 y (*.f64 a (-.f64 z t))) #s(literal 60 binary64))) x)) (/.f64 #s(literal 60 binary64) (-.f64 z t)))))) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 #s(approx (- x y) x) #s(approx (/ 60 (- z t)) (/.f64 #s(literal -60 binary64) t)))) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 (-.f64 x y) #s(approx (/ 60 (- z t)) (/.f64 #s(literal 60 binary64) z)))) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (/.f64 (*.f64 (-.f64 x y) #s(literal 60 binary64)) (-.f64 z t))) #s(approx (+ (/ (* 60 (- x y)) (- z t)) (* a 120)) (*.f64 #s(approx (- 120 (* (- y x) (/ 60 (* (- z t) a)))) (*.f64 (/.f64 x (*.f64 a (-.f64 z t))) #s(literal 60 binary64))) a)))
((/.f64 (+.f64 x y) #s(literal 2 binary64)))
(#s(approx (/ (+ x y) 2) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (/ (+ x y) 2) (*.f64 #s(literal 1/2 binary64) y)) #s(approx (/ (+ x y) 2) (*.f64 (+.f64 y x) #s(literal 1/2 binary64))))
((/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a))
((+.f64 (/.f64 (*.f64 y x) a) (*.f64 (neg.f64 t) (/.f64 z a))) #s(approx (/ (- (* x y) (* z t)) a) (*.f64 (/.f64 x a) y)) (/.f64 #s(approx (- (* x y) (* z t)) (*.f64 (neg.f64 z) t)) a) (/.f64 (-.f64 (*.f64 a (*.f64 y x)) (*.f64 a (*.f64 t z))) (*.f64 a a)) (*.f64 (-.f64 (pow.f64 (-.f64 (*.f64 y x) (*.f64 t z)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 t z) x) y)) (/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) (*.f64 (-.f64 (pow.f64 (-.f64 (*.f64 y x) (*.f64 t z)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 t z) x) y)) a))))
((+.f64 (*.f64 x (/.f64 y a)) (*.f64 (neg.f64 t) (/.f64 z a))) (/.f64 #s(approx (- (* y x) (* t z)) (*.f64 x y)) a) (/.f64 #s(approx (- (* a (* y x)) (* a (* t z))) (*.f64 (*.f64 x y) a)) (*.f64 a a)) (/.f64 (-.f64 (*.f64 a (*.f64 y x)) (*.f64 (*.f64 a z) t)) (*.f64 a a)) #s(approx (/ (- (* a (* y x)) (* a (* t z))) (* a a)) (*.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) z) (/.f64 y a)) (/.f64 t a)) (neg.f64 z))))
((-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 z a) t)) #s(approx (/ (- (* a (* y x)) (* a (* t z))) (* a a)) (*.f64 (/.f64 (neg.f64 z) a) t)) #s(approx (/ (- (* y x) (* t z)) a) (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 x z) y) t) a) z)) #s(approx (/ (- (* a (* y x)) (* a (* t z))) (* a a)) (*.f64 #s(approx (+ (* (/ (neg x) z) (/ y a)) (/ t a)) (*.f64 (/.f64 (neg.f64 y) z) (/.f64 x a))) (neg.f64 z))) #s(approx (/ (- (* a (* y x)) (* a (* t z))) (* a a)) (*.f64 #s(approx (+ (* (/ (neg x) z) (/ y a)) (/ t a)) (*.f64 (/.f64 (+.f64 (/.f64 t x) (/.f64 (neg.f64 y) z)) a) x)) (neg.f64 z))))
((+.f64 (-.f64 (*.f64 x (-.f64 (*.f64 y z) (*.f64 t a))) (*.f64 b (-.f64 (*.f64 c z) (*.f64 t i)))) (*.f64 j (-.f64 (*.f64 c a) (*.f64 y i)))))
(#s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (+.f64 (-.f64 (*.f64 (-.f64 (*.f64 c a) (*.f64 i y)) j) (*.f64 (-.f64 (*.f64 a x) (*.f64 i b)) t)) (*.f64 (-.f64 (*.f64 y x) (*.f64 c b)) z))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 (-.f64 (*.f64 c a) (*.f64 i y)) j)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 (-.f64 (*.f64 y x) (*.f64 c b)) z)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 (+.f64 (*.f64 z x) (*.f64 (neg.f64 j) i)) y)) (+.f64 #s(approx (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 (*.f64 z y) (*.f64 a t)) (/.f64 x b)) (*.f64 i t)) (*.f64 c z)) b)) (*.f64 j (-.f64 (*.f64 c a) (*.f64 y i)))))
((+.f64 (-.f64 (*.f64 x (-.f64 (*.f64 y z) (*.f64 t a))) (*.f64 b (-.f64 (*.f64 c z) (*.f64 t i)))) #s(approx (* j (- (* c a) (* y i))) (*.f64 (neg.f64 i) (+.f64 (*.f64 (*.f64 (neg.f64 c) a) (/.f64 j i)) (*.f64 j y))))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) #s(approx (* j (- (* c a) (* y i))) (*.f64 (*.f64 j c) a))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 #s(approx (+ (* z x) (* (neg j) i)) (*.f64 (neg.f64 j) i)) y)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 (-.f64 (*.f64 j c) (*.f64 t x)) a)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 #s(approx (- (* y x) (* c b)) (*.f64 (+.f64 (*.f64 (neg.f64 b) (/.f64 c x)) y) x)) z)))
(#s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (-.f64 (*.f64 (-.f64 (*.f64 z y) (*.f64 t a)) x) (*.f64 (-.f64 (*.f64 z c) (*.f64 t i)) b))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) #s(approx (* j (- (* c a) (* y i))) (*.f64 (*.f64 j a) c))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) #s(approx (* (- (* y x) (* c b)) z) (*.f64 (neg.f64 b) (*.f64 c z)))) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 (-.f64 (*.f64 j a) (*.f64 b z)) c)) #s(approx (+ (- (* x (- (* y z) (* t a))) (* b (- (* c z) (* t i)))) (* j (- (* c a) (* y i)))) (*.f64 #s(approx (+ (* z x) (* (neg j) i)) (*.f64 (-.f64 (/.f64 (*.f64 z x) i) j) i)) y)))
((-.f64 (*.f64 x #s(literal 116 binary64)) #s(literal 16 binary64)))
(#s(approx (- (* x 116) 16) #s(literal -16 binary64)) #s(approx (- (* x 116) 16) (*.f64 #s(literal 116 binary64) x)) (-.f64 (*.f64 (*.f64 #s(literal 13456 binary64) x) (/.f64 x (+.f64 #s(literal 16 binary64) (*.f64 #s(literal 116 binary64) x)))) (/.f64 #s(literal -256 binary64) (+.f64 (*.f64 #s(literal -116 binary64) x) #s(literal -16 binary64)))))
((-.f64 (*.f64 (*.f64 #s(literal 13456 binary64) x) (/.f64 x (+.f64 #s(literal 16 binary64) (*.f64 #s(literal 116 binary64) x)))) #s(approx (/ -256 (+ (* -116 x) -16)) #s(literal 16 binary64))))
((-.f64 (*.f64 (*.f64 #s(literal 13456 binary64) x) #s(approx (/ x (+ 16 (* 116 x))) #s(literal 1/116 binary64))) #s(approx (/ -256 (+ (* -116 x) -16)) #s(literal 16 binary64))))
((*.f64 #s(literal 200 binary64) (-.f64 x y)))
(#s(approx (* 200 (- x y)) (*.f64 #s(literal -200 binary64) y)) (*.f64 #s(literal 200 binary64) #s(approx (- x y) x)) (*.f64 (*.f64 (+.f64 y x) (-.f64 x y)) (/.f64 #s(literal 200 binary64) (+.f64 y x))))
((*.f64 #s(literal 200 binary64) #s(approx (- x y) (*.f64 (-.f64 (/.f64 x y) #s(literal 1 binary64)) y))) (*.f64 #s(approx (* (+ y x) (- x y)) (*.f64 x x)) (/.f64 #s(literal 200 binary64) (+.f64 y x))) (*.f64 #s(approx (* (+ y x) (- x y)) (*.f64 (neg.f64 y) y)) (/.f64 #s(literal 200 binary64) (+.f64 y x))))
((*.f64 #s(approx (* (+ y x) (- x y)) (*.f64 x x)) (/.f64 #s(literal 200 binary64) #s(approx (+ y x) x))) (*.f64 #s(approx (* (+ y x) (- x y)) (*.f64 (neg.f64 y) y)) #s(approx (/ 200 (+ y x)) (/.f64 (*.f64 #s(literal -200 binary64) (/.f64 (-.f64 x y) y)) y))) (*.f64 #s(approx (* (+ y x) (- x y)) (*.f64 (neg.f64 y) y)) (/.f64 #s(literal 200 binary64) #s(approx (+ y x) y))))
((*.f64 #s(literal 500 binary64) (-.f64 x y)))
(#s(approx (* 500 (- x y)) (*.f64 #s(literal -500 binary64) y)) (*.f64 #s(literal 500 binary64) #s(approx (- x y) x)) (/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 y #s(literal 3 binary64))) #s(literal 500 binary64)) (+.f64 (*.f64 (+.f64 y x) y) (*.f64 x x))))
((*.f64 #s(literal 500 binary64) #s(approx (- x y) (*.f64 (-.f64 (/.f64 x y) #s(literal 1 binary64)) y))) (/.f64 (*.f64 (*.f64 (-.f64 x y) (+.f64 (*.f64 x x) (*.f64 (+.f64 y x) y))) #s(literal 500 binary64)) (+.f64 (*.f64 (+.f64 y x) y) (*.f64 x x))))
((/.f64 (*.f64 (*.f64 (-.f64 x y) #s(approx (+ (* (+ y x) y) (* x x)) (*.f64 y y))) #s(literal 500 binary64)) (+.f64 (*.f64 (+.f64 y x) y) (*.f64 x x))))
((+.f64 (*.f64 (/.f64 #s(literal 841 binary64) #s(literal 108 binary64)) x) (/.f64 #s(literal 4 binary64) #s(literal 29 binary64))))
((-.f64 #s(literal 4/29 binary64) (*.f64 #s(literal -841/108 binary64) x)) #s(approx (+ (* (/ 841 108) x) (/ 4 29)) #s(literal 4/29 binary64)) #s(approx (+ (* (/ 841 108) x) (/ 4 29)) (*.f64 #s(literal 841/108 binary64) x)) (-.f64 (*.f64 (*.f64 #s(literal 707281/11664 binary64) x) (/.f64 x (-.f64 (*.f64 x #s(literal 841/108 binary64)) #s(literal 4/29 binary64)))) (/.f64 #s(literal 16/841 binary64) (-.f64 (*.f64 x #s(literal 841/108 binary64)) #s(literal 4/29 binary64)))) (*.f64 (+.f64 (*.f64 x (-.f64 (*.f64 #s(literal 707281/11664 binary64) x) #s(literal 29/27 binary64))) #s(literal 16/841 binary64)) (/.f64 (+.f64 (*.f64 x #s(literal 841/108 binary64)) #s(literal 4/29 binary64)) (+.f64 (*.f64 x (-.f64 (*.f64 #s(literal 707281/11664 binary64) x) #s(literal 29/27 binary64))) #s(literal 16/841 binary64)))))
((*.f64 (+.f64 (*.f64 x #s(approx (- (* 707281/11664 x) 29/27) (*.f64 (neg.f64 x) (-.f64 (/.f64 #s(literal 29/27 binary64) x) #s(literal 707281/11664 binary64))))) #s(literal 16/841 binary64)) (/.f64 (+.f64 (*.f64 x #s(literal 841/108 binary64)) #s(literal 4/29 binary64)) (+.f64 (*.f64 x (-.f64 (*.f64 #s(literal 707281/11664 binary64) x) #s(literal 29/27 binary64))) #s(literal 16/841 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal 707281/11664 binary64) x) (/.f64 x (-.f64 (*.f64 x #s(literal 841/108 binary64)) #s(literal 4/29 binary64)))) #s(approx (/ 16/841 (- (* x 841/108) 4/29)) #s(literal -4/29 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 x (-.f64 (*.f64 #s(literal 841/108 binary64) x) #s(literal 4/29 binary64))) #s(literal 707281/11664 binary64)) x) (/.f64 #s(literal 16/841 binary64) (-.f64 (*.f64 x #s(literal 841/108 binary64)) #s(literal 4/29 binary64)))) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 707281/11664 binary64) x) x) #s(literal 16/841 binary64)) (-.f64 (*.f64 #s(literal 841/108 binary64) x) #s(literal 4/29 binary64))))
((-.f64 (*.f64 (*.f64 (/.f64 x (-.f64 (*.f64 #s(literal 841/108 binary64) x) #s(literal 4/29 binary64))) #s(literal 707281/11664 binary64)) x) #s(approx (/ 16/841 (- (* x 841/108) 4/29)) #s(literal -4/29 binary64))) (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 707281/11664 binary64) x) (-.f64 (*.f64 #s(literal 841/108 binary64) x) #s(literal 4/29 binary64))) x) (/.f64 #s(literal 16/841 binary64) (-.f64 (*.f64 x #s(literal 841/108 binary64)) #s(literal 4/29 binary64)))) (/.f64 #s(approx (- (* (* 707281/11664 x) x) 16/841) (*.f64 (*.f64 x x) #s(literal 707281/11664 binary64))) (-.f64 (*.f64 #s(literal 841/108 binary64) x) #s(literal 4/29 binary64))))
((-.f64 x (/.f64 y #s(literal 200 binary64))))
(#s(approx (- x (/ y 200)) x) #s(approx (- x (/ y 200)) (*.f64 #s(literal -1/200 binary64) y)) (-.f64 x #s(approx (/ y 200) (*.f64 #s(literal 1/200 binary64) y))))
((+.f64 x (/.f64 y #s(literal 500 binary64))))
(#s(approx (+ x (/ y 500)) x) #s(approx (+ x (/ y 500)) (*.f64 #s(literal 1/500 binary64) y)) (+.f64 x #s(approx (/ y 500) (*.f64 #s(literal 1/500 binary64) y))) (-.f64 (*.f64 x (/.f64 x (-.f64 x (/.f64 y #s(literal 500 binary64))))) (/.f64 (*.f64 y y) (*.f64 #s(literal 250000 binary64) (-.f64 x (/.f64 y #s(literal 500 binary64)))))))
(#s(approx (- (* x (/ x (- x (/ y 500)))) (/ (* y y) (* 250000 (- x (/ y 500))))) (*.f64 (+.f64 (*.f64 (/.f64 y x) #s(literal 1/500 binary64)) #s(literal 1 binary64)) x)))
((/.f64 (+.f64 x #s(literal 16 binary64)) #s(literal 116 binary64)))
((+.f64 (/.f64 x #s(literal 116 binary64)) #s(literal 4/29 binary64)) #s(approx (/ (+ x 16) 116) #s(literal 4/29 binary64)) #s(approx (/ (+ x 16) 116) (*.f64 #s(literal 1/116 binary64) x)) #s(approx (/ (+ x 16) 116) (*.f64 #s(literal 1/116 binary64) (-.f64 x #s(literal -16 binary64)))) (/.f64 #s(approx (+ x 16) x) #s(literal 116 binary64)))
((+.f64 #s(approx (/ x 116) (*.f64 #s(literal 1/116 binary64) x)) #s(literal 4/29 binary64)))
((*.f64 (*.f64 (-.f64 x (/.f64 #s(literal 16 binary64) #s(literal 116 binary64))) #s(literal 3 binary64)) y))
((*.f64 (*.f64 (-.f64 x #s(literal 4/29 binary64)) #s(literal 3 binary64)) y) (*.f64 #s(approx (* (- x (/ 16 116)) 3) #s(literal -12/29 binary64)) y) (*.f64 (*.f64 #s(approx (- x (/ 16 116)) x) #s(literal 3 binary64)) y) (*.f64 (-.f64 x #s(literal 4/29 binary64)) (*.f64 y #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (*.f64 x x) #s(literal 16/841 binary64)) y) #s(literal 3 binary64)) (+.f64 x #s(literal 4/29 binary64))))
((*.f64 (*.f64 y (-.f64 x #s(literal 4/29 binary64))) #s(literal 3 binary64)) (*.f64 #s(approx (- x 4/29) #s(literal -4/29 binary64)) (*.f64 y #s(literal 3 binary64))) (*.f64 (*.f64 y #s(literal 3 binary64)) #s(approx (- x (/ 16 116)) x)) (*.f64 (*.f64 #s(approx (- x (/ 16 116)) x) y) #s(literal 3 binary64)) (/.f64 #s(approx (* (* (- (* x x) 16/841) y) 3) (*.f64 #s(literal -48/841 binary64) y)) (+.f64 x #s(literal 4/29 binary64))))
((*.f64 (*.f64 #s(approx (- x 4/29) #s(literal -4/29 binary64)) y) #s(literal 3 binary64)) (*.f64 (/.f64 #s(approx (* (* (- (* x x) 16/841) y) 3) (*.f64 #s(literal -48/841 binary64) y)) (-.f64 (*.f64 x x) #s(literal 16/841 binary64))) (-.f64 x #s(literal 4/29 binary64))) (/.f64 #s(approx (* (* (- (* x x) 16/841) y) 3) (*.f64 #s(literal -48/841 binary64) y)) #s(approx (+ x 4/29) #s(literal 4/29 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (*.f64 x x) #s(literal 16/841 binary64)) y) #s(literal 3 binary64)) #s(approx (+ x 4/29) x)))
((-.f64 (-.f64 #s(literal 1 binary64) x) y))
((-.f64 #s(approx (- 1 x) (neg.f64 x)) y) #s(approx (- (- 1 x) y) (neg.f64 x)) #s(approx (- (- 1 x) y) (neg.f64 y)) #s(approx (- (- 1 x) y) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(approx (- 1 x) #s(literal 1 binary64)) y))
((sqrt.f64 (/.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)) #s(literal 3 binary64))))
(#s(approx (sqrt (/ (+ (+ (* x x) (* y y)) (* z z)) 3)) (*.f64 (sqrt.f64 #s(literal 1/3 binary64)) z)) (sqrt.f64 #s(approx (/ (+ (+ (* x x) (* y y)) (* z z)) 3) (*.f64 (*.f64 z z) #s(literal 1/3 binary64)))) (sqrt.f64 (/.f64 #s(approx (+ (+ (* x x) (* y y)) (* z z)) (*.f64 z z)) #s(literal 3 binary64))) (sqrt.f64 #s(approx (/ (+ (+ (* x x) (* y y)) (* z z)) 3) (*.f64 (+.f64 (*.f64 z z) (*.f64 y y)) #s(literal 1/3 binary64)))) (sqrt.f64 (/.f64 (+.f64 #s(approx (+ (* x x) (* y y)) (*.f64 y y)) (*.f64 z z)) #s(literal 3 binary64))))
((sqrt.f64 #s(approx (/ (+ (+ (* x x) (* y y)) (* z z)) 3) (*.f64 (*.f64 #s(literal 1/3 binary64) z) z))) (/.f64 (sqrt.f64 #s(approx (+ (+ (* x x) (* y y)) (* z z)) (*.f64 z z))) (sqrt.f64 #s(literal 3 binary64))))
((/.f64 #s(approx (sqrt (+ (+ (* x x) (* y y)) (* z z))) z) (sqrt.f64 #s(literal 3 binary64))))
((+.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (-.f64 (+.f64 x (*.f64 y #s(literal 1/4 binary64))) z)) y)))
(#s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 x y) #s(literal 4 binary64)))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) #s(literal 2 binary64)) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) (*.f64 (/.f64 #s(literal -4 binary64) y) z)) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) (*.f64 (/.f64 x y) #s(literal 4 binary64))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 z y)) #s(literal 4 binary64))))
(#s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) (*.f64 x (/.f64 #s(literal 4 binary64) y))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) (*.f64 (/.f64 (-.f64 x z) y) #s(literal 4 binary64))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 1/4)) z)) y)) (/.f64 (*.f64 #s(literal -4 binary64) z) y)) (+.f64 #s(literal 1 binary64) (/.f64 #s(approx (* 4 (- (+ x (* y 1/4)) z)) (+.f64 (*.f64 #s(literal 4 binary64) x) y)) y)))
((/.f64 (*.f64 #s(literal 4 binary64) (-.f64 (-.f64 x y) (*.f64 z #s(literal 1/2 binary64)))) z))
(#s(approx (/ (* 4 (- (- x y) (* z 1/2))) z) (-.f64 (*.f64 (/.f64 x z) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(approx (/ (* 4 (- (- x y) (* z 1/2))) z) #s(literal -2 binary64)) (/.f64 #s(approx (* 4 (- (- x y) (* z 1/2))) (*.f64 #s(literal -4 binary64) y)) z) (/.f64 (*.f64 #s(literal 4 binary64) #s(approx (- (- x y) (* z 1/2)) x)) z) #s(approx (/ (* 4 (- (- x y) (* z 1/2))) z) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 y z)) #s(literal 4 binary64))))
((/.f64 (*.f64 #s(literal 4 binary64) #s(approx (- (- x y) (* z 1/2)) (-.f64 x y))) z))
((+.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (-.f64 (+.f64 x (*.f64 y #s(literal 3/4 binary64))) z)) y)))
(#s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 (/.f64 (+.f64 (-.f64 x z) y) y) #s(literal 4 binary64))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) #s(literal 4 binary64)) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 (/.f64 x y) #s(literal 4 binary64))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (+.f64 (*.f64 (/.f64 x y) #s(literal 4 binary64)) #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) (/.f64 #s(approx (* 4 (- (+ x (* y 3/4)) z)) (*.f64 #s(literal 3 binary64) y)) y)))
(#s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 (/.f64 #s(approx (+ (- x z) y) (+.f64 y x)) y) #s(literal 4 binary64))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 #s(literal -4 binary64) (/.f64 z y))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 x (/.f64 #s(literal 4 binary64) y))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 (/.f64 #s(literal -4 binary64) y) z)) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 (/.f64 #s(approx (+ (- x z) y) (-.f64 y z)) y) #s(literal 4 binary64))))
(#s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 #s(approx (+ (- x z) y) (-.f64 y z)) (/.f64 #s(literal 4 binary64) y))) #s(approx (+ 1 (/ (* 4 (- (+ x (* y 3/4)) z)) y)) (*.f64 (/.f64 (-.f64 x z) y) #s(literal 4 binary64))))
((/.f64 (*.f64 #s(literal 6 binary64) (-.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 #s(literal 4 binary64) (sqrt.f64 x)))))
((*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 #s(literal -4 binary64) (sqrt.f64 x)))) #s(literal 6 binary64)) #s(approx (/ (* 6 (- x 1)) (+ (+ x 1) (* 4 (sqrt x)))) (/.f64 #s(literal -6 binary64) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64)))) (/.f64 (*.f64 #s(literal 6 binary64) #s(approx (- x 1) x)) (+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 #s(literal 4 binary64) (sqrt.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 6 binary64) (-.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 #s(literal -4 binary64) (sqrt.f64 x))))) (/.f64 (*.f64 #s(literal 6 binary64) (-.f64 x #s(literal 1 binary64))) #s(approx (+ (+ x 1) (* 4 (sqrt x))) (*.f64 (neg.f64 x) (-.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))))))
((/.f64 (*.f64 #s(literal 6 binary64) #s(approx (- x 1) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))) (+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 #s(literal 4 binary64) (sqrt.f64 x)))) #s(approx (/ (* 6 (- x 1)) (+ (+ x 1) (* 4 (sqrt x)))) #s(approx (/ -6 (- (* (sqrt x) 4) -1)) (*.f64 #s(literal -3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) #s(approx (/ (* 6 (- x 1)) (+ (+ x 1) (* 4 (sqrt x)))) #s(approx (/ -6 (- (* (sqrt x) 4) -1)) (/.f64 (-.f64 (*.f64 #s(literal -3/2 binary64) (sqrt.f64 x)) #s(literal -3/8 binary64)) x))) (*.f64 #s(approx (- x 1) x) (/.f64 #s(literal 6 binary64) (-.f64 (-.f64 x #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) #s(literal -4 binary64))))) #s(approx (/ (* 6 (- x 1)) (+ (+ x 1) (* 4 (sqrt x)))) (/.f64 #s(literal -6 binary64) #s(approx (- (* (sqrt x) 4) -1) (*.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -4 binary64)) (/.f64 #s(literal 1 binary64) x)) (neg.f64 x))))))
((*.f64 #s(approx (/ (- x 1) (- (- x -1) (* -4 (sqrt x)))) (-.f64 (/.f64 (+.f64 (/.f64 x (-.f64 (*.f64 (sqrt.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) x) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 4 binary64)) #s(literal -1 binary64))))) #s(literal 6 binary64)) #s(approx (/ (* 6 (- x 1)) (+ (+ x 1) (* 4 (sqrt x)))) #s(approx (/ -6 (- (* (sqrt x) 4) -1)) (/.f64 #s(literal -3/2 binary64) (sqrt.f64 x)))) #s(approx (/ (* 6 (- x 1)) (+ (+ x 1) (* 4 (sqrt x)))) #s(approx (/ -6 (- (* (sqrt x) 4) -1)) (*.f64 #s(literal 3/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) #s(approx (/ (* 6 (- x 1)) (+ (+ x 1) (* 4 (sqrt x)))) (/.f64 #s(literal -6 binary64) #s(approx (- (* (sqrt x) 4) -1) #s(approx (* (- (* (sqrt (/ 1 x)) -4) (/ 1 x)) (neg x)) (*.f64 #s(literal -4 binary64) (sqrt.f64 x)))))) (/.f64 #s(approx (* 6 (- x 1)) #s(literal -6 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 #s(literal 4 binary64) (sqrt.f64 x)))))
((+.f32 (*.f32 (*.f32 (sin.f32 (*.f32 (-.f32 #s(literal 1 binary32) u) normAngle)) (/.f32 #s(literal 1 binary32) (sin.f32 normAngle))) n0_i) (*.f32 (*.f32 (sin.f32 (*.f32 u normAngle)) (/.f32 #s(literal 1 binary32) (sin.f32 normAngle))) n1_i)))
(#s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) (-.f32 (+.f32 (*.f32 (*.f32 #s(literal -1/6 binary32) (-.f32 (+.f32 (*.f32 (pow.f32 u #s(literal 3 binary32)) n1_i) (*.f32 (pow.f32 (-.f32 #s(literal 1 binary32) u) #s(literal 3 binary32)) n0_i)) (+.f32 (*.f32 n1_i u) (*.f32 (-.f32 #s(literal 1 binary32) u) n0_i)))) (*.f32 normAngle normAngle)) (*.f32 n1_i u)) (*.f32 (+.f32 #s(literal -1 binary32) u) n0_i))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) n0_i) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) (*.f32 (sin.f32 (*.f32 (-.f32 #s(literal 1 binary32) u) normAngle)) (/.f32 n0_i (sin.f32 normAngle)))) (+.f32 (*.f32 (*.f32 (sin.f32 (*.f32 (-.f32 #s(literal 1 binary32) u) normAngle)) (/.f32 #s(literal 1 binary32) (sin.f32 normAngle))) n0_i) (*.f32 #s(approx (* (sin (* u normAngle)) (/ 1 (sin normAngle))) u) n1_i)) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) (*.f32 (/.f32 (+.f32 (*.f32 (/.f32 n1_i n0_i) (sin.f32 (*.f32 normAngle u))) (sin.f32 (*.f32 (-.f32 #s(literal 1 binary32) u) normAngle))) (sin.f32 normAngle)) n0_i)))
(#s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (- (+ (* (* -1/6 (- (+ (* (pow u 3) n1_i) (* (pow (- 1 u) 3) n0_i)) (+ (* n1_i u) (* (- 1 u) n0_i)))) (* normAngle normAngle)) (* n1_i u)) (* (+ -1 u) n0_i)) (-.f32 (*.f32 (-.f32 (+.f32 (*.f32 (*.f32 #s(literal -1/6 binary32) (*.f32 normAngle normAngle)) (-.f32 (-.f32 (*.f32 #s(literal -3 binary32) n0_i) n1_i) (neg.f32 n0_i))) n1_i) n0_i) u) (neg.f32 n0_i)))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (* (sin (* (- 1 u) normAngle)) (/ n0_i (sin normAngle))) (*.f32 (-.f32 #s(literal 1 binary32) u) n0_i))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (- (+ (* (* -1/6 (- (+ (* (pow u 3) n1_i) (* (pow (- 1 u) 3) n0_i)) (+ (* n1_i u) (* (- 1 u) n0_i)))) (* normAngle normAngle)) (* n1_i u)) (* (+ -1 u) n0_i)) (*.f32 (+.f32 (*.f32 (*.f32 #s(literal -1/6 binary32) (*.f32 normAngle normAngle)) (-.f32 (pow.f32 u #s(literal 3 binary32)) u)) u) n1_i))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) (*.f32 n1_i (/.f32 (sin.f32 (*.f32 normAngle u)) (sin.f32 normAngle)))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (* (/ (+ (* (/ n1_i n0_i) (sin (* normAngle u))) (sin (* (- 1 u) normAngle))) (sin normAngle)) n0_i) (+.f32 (/.f32 (*.f32 (*.f32 n0_i u) (-.f32 (/.f32 (*.f32 normAngle n1_i) n0_i) (*.f32 (cos.f32 normAngle) normAngle))) (sin.f32 normAngle)) n0_i))))
(#s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (- (+ (* (* -1/6 (- (+ (* (pow u 3) n1_i) (* (pow (- 1 u) 3) n0_i)) (+ (* n1_i u) (* (- 1 u) n0_i)))) (* normAngle normAngle)) (* n1_i u)) (* (+ -1 u) n0_i)) #s(approx (- (* (- (+ (* (* -1/6 (* normAngle normAngle)) (- (- (* -3 n0_i) n1_i) (neg n0_i))) n1_i) n0_i) u) (neg n0_i)) (+.f32 (*.f32 (-.f32 (+.f32 (*.f32 (*.f32 (*.f32 normAngle normAngle) #s(literal -1/6 binary32)) (-.f32 (*.f32 #s(literal -2 binary32) n0_i) n1_i)) n1_i) n0_i) u) n0_i)))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) (*.f32 n1_i #s(approx (/ (sin (* normAngle u)) (sin normAngle)) u))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (* (sin (* (- 1 u) normAngle)) (/ n0_i (sin normAngle))) #s(approx (* (- 1 u) n0_i) (*.f32 (+.f32 (/.f32 n0_i u) (neg.f32 n0_i)) u)))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (* (/ (+ (* (/ n1_i n0_i) (sin (* normAngle u))) (sin (* (- 1 u) normAngle))) (sin normAngle)) n0_i) (+.f32 #s(approx (/ (* (* n0_i u) (- (/ (* normAngle n1_i) n0_i) (* (cos normAngle) normAngle))) (sin normAngle)) (*.f32 (*.f32 (-.f32 (/.f32 n1_i n0_i) #s(literal 1 binary32)) u) n0_i)) n0_i))) #s(approx (+ (* (* (sin (* (- 1 u) normAngle)) (/ 1 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1 (sin normAngle))) n1_i)) #s(approx (- (+ (* (* -1/6 (- (+ (* (pow u 3) n1_i) (* (pow (- 1 u) 3) n0_i)) (+ (* n1_i u) (* (- 1 u) n0_i)))) (* normAngle normAngle)) (* n1_i u)) (* (+ -1 u) n0_i)) #s(approx (- (* (- (+ (* (* -1/6 (* normAngle normAngle)) (- (- (* -3 n0_i) n1_i) (neg n0_i))) n1_i) n0_i) u) (neg n0_i)) (+.f32 (+.f32 n0_i (*.f32 (*.f32 (-.f32 #s(literal 1 binary32) (*.f32 (*.f32 normAngle normAngle) #s(literal -1/6 binary32))) u) n1_i)) (*.f32 (-.f32 (*.f32 (*.f32 (*.f32 normAngle normAngle) #s(literal -1/6 binary32)) (*.f32 #s(literal -2 binary32) n0_i)) n0_i) u))))))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))) (*.f64 #s(literal 3 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 405/64 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -9/16 binary64)) (pow.f64 b #s(literal 5 binary64)))) a) (/.f64 (*.f64 #s(literal 3/8 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 (/.f64 c b) #s(literal -1/2 binary64))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (/.f64 (-.f64 (*.f64 (/.f64 #s(literal -3/8 binary64) b) (/.f64 (*.f64 (*.f64 c c) a) b)) (*.f64 #s(literal 1/2 binary64) c)) b)) (/.f64 (-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (/.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))))))) (*.f64 #s(literal 3 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (/.f64 (-.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -9/16 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 1/2 binary64) c)) (/.f64 (*.f64 #s(literal 3/8 binary64) (*.f64 (*.f64 c c) a)) (*.f64 b b))) b)))
((/.f64 (+.f64 (-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))))) (/.f64 (*.f64 (*.f64 #s(literal 3 binary64) a) c) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))))) (*.f64 #s(literal 3 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 c (/.f64 #s(literal -1/2 binary64) b))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (/.f64 #s(approx (- (- (/ (* (* (* (pow c 3) a) a) -9/16) (pow b 4)) (* 1/2 c)) (/ (* 3/8 (* (* c c) a)) (* b b))) (*.f64 (-.f64 (*.f64 (*.f64 (/.f64 a b) #s(literal -3/8 binary64)) (/.f64 c b)) #s(literal 1/2 binary64)) c)) b)) (+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 3 binary64)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) (*.f64 #s(literal 3 binary64) a))) (-.f64 (*.f64 (/.f64 b #s(literal 3 binary64)) (/.f64 (/.f64 b (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))))) a)) (/.f64 (/.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))))) (*.f64 #s(literal 3 binary64) a))))
((/.f64 (*.f64 (/.f64 c (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (*.f64 a #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -3/2 binary64)) c)) (*.f64 #s(literal 3 binary64) a)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c #s(literal 3 binary64)) a)))) (*.f64 #s(literal 3 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (/.f64 #s(approx (- (- (/ (* (* (* (pow c 3) a) a) -9/16) (pow b 4)) (* 1/2 c)) (/ (* 3/8 (* (* c c) a)) (* b b))) #s(approx (* (- (* (* (/ a b) -3/8) (/ c b)) 1/2) c) (*.f64 (*.f64 c c) (-.f64 (*.f64 #s(literal -3/8 binary64) (/.f64 a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) c))))) b)) (+.f64 (/.f64 b (*.f64 #s(literal -3 binary64) a)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) (*.f64 #s(literal 3 binary64) a))))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))) (*.f64 #s(literal 3 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 405/64 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -9/16 binary64)) (pow.f64 b #s(literal 5 binary64)))) a) (/.f64 (*.f64 #s(literal 3/8 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 (/.f64 c b) #s(literal -1/2 binary64))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* (* 3 a) c)) (*.f64 (-.f64 (/.f64 (*.f64 b b) a) (*.f64 #s(literal 3 binary64) c)) a)))) (*.f64 #s(literal 3 binary64) a)) (/.f64 (-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (/.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))))))) (*.f64 #s(literal 3 binary64) a)) (/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 b) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (*.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (*.f64 b b)) (*.f64 a #s(literal 3 binary64)))))
((/.f64 (+.f64 (-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))))) (/.f64 (*.f64 (*.f64 #s(literal 3 binary64) a) c) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))))) (*.f64 #s(literal 3 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 c (/.f64 #s(literal -1/2 binary64) b))) (/.f64 (/.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) (neg.f64 b)) a) #s(literal 3 binary64)) #s(approx (/ (- (/ (* b b) (- (neg b) (sqrt (- (* b b) (* c (* a 3)))))) (/ (- (* b b) (* c (* a 3))) (- (neg b) (sqrt (- (* b b) (* c (* a 3))))))) (* 3 a)) (/.f64 (*.f64 #s(literal -1/3 binary64) (+.f64 (/.f64 (-.f64 (neg.f64 (*.f64 (*.f64 a c) #s(literal -9/8 binary64))) (*.f64 #s(literal -3/8 binary64) (*.f64 a c))) a) (/.f64 (-.f64 (-.f64 (*.f64 #s(literal -3/4 binary64) (*.f64 c (*.f64 (*.f64 a c) #s(literal -9/8 binary64)))) (*.f64 #s(literal 9/32 binary64) (*.f64 a (*.f64 c c)))) (*.f64 #s(literal -9/16 binary64) (*.f64 a (*.f64 c c)))) (*.f64 b b)))) b)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* (* 3 a) c)) (/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal 2 binary64)) (*.f64 #s(literal 9 binary64) (*.f64 c c))) a) (-.f64 (/.f64 (*.f64 b b) a) (*.f64 #s(literal -3 binary64) c)))))) (*.f64 #s(literal 3 binary64) a)))
((*.f64 (*.f64 a #s(literal 3 binary64)) (/.f64 (/.f64 c (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (*.f64 a #s(literal 3 binary64)))) (/.f64 #s(approx (/ (+ (sqrt (- (* b b) (* (* 3 a) c))) (neg b)) a) (*.f64 #s(literal -3/2 binary64) (/.f64 c b))) #s(literal 3 binary64)) (/.f64 (/.f64 #s(approx (+ (sqrt (- (* b b) (* (* 3 a) c))) (neg b)) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -3/2 binary64))) a) #s(literal 3 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* (* 3 a) c)) (*.f64 (-.f64 (*.f64 (/.f64 b a) b) (*.f64 #s(literal 3 binary64) c)) a)))) (*.f64 #s(literal 3 binary64) a)) (/.f64 (*.f64 (*.f64 c a) (/.f64 #s(literal 3 binary64) (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))))))) (*.f64 #s(literal 3 binary64) a)))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))) (*.f64 #s(literal 3 binary64) a)))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 405/64 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -9/16 binary64)) (pow.f64 b #s(literal 5 binary64)))) a) (/.f64 (*.f64 #s(literal 3/8 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 (/.f64 c b) #s(literal -1/2 binary64))) (+.f64 (/.f64 (/.f64 (neg.f64 b) a) #s(literal 3 binary64)) (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))) (*.f64 a #s(literal 3 binary64)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 (-.f64 (*.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -3/8 binary64)) c) (/.f64 #s(literal 1/2 binary64) b)) c)) (/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 b) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (*.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (*.f64 b b)) (*.f64 a #s(literal 3 binary64)))))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 405/64 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (*.f64 (*.f64 c c) (*.f64 c (/.f64 #s(literal -9/16 binary64) (pow.f64 b #s(literal 5 binary64)))))) a) (/.f64 (*.f64 #s(literal 3/8 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b)))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 #s(approx (- (* (* (/ a (pow b 3)) -3/8) c) (/ 1/2 b)) (/.f64 #s(literal -1/2 binary64) b)) c)) (/.f64 (+.f64 (*.f64 (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) a) (*.f64 #s(literal 3 binary64) a)) (*.f64 #s(literal 3 binary64) (neg.f64 b))) (*.f64 #s(literal 9 binary64) a)) (/.f64 (*.f64 (+.f64 (*.f64 b (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) b)) (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) (neg.f64 b))) (*.f64 (+.f64 (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (*.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (*.f64 b b)) (*.f64 a #s(literal 3 binary64)))) (/.f64 (+.f64 (pow.f64 (pow.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)) #s(literal 3/4 binary64)) #s(literal 2 binary64)) (pow.f64 (neg.f64 b) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (*.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (*.f64 b b)) (*.f64 a #s(literal 3 binary64)))))
(#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (-.f64 (*.f64 (-.f64 (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 405/64 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (*.f64 (*.f64 c c) (*.f64 c (/.f64 #s(literal -9/16 binary64) (pow.f64 b #s(literal 5 binary64)))))) a) (/.f64 (/.f64 (*.f64 #s(literal 3/8 binary64) (*.f64 c c)) (*.f64 b b)) b)) a) (*.f64 #s(literal 1/2 binary64) (/.f64 c b)))) #s(approx (/ (+ (pow (pow (- (* b b) (* (* 3 a) c)) 3/4) 2) (pow (neg b) 3)) (* (+ (+ (- (* b b) (* c (* a 3))) (* b (sqrt (- (* b b) (* c (* a 3)))))) (* b b)) (* a 3))) (/.f64 (*.f64 #s(literal 1/18 binary64) (*.f64 (*.f64 a c) #s(literal -9 binary64))) (*.f64 a b))) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* (* 3 a) c)) (*.f64 (*.f64 (+.f64 (*.f64 (/.f64 (*.f64 a (/.f64 c b)) b) #s(literal -3 binary64)) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 3 binary64) a)) (/.f64 (*.f64 #s(approx (+ (* b (+ (sqrt (- (* b b) (* (* 3 a) c))) b)) (- (* b b) (* (* 3 a) c))) (+.f64 (+.f64 (*.f64 c (-.f64 (+.f64 (/.f64 (*.f64 #s(literal -9/8 binary64) (*.f64 (*.f64 a a) c)) (*.f64 b b)) (*.f64 #s(literal -3/2 binary64) a)) (*.f64 #s(literal 3 binary64) a))) (*.f64 #s(literal 2 binary64) (*.f64 b b))) (*.f64 b b))) (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c))) (neg.f64 b))) (*.f64 (+.f64 (+.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (*.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))))) (*.f64 b b)) (*.f64 a #s(literal 3 binary64)))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -27/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) (/.f64 (*.f64 #s(literal 9/8 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c) (*.f64 #s(literal 3/2 binary64) (/.f64 a b))) c)) (*.f64 #s(literal 3 binary64) a)))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 3 binary64) a) c)))) (*.f64 #s(literal 3 binary64) a)))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c #s(literal 3 binary64)) a)))) (*.f64 #s(literal 3 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (* 3 a)) (*.f64 #s(literal -2/3 binary64) (/.f64 b a))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -3/2 binary64)) c)) (*.f64 #s(literal 3 binary64) a)) (/.f64 (/.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))) (neg.f64 b)) #s(literal 3 binary64)) a) (/.f64 (/.f64 (-.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (-.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))) (neg.f64 b))) (*.f64 #s(literal 3 binary64) a)))
((/.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 a (*.f64 #s(literal 3 binary64) c)))) #s(literal 3 binary64)) (/.f64 b #s(literal -3 binary64))) a) #s(approx (/ (/ (- (- (* b b) (* c (* a 3))) (* b b)) (- (sqrt (- (* b b) (* c (* a 3)))) (neg b))) (* 3 a)) (*.f64 (/.f64 c b) #s(literal -1/2 binary64))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (*.f64 (*.f64 a (/.f64 #s(literal -3/2 binary64) b)) c)) (*.f64 #s(literal 3 binary64) a)) (/.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* (* 3 a) c)))) (*.f64 (*.f64 #s(literal -3/2 binary64) (/.f64 a b)) c)) #s(literal 3 binary64)) a) (/.f64 (/.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 c (*.f64 a #s(literal 3 binary64))))) (neg.f64 b)) a) #s(literal 3 binary64)))
((/.f64 (-.f64 (*.f64 (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c #s(literal 3 binary64)) a))) #s(literal -3 binary64)) (*.f64 #s(literal -3 binary64) b)) (*.f64 #s(literal -9 binary64) a)) #s(approx (/ (/ (- (- (* b b) (* c (* a 3))) (* b b)) (- (sqrt (- (* b b) (* c (* a 3)))) (neg b))) (* 3 a)) (/.f64 (*.f64 #s(literal -1/2 binary64) c) b)) (/.f64 #s(approx (/ (+ (sqrt (- (* b b) (* c (* a 3)))) (neg b)) a) (*.f64 #s(literal -2 binary64) (/.f64 b a))) #s(literal 3 binary64)) (/.f64 (+.f64 (/.f64 #s(approx (sqrt (- (* b b) (* a (* 3 c)))) (neg.f64 b)) #s(literal 3 binary64)) (/.f64 b #s(literal -3 binary64))) a) (/.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* c (* a 3))) (*.f64 #s(literal -3 binary64) (*.f64 a c)))) (neg.f64 b)) #s(literal 3 binary64)) a))
((+.f64 x (/.f64 (*.f64 y y) z)))
((+.f64 x (*.f64 (/.f64 y z) y)) #s(approx (+ x (/ (* y y) z)) x) (+.f64 x (*.f64 (sqrt.f64 (*.f64 (*.f64 y y) (/.f64 y z))) (sqrt.f64 (/.f64 y z)))) (+.f64 x (/.f64 (sqrt.f64 (pow.f64 y #s(literal 4 binary64))) z)) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 (neg.f64 z) (-.f64 (/.f64 (*.f64 y y) z) x))) (*.f64 (-.f64 (/.f64 (*.f64 y y) z) x) (/.f64 (pow.f64 y #s(literal 4 binary64)) z))) (*.f64 (-.f64 (/.f64 (*.f64 y y) z) x) (*.f64 (neg.f64 z) (-.f64 (/.f64 (*.f64 y y) z) x)))))
(#s(approx (+ x (/ (sqrt (pow y 4)) z)) (*.f64 (-.f64 (/.f64 (/.f64 (*.f64 y y) x) (neg.f64 z)) #s(literal 1 binary64)) (neg.f64 x))) #s(approx (/ (- (* (* x x) (* (neg z) (- (/ (* y y) z) x))) (* (- (/ (* y y) z) x) (/ (pow y 4) z))) (* (- (/ (* y y) z) x) (* (neg z) (- (/ (* y y) z) x)))) (neg.f64 x)) #s(approx (/ (- (* (* x x) (* (neg z) (- (/ (* y y) z) x))) (* (- (/ (* y y) z) x) (/ (pow y 4) z))) (* (- (/ (* y y) z) x) (* (neg z) (- (/ (* y y) z) x)))) (*.f64 (/.f64 y z) y)) (+.f64 x (*.f64 (*.f64 (sqrt.f64 (/.f64 y z)) (fabs.f64 y)) (sqrt.f64 (/.f64 y z)))) (/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 y z) y) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (/.f64 y z) y) (-.f64 (*.f64 (/.f64 y z) y) x)) (*.f64 x x))))
(#s(approx (+ x (/ (sqrt (pow y 4)) z)) (*.f64 (-.f64 (/.f64 (*.f64 (/.f64 y x) y) (neg.f64 z)) #s(literal 1 binary64)) (neg.f64 x))) #s(approx (/ (- (* (* x x) (* (neg z) (- (/ (* y y) z) x))) (* (- (/ (* y y) z) x) (/ (pow y 4) z))) (* (- (/ (* y y) z) x) (* (neg z) (- (/ (* y y) z) x)))) (/.f64 (*.f64 y y) z)) #s(approx (+ x (/ (sqrt (pow y 4)) z)) (*.f64 (-.f64 (/.f64 (*.f64 y y) (*.f64 (neg.f64 z) x)) #s(literal 1 binary64)) (neg.f64 x))) #s(approx (/ (- (* (* x x) (* (neg z) (- (/ (* y y) z) x))) (* (- (/ (* y y) z) x) (/ (pow y 4) z))) (* (- (/ (* y y) z) x) (* (neg z) (- (/ (* y y) z) x)))) (*.f64 (+.f64 (/.f64 x (*.f64 y y)) (/.f64 #s(literal 1 binary64) z)) (*.f64 y y))) #s(approx (/ (- (* (* x x) (* (neg z) (- (/ (* y y) z) x))) (* (- (/ (* y y) z) x) (/ (pow y 4) z))) (* (- (/ (* y y) z) x) (* (neg z) (- (/ (* y y) z) x)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z))) y)))
((*.f64 #s(literal 100 binary64) (/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (/.f64 i n)) n) #s(literal 1 binary64)) (/.f64 i n))))
(#s(approx (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))) (-.f64 (*.f64 (*.f64 i #s(literal 100 binary64)) (+.f64 (*.f64 (*.f64 n i) (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 n n)) #s(literal 1/6 binary64)) (/.f64 #s(literal 1/2 binary64) n))) (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (*.f64 #s(literal -100 binary64) n))) (*.f64 #s(literal 100 binary64) #s(approx (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n)) n)) (*.f64 #s(literal 100 binary64) (/.f64 (-.f64 #s(approx (pow (+ 1 (/ i n)) n) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) i) #s(literal 1 binary64)) i) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 i n))) (*.f64 #s(literal 100 binary64) (/.f64 (-.f64 #s(approx (pow (+ 1 (/ i n)) n) (exp.f64 i)) #s(literal 1 binary64)) (/.f64 i n))) (*.f64 #s(literal 100 binary64) (/.f64 #s(approx (- (pow (+ 1 (/ i n)) n) 1) (*.f64 (-.f64 (log.f64 i) (log.f64 n)) n)) (/.f64 i n))))
(#s(approx (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))) (-.f64 (*.f64 (*.f64 i #s(literal 100 binary64)) #s(approx (+ (* (* n i) (- (+ (/ 1/3 (* n n)) 1/6) (/ 1/2 n))) (* (- 1/2 (/ 1/2 n)) n)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) i) #s(literal -1/2 binary64)) n))) (*.f64 #s(literal -100 binary64) n))) #s(approx (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))) #s(approx (- (* (* i 100) (+ (* (* n i) (- (+ (/ 1/3 (* n n)) 1/6) (/ 1/2 n))) (* (- 1/2 (/ 1/2 n)) n))) (* -100 n)) (*.f64 (/.f64 (*.f64 i i) n) #s(literal 100/3 binary64)))) #s(approx (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))) (-.f64 (*.f64 (*.f64 i #s(literal 100 binary64)) (+.f64 #s(approx (* (* n i) (- (+ (/ 1/3 (* n n)) 1/6) (/ 1/2 n))) (*.f64 (*.f64 n i) #s(literal 1/6 binary64))) (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (*.f64 #s(literal -100 binary64) n))) (*.f64 (/.f64 (*.f64 (-.f64 #s(approx (pow (+ 1 (/ i n)) n) (exp.f64 i)) #s(literal 1 binary64)) #s(literal 100 binary64)) i) n) (*.f64 #s(literal 100 binary64) #s(approx (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n)) (/.f64 (*.f64 (-.f64 (log.f64 i) (log.f64 n)) (*.f64 n n)) i))))
(#s(approx (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))) #s(approx (- (* (* i 100) (+ (* (* n i) (- (+ (/ 1/3 (* n n)) 1/6) (/ 1/2 n))) (* (- 1/2 (/ 1/2 n)) n))) (* -100 n)) (*.f64 (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) i) #s(literal -1/2 binary64)) i) #s(literal 100 binary64)) #s(literal 100 binary64)) n))) #s(approx (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))) #s(approx (- (* (* i 100) (+ (* (* n i) (- (+ (/ 1/3 (* n n)) 1/6) (/ 1/2 n))) (* (- 1/2 (/ 1/2 n)) n))) (* -100 n)) (*.f64 (*.f64 #s(literal 100/3 binary64) i) (/.f64 i n)))) #s(approx (* 100 (/ (- (pow (+ 1 (/ i n)) n) 1) (/ i n))) #s(approx (- (* (* i 100) (+ (* (* n i) (- (+ (/ 1/3 (* n n)) 1/6) (/ 1/2 n))) (* (- 1/2 (/ 1/2 n)) n))) (* -100 n)) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) i) #s(literal 1/2 binary64)) n) i) #s(literal 100 binary64)) (*.f64 #s(literal -100/3 binary64) (*.f64 i i))) n))) (*.f64 (/.f64 (*.f64 #s(approx (- (pow (+ 1 (/ i n)) n) 1) (*.f64 (+.f64 (*.f64 (-.f64 (-.f64 (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 n n)) #s(literal 1/6 binary64)) (/.f64 #s(literal 1/2 binary64) n)) i) #s(literal -1/2 binary64)) (/.f64 #s(literal 1/2 binary64) n)) i) #s(literal 1 binary64)) i)) #s(literal 100 binary64)) i) n) (*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 (/.f64 i n) #s(literal -1 binary64)) n) #s(literal 1 binary64)) #s(literal 100 binary64)) i) n))
((/.f64 (+.f64 (*.f64 a c) (*.f64 b d)) (+.f64 (*.f64 c c) (*.f64 d d))))
(#s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 (+.f64 (/.f64 (*.f64 d b) c) a) c)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 a c)) (/.f64 (+.f64 (*.f64 a c) (*.f64 b d)) #s(approx (+ (* c c) (* d d)) (*.f64 c c))) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 (-.f64 b (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 b c) c) d) (*.f64 c a)) d)) d)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 (-.f64 (-.f64 b (*.f64 (pow.f64 (/.f64 c d) #s(literal 3 binary64)) a)) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 b c) c) d) (*.f64 c a)) d)) d)))
(#s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 (+.f64 (*.f64 b (/.f64 d c)) a) c)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 #s(approx (- (- b (* (pow (/ c d) 3) a)) (/ (- (/ (* (* b c) c) d) (* c a)) d)) b) d)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 #s(approx (- b (/ (- (/ (* (* b c) c) d) (* c a)) d)) (/.f64 (*.f64 c a) d)) d)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 (-.f64 b #s(approx (/ (- (/ (* (* b c) c) d) (* c a)) d) (*.f64 (neg.f64 a) (/.f64 c d)))) d)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) #s(approx (/ (- b (/ (- (/ (* (* b c) c) d) (* c a)) d)) d) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 c (/.f64 (/.f64 c d) d))) d) (*.f64 (/.f64 c b) (/.f64 a (*.f64 d d)))) b))))
(#s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 (+.f64 (*.f64 (/.f64 c d) a) b) d)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) #s(approx (/ (- b (/ (- (/ (* (* b c) c) d) (* c a)) d)) d) (*.f64 #s(approx (+ (/ (- 1 (* c (/ (/ c d) d))) d) (* (/ c b) (/ a (* d d)))) (/.f64 #s(literal 1 binary64) d)) b))) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 #s(approx (+ (* b (/ d c)) a) (*.f64 (/.f64 d c) b)) c)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (/.f64 (+.f64 (*.f64 (/.f64 b c) d) a) c)) #s(approx (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) #s(approx (/ (- b (/ (- (/ (* (* b c) c) d) (* c a)) d)) d) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 c (/.f64 (/.f64 c d) d))) d) (/.f64 (*.f64 (/.f64 c b) (/.f64 a d)) d)) b))))
((/.f64 (-.f64 (*.f64 b c) (*.f64 a d)) (+.f64 (*.f64 c c) (*.f64 d d))))
(#s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 (-.f64 (/.f64 (*.f64 c b) d) a) d)) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 b c)) (/.f64 (-.f64 (*.f64 b c) (*.f64 a d)) #s(approx (+ (* c c) (* d d)) (*.f64 c c))) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 (-.f64 b (/.f64 (*.f64 d a) c)) c)) (/.f64 (-.f64 (*.f64 b c) (*.f64 a d)) #s(approx (+ (* c c) (* d d)) (*.f64 (-.f64 (*.f64 (/.f64 c d) (/.f64 c d)) #s(literal -1 binary64)) (*.f64 d d)))))
(#s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 (-.f64 (*.f64 b (/.f64 c d)) a) d)) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 (neg.f64 a) d)) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 #s(approx (- (/ (* c b) d) a) (/.f64 (*.f64 c b) d)) d)) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 (-.f64 b (*.f64 a (/.f64 d c))) c)) (/.f64 (-.f64 (*.f64 b c) (*.f64 a d)) #s(approx (+ (* c c) (* d d)) (*.f64 (-.f64 (/.f64 (*.f64 c c) (*.f64 d d)) #s(literal -1 binary64)) (*.f64 d d)))))
(#s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 (-.f64 (+.f64 (*.f64 a (-.f64 (pow.f64 (/.f64 d c) #s(literal 3 binary64)) (/.f64 d c))) b) (*.f64 (*.f64 d (/.f64 d c)) (/.f64 b c))) c)) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) #s(approx (/ (- (/ (* c b) d) a) d) (*.f64 (/.f64 b (*.f64 d d)) c))) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) #s(approx (/ (- (* b (/ c d)) a) d) (*.f64 (/.f64 b d) (/.f64 c d)))) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) #s(approx (/ (- b (/ (* d a) c)) c) (*.f64 (/.f64 (/.f64 (neg.f64 a) c) c) d))) #s(approx (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (/.f64 #s(approx (- b (/ (* d a) c)) (/.f64 (*.f64 (neg.f64 a) d) c)) c)))
((/.f64 (*.f64 x (+.f64 (/.f64 x y) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))))
((*.f64 (/.f64 (-.f64 (/.f64 x y) #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x) #s(approx (/ (* x (+ (/ x y) 1)) (+ x 1)) x) (/.f64 #s(approx (* x (+ (/ x y) 1)) x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x #s(approx (+ (/ x y) 1) (/.f64 x y))) (+.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 (*.f64 (/.f64 x y) x) x) (+.f64 x #s(literal 1 binary64))))
((/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 x #s(literal 1 binary64))) #s(approx (/ (* x (+ (/ x y) 1)) (+ x 1)) (/.f64 x y)) (*.f64 #s(approx (/ (- (/ x y) -1) (- x -1)) (/.f64 #s(literal 1 binary64) y)) x) (*.f64 #s(approx (/ (- (/ x y) -1) (- x -1)) (/.f64 x (*.f64 (-.f64 x #s(literal -1 binary64)) y))) x) #s(approx (* (/ (- (/ x y) -1) (- x -1)) x) (+.f64 (/.f64 x y) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) y)))))
((*.f64 #s(approx (/ (- (/ x y) -1) (- x -1)) (/.f64 (+.f64 y x) (*.f64 (-.f64 x #s(literal -1 binary64)) y))) x) #s(approx (* (/ (- (/ x y) -1) (- x -1)) x) #s(approx (+ (/ x y) (- 1 (/ 1 y))) #s(literal 1 binary64))) #s(approx (* (/ (- (/ x y) -1) (- x -1)) x) (+.f64 (/.f64 x y) #s(approx (- 1 (/ 1 y)) #s(literal 1 binary64)))) (*.f64 (/.f64 #s(approx (- (/ x y) -1) #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) x) (*.f64 (/.f64 #s(approx (- (/ x y) -1) (/.f64 x y)) (-.f64 x #s(literal -1 binary64))) x))
((*.f64 (*.f64 x (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 y #s(literal 2 binary64)) #s(literal 1 binary64)) z) t) #s(literal 16 binary64)))) (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 a #s(literal 2 binary64)) #s(literal 1 binary64)) b) t) #s(literal 16 binary64)))))
(#s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) x) #s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) (*.f64 (cos.f64 (*.f64 (*.f64 #s(literal -1/16 binary64) b) (*.f64 (+.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64)) t))) x)) (*.f64 (*.f64 x (cos.f64 #s(approx (/ (* (* (+ (* y 2) 1) z) t) 16) (*.f64 (*.f64 t z) #s(literal 1/16 binary64))))) (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 a #s(literal 2 binary64)) #s(literal 1 binary64)) b) t) #s(literal 16 binary64)))) (*.f64 (*.f64 x (cos.f64 #s(approx (/ (* (* (+ (* y 2) 1) z) t) 16) (-.f64 (*.f64 (*.f64 (*.f64 z y) t) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/16 binary64) (*.f64 t z)))))) (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 a #s(literal 2 binary64)) #s(literal 1 binary64)) b) t) #s(literal 16 binary64)))) (*.f64 (*.f64 x (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 y #s(literal 2 binary64)) #s(literal 1 binary64)) z) t) #s(literal 16 binary64)))) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 b (-.f64 (*.f64 a #s(literal 2 binary64)) #s(literal -1 binary64))) t) #s(literal 16 binary64))))))
(#s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) (*.f64 (cos.f64 #s(approx (* (* -1/16 b) (* (+ (* 2 a) 1) t)) (*.f64 (*.f64 b t) #s(literal -1/16 binary64)))) x)) #s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) (*.f64 (cos.f64 #s(approx (* (* -1/16 b) (* (+ (* 2 a) 1) t)) (*.f64 (*.f64 (*.f64 b t) a) #s(literal -1/8 binary64)))) x)) (*.f64 (*.f64 x (cos.f64 #s(approx (/ (* (* (+ (* y 2) 1) z) t) 16) (*.f64 (*.f64 t z) #s(literal 1/16 binary64))))) #s(approx (cos (/ (* (* (+ (* a 2) 1) b) t) 16)) (cos.f64 (*.f64 (*.f64 b t) #s(literal -1/16 binary64))))) (*.f64 (*.f64 x (cos.f64 #s(approx (/ (* (* (+ (* y 2) 1) z) t) 16) (*.f64 (*.f64 (*.f64 z y) t) #s(literal 1/8 binary64))))) (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 a #s(literal 2 binary64)) #s(literal 1 binary64)) b) t) #s(literal 16 binary64)))) (*.f64 (*.f64 x (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 y #s(literal 2 binary64)) #s(literal 1 binary64)) z) t) #s(literal 16 binary64)))) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) (/.f64 #s(approx (* (* b (- (* a 2) -1)) t) (*.f64 (*.f64 (*.f64 b t) a) #s(literal 2 binary64))) #s(literal 16 binary64))))))
(#s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) (*.f64 (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) #s(approx (* (* -1/16 b) (* (+ (* 2 a) 1) t)) (*.f64 (*.f64 b t) #s(literal -1/16 binary64))))) x)) #s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) (*.f64 (cos.f64 #s(approx (* (* -1/16 b) (* (+ (* 2 a) 1) t)) (*.f64 (*.f64 (*.f64 a b) t) #s(literal -1/8 binary64)))) x)) #s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) (*.f64 (cos.f64 #s(approx (* (* -1/16 b) (* (+ (* 2 a) 1) t)) (*.f64 (-.f64 (*.f64 (/.f64 (*.f64 b t) a) #s(literal -1/16 binary64)) (*.f64 (*.f64 b t) #s(literal 1/8 binary64))) a))) x)) #s(approx (* (* x (cos (/ (* (* (+ (* y 2) 1) z) t) 16))) (cos (/ (* (* (+ (* a 2) 1) b) t) 16))) #s(approx (* (cos (* (* -1/16 b) (* (+ (* 2 a) 1) t))) x) (-.f64 (*.f64 (cos.f64 (*.f64 (*.f64 b t) #s(literal 1/16 binary64))) x) (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 a b) (*.f64 (*.f64 t x) (sin.f64 (*.f64 (*.f64 b t) #s(literal -1/16 binary64))))))))) (*.f64 (*.f64 x (sin.f64 (+.f64 (neg.f64 #s(approx (/ (* (* (+ (* y 2) 1) z) t) 16) (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 z y) t)))) (/.f64 (PI.f64) #s(literal 2 binary64))))) (cos.f64 (/.f64 (*.f64 (*.f64 (+.f64 (*.f64 a #s(literal 2 binary64)) #s(literal 1 binary64)) b) t) #s(literal 16 binary64)))))
((+.f64 (/.f64 NdChar (+.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (neg.f64 (-.f64 (-.f64 (-.f64 Ec Vef) EDonor) mu)) KbT)))) (/.f64 NaChar (+.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (+.f64 (+.f64 (+.f64 Ev Vef) EAccept) (neg.f64 mu)) KbT))))))
((+.f64 (/.f64 NdChar (+.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (neg.f64 (-.f64 (-.f64 (-.f64 Ec Vef) EDonor) mu)) KbT)))) (/.f64 NaChar (+.f64 #s(literal 1 binary64) (exp.f64 #s(approx (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT) (/.f64 Ev KbT)))))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (*.f64 #s(literal 1/2 binary64) (+.f64 NaChar NdChar))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (/.f64 NaChar (+.f64 (exp.f64 (/.f64 (-.f64 (+.f64 (+.f64 Ev Vef) EAccept) mu) KbT)) #s(literal 1 binary64)))) (+.f64 #s(approx (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (*.f64 #s(literal 1/2 binary64) NdChar)) (/.f64 NaChar (+.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (+.f64 (+.f64 (+.f64 Ev Vef) EAccept) (neg.f64 mu)) KbT))))) (+.f64 (/.f64 NdChar (+.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (neg.f64 (-.f64 (-.f64 (-.f64 Ec Vef) EDonor) mu)) KbT)))) (/.f64 NaChar (+.f64 #s(literal 1 binary64) (exp.f64 #s(approx (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT) (/.f64 EAccept KbT)))))))
(#s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (/.f64 NdChar (+.f64 (exp.f64 (/.f64 (-.f64 (+.f64 (+.f64 mu Vef) EDonor) Ec) KbT)) #s(literal 1 binary64)))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (*.f64 #s(literal 1/2 binary64) #s(approx (+ NaChar NdChar) NaChar))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (/.f64 NaChar #s(approx (+ (exp (/ (- (+ (+ Ev Vef) EAccept) mu) KbT)) 1) (+.f64 #s(literal 2 binary64) (/.f64 (-.f64 (+.f64 EAccept (+.f64 Ev Vef)) mu) KbT))))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (/.f64 NaChar (+.f64 (exp.f64 #s(approx (/ (- (+ (+ Ev Vef) EAccept) mu) KbT) (/.f64 EAccept KbT))) #s(literal 1 binary64)))) (+.f64 #s(approx (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (*.f64 #s(literal 1/2 binary64) NdChar)) (/.f64 NaChar (+.f64 #s(literal 1 binary64) (exp.f64 #s(approx (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT) (/.f64 EAccept KbT)))))))
((+.f64 (/.f64 NdChar (+.f64 #s(literal 1 binary64) #s(approx (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)) (exp.f64 (/.f64 (-.f64 (+.f64 mu Vef) Ec) KbT))))) (/.f64 NaChar (+.f64 #s(literal 1 binary64) (exp.f64 #s(approx (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT) (/.f64 Ev KbT)))))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (*.f64 #s(literal 1/2 binary64) #s(approx (+ NaChar NdChar) NdChar))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (/.f64 NaChar #s(approx (+ (exp (/ (- (+ (+ Ev Vef) EAccept) mu) KbT)) 1) (+.f64 #s(literal 2 binary64) #s(approx (/ (- (+ (+ Ev Vef) EAccept) mu) KbT) (/.f64 (neg.f64 mu) KbT)))))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (/.f64 NaChar #s(approx (+ (exp (/ (- (+ (+ Ev Vef) EAccept) mu) KbT)) 1) (+.f64 #s(literal 2 binary64) (/.f64 (-.f64 (*.f64 (+.f64 (+.f64 EAccept Vef) Ev) KbT) (*.f64 KbT mu)) (*.f64 KbT KbT)))))) #s(approx (+ (/ NdChar (+ 1 (exp (/ (neg (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1 (exp (/ (+ (+ (+ Ev Vef) EAccept) (neg mu)) KbT))))) (/.f64 NdChar (+.f64 (exp.f64 #s(approx (/ (- (+ (+ mu Vef) EDonor) Ec) KbT) (/.f64 EDonor KbT))) #s(literal 1 binary64)))))
((-.f64 (+.f64 (pow.f64 (+.f64 (*.f64 a a) (*.f64 b b)) #s(literal 2 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64)))
((-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal -2 binary64) (*.f64 a a))) (*.f64 b b))) (*.f64 #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) (*.f64 (*.f64 b b) (-.f64 (*.f64 b b) #s(literal -4 binary64)))) #s(literal 1 binary64)) (-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) (*.f64 (-.f64 (-.f64 (*.f64 b b) #s(literal -4 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 a a))) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) (*.f64 a a))) (*.f64 #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) 1) (pow.f64 a #s(literal 4 binary64))))
((-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) a) a)) (*.f64 #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) #s(approx (* (* b b) (- (* b b) -4)) (*.f64 (*.f64 b b) #s(literal 4 binary64)))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) 1) (*.f64 (*.f64 (*.f64 a a) a) a)) (-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(literal -4 binary64)) b) b)) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) 1) (pow.f64 b #s(literal 4 binary64))))
((-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) (pow.f64 a #s(literal 4 binary64))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) 1) (*.f64 (*.f64 a a) (*.f64 a a))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) 1) (*.f64 (*.f64 b b) (*.f64 b b))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) 1) (*.f64 (*.f64 (*.f64 b b) b) b)) (-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (* b b))) #s(approx (* (- (- (* b b) -4) (* -2 (* a a))) (* b b)) (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (-.f64 (/.f64 (/.f64 (-.f64 (*.f64 b b) #s(literal -4 binary64)) a) a) #s(literal -2 binary64))))) #s(literal 1 binary64)))
((-.f64 (+.f64 (pow.f64 (+.f64 (*.f64 a a) (*.f64 b b)) #s(literal 2 binary64)) (*.f64 #s(literal 4 binary64) (+.f64 (*.f64 (*.f64 a a) (+.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 b b) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) a)))))) #s(literal 1 binary64)))
((-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal -2 binary64) (*.f64 a a))) (*.f64 b b))) (*.f64 #s(literal 4 binary64) (+.f64 (*.f64 (*.f64 a a) (+.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 b b) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) a)))))) #s(literal 1 binary64)) (-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) (*.f64 a a))) (*.f64 #s(literal 4 binary64) (+.f64 (*.f64 (*.f64 a a) (+.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 b b) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 3 binary64) a)))))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (pow.f64 a #s(literal 4 binary64))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (pow.f64 b #s(literal 4 binary64))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 (+.f64 (/.f64 #s(literal 4 binary64) a) #s(literal 1 binary64)) (pow.f64 a #s(literal 4 binary64)))))
((-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal -2 binary64) (*.f64 a a))) (*.f64 b b))) (*.f64 #s(literal 4 binary64) #s(approx (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))) (*.f64 b b)))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 (*.f64 a a) (*.f64 a a))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 (*.f64 (*.f64 b b) b) b)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 4 binary64) a) #s(literal -1 binary64)) (*.f64 a a)) (*.f64 a a))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 (+.f64 (/.f64 #s(literal 4 binary64) a) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 a a) (neg.f64 a)) (neg.f64 a)))))
((-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) (*.f64 a a))) (*.f64 #s(literal 4 binary64) #s(approx (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))) (*.f64 b b)))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 #s(approx (* (- (/ 4 a) -1) (* a a)) (*.f64 #s(literal 4 binary64) a)) (*.f64 a a))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 #s(approx (* (- (/ 4 a) -1) (* a a)) (*.f64 (-.f64 a #s(literal -4 binary64)) a)) (*.f64 a a))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))))) 1) (*.f64 (*.f64 #s(approx (- (/ 4 a) -1) (/.f64 #s(literal 4 binary64) a)) (*.f64 a a)) (*.f64 a a))) (-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) #s(approx (* (- (* b b) (* -2 (* a a))) (* b b)) (*.f64 (*.f64 (*.f64 (*.f64 b b) a) a) #s(literal 2 binary64)))) (*.f64 #s(literal 4 binary64) #s(approx (+ (* (* a a) (+ 1 a)) (* (* b b) (- 1 (* 3 a)))) (*.f64 b b)))) #s(literal 1 binary64)))
((-.f64 (+.f64 (pow.f64 (+.f64 (*.f64 a a) (*.f64 b b)) #s(literal 2 binary64)) (*.f64 #s(literal 4 binary64) (+.f64 (*.f64 (*.f64 a a) (-.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 b b) (+.f64 #s(literal 3 binary64) a))))) #s(literal 1 binary64)))
((-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) (*.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (+.f64 #s(literal 3 binary64) a))) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) (*.f64 a a))) (*.f64 #s(literal 4 binary64) (+.f64 (*.f64 (*.f64 a a) (-.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 b b) (+.f64 #s(literal 3 binary64) a))))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) 1) (pow.f64 a #s(literal 4 binary64))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) 1) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 4 binary64) a)) (pow.f64 a #s(literal 4 binary64)))) (-.f64 (+.f64 (/.f64 (*.f64 (-.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 4 binary64))) (+.f64 (*.f64 b b) (*.f64 a a))) (*.f64 (+.f64 a b) (-.f64 a b))) (*.f64 #s(literal 4 binary64) (+.f64 (*.f64 (*.f64 a a) (-.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 b b) (+.f64 #s(literal 3 binary64) a))))) #s(literal 1 binary64)))
((-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) (*.f64 a a))) (*.f64 #s(literal 4 binary64) #s(approx (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))) (*.f64 (*.f64 b b) #s(literal 3 binary64))))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) 1) (*.f64 (*.f64 a a) (*.f64 a a))) (-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(literal -12 binary64)) b) b)) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) 1) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 4 binary64) a)) (*.f64 (*.f64 (*.f64 a a) (neg.f64 a)) (neg.f64 a)))) (-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) a) a)) (*.f64 #s(literal 4 binary64) (+.f64 (*.f64 (*.f64 a a) (-.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 b b) (+.f64 #s(literal 3 binary64) a))))) #s(literal 1 binary64)))
((-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) (*.f64 #s(approx (- (* b b) (* -4 (+ 3 a))) (*.f64 b b)) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 #s(approx (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) #s(approx (* (* (- (* b b) -12) b) b) (*.f64 (*.f64 b b) #s(literal 12 binary64)))) #s(literal 1 binary64)) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) 1) (*.f64 (*.f64 (*.f64 a a) (neg.f64 a)) (neg.f64 a))) #s(approx (- (+ (pow (+ (* a a) (* b b)) 2) (* 4 (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))))) 1) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 4 binary64) a)) (*.f64 (*.f64 a a) (*.f64 a a)))) (-.f64 (+.f64 #s(approx (pow (+ (* a a) (* b b)) 2) (*.f64 (-.f64 (*.f64 a a) (*.f64 #s(literal -2 binary64) (*.f64 b b))) (*.f64 a a))) (*.f64 #s(literal 4 binary64) #s(approx (+ (* (* a a) (- 1 a)) (* (* b b) (+ 3 a))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) a) a) a)))) #s(literal 1 binary64)))
((/.f32 #s(literal 1 binary32) (+.f32 (+.f32 #s(literal 1 binary32) c) (*.f32 (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (PI.f32))) (/.f32 (sqrt.f32 (-.f32 (-.f32 #s(literal 1 binary32) cosTheta) cosTheta)) cosTheta)) (exp.f32 (*.f32 (neg.f32 cosTheta) cosTheta))))))
((/.f32 #s(literal 1 binary32) (+.f32 (+.f32 #s(literal 1 binary32) c) (+.f32 (*.f32 (/.f32 (/.f32 (sqrt.f32 (-.f32 (-.f32 #s(literal 1 binary32) cosTheta) cosTheta)) cosTheta) (sqrt.f32 (PI.f32))) (cosh.f32 (*.f32 cosTheta cosTheta))) (*.f32 (/.f32 (/.f32 (sqrt.f32 (-.f32 (-.f32 #s(literal 1 binary32) cosTheta) cosTheta)) cosTheta) (sqrt.f32 (PI.f32))) (sinh.f32 (*.f32 (neg.f32 cosTheta) cosTheta)))))) (/.f32 #s(literal 1 binary32) #s(approx (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta)))) c)) (/.f32 #s(literal 1 binary32) #s(approx (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta)))) (/.f32 (+.f32 (*.f32 (-.f32 (+.f32 #s(literal 1 binary32) c) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32)))) cosTheta) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32)))) cosTheta))) (/.f32 #s(literal 1 binary32) (+.f32 (+.f32 #s(literal 1 binary32) c) (*.f32 (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (PI.f32))) (/.f32 (sqrt.f32 #s(approx (- (- 1 cosTheta) cosTheta) #s(literal 1 binary32))) cosTheta)) (exp.f32 (*.f32 (neg.f32 cosTheta) cosTheta))))) #s(approx (/ 1 (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta))))) (*.f32 (+.f32 (*.f32 (-.f32 (*.f32 (+.f32 (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32))) (*.f32 #s(literal -3/2 binary32) (PI.f32))) (*.f32 (neg.f32 (sqrt.f32 (pow.f32 (PI.f32) #s(literal 3 binary32)))) (pow.f32 (-.f32 (+.f32 #s(literal 1 binary32) c) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32)))) #s(literal 2 binary32)))) (neg.f32 cosTheta)) (*.f32 (-.f32 (+.f32 #s(literal 1 binary32) c) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32)))) (PI.f32))) cosTheta) (sqrt.f32 (PI.f32))) cosTheta)))
((/.f32 #s(literal 1 binary32) (+.f32 (+.f32 #s(literal 1 binary32) c) (+.f32 (*.f32 (/.f32 (/.f32 (sqrt.f32 (-.f32 (-.f32 #s(literal 1 binary32) cosTheta) cosTheta)) cosTheta) (sqrt.f32 (PI.f32))) (cosh.f32 (*.f32 cosTheta cosTheta))) (/.f32 (*.f32 (sqrt.f32 (-.f32 (-.f32 #s(literal 1 binary32) cosTheta) cosTheta)) (sinh.f32 (*.f32 (neg.f32 cosTheta) cosTheta))) (*.f32 (sqrt.f32 (PI.f32)) cosTheta))))) #s(approx (/ 1 (+ (+ 1 c) (+ (* (/ (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta) (sqrt (PI))) (cosh (* cosTheta cosTheta))) (* (/ (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta) (sqrt (PI))) (sinh (* (neg cosTheta) cosTheta)))))) (*.f32 (sqrt.f32 (PI.f32)) cosTheta)) (/.f32 #s(literal 1 binary32) #s(approx (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta)))) #s(approx (/ (+ (* (- (+ 1 c) (sqrt (/ 1 (PI)))) cosTheta) (sqrt (/ 1 (PI)))) cosTheta) (*.f32 (neg.f32 c) (-.f32 (/.f32 (-.f32 (-.f32 #s(literal 1 binary32) (*.f32 (/.f32 #s(literal -1 binary32) cosTheta) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32))))) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32)))) (neg.f32 c)) #s(literal 1 binary32)))))) (/.f32 #s(literal 1 binary32) #s(approx (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta)))) (/.f32 (+.f32 (*.f32 (+.f32 cosTheta (*.f32 (-.f32 c (pow.f32 (PI.f32) #s(literal -1/2 binary32))) cosTheta)) cosTheta) (*.f32 cosTheta (pow.f32 (PI.f32) #s(literal -1/2 binary32)))) (*.f32 cosTheta cosTheta)))) #s(approx (/ 1 (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta))))) #s(approx (* (+ (* (- (* (+ (* (sqrt (/ 1 (PI))) (* -3/2 (PI))) (* (neg (sqrt (pow (PI) 3))) (pow (- (+ 1 c) (sqrt (/ 1 (PI)))) 2))) (neg cosTheta)) (* (- (+ 1 c) (sqrt (/ 1 (PI)))) (PI))) cosTheta) (sqrt (PI))) cosTheta) (*.f32 (pow.f32 (neg.f32 cosTheta) #s(literal 3 binary32)) (+.f32 (-.f32 (/.f32 (-.f32 (*.f32 (/.f32 #s(literal 1 binary32) cosTheta) (sqrt.f32 (PI.f32))) (*.f32 (-.f32 (+.f32 #s(literal 1 binary32) c) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32)))) (PI.f32))) (neg.f32 cosTheta)) (*.f32 (pow.f32 (-.f32 (+.f32 #s(literal 1 binary32) c) (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32)))) #s(literal 2 binary32)) (sqrt.f32 (pow.f32 (PI.f32) #s(literal 3 binary32))))) (*.f32 #s(literal -3/2 binary32) (sqrt.f32 (PI.f32))))))))
((/.f32 #s(literal 1 binary32) (+.f32 (+.f32 #s(literal 1 binary32) c) (/.f32 (*.f32 (pow.f32 (exp.f32 cosTheta) (neg.f32 cosTheta)) (/.f32 (sqrt.f32 (-.f32 (-.f32 #s(literal 1 binary32) cosTheta) cosTheta)) cosTheta)) (sqrt.f32 (PI.f32))))) (/.f32 #s(literal 1 binary32) #s(approx (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta)))) (/.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32))) cosTheta))) (/.f32 #s(literal 1 binary32) #s(approx (+ (+ 1 c) (* (* (/ 1 (sqrt (PI))) (/ (sqrt (- (- 1 cosTheta) cosTheta)) cosTheta)) (exp (* (neg cosTheta) cosTheta)))) #s(approx (/ (+ (* (+ cosTheta (* (- c (pow (PI) -1/2)) cosTheta)) cosTheta) (* cosTheta (pow (PI) -1/2))) (* cosTheta cosTheta)) (*.f32 (-.f32 (/.f32 (+.f32 (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (PI.f32))) (+.f32 #s(literal -1 binary32) (/.f32 #s(literal 1 binary32) cosTheta))) #s(literal 1 binary32)) (neg.f32 c)) #s(literal 1 binary32)) (neg.f32 c))))) (/.f32 #s(literal 1 binary32) (+.f32 (+.f32 #s(literal 1 binary32) c) (*.f32 (/.f32 (sqrt.f32 #s(approx (- (- 1 cosTheta) cosTheta) #s(literal 1 binary32))) (*.f32 (sqrt.f32 (PI.f32)) cosTheta)) (exp.f32 (*.f32 (neg.f32 cosTheta) cosTheta))))) (/.f32 #s(literal 1 binary32) (+.f32 (+.f32 #s(literal 1 binary32) c) (+.f32 (*.f32 (/.f32 (/.f32 (sqrt.f32 #s(approx (- (- 1 cosTheta) cosTheta) (*.f32 (-.f32 (/.f32 #s(literal 1 binary32) cosTheta) #s(literal 2 binary32)) cosTheta))) cosTheta) (sqrt.f32 (PI.f32))) (cosh.f32 (*.f32 cosTheta cosTheta))) (*.f32 (/.f32 (/.f32 (sqrt.f32 (-.f32 (-.f32 #s(literal 1 binary32) cosTheta) cosTheta)) cosTheta) (sqrt.f32 (PI.f32))) (sinh.f32 (*.f32 (neg.f32 cosTheta) cosTheta)))))))
((*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))))
((*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u1) #s(literal -1/3 binary32)) u1) #s(literal -1/2 binary32)) u1) #s(literal -1 binary32)) u1))) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) u1)) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) (*.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) u1) #s(literal -1 binary32)) u1))) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 (log.f32 (/.f32 #s(literal 1 binary32) (-.f32 #s(literal 1 binary32) u1)))) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) (*.f32 #s(literal 2 binary32) (*.f32 (sin.f32 (*.f32 u2 (PI.f32))) (cos.f32 (*.f32 u2 (PI.f32)))))))
((*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) (/.f32 (*.f32 (-.f32 (pow.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u1) #s(literal -1/3 binary32)) u1) #s(literal -1/2 binary32)) u1) #s(literal 2 binary32)) #s(literal 1 binary32)) u1) (+.f32 #s(literal -1 binary32) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u1) #s(literal -1/3 binary32)) u1) #s(literal -1/2 binary32)) u1))))) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) u1)) #s(approx (sin (* (* 2 (PI)) u2)) (*.f32 (*.f32 (PI.f32) #s(literal 2 binary32)) u2))) (*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u1) #s(literal -1/3 binary32)) u1) #s(literal -1/2 binary32)) u1) #s(literal -1 binary32)) u1))) (sin.f32 (*.f32 (PI.f32) (+.f32 u2 u2)))) #s(approx (* (sqrt (neg (log (- 1 u1)))) (sin (* (* 2 (PI)) u2))) (*.f32 (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) (-.f32 (*.f32 (*.f32 (*.f32 (pow.f32 (PI.f32) #s(literal 3 binary32)) #s(literal -4/3 binary32)) u2) u2) (*.f32 #s(literal -2 binary32) (PI.f32)))) u2)) (*.f32 (*.f32 (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) #s(literal 2 binary32)) (cos.f32 (*.f32 u2 (PI.f32)))) (sin.f32 (*.f32 u2 (PI.f32)))))
((*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) (/.f32 (*.f32 (-.f32 (pow.f32 (*.f32 (-.f32 (*.f32 #s(approx (- (* 1/4 u1) -1/3) #s(literal 1/3 binary32)) u1) #s(literal -1/2 binary32)) u1) #s(literal 2 binary32)) #s(literal 1 binary32)) u1) (+.f32 #s(literal -1 binary32) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u1) #s(literal -1/3 binary32)) u1) #s(literal -1/2 binary32)) u1))))) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) u1)) #s(approx (sin (* (* 2 (PI)) u2)) (*.f32 (PI.f32) #s(literal 2 binary32)))) #s(approx (* (sqrt (neg (log (- 1 u1)))) (sin (* (* 2 (PI)) u2))) (*.f32 (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) (-.f32 (*.f32 (*.f32 (*.f32 (*.f32 (*.f32 (PI.f32) (PI.f32)) (PI.f32)) #s(literal -4/3 binary32)) u2) u2) (*.f32 #s(literal -2 binary32) (PI.f32)))) u2)) (*.f32 (*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) u1)) (*.f32 (sin.f32 (*.f32 u2 (PI.f32))) #s(literal 2 binary32))) (cos.f32 (*.f32 u2 (PI.f32)))) (*.f32 (exp.f32 (*.f32 (log.f32 #s(approx (neg (log (- 1 u1))) (*.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) u1) #s(literal -1 binary32)) u1))) #s(literal 1/2 binary32))) (sin.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))))
((*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))))
((*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u1) #s(literal -1/3 binary32)) u1) #s(literal -1/2 binary32)) u1) #s(literal -1 binary32)) u1))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) #s(approx (cos (* (* 2 (PI)) u2)) #s(literal 1 binary32))) (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) #s(approx (cos (* (* 2 (PI)) u2)) (-.f32 (*.f32 (*.f32 (*.f32 (*.f32 (PI.f32) (PI.f32)) #s(literal -2 binary32)) u2) u2) #s(literal -1 binary32)))) (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) (sin.f32 (+.f32 (*.f32 #s(literal -2 binary32) (*.f32 u2 (PI.f32))) (/.f32 (PI.f32) #s(literal 2 binary32))))) (*.f32 (sqrt.f32 (neg.f32 (-.f32 (log.f32 (-.f32 #s(literal 1 binary32) (pow.f32 u1 #s(literal 3 binary32)))) (log.f32 (+.f32 (+.f32 (*.f32 u1 u1) u1) #s(literal 1 binary32)))))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))))
((*.f32 (sqrt.f32 (neg.f32 #s(approx (log (- 1 u1)) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal -1/4 binary32) u1) #s(literal 1/3 binary32)) u1) #s(literal 1/2 binary32)) u1) #s(literal 1 binary32)) u1)))) (sin.f32 (+.f32 (*.f32 #s(literal -2 binary32) (*.f32 u2 (PI.f32))) (/.f32 (PI.f32) #s(literal 2 binary32))))) (*.f32 (sqrt.f32 (neg.f32 #s(approx (log (- 1 u1)) (neg.f32 u1)))) #s(approx (cos (* (* 2 (PI)) u2)) #s(literal 1 binary32))) (*.f32 (sqrt.f32 #s(approx (neg (- (log (- 1 (pow u1 3))) (log (+ (+ (* u1 u1) u1) 1)))) (*.f32 (+.f32 (*.f32 #s(literal 1/2 binary32) u1) #s(literal 1 binary32)) u1))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 #s(approx (sqrt (neg (- (log (- 1 (pow u1 3))) (log (+ (+ (* u1 u1) u1) 1))))) (+.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (*.f32 #s(literal 1/2 binary32) (sqrt.f32 u1)) (-.f32 #s(literal 1/4 binary32) (/.f32 #s(literal 1/16 binary32) u1))) (*.f32 #s(literal -1/6 binary32) (sqrt.f32 (/.f32 #s(literal 1 binary32) u1)))) u1) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) u1)) #s(literal -1/4 binary32))) (*.f32 u1 u1)) (sqrt.f32 u1))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (exp.f32 (*.f32 (log.f32 #s(approx (neg (log (- 1 u1))) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u1) #s(literal -1/3 binary32)) u1) #s(literal -1/2 binary32)) u1) #s(literal -1 binary32)) u1))) #s(literal 1/2 binary32))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))))
((*.f32 (sqrt.f32 (neg.f32 #s(approx (log (- 1 u1)) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal -1/4 binary32) u1) #s(literal 1/3 binary32)) u1) #s(literal 1/2 binary32)) u1) #s(literal 1 binary32)) u1)))) (sin.f32 #s(approx (+ (* -2 (* u2 (PI))) (/ (PI) 2)) (*.f32 (PI.f32) (-.f32 (*.f32 #s(literal -2 binary32) u2) #s(literal -1/2 binary32)))))) (*.f32 (sqrt.f32 #s(approx (neg (log (- 1 u1))) u1)) #s(approx (cos (* (* 2 (PI)) u2)) #s(literal 1 binary32))) (*.f32 (sqrt.f32 #s(approx (neg (- (log (- 1 (pow u1 3))) (log (+ (+ (* u1 u1) u1) 1)))) (*.f32 (+.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/3 binary32) u1) #s(literal -1/2 binary32)) u1) #s(literal 1 binary32)) u1))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))) (*.f32 (sqrt.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u1)))) (sin.f32 #s(approx (+ (* -2 (* u2 (PI))) (/ (PI) 2)) (*.f32 (PI.f32) (-.f32 (*.f32 #s(literal -2 binary32) u2) #s(literal -1/2 binary32)))))) (*.f32 (*.f32 (pow.f32 #s(approx (neg (- (log (- 1 (pow u1 3))) (log (+ (+ (* u1 u1) u1) 1)))) (*.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) u1) #s(literal -1 binary32)) u1)) #s(literal 1/4 binary32)) (pow.f32 #s(approx (neg (- (log (- 1 (pow u1 3))) (log (+ (+ (* u1 u1) u1) 1)))) (*.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) u1) #s(literal -1 binary32)) u1)) #s(literal 1/4 binary32))) (cos.f32 (*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) u2))))
((*.f32 (*.f32 (neg.f32 alpha) alpha) (log.f32 (-.f32 #s(literal 1 binary32) u0))))
(#s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (*.f32 (*.f32 alpha alpha) (-.f32 (-.f32 (*.f32 #s(literal 1/3 binary32) u0) #s(literal -1/2 binary32)) (*.f32 (*.f32 #s(literal 1/4 binary32) u0) (neg.f32 u0)))) u0) (*.f32 alpha alpha)) u0)) #s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (*.f32 alpha alpha) u0)) (*.f32 (*.f32 (neg.f32 alpha) alpha) #s(approx (log (- 1 u0)) (*.f32 (-.f32 (*.f32 #s(literal -1/2 binary32) u0) #s(literal 1 binary32)) u0))) #s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (*.f32 (*.f32 alpha alpha) u0) (-.f32 (*.f32 #s(literal 1/3 binary32) u0) #s(literal -1/2 binary32))) (*.f32 alpha alpha)) u0)) (*.f32 (*.f32 (log.f32 (-.f32 #s(literal 1 binary32) u0)) (neg.f32 alpha)) alpha))
(#s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (*.f32 (*.f32 alpha alpha) (/.f32 (-.f32 (*.f32 #s(literal 1/9 binary32) (*.f32 u0 u0)) (*.f32 (-.f32 #s(literal -1/2 binary32) (*.f32 (*.f32 #s(literal 1/4 binary32) u0) u0)) (-.f32 #s(literal -1/2 binary32) (*.f32 (*.f32 #s(literal 1/4 binary32) u0) u0)))) (+.f32 (*.f32 u0 #s(literal 1/3 binary32)) (-.f32 #s(literal -1/2 binary32) (*.f32 (*.f32 #s(literal 1/4 binary32) u0) u0))))) u0) (*.f32 alpha alpha)) u0)) (*.f32 #s(approx (* (log (- 1 u0)) (neg alpha)) (*.f32 u0 alpha)) alpha) (*.f32 (*.f32 (neg.f32 alpha) alpha) #s(approx (log (- 1 u0)) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal -1/3 binary32) u0) #s(literal 1/2 binary32)) u0) #s(literal 1 binary32)) u0))) (*.f32 (*.f32 (neg.f32 alpha) alpha) #s(approx (log (- 1 u0)) (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal -1/4 binary32) u0) #s(literal 1/3 binary32)) u0) #s(literal 1/2 binary32)) u0) #s(literal 1 binary32)) u0))) (*.f32 (log.f32 (pow.f32 (-.f32 #s(literal 1 binary32) u0) (neg.f32 alpha))) alpha))
(#s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (*.f32 (*.f32 alpha alpha) (/.f32 (-.f32 (*.f32 #s(literal 1/9 binary32) (*.f32 u0 u0)) (*.f32 (-.f32 #s(literal -1/2 binary32) (*.f32 (*.f32 #s(literal 1/4 binary32) u0) u0)) (-.f32 #s(literal -1/2 binary32) (*.f32 (*.f32 #s(literal 1/4 binary32) u0) u0)))) #s(approx (+ (* u0 1/3) (- -1/2 (* (* 1/4 u0) u0))) (-.f32 (*.f32 (-.f32 (*.f32 #s(literal -1/4 binary32) u0) #s(literal -1/3 binary32)) u0) #s(literal 1/2 binary32))))) u0) (*.f32 alpha alpha)) u0)) #s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (+.f32 (*.f32 #s(literal 1/2 binary32) u0) #s(literal 1 binary32)) (*.f32 (*.f32 alpha alpha) u0))) #s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (*.f32 (-.f32 (*.f32 u0 #s(literal 1/3 binary32)) #s(literal -1/2 binary32)) alpha) (*.f32 u0 alpha)) (*.f32 alpha alpha)) u0)) #s(approx (* (* (neg alpha) alpha) (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (*.f32 (-.f32 (-.f32 (*.f32 u0 #s(literal 1/3 binary32)) #s(literal -1/2 binary32)) (*.f32 (*.f32 #s(literal -1/4 binary32) u0) u0)) u0) (*.f32 alpha alpha)) (*.f32 alpha alpha)) u0)) (*.f32 (*.f32 (neg.f32 alpha) alpha) #s(approx (log (- 1 u0)) #s(approx (* (- (* (- (* -1/3 u0) 1/2) u0) 1) u0) (*.f32 (-.f32 (/.f32 (-.f32 (/.f32 #s(literal 1 binary32) u0) #s(literal -1/2 binary32)) (neg.f32 u0)) #s(literal 1/3 binary32)) (pow.f32 u0 #s(literal 3 binary32)))))))
((/.f32 (neg.f32 (log.f32 (-.f32 #s(literal 1 binary32) u0))) (+.f32 (/.f32 cos2phi (*.f32 alphax alphax)) (/.f32 sin2phi (*.f32 alphay alphay)))))
((/.f32 #s(approx (neg (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) u0) #s(literal -1/2 binary32)) u0) #s(literal 1 binary32)) u0)) (+.f32 (/.f32 cos2phi (*.f32 alphax alphax)) (/.f32 sin2phi (*.f32 alphay alphay)))) (/.f32 #s(approx (neg (log (- 1 u0))) u0) (+.f32 (/.f32 cos2phi (*.f32 alphax alphax)) (/.f32 sin2phi (*.f32 alphay alphay)))) #s(approx (/ (neg (log (- 1 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay)))) (*.f32 (+.f32 (*.f32 (*.f32 u0 u0) (/.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) (+.f32 (/.f32 sin2phi (*.f32 alphay alphay)) (/.f32 cos2phi (*.f32 alphax alphax))))) (/.f32 (+.f32 (*.f32 #s(literal 1/2 binary32) u0) #s(literal 1 binary32)) (+.f32 (/.f32 sin2phi (*.f32 alphay alphay)) (/.f32 cos2phi (*.f32 alphax alphax))))) u0)) (/.f32 (log.f32 (/.f32 #s(literal 1 binary32) (-.f32 #s(literal 1 binary32) u0))) (+.f32 (/.f32 cos2phi (*.f32 alphax alphax)) (/.f32 sin2phi (*.f32 alphay alphay)))) (/.f32 (neg.f32 (-.f32 (log.f32 (-.f32 #s(literal 1 binary32) (pow.f32 u0 #s(literal 3 binary32)))) (log.f32 (+.f32 (+.f32 (*.f32 u0 u0) u0) #s(literal 1 binary32))))) (+.f32 (/.f32 cos2phi (*.f32 alphax alphax)) (/.f32 sin2phi (*.f32 alphay alphay)))))
((/.f32 #s(approx (neg (log (- 1 u0))) (+.f32 (*.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) u0) #s(literal -1/2 binary32)) u0) u0) u0)) (+.f32 (/.f32 cos2phi (*.f32 alphax alphax)) (/.f32 sin2phi (*.f32 alphay alphay)))) (/.f32 #s(approx (neg (log (- 1 u0))) u0) #s(approx (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))) (/.f32 cos2phi (*.f32 alphax alphax)))) #s(approx (/ (neg (log (- 1 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay)))) (*.f32 #s(approx (+ (* (* u0 u0) (/ (- (* 1/4 u0) -1/3) (+ (/ sin2phi (* alphay alphay)) (/ cos2phi (* alphax alphax))))) (/ (+ (* 1/2 u0) 1) (+ (/ sin2phi (* alphay alphay)) (/ cos2phi (* alphax alphax))))) (*.f32 (*.f32 alphax alphax) (+.f32 (/.f32 (+.f32 #s(literal 1 binary32) (*.f32 (*.f32 u0 u0) (+.f32 #s(literal 1/3 binary32) (*.f32 #s(literal 1/4 binary32) u0)))) cos2phi) (*.f32 #s(literal 1/2 binary32) (/.f32 u0 cos2phi))))) u0)) (/.f32 #s(approx (neg (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) u0) #s(literal -1/2 binary32)) u0) #s(literal 1 binary32)) u0)) #s(approx (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))) (*.f32 sin2phi (+.f32 (/.f32 (/.f32 cos2phi (*.f32 alphax alphax)) sin2phi) (/.f32 #s(literal 1 binary32) (*.f32 alphay alphay)))))) #s(approx (/ (neg (log (- 1 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay)))) (*.f32 (+.f32 (*.f32 (*.f32 u0 u0) (/.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) (+.f32 (/.f32 sin2phi (*.f32 alphay alphay)) (/.f32 cos2phi (*.f32 alphax alphax))))) #s(approx (/ (+ (* 1/2 u0) 1) (+ (/ sin2phi (* alphay alphay)) (/ cos2phi (* alphax alphax)))) (*.f32 (*.f32 alphay alphay) (+.f32 (+.f32 (/.f32 #s(literal 1 binary32) sin2phi) (*.f32 #s(literal 1/2 binary32) (/.f32 u0 sin2phi))) (neg.f32 (*.f32 (/.f32 (*.f32 alphay alphay) (*.f32 alphax alphax)) (/.f32 (*.f32 cos2phi (+.f32 (*.f32 #s(literal 1/2 binary32) u0) #s(literal 1 binary32))) (*.f32 sin2phi sin2phi)))))))) u0)))
((/.f32 #s(approx (neg (log (- 1 u0))) (+.f32 (*.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) u0) #s(literal -1/2 binary32)) u0) u0) u0)) (+.f32 (/.f32 (/.f32 cos2phi alphax) alphax) (/.f32 sin2phi (*.f32 alphay alphay)))) #s(approx (/ (neg (log (- 1 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay)))) (*.f32 #s(approx (+ (* (* u0 u0) (/ (- (* 1/4 u0) -1/3) (+ (/ sin2phi (* alphay alphay)) (/ cos2phi (* alphax alphax))))) (/ (+ (* 1/2 u0) 1) (+ (/ sin2phi (* alphay alphay)) (/ cos2phi (* alphax alphax))))) #s(approx (* (* alphax alphax) (+ (/ (+ 1 (* (* u0 u0) (+ 1/3 (* 1/4 u0)))) cos2phi) (* 1/2 (/ u0 cos2phi)))) (/.f32 (*.f32 alphax alphax) cos2phi))) u0)) (/.f32 #s(approx (neg (log (- 1 u0))) (*.f32 (+.f32 (*.f32 (-.f32 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) u0) #s(literal -1/2 binary32)) u0) #s(literal 1 binary32)) u0)) #s(approx (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))) (/.f32 cos2phi (*.f32 alphax alphax)))) #s(approx (/ (neg (log (- 1 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay)))) (*.f32 (/.f32 (+.f32 (-.f32 (*.f32 #s(literal 1/2 binary32) u0) #s(literal -1 binary32)) (*.f32 u0 (*.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) u0))) (+.f32 (/.f32 sin2phi (*.f32 alphay alphay)) (/.f32 cos2phi (*.f32 alphax alphax)))) u0)) #s(approx (/ (neg (log (- 1 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay)))) (*.f32 (+.f32 (*.f32 (*.f32 u0 u0) (/.f32 (-.f32 (*.f32 #s(literal 1/4 binary32) u0) #s(literal -1/3 binary32)) (+.f32 (/.f32 sin2phi (*.f32 alphay alphay)) (/.f32 cos2phi (*.f32 alphax alphax))))) #s(approx (/ (+ (* 1/2 u0) 1) (+ (/ sin2phi (* alphay alphay)) (/ cos2phi (* alphax alphax)))) (*.f32 (*.f32 alphay alphay) #s(approx (+ (+ (/ 1 sin2phi) (* 1/2 (/ u0 sin2phi))) (neg (* (/ (* alphay alphay) (* alphax alphax)) (/ (* cos2phi (+ (* 1/2 u0) 1)) (* sin2phi sin2phi))))) (/.f32 (+.f32 (+.f32 #s(literal 1 binary32) (neg.f32 (/.f32 (*.f32 (*.f32 (*.f32 alphay alphay) cos2phi) (+.f32 (*.f32 #s(literal 1/2 binary32) u0) #s(literal 1 binary32))) (*.f32 (*.f32 alphax alphax) sin2phi)))) (*.f32 #s(literal 1/2 binary32) u0)) sin2phi))))) u0)))
((atan2.f64 (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) (cos.f64 phi2)) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 (-.f64 lambda1 lambda2))))))
((atan2.f64 (+.f64 (*.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (cos.f64 phi2)) (*.f64 (*.f64 (neg.f64 (cos.f64 lambda1)) (sin.f64 lambda2)) (cos.f64 phi2))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 (-.f64 lambda1 lambda2))))) (atan2.f64 #s(approx (* (sin (- lambda1 lambda2)) (cos phi2)) (sin.f64 (-.f64 lambda1 lambda2))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 (-.f64 lambda1 lambda2))))) (atan2.f64 (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) (cos.f64 phi2)) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 #s(approx (- lambda1 lambda2) lambda1))))) (atan2.f64 (*.f64 (sin.f64 (/.f64 (*.f64 (+.f64 lambda2 lambda1) (-.f64 lambda1 lambda2)) (+.f64 lambda2 lambda1))) (cos.f64 phi2)) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 (-.f64 lambda1 lambda2))))) (atan2.f64 (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) (cos.f64 phi2)) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (/.f64 (*.f64 (-.f64 (cos.f64 (-.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) phi2) phi1)) (cos.f64 (+.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) phi2) phi1))) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (cos.f64 (+.f64 lambda2 lambda1)))) (*.f64 #s(literal 2 binary64) (cos.f64 (+.f64 lambda2 lambda1)))))))
((atan2.f64 (+.f64 (*.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (cos.f64 phi2)) (*.f64 (*.f64 (neg.f64 (cos.f64 lambda1)) (sin.f64 lambda2)) (cos.f64 phi2))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 lambda1) (cos.f64 lambda2)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 lambda2) (sin.f64 lambda1)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (cos.f64 lambda1) (cos.f64 lambda2)) (*.f64 (cos.f64 lambda1) (cos.f64 lambda2))) (-.f64 (*.f64 (*.f64 (sin.f64 lambda2) (sin.f64 lambda1)) (*.f64 (sin.f64 lambda2) (sin.f64 lambda1))) (*.f64 (*.f64 (cos.f64 lambda1) (cos.f64 lambda2)) (*.f64 (sin.f64 lambda2) (sin.f64 lambda1))))))))) (atan2.f64 #s(approx (* (sin (- lambda1 lambda2)) (cos phi2)) (sin.f64 (-.f64 lambda1 lambda2))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) #s(approx (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2))) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (sin.f64 phi1))))) (atan2.f64 (*.f64 (sin.f64 #s(approx (- lambda1 lambda2) (neg.f64 lambda2))) (cos.f64 phi2)) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 #s(approx (- lambda1 lambda2) lambda1))))) (atan2.f64 #s(approx (* (sin (- lambda1 lambda2)) (cos phi2)) #s(approx (sin (- lambda1 lambda2)) (+.f64 (*.f64 (-.f64 (neg.f64 (cos.f64 lambda1)) (*.f64 #s(literal 1/2 binary64) (*.f64 (sin.f64 lambda1) lambda2))) lambda2) (sin.f64 lambda1)))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 (-.f64 lambda1 lambda2))))) (atan2.f64 (+.f64 (*.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (cos.f64 phi2)) (*.f64 (*.f64 (neg.f64 (cos.f64 lambda1)) (sin.f64 lambda2)) (cos.f64 phi2))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) #s(approx (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2))) (*.f64 (*.f64 phi1 (cos.f64 phi2)) (cos.f64 (-.f64 lambda2 lambda1)))))))
((atan2.f64 (+.f64 (*.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (cos.f64 phi2)) (*.f64 (*.f64 (cos.f64 phi2) (neg.f64 (cos.f64 lambda1))) (sin.f64 lambda2))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 lambda1) (cos.f64 lambda2)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 lambda2) (sin.f64 lambda1)) #s(literal 3 binary64))) (+.f64 (*.f64 (*.f64 (cos.f64 lambda1) (cos.f64 lambda2)) (*.f64 (cos.f64 lambda1) (cos.f64 lambda2))) (-.f64 (*.f64 (*.f64 (sin.f64 lambda2) (sin.f64 lambda1)) (*.f64 (sin.f64 lambda2) (sin.f64 lambda1))) (*.f64 (*.f64 (cos.f64 lambda1) (cos.f64 lambda2)) (*.f64 (sin.f64 lambda2) (sin.f64 lambda1))))))))) (atan2.f64 #s(approx (* (sin (- lambda1 lambda2)) (cos phi2)) (sin.f64 #s(approx (- lambda1 lambda2) lambda1))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) #s(approx (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2))) (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (sin.f64 phi1))))) (atan2.f64 #s(approx (* (sin (- lambda1 lambda2)) (cos phi2)) (sin.f64 (-.f64 lambda1 lambda2))) (-.f64 (*.f64 (sin.f64 phi2) (cos.f64 phi1)) (*.f64 (*.f64 (cos.f64 (-.f64 lambda2 lambda1)) (sin.f64 phi1)) (cos.f64 phi2)))) (atan2.f64 (*.f64 (sin.f64 (-.f64 lambda1 lambda2)) (cos.f64 phi2)) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) #s(approx (cos (- lambda1 lambda2)) (+.f64 (*.f64 (sin.f64 lambda2) lambda1) (cos.f64 lambda2)))))) (atan2.f64 (+.f64 (*.f64 (*.f64 (cos.f64 lambda2) (sin.f64 lambda1)) (cos.f64 phi2)) (*.f64 (*.f64 (neg.f64 (cos.f64 lambda1)) (sin.f64 lambda2)) (cos.f64 phi2))) (-.f64 (*.f64 (cos.f64 phi1) (sin.f64 phi2)) (*.f64 (*.f64 (sin.f64 phi1) (cos.f64 phi2)) (cos.f64 #s(approx (- lambda1 lambda2) lambda1))))))
((-.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))
((-.f64 (-.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) #s(literal 1 binary64)) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) (-.f64 (*.f64 (-.f64 x #s(literal -3 binary64)) x) #s(literal -1 binary64))) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) (*.f64 (-.f64 (*.f64 x x) #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 3 binary64) x) #s(literal -1 binary64)))) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) (/.f64 (-.f64 #s(literal -3 binary64) (/.f64 (/.f64 (-.f64 x #s(literal -3 binary64)) x) x)) x)))
((-.f64 (-.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) (-.f64 (*.f64 #s(approx (- x -3) #s(literal 3 binary64)) x) #s(literal -1 binary64))) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) (/.f64 (-.f64 #s(literal -3 binary64) (/.f64 #s(approx (/ (- x -3) x) #s(literal 1 binary64)) x)) x)) (-.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 x x) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64)))) (-.f64 (-.f64 (/.f64 x (-.f64 x #s(literal -1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64)))))
((-.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal -1 binary64)))) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) (/.f64 #s(approx (- -3 (/ (/ (- x -3) x) x)) #s(literal -3 binary64)) x)) (-.f64 #s(approx (- (/ x (- x -1)) (/ x (- x 1))) (/.f64 #s(literal -2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) #s(approx (- (/ x (+ x 1)) (/ (+ x 1) (- x 1))) (/.f64 (-.f64 #s(literal -3 binary64) (/.f64 (-.f64 x #s(literal -3 binary64)) (*.f64 x x))) x)) (/.f64 (-.f64 (*.f64 (neg.f64 x) (-.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 (neg.f64 x) #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))) (neg.f64 (-.f64 (*.f64 x x) #s(literal 1 binary64)))))
((+.f64 (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (/.f64 x (+.f64 x #s(literal 1 binary64)))))
((/.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal -1 binary64))) (-.f64 (*.f64 x x) #s(literal 1 binary64))) #s(approx (+ (/ 1 (- x 1)) (/ x (+ x 1))) #s(literal -1 binary64)) #s(approx (+ (/ 1 (- x 1)) (/ x (+ x 1))) #s(literal 1 binary64)) #s(approx (+ (/ 1 (- x 1)) (/ x (+ x 1))) (-.f64 (*.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal 1 binary64))) #s(approx (+ (/ 1 (- x 1)) (/ x (+ x 1))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -1 binary64))))
(#s(approx (/ (+ (* (- x 1) x) (- x -1)) (- (* x x) 1)) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 x x) #s(literal -1 binary64))) x) x) #s(literal 1 binary64))) (/.f64 #s(approx (+ (* (- x 1) x) (- x -1)) (-.f64 (*.f64 x x) #s(literal -1 binary64))) (-.f64 (*.f64 x x) #s(literal 1 binary64))))
((-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))
((/.f64 (-.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (-.f64 (*.f64 x x) #s(literal 1 binary64))) #s(approx (- (/ 1 (+ x 1)) (/ 1 (- x 1))) #s(literal 2 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 (- x 1))) (-.f64 (*.f64 (*.f64 x x) #s(literal 2 binary64)) #s(literal -2 binary64))) #s(approx (- (/ 1 (+ x 1)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) (*.f64 x x))) (/.f64 (/.f64 (-.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))))
(#s(approx (- (/ 1 (+ x 1)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal -2 binary64) x) x)) (/.f64 #s(approx (- (- x 1) (- x -1)) #s(literal -2 binary64)) (-.f64 (*.f64 x x) #s(literal 1 binary64))) (/.f64 #s(approx (/ (- (- x 1) (- x -1)) (- x -1)) #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)) (+.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))))
((/.f64 #s(approx (- (- x 1) (- x -1)) #s(literal -2 binary64)) #s(approx (- (* x x) 1) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x))) x) x))) (/.f64 #s(approx (/ (- (- x 1) (- x -1)) (- x -1)) #s(literal -2 binary64)) #s(approx (- x 1) x)))
((if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))))))
((if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 #s(approx (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))) (*.f32 (*.f32 (floor.f32 w) dY.v) (*.f32 (floor.f32 h) dX.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))))) #s(approx (if (< (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) 1) (fmax 1 (* (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (if (<.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (/.f32 (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w))) (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (/.f32 (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w))) (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (-.f32 (*.f32 (*.f32 (*.f32 dX.u (floor.f32 w)) dY.v) (floor.f32 h)) (*.f32 (*.f32 (*.f32 dX.v (floor.f32 h)) dY.u) (floor.f32 w)))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 #s(approx (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))) (*.f32 (*.f32 (floor.f32 w) dY.v) (*.f32 (floor.f32 h) dX.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))))))
(#s(approx (if (< (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) 1) (fmax 1 (* (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (if (>.f32 (/.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (fabs.f32 (*.f32 (floor.f32 h) (floor.f32 w)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) #s(approx (if (< (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))) 1) (fmax 1 (* (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))) #s(approx (if (< (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) 1) (fmax 1 (* (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (floor.f32 w)) (floor.f32 h)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) #s(approx (if (< (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) 1) (fmax 1 (* (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (fabs.f32 (*.f32 (floor.f32 h) (floor.f32 w))))))) (if (<.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 #s(approx (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))) (*.f32 (*.f32 dY.v (*.f32 dX.u (floor.f32 h))) (floor.f32 w)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))))))
(#s(approx (if (< (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) 1) (fmax 1 (* (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))))) (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (floor maxAniso) (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (floor.f32 w)) (floor.f32 h)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (if (>.f32 (/.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)))) (fabs.f32 (*.f32 (floor.f32 w) (floor.f32 h)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) #s(approx (if (< (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))) 1) (fmax 1 (* (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))))) (if (<.f32 (if (>.f32 #s(approx (/ (fmax (- (pow (* (floor h) dX.v) 2) (pow (* (floor w) dX.u) 2)) (- (pow (* (floor h) dY.v) 2) (pow (* (floor w) dY.u) 2))) (* (* (floor h) (floor w)) (- (* dY.v dX.u) (* dY.u dX.v)))) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (*.f32 (floor.f32 h) dY.v) dX.u) (floor.f32 w)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))) #s(approx (if (< (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))) 1) (fmax 1 (* (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))) (if (>.f32 #s(approx (/ (fmax (- (pow (* (floor h) dX.v) 2) (pow (* (floor w) dX.u) 2)) (- (pow (* (floor h) dY.v) 2) (pow (* (floor w) dY.u) 2))) (* (* (floor h) (floor w)) (- (* dY.v dX.u) (* dY.u dX.v)))) (/.f32 (-.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (neg.f32 dX.u) (*.f32 (floor.f32 w) (floor.f32 h)))) (*.f32 (/.f32 (*.f32 dY.u dX.v) (*.f32 dX.u dX.u)) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 dY.v (floor.f32 w)) (floor.f32 h))))) (neg.f32 dY.v))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))) #s(approx (if (< (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))) 1) (fmax 1 (* (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) #s(approx (/ (fmax (- (pow (* (floor h) dX.v) 2) (pow (* (floor w) dX.u) 2)) (- (pow (* (floor h) dY.v) 2) (pow (* (floor w) dY.u) 2))) (* (* (floor h) (floor w)) (- (* dY.v dX.u) (* dY.u dX.v)))) (/.f32 (-.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (neg.f32 dX.v) (*.f32 (floor.f32 w) (floor.f32 h)))) (*.f32 (/.f32 (*.f32 dY.v dX.u) (*.f32 dX.v dX.v)) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 dY.u (floor.f32 h)) (floor.f32 w))))) dY.u))))) #s(approx (if (< (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))) 1) (fmax 1 (* (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (/ (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))) (floor maxAniso)) (/ (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w))) (sqrt (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))))) (if (> (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))) (floor maxAniso)) (floor maxAniso) (/ (fmax (- (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (- (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (- (* (* (* dX.u (floor w)) dY.v) (floor h)) (* (* (* dX.v (floor h)) dY.u) (floor w)))))) (if (<.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) #s(literal 1 binary32)) (fmax.f32 #s(literal 1 binary32) (*.f32 (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (*.f32 (floor.f32 w) (floor.f32 h))) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))))) (if (>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (floor.f32 maxAniso)) (floor.f32 maxAniso) (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) (floor.f32 w)) (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v))))))))
((if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))))
((if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (floor.f32 w) (*.f32 (floor.f32 w) (*.f32 dX.u dX.u))) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (*.f32 (pow.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) dX.v) (floor.f32 h)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (*.f32 (pow.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) dY.v) (floor.f32 h))))
((if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (*.f32 (neg.f32 (*.f32 dX.u (pow.f32 (floor.f32 w) #s(literal 2 binary32)))) dX.u)) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) #s(approx (if (>= (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (+ (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))) (/ (* dX.v (floor h)) (sqrt (fmax (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (+ (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2))))) (/ (* dY.v (floor h)) (sqrt (fmax (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (+ (pow (* dY.v (floor h)) 2) (pow (* dY.u (floor w)) 2)))))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 h) dX.v) (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))))) (*.f32 (*.f32 (floor.f32 h) dY.v) (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 (floor.f32 h) dY.v) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 w) dY.u) #s(literal 2 binary32))))))))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (*.f32 (pow.f32 (fmax.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) dX.v) (floor.f32 h)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (*.f32 (pow.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) (floor.f32 h)) dY.v)))
((if (>=.f32 (+.f32 (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (floor.f32 w) (*.f32 (floor.f32 w) (*.f32 dX.u dX.u))) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))) (if (>=.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.v (floor.f32 h)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (floor.f32 w) (*.f32 (floor.f32 w) (*.f32 dY.u dY.u))) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (*.f32 (pow.f32 (fmax.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (exp.f32 (*.f32 (log.f32 (*.f32 dX.v (floor.f32 h))) #s(literal 2 binary32)))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) dX.v) (floor.f32 h)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dY.v))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 h) dX.v)) (*.f32 (*.f32 (pow.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) (floor.f32 h)) dY.v)))
((if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dY.u))))
((if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dY.u))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (floor.f32 h) (*.f32 (floor.f32 h) (*.f32 dX.v dX.v)))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dY.u))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) (*.f32 dX.v dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dY.u))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (pow.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) dY.u) (floor.f32 w))))
((if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) (*.f32 dX.v dX.v)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.u (floor.f32 w)) (sqrt.f32 (fmax.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 w) dX.u) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) #s(approx (if (>= (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (* (/ 1 (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))))) (* (floor w) dX.u)) (* (/ 1 (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))))) (* (floor w) dY.u))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (*.f32 (floor.f32 w) dY.u)))) (if (>=.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (*.f32 (*.f32 (pow.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) #s(literal -1/2 binary32)) (floor.f32 w)) dX.u) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dY.u))))
((if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (floor.f32 h) (*.f32 (floor.f32 h) (*.f32 dX.v dX.v))) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.u (floor.f32 w)) (sqrt.f32 (fmax.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))) (if (>=.f32 #s(approx (+ (pow (* dX.v (floor h)) 2) (pow (* dX.u (floor w)) 2)) (pow.f32 (*.f32 (floor.f32 h) dX.v) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dY.u))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))) (*.f32 (floor.f32 w) dX.u)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) (*.f32 dY.v dY.v)))))) (*.f32 (floor.f32 w) dY.u))) (if (>=.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (/.f32 (*.f32 dX.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (exp.f32 (*.f32 (log.f32 (*.f32 (floor.f32 h) dX.v)) #s(literal 2 binary32))) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (/.f32 (*.f32 dY.u (floor.f32 w)) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32))))))))
((log2.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))))
((log2.f32 (if (>.f32 #s(approx (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))) (log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 #s(approx (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))) (*.f32 (*.f32 (neg.f32 dY.u) dX.v) (*.f32 (floor.f32 h) (floor.f32 w)))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))) (log2.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (exp.f32 (*.f32 (log.f32 (*.f32 (neg.f32 dX.v) (floor.f32 h))) #s(literal 2 binary32)))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))) (log2.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u))))) (floor.f32 maxAniso)) (/.f32 (pow.f32 (exp.f32 (log.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) #s(literal 1/2 binary32)) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))))
((log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (fabs.f32 (*.f32 (floor.f32 h) (floor.f32 w)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (floor.f32 w)) (floor.f32 h)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (exp.f32 (*.f32 (log.f32 (*.f32 dY.v (floor.f32 h))) #s(literal 2 binary32))) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 (if (>.f32 #s(approx (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (pow.f32 (exp.f32 (log.f32 (*.f32 dY.u (floor.f32 w)))) #s(literal 2 binary32)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))) (log2.f32 (if (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))) (fabs.f32 #s(approx (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))) (*.f32 (*.f32 (floor.f32 w) dY.v) (*.f32 (floor.f32 h) dX.u))))) (floor.f32 maxAniso)) (/.f32 (pow.f32 (exp.f32 (log.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) #s(literal 1/2 binary32)) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))))
((log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (fabs.f32 (*.f32 (floor.f32 h) (floor.f32 w)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (floor.f32 w)) (floor.f32 h)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (floor.f32 w)) (floor.f32 h)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (exp.f32 (*.f32 (log.f32 (*.f32 dY.u (floor.f32 w))) #s(literal 2 binary32)))))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 #s(approx (if (> (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (floor maxAniso)) (/ (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))) (floor maxAniso)) (/ (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u)))) (sqrt (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v))))))) (if (>.f32 (/.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 dX.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dX.u (floor.f32 w)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 dY.v (floor.f32 h)) #s(literal 2 binary32)) (pow.f32 (*.f32 dY.u (floor.f32 w)) #s(literal 2 binary32)))) (fabs.f32 (-.f32 (*.f32 dY.v dX.u) (*.f32 dY.u dX.v)))) (fabs.f32 (*.f32 (floor.f32 h) (floor.f32 w)))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (pow.f32 (exp.f32 #s(literal 2 binary32)) (log.f32 (*.f32 dY.v (floor.f32 h)))) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u)))) (floor.f32 maxAniso)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))))) (log2.f32 (if (>.f32 #s(approx (/ (fmax (+ (* (* (floor w) dX.u) (* (floor w) dX.u)) (* (* (floor h) dX.v) (* (floor h) dX.v))) (+ (* (* (floor w) dY.u) (* (floor w) dY.u)) (* (* (floor h) dY.v) (* (floor h) dY.v)))) (fabs (- (* (* (floor w) dX.u) (* (floor h) dY.v)) (* (* (floor h) dX.v) (* (floor w) dY.u))))) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dX.v) dX.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dX.u) dX.u)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 h) #s(literal 2 binary32)) dY.v) dY.v) (*.f32 (*.f32 (pow.f32 (floor.f32 w) #s(literal 2 binary32)) dY.u) dY.u))) (fabs.f32 (*.f32 (-.f32 (*.f32 dY.u dX.v) (*.f32 dY.v dX.u)) (*.f32 (floor.f32 h) (floor.f32 w)))))) (floor.f32 maxAniso)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (pow.f32 (exp.f32 (log.f32 (*.f32 dX.v (floor.f32 h)))) #s(literal 2 binary32))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v))))) (floor.f32 maxAniso)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 h) dY.v)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 w) dY.u)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 w) dX.u) (*.f32 (floor.f32 w) dX.u)) (*.f32 (*.f32 (floor.f32 h) dX.v) (*.f32 (floor.f32 h) dX.v))) (+.f32 (*.f32 (*.f32 (floor.f32 w) dY.u) (*.f32 (floor.f32 w) dY.u)) (*.f32 (*.f32 (floor.f32 h) dY.v) (*.f32 (floor.f32 h) dY.v)))))))))
((/.f64 (-.f64 (+.f64 (*.f64 (+.f64 x y) z) (*.f64 (+.f64 t y) a)) (*.f64 y b)) (+.f64 (+.f64 x t) y)))
((+.f64 (/.f64 (+.f64 (*.f64 a (+.f64 t y)) (*.f64 z (+.f64 y x))) (+.f64 (+.f64 t x) y)) (*.f64 (neg.f64 y) (/.f64 b (+.f64 (+.f64 t x) y)))) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) a) (/.f64 #s(approx (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (*.f64 (neg.f64 y) b)) (+.f64 (+.f64 x t) y)) (/.f64 #s(approx (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (*.f64 (-.f64 (+.f64 a z) b) y)) (+.f64 (+.f64 x t) y)) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) (-.f64 a (/.f64 (neg.f64 (-.f64 (-.f64 (+.f64 (*.f64 (+.f64 y x) z) (*.f64 a y)) (*.f64 b y)) (*.f64 (+.f64 y x) a))) t))))
((+.f64 (+.f64 (*.f64 (/.f64 b (+.f64 (+.f64 x t) y)) (neg.f64 y)) (*.f64 (+.f64 y t) (/.f64 a (+.f64 (+.f64 x t) y)))) (*.f64 (+.f64 x y) (/.f64 z (+.f64 (+.f64 x t) y)))) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) z) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) (-.f64 a #s(approx (/ (neg (- (- (+ (* (+ y x) z) (* a y)) (* b y)) (* (+ y x) a))) t) (/.f64 (*.f64 (-.f64 a z) x) t)))) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) (*.f64 (+.f64 t y) (/.f64 a (+.f64 (+.f64 t x) y)))) (/.f64 (-.f64 #s(approx (+ (* (+ x y) z) (* (+ t y) a)) (*.f64 a t)) (*.f64 y b)) (+.f64 (+.f64 x t) y)))
((+.f64 #s(approx (+ (* (/ b (+ (+ x t) y)) (neg y)) (* (+ y t) (/ a (+ (+ x t) y)))) (*.f64 (neg.f64 a) (/.f64 (+.f64 (neg.f64 (+.f64 y t)) (/.f64 (*.f64 y b) a)) (+.f64 (+.f64 t x) y)))) (*.f64 (+.f64 x y) (/.f64 z (+.f64 (+.f64 x t) y)))) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) (-.f64 (+.f64 z a) b)) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) (*.f64 (+.f64 t y) #s(approx (/ a (+ (+ t x) y)) (/.f64 a y)))) (/.f64 #s(approx (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (*.f64 #s(approx (- (+ a z) b) z) y)) (+.f64 (+.f64 x t) y)) #s(approx (/ (- (+ (* (+ x y) z) (* (+ t y) a)) (* y b)) (+ (+ x t) y)) #s(approx (- a (/ (neg (- (- (+ (* (+ y x) z) (* a y)) (* b y)) (* (+ y x) a))) t)) (*.f64 (-.f64 (/.f64 z t) (/.f64 b t)) y))))
((/.f64 x (+.f64 y x)))
((/.f64 x #s(approx (+ y x) (*.f64 (-.f64 (/.f64 y x) #s(literal -1 binary64)) x))) #s(approx (/ x (+ y x)) #s(literal 1 binary64)) (/.f64 x #s(approx (+ y x) y)) #s(approx (/ x (+ y x)) (/.f64 (-.f64 x (*.f64 (/.f64 x y) x)) y)) (/.f64 (*.f64 x (-.f64 y x)) (*.f64 (-.f64 y x) (+.f64 y x))))
(#s(approx (/ x (+ y x)) (/.f64 (+.f64 (*.f64 y (-.f64 (/.f64 y x) #s(literal 1 binary64))) x) x)))
((/.f64 x (+.f64 x y)))
((/.f64 x #s(approx (+ x y) (*.f64 (-.f64 (/.f64 y x) #s(literal -1 binary64)) x))) #s(approx (/ x (+ x y)) #s(literal 1 binary64)) (/.f64 x #s(approx (+ x y) y)) #s(approx (/ x (+ x y)) (/.f64 (-.f64 x (*.f64 (/.f64 x y) x)) y)) (/.f64 (*.f64 x (-.f64 x y)) (*.f64 (-.f64 x y) (+.f64 y x))))
(#s(approx (/ x (+ x y)) (/.f64 (+.f64 (*.f64 y (-.f64 (/.f64 y x) #s(literal 1 binary64))) x) x)))
((/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C)) F)) (-.f64 (+.f64 A C) (sqrt.f64 (+.f64 (pow.f64 (-.f64 A C) #s(literal 2 binary64)) (pow.f64 B #s(literal 2 binary64)))))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
((/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C)) F)) #s(approx (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2)))) (-.f64 (+.f64 (*.f64 (/.f64 (*.f64 B B) C) #s(literal -1/2 binary64)) A) (neg.f64 A)))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 F B))))) (/.f64 (neg.f64 (sqrt.f64 #s(approx (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 B B)) (*.f64 (-.f64 A (sqrt.f64 (+.f64 (*.f64 A A) (*.f64 B B)))) F))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))) (/.f64 (neg.f64 (sqrt.f64 #s(approx (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 F A) (-.f64 A (neg.f64 A))) #s(literal -8 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 F (/.f64 (+.f64 (*.f64 (-.f64 A (neg.f64 A)) (*.f64 B B)) (*.f64 (*.f64 (*.f64 B B) A) #s(literal 2 binary64))) C)))) C)))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))) (/.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (sqrt.f64 (*.f64 (-.f64 (+.f64 C A) (sqrt.f64 (+.f64 (pow.f64 (-.f64 A C) #s(literal 2 binary64)) (*.f64 B B)))) (*.f64 F (-.f64 (*.f64 B B) (*.f64 C (*.f64 A #s(literal 4 binary64))))))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
((/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C)) F)) #s(approx (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2)))) #s(approx (- (+ (* (/ (* B B) C) -1/2) A) (neg A)) (/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 B B)) (*.f64 #s(literal -2 binary64) (*.f64 A C))) C)))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) #s(approx (neg (* (* (sqrt 2) -1) (sqrt (/ F B)))) (*.f64 (sqrt.f64 (/.f64 F B)) (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (neg.f64 (sqrt.f64 #s(approx (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 B B)) (*.f64 (-.f64 A #s(approx (sqrt (+ (* A A) (* B B))) A)) F))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))) #s(approx (/ (neg (* (sqrt 2) (sqrt (* (- (+ C A) (sqrt (+ (pow (- A C) 2) (* B B)))) (* F (- (* B B) (* C (* A 4)))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 F (/.f64 (-.f64 (+.f64 A C) (sqrt.f64 (+.f64 (*.f64 B B) (pow.f64 (-.f64 A C) #s(literal 2 binary64))))) (-.f64 (*.f64 B B) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))) (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C)) F)) #s(approx (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2)))) (+.f64 (-.f64 A (neg.f64 A)) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 B B) C))))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
(#s(approx (/ (neg (* (sqrt 2) (sqrt (* (- (+ C A) (sqrt (+ (pow (- A C) 2) (* B B)))) (* F (- (* B B) (* C (* A 4)))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 F #s(approx (/ (- (+ A C) (sqrt (+ (* B B) (pow (- A C) 2)))) (- (* B B) (* (* 4 A) C))) (/.f64 #s(literal -1/2 binary64) C)))) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) #s(approx (neg (* (* (sqrt 2) -1) (sqrt (/ F B)))) (sqrt.f64 (*.f64 (/.f64 F B) #s(literal 2 binary64))))) #s(approx (/ (neg (* (sqrt 2) (sqrt (* (- (+ C A) (sqrt (+ (pow (- A C) 2) (* B B)))) (* F (- (* B B) (* C (* A 4)))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 F (/.f64 (-.f64 (+.f64 A C) #s(approx (sqrt (+ (* B B) (pow (- A C) 2))) (neg.f64 A))) (-.f64 (*.f64 B B) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))) (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (neg.f64 (sqrt.f64 #s(approx (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 B B)) (*.f64 (-.f64 A #s(approx (sqrt (+ (* A A) (* B B))) B)) F))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))) (/.f64 (*.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) F) (-.f64 (*.f64 B B) (*.f64 (*.f64 #s(literal 4 binary64) A) C)))) (neg.f64 (sqrt.f64 #s(approx (- (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2)))) (-.f64 (-.f64 A (neg.f64 A)) (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 B B) C))))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
((*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 (*.f64 (/.f64 #s(literal 1 binary64) B) (-.f64 (-.f64 C A) (sqrt.f64 (+.f64 (pow.f64 (-.f64 A C) #s(literal 2 binary64)) (pow.f64 B #s(literal 2 binary64))))))) (PI.f64))))
((/.f64 (*.f64 (atan.f64 (/.f64 (-.f64 (-.f64 C A) (sqrt.f64 (+.f64 (*.f64 B B) (pow.f64 (-.f64 A C) #s(literal 2 binary64))))) B)) #s(literal 180 binary64)) (PI.f64)) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) #s(literal -1 binary64))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (/.f64 A B) #s(literal -2 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (+.f64 (/.f64 (-.f64 C A) B) #s(literal 1 binary64)))) (PI.f64))) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (/.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (*.f64 (/.f64 C A) B) B)) A))) (PI.f64))))
((/.f64 (/.f64 (*.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (-.f64 (/.f64 (-.f64 C A) B) #s(literal -1 binary64)))) #s(literal 180 binary64)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) #s(literal 1 binary64))) #s(literal 180 binary64)) (PI.f64)) (/.f64 (*.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (/.f64 B A) #s(literal 1/2 binary64)))) #s(literal 180 binary64)) (PI.f64)) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (-.f64 (*.f64 (/.f64 B C) #s(literal -1/2 binary64)) (/.f64 #s(literal 0 binary64) B)))) (PI.f64))) (/.f64 (*.f64 (atan.f64 (/.f64 #s(approx (- (- C A) (sqrt (+ (* B B) (pow (- A C) 2)))) (-.f64 C (sqrt.f64 (+.f64 (*.f64 C C) (*.f64 B B))))) B)) #s(literal 180 binary64)) (PI.f64)))
((*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (-.f64 (/.f64 (-.f64 C A) B) #s(literal 1 binary64)))) (PI.f64))) (/.f64 (*.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) #s(literal 0 binary64))) #s(literal 180 binary64)) (PI.f64)) (*.f64 #s(literal 180 binary64) (/.f64 (atan.f64 #s(approx (* (/ 1 B) (- (- C A) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (/.f64 C B) #s(literal 2 binary64)))) (PI.f64))) (/.f64 (*.f64 (atan.f64 (/.f64 #s(approx (- (- C A) (sqrt (+ (* B B) (pow (- A C) 2)))) (-.f64 C #s(approx (sqrt (+ (* C C) (* B B))) (neg.f64 B)))) B)) #s(literal 180 binary64)) (PI.f64)) (/.f64 (*.f64 (atan.f64 (/.f64 #s(approx (- (- C A) (sqrt (+ (* B B) (pow (- A C) 2)))) (-.f64 C #s(approx (sqrt (+ (* C C) (* B B))) (-.f64 B (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 C B)) C))))) B)) #s(literal 180 binary64)) (PI.f64)))
((/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C)) F)) (+.f64 (+.f64 A C) (sqrt.f64 (+.f64 (pow.f64 (-.f64 A C) #s(literal 2 binary64)) (pow.f64 B #s(literal 2 binary64)))))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
(#s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 F B)) (sqrt.f64 #s(literal 2 binary64))))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 (*.f64 A A) (*.f64 B B))) A) F)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) B)))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 F (/.f64 (+.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 A C) #s(literal 2 binary64)) (*.f64 B B))) (+.f64 C A)) (-.f64 (*.f64 B B) (*.f64 (*.f64 C A) #s(literal 4 binary64)))))) (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C)) F)) #s(approx (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2)))) B)))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))) (/.f64 #s(approx (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 (*.f64 C (sqrt.f64 #s(literal 2 binary64))) (+.f64 (*.f64 (+.f64 (*.f64 (neg.f64 A) (sqrt.f64 (/.f64 #s(literal 1 binary64) (+.f64 (*.f64 A A) (*.f64 B B))))) #s(literal 1 binary64)) (*.f64 B B)) (*.f64 (*.f64 #s(literal -4 binary64) A) (+.f64 (sqrt.f64 (+.f64 (*.f64 A A) (*.f64 B B))) A)))) B)) (sqrt.f64 (/.f64 F (+.f64 (sqrt.f64 (+.f64 (*.f64 A A) (*.f64 B B))) A)))) (*.f64 (sqrt.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 (*.f64 A A) (*.f64 B B))) A) F)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) B)))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
(#s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (/.f64 (*.f64 (sqrt.f64 F) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 B))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (sqrt.f64 (*.f64 (/.f64 F B) #s(literal 2 binary64))))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) B) (sqrt.f64 (*.f64 F (+.f64 C (sqrt.f64 (+.f64 (*.f64 B B) (*.f64 C C))))))))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (sqrt.f64 (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 A C) #s(literal 2 binary64)) (*.f64 B B))) (+.f64 C A)) (-.f64 (*.f64 B B) (*.f64 (*.f64 A #s(literal 4 binary64)) C))) (*.f64 F #s(literal 2 binary64)))))) (/.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C)) F)) #s(approx (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2)))) (neg.f64 B))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
(#s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (/.f64 (sqrt.f64 (*.f64 F #s(literal 2 binary64))) (neg.f64 (sqrt.f64 B)))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (sqrt.f64 #s(approx (* (/ (+ (sqrt (+ (pow (- A C) 2) (* B B))) (+ C A)) (- (* B B) (* (* A 4) C))) (* F 2)) (neg.f64 (/.f64 F A)))))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 (sqrt.f64 (*.f64 #s(approx (/ (+ (sqrt (+ (pow (- A C) 2) (* B B))) (+ C A)) (- (* B B) (* (* A 4) C))) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 A C) B)) B)) (*.f64 F #s(literal 2 binary64)))))) #s(approx (/ (neg (sqrt (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))))) (- (pow B 2) (* (* 4 A) C))) (neg.f64 #s(approx (* (/ (sqrt 2) B) (sqrt (* F (+ C (sqrt (+ (* B B) (* C C))))))) (*.f64 (/.f64 (pow.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64)) B) (sqrt.f64 (*.f64 C F)))))) (/.f64 (neg.f64 (sqrt.f64 #s(approx (* (* 2 (* (- (pow B 2) (* (* 4 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2) (pow B 2))))) (*.f64 (-.f64 (*.f64 (*.f64 F A) #s(literal -16 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 0 binary64) A) A) #s(literal -4 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 B B))) F) C))) (*.f64 C C))))) (-.f64 (pow.f64 B #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) A) C))))
((fmax.f64 (-.f64 (+.f64 (pow.f64 y #s(literal 2 binary64)) (pow.f64 x #s(literal 2 binary64))) #s(literal 1/2 binary64)) (fmax.f64 x y)))
((fmax.f64 (-.f64 (+.f64 (*.f64 y y) (*.f64 x x)) #s(literal 1/2 binary64)) (fmax.f64 x y)) (fmax.f64 #s(approx (- (+ (pow y 2) (pow x 2)) 1/2) (*.f64 x x)) (fmax.f64 x y)) (fmax.f64 #s(approx (- (+ (pow y 2) (pow x 2)) 1/2) (*.f64 y y)) (fmax.f64 x y)) (fmax.f64 (-.f64 #s(approx (+ (pow y 2) (pow x 2)) (*.f64 x x)) #s(literal 1/2 binary64)) (fmax.f64 x y)) (fmax.f64 (-.f64 #s(approx (+ (pow y 2) (pow x 2)) (*.f64 y y)) #s(literal 1/2 binary64)) (fmax.f64 x y)))
((+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))
(#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x)) (+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) #s(approx (- x 1) #s(literal -1 binary64)))) (+.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (-.f64 x #s(literal -1 binary64)))) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))
(#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x))) (+.f64 (/.f64 #s(approx (- x (* 2 (- x -1))) (-.f64 #s(literal -2 binary64) x)) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (/.f64 (+.f64 (*.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (-.f64 x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))))
((/.f64 #s(approx (+ (* (- x (* 2 (- x -1))) (- x 1)) (* (* (- x -1) x) 1)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) x)) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)) (/.f64 (/.f64 (+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(approx (- x (* 2 (- x -1))) (-.f64 #s(literal -2 binary64) x))) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) #s(approx (pow x 3/2) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 x #s(literal 3/2 binary64)))))
((-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))
(#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (+.f64 (/.f64 (+.f64 (*.f64 (*.f64 (sin.f64 x) eps) (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (cos.f64 x)) #s(literal 1 binary64)) eps)) (-.f64 (tan.f64 (+.f64 x eps)) #s(approx (tan x) x)) #s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (tan.f64 x)) (-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x)))) (tan.f64 x)))
(#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (-.f64 (+.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) eps)) #s(approx (- (tan (+ x eps)) (tan x)) #s(approx (/ (sin eps) (cos eps)) eps)) #s(approx (- (tan (+ x eps)) (tan x)) (tan.f64 eps)) #s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (+.f64 (/.f64 #s(approx (+ (* (* (sin x) eps) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) 1)) (/ (pow (sin x) 2) (cos x))) (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal 5/6 binary64) eps) x) #s(literal 1 binary64)) x) eps) x)) (cos.f64 x)) #s(literal 1 binary64)) eps)) (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (+.f64 (neg.f64 (+.f64 eps x)) (/.f64 (PI.f64) #s(literal 2 binary64))))) (tan.f64 x)))
(#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (-.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 eps (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (tan.f64 x))) #s(literal -1 binary64)) eps)) #s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (- (+ (* (- (pow (tan x) 2) -1) (/ (* eps (sin x)) (cos x))) (pow (tan x) 2)) -1) eps) (+.f64 (*.f64 (*.f64 eps eps) x) eps))) #s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (-.f64 #s(approx (+ (* (- (pow (tan x) 2) -1) (/ (* eps (sin x)) (cos x))) (pow (tan x) 2)) (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) eps) x) #s(literal 1 binary64)) x) eps) x)) #s(literal -1 binary64)) eps)) #s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (+.f64 (/.f64 #s(approx (+ (* (* (sin x) eps) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) 1)) (/ (pow (sin x) 2) (cos x))) #s(approx (* (+ (* (+ (* (* 5/6 eps) x) 1) x) eps) x) (*.f64 (*.f64 (neg.f64 eps) x) (-.f64 (*.f64 #s(literal -5/6 binary64) (*.f64 x x)) #s(literal 1 binary64))))) (cos.f64 x)) #s(literal 1 binary64)) eps)) (-.f64 (/.f64 (sin.f64 (+.f64 eps x)) #s(approx (sin (+ (neg (+ eps x)) (/ (PI) 2))) (sin.f64 (-.f64 (-.f64 (*.f64 (PI.f64) #s(literal 1/2 binary64)) eps) x)))) (tan.f64 x)))
((-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))
(#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64))) x)) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) (-.f64 #s(approx (sqrt (+ x 1)) (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 #s(approx (+ x 1) x)) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))))
(#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) (sqrt.f64 x))) x)) (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (- (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (- (* 1/2 (sqrt x)) (* (sqrt (/ 1 x)) 1/8)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))))
((*.f64 (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (-.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) x) (sqrt.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x)))) (/.f64 #s(approx (- (- x -1) x) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))))
((-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))
((*.f64 (*.f64 (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (+.f64 (+.f64 eps x) x) #s(literal -2 binary64)))) #s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (-.f64 (cos.f64 x) (*.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 x)) eps)) eps)) #s(approx (- (sin (+ x eps)) (sin x)) (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 eps)) x) (-.f64 #s(literal 1 binary64) (cos.f64 eps))) x) (sin.f64 eps))))
((*.f64 (*.f64 #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/645120 binary64) (*.f64 eps eps)) #s(literal 1/3840 binary64)) eps) eps) #s(literal 1/48 binary64)) (*.f64 eps eps)) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (+.f64 (+.f64 eps x) x) #s(literal -2 binary64)))) #s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (- (cos x) (* (* 1/2 (sin x)) eps)) eps) eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (- (cos x) (* (* 1/2 (sin x)) eps)) (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 x eps)) x) #s(literal 1 binary64))) eps)) #s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (- (* (* -1/2 (sin eps)) x) (- 1 (cos eps))) x) (sin eps)) (*.f64 (+.f64 (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 x eps)) x) #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 1/6 binary64)) eps) eps)) eps))) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x)) eps)))
((*.f64 (*.f64 #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 (+.f64 (*.f64 (-.f64 (*.f64 (*.f64 (+.f64 (*.f64 #s(literal -1/645120 binary64) (*.f64 eps eps)) #s(literal 1/3840 binary64)) eps) eps) #s(literal 1/48 binary64)) (*.f64 eps eps)) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 #s(approx (/ (+ (+ eps x) x) -2) (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x)))) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (- (cos x) (* (* 1/2 (sin x)) eps)) #s(approx (+ (* (* -1/2 (+ x eps)) x) 1) (*.f64 (*.f64 x eps) #s(literal -1/2 binary64)))) eps)) #s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (- (cos x) (* (* 1/2 (sin x)) eps)) eps) (+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps))) eps))) #s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (- (* (* -1/2 (sin eps)) x) (- 1 (cos eps))) x) (sin eps)) (*.f64 (+.f64 (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 x x) #s(literal 1/12 binary64)) #s(literal 1/6 binary64)) eps) eps) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 x eps)) x)) #s(literal 1 binary64)) eps))) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (-.f64 (cos.f64 x) #s(approx (* (* 1/2 (sin x)) eps) (*.f64 (*.f64 #s(literal 1/2 binary64) x) eps))) eps)))
((-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))
(#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (+.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n)) (*.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) n) (*.f64 (-.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) (log.f64 x)) #s(literal 1 binary64))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) (+.f64 (/.f64 x n) #s(literal 1 binary64)))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (+.f64 (/.f64 x n) #s(literal 1 binary64)))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (+.f64 (*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)))
(#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64)) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n) (log.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) x))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (pow x (/ 1 n)) #s(literal 1 binary64))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (-.f64 (/.f64 (+.f64 (*.f64 x (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal -1/2 binary64)) x)) x) n) #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) n) (*.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) (pow.f64 n #s(literal 3 binary64)))) (pow.f64 n #s(literal 4 binary64))) x) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n))) (+.f64 (/.f64 x n) #s(literal 1 binary64)))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (+ (/ (- (* 1/6 (/ (- (pow (log (- x -1)) 3) (pow (log x) 3)) n)) (* (- (pow (log (- x -1)) 2) (pow (log x) 2)) -1/2)) n) (* (- (log (- x -1)) (log x)) 1)) n) (/.f64 (+.f64 (*.f64 (-.f64 (*.f64 (-.f64 (log.f64 (+.f64 #s(literal 1 binary64) x)) (log.f64 x)) n) (*.f64 (-.f64 (pow.f64 (log.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal -1/2 binary64))) n) (*.f64 (-.f64 (pow.f64 (log.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal 1/6 binary64))) (pow.f64 n #s(literal 3 binary64))))))
(#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64)) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n) (/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 9 binary64)) (pow.f64 (log.f64 x) #s(literal 9 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) (log.f64 x)) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 6 binary64))) (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 6 binary64))) (+.f64 (*.f64 (log.f64 x) (log.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x))) (pow.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))))) n)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) #s(approx (pow x (/ 1 n)) #s(literal 1 binary64))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (-.f64 #s(approx (/ (+ (* x (* (+ (/ 1/2 n) -1/2) x)) x) n) (/.f64 x n)) #s(literal -1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (/ (- (* (/ (- (pow (log (- x -1)) 3) (pow (log x) 3)) n) 1/6) (* -1/2 (- (pow (log (- x -1)) 2) (pow (log x) 2)))) n) (log (/ (- x -1) x))) (/.f64 (-.f64 (+.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)) #s(literal 1 binary64)) (/.f64 (neg.f64 (log.f64 x)) n)) x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (+.f64 (*.f64 (*.f64 (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) n)) x) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal -1/2 binary64)) n)) x) (exp.f64 (/.f64 (log.f64 x) n))) x) (*.f64 x (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) (*.f64 x x))))
((-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)))
(#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) (*.f64 N N))) (-.f64 (-.f64 (log.f64 (-.f64 (*.f64 N N) #s(literal 1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (*.f64 (log.f64 N) (log.f64 (*.f64 (-.f64 N #s(literal -1 binary64)) N))) (pow.f64 (log.f64 (-.f64 N #s(literal -1 binary64))) #s(literal 2 binary64)))))
(#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(approx (/ (+ (/ -1/4 N) 1/3) N) (/.f64 (-.f64 (*.f64 #s(literal 1/3 binary64) N) #s(literal 1/4 binary64)) (*.f64 N N))) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (+ (- (/ 1/3 N) 1/2) N) N) (*.f64 N N))) #s(approx (- (- (log (- (* N N) 1)) (log (- N 1))) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N)) N))) (/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 N #s(literal -1 binary64))) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (*.f64 (-.f64 N #s(literal -1 binary64)) N)) (log.f64 N))))))
(#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(approx (/ (+ 1/3 (/ -1/4 N)) N) (/.f64 #s(literal 1/3 binary64) N)) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N)) N))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 #s(approx (- (/ 1/3 N) 1/2) #s(literal -1/2 binary64)) N) (*.f64 N N))) #s(approx (- (log (+ N 1)) (log N)) (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) N) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1/2 binary64) N) (*.f64 N N)))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (pow (/ (- (/ (+ 1/3 (/ -1/4 N)) N) 1/2) N) 2) (/.f64 (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/3 binary64) N)) (*.f64 N N))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N)) N))) (/.f64 (-.f64 (pow.f64 (pow.f64 (log.f64 (-.f64 N #s(literal -1 binary64))) #s(literal 3/2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (*.f64 (log.f64 N) (log.f64 (*.f64 (-.f64 N #s(literal -1 binary64)) N))) (pow.f64 (log.f64 (-.f64 N #s(literal -1 binary64))) #s(literal 2 binary64)))))
((-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (sqrt.f64 x)) (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (*.f64 x x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (-.f64 #s(approx (/ 1 (sqrt x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64))))) (-.f64 (/.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64))))) (/.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64)))))))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (- (- (* (- (* 1/2 x) -1) (sqrt (/ 1 (pow x 5)))) (sqrt x)) (- (* (- (* 1/4 x) -1) (sqrt (/ 1 (pow x 3)))) (sqrt (/ 1 x))))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x))) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) #s(approx (sqrt (* x (- x -1))) (+.f64 #s(literal 1/2 binary64) x))) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (*.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))) #s(approx (/ (- (sqrt (- x -1)) (sqrt x)) (sqrt (* x (- x -1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))
((/.f64 #s(approx (- (sqrt (- x -1)) (sqrt x)) (/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)) #s(approx (sqrt (* x (- x -1))) (+.f64 #s(literal 1/2 binary64) x))) (/.f64 (-.f64 #s(approx (sqrt (- x -1)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(approx (sqrt (* x (- x -1))) (+.f64 #s(literal 1/2 binary64) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (- (- (* (- (* 1/2 x) -1) (sqrt (/ 1 (pow x 5)))) (sqrt x)) (- (* (- (* 1/4 x) -1) (sqrt (/ 1 (pow x 3)))) (sqrt (/ 1 x))))) (* x x)) (/.f64 #s(approx (* -1/2 (- (/ (* 3/4 (sqrt (/ 1 x))) x) (sqrt (/ 1 x)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))) #s(approx (/ (- (sqrt (- x -1)) (sqrt x)) (sqrt (* x (- x -1)))) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) x)) #s(literal 1/2 binary64))) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (*.f64 (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (sqrt.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x)))))
((-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)))
((/.f64 (/.f64 (-.f64 x (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))) x) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))))
((/.f64 (/.f64 #s(approx (- x (- x -1)) #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64))) x) (/.f64 #s(approx (/ (- x (- x -1)) (- x -1)) (-.f64 x #s(literal 1 binary64))) x) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 x #s(literal -1 binary64)) x)))
(#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (/.f64 (-.f64 x (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) x)))
((-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))
(#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 (cos.f64 x) (+.f64 #s(literal -1/2 binary64) (*.f64 eps (*.f64 #s(literal 1/24 binary64) eps)))) (*.f64 (*.f64 #s(literal -1/6 binary64) (sin.f64 x)) eps)) eps) (sin.f64 x)) eps)) #s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 eps) (sin.f64 x))) (-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (+.f64 (*.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64)))) (-.f64 (cos.f64 (+.f64 x eps)) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x))))
(#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) eps) eps) #s(literal -1/2 binary64)) (cos.f64 x)) (*.f64 (*.f64 (sin.f64 x) #s(literal -1/6 binary64)) eps)) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) eps) eps) #s(literal -1/2 binary64)) (cos.f64 x)) (*.f64 (*.f64 (sin.f64 x) #s(literal -1/6 binary64)) eps)) eps) (sin.f64 x))) eps)) #s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (- (* (cos x) (+ -1/2 (* eps (* 1/24 eps)))) (* (* -1/6 (sin x)) eps)) eps) (sin x)) eps) (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)) eps) eps) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) #s(literal 1 binary64)) x) eps)))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 #s(approx (* (- (* (cos x) (+ -1/2 (* eps (* 1/24 eps)))) (* (* -1/6 (sin x)) eps)) eps) (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)) eps)) (sin.f64 x)) eps)) (*.f64 (*.f64 (sin.f64 (/.f64 (+.f64 (+.f64 eps x) x) #s(literal 2 binary64))) (sin.f64 (/.f64 (-.f64 (+.f64 eps x) x) #s(literal 2 binary64)))) #s(literal -2 binary64)))
((*.f64 #s(approx (* (sin (/ (+ (+ eps x) x) 2)) (sin (/ (- (+ eps x) x) 2))) (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 eps x) x) #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64)) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 eps) #s(approx (sin x) x))) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg eps) (sin x)) (*.f64 (-.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (*.f64 #s(literal 1/120 binary64) (*.f64 (*.f64 x x) eps))) (*.f64 x x)) eps) x))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (- (* (cos x) (+ -1/2 (* eps (* 1/24 eps)))) (* (* -1/6 (sin x)) eps)) eps) (sin x)) (+.f64 (*.f64 (-.f64 (-.f64 (*.f64 (-.f64 (*.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 eps eps))) x) (*.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)) eps))) x) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))) #s(literal 1 binary64)) x) (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/24 binary64)) #s(literal 1/2 binary64)) eps))) eps)) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64)) (sin.f64 x)) eps)))
((-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64))) (-.f64 (exp.f64 (*.f64 (log.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 1/3 binary64))) (cbrt.f64 x)) (-.f64 (/.f64 (cbrt.f64 (-.f64 (*.f64 x x) #s(literal 1 binary64))) (cbrt.f64 (-.f64 x #s(literal 1 binary64)))) (cbrt.f64 x)))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))) #s(approx (- (/ (cbrt (- (* x x) 1)) (cbrt (- x 1))) (cbrt x)) (/.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 5/81 binary64)) (-.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x)))) (*.f64 x x))))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (neg.f64 x))))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64)))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 #s(literal 1/3 binary64) (cbrt.f64 (/.f64 #s(literal -1 binary64) x))) (cbrt.f64 (neg.f64 x)))) #s(approx (- (/ (cbrt (- (* x x) 1)) (cbrt (- x 1))) (cbrt x)) (/.f64 #s(approx (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (- (* (cbrt (pow x 4)) 1/3) (* 1/9 (cbrt x)))) (/.f64 (-.f64 (*.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 x #s(literal 4 binary64))) #s(literal 1/3 binary64)) (*.f64 #s(literal 1/9 binary64) (cbrt.f64 x))) x) (*.f64 #s(literal -5/81 binary64) (cbrt.f64 x))) x)) (*.f64 x x))))
((-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N)))
((atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (+.f64 (*.f64 (-.f64 N #s(literal -1 binary64)) N) #s(literal 1 binary64))))
((atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) (+.f64 (*.f64 (-.f64 N #s(literal -1 binary64)) N) #s(literal 1 binary64))) (atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))) (atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (+.f64 #s(approx (* (- N -1) N) N) #s(literal 1 binary64))) (atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (+.f64 (/.f64 (*.f64 (-.f64 (*.f64 N N) #s(literal 1 binary64)) N) (+.f64 #s(literal -1 binary64) N)) #s(literal 1 binary64))) (atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (+.f64 (/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) N) (+.f64 (+.f64 (*.f64 N N) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) N))) #s(literal 1 binary64))))
((atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) (+.f64 (-.f64 (*.f64 N N) #s(literal -1 binary64)) N)) (atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))) (atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) #s(approx (+ (* (- N -1) N) 1) (*.f64 (-.f64 N #s(literal -1 binary64)) N))) (atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (+.f64 (/.f64 (*.f64 (-.f64 N #s(literal -1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (+.f64 #s(literal -1 binary64) N)) #s(literal 1 binary64))) (atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) (+.f64 (*.f64 (/.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (-.f64 (*.f64 N N) #s(literal -1 binary64)) N)) N) #s(literal 1 binary64))))
((cbrt.f64 (/.f64 g (*.f64 #s(literal 2 binary64) a))))
((/.f64 (cbrt.f64 (/.f64 g #s(literal 2 binary64))) (cbrt.f64 a)) (cbrt.f64 (/.f64 g (+.f64 a a))) (cbrt.f64 (/.f64 (/.f64 g a) #s(literal 2 binary64))) #s(approx (cbrt (/ g (* 2 a))) (*.f64 (cbrt.f64 #s(literal 1/2 binary64)) (cbrt.f64 (/.f64 g a)))) (/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 a #s(literal 2 binary64)))))
(#s(approx (cbrt (/ g (* 2 a))) (*.f64 (cbrt.f64 #s(literal 1/2 binary64)) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))) (cbrt.f64 #s(approx (/ (/ g a) 2) (*.f64 #s(literal 1/2 binary64) (/.f64 g a)))) (/.f64 (cbrt.f64 #s(approx (/ g 2) (*.f64 #s(literal 1/2 binary64) g))) (cbrt.f64 a)) (/.f64 (cbrt.f64 (/.f64 g a)) (cbrt.f64 #s(literal 2 binary64))))
(#s(approx (cbrt (/ g (* 2 a))) (*.f64 (*.f64 (pow.f64 #s(literal 1/2 binary64) #s(literal 1/6 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 1/6 binary64))) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))) (cbrt.f64 #s(approx (/ (/ g a) 2) (*.f64 g (/.f64 #s(literal 1/2 binary64) a)))))
((+.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h))))))))
(#s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))))) (+.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 h g) (/.f64 h a))) (*.f64 (cbrt.f64 #s(literal 1/2 binary64)) (cbrt.f64 #s(literal -1/2 binary64)))) (*.f64 (*.f64 (cbrt.f64 (/.f64 g a)) (cbrt.f64 #s(literal -1/2 binary64))) (cbrt.f64 #s(literal 2 binary64))))) (+.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 #s(approx (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))) (/.f64 (neg.f64 g) a)))) (+.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 #s(approx (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))) (*.f64 (/.f64 #s(literal -1/4 binary64) g) (/.f64 (*.f64 h h) a))))) (+.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 (*.f64 (-.f64 g h) (+.f64 h g))) (neg.f64 g)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 1/3 binary64)) (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h))))))) (+.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (/.f64 (cbrt.f64 (-.f64 (neg.f64 g) (sqrt.f64 (*.f64 (-.f64 g h) (+.f64 h g))))) (cbrt.f64 (*.f64 a #s(literal 2 binary64))))))
(#s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))))) (+.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 h g) (/.f64 h a))) (*.f64 (cbrt.f64 #s(literal 1/2 binary64)) (cbrt.f64 #s(literal -1/2 binary64)))) (*.f64 (*.f64 (/.f64 (cbrt.f64 g) (cbrt.f64 a)) (cbrt.f64 #s(literal -1/2 binary64))) (cbrt.f64 #s(literal 2 binary64))))) #s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (/ (cbrt (- (neg g) (sqrt (* (- g h) (+ h g))))) (cbrt (* a 2)))) (*.f64 (cbrt.f64 #s(literal -1 binary64)) (cbrt.f64 (/.f64 g a)))) (+.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (neg.f64 g) #s(approx (sqrt (- (* g g) (* h h))) (*.f64 (+.f64 (/.f64 (*.f64 (*.f64 h h) #s(literal -1/2 binary64)) (*.f64 g g)) #s(literal 1 binary64)) g))))) (cbrt.f64 #s(approx (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))) (/.f64 (neg.f64 g) a)))) #s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))))) (-.f64 (cbrt.f64 (*.f64 (*.f64 (/.f64 #s(literal -1/4 binary64) g) h) (/.f64 h a))) (*.f64 (neg.f64 (cbrt.f64 #s(literal 2 binary64))) (cbrt.f64 (*.f64 (/.f64 g a) #s(literal -1/2 binary64)))))) (+.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (neg.f64 g) (sqrt.f64 (-.f64 (*.f64 g g) (*.f64 h h)))))) (cbrt.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (-.f64 (neg.f64 g) (exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 g h) (+.f64 h g))) #s(literal 1/2 binary64))))))))
(#s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))))) (+.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (/.f64 h g) h)) (cbrt.f64 a)) (*.f64 (cbrt.f64 #s(literal 1/2 binary64)) (cbrt.f64 #s(literal -1/2 binary64)))) (*.f64 (*.f64 (/.f64 (cbrt.f64 g) (cbrt.f64 a)) (cbrt.f64 #s(literal -1/2 binary64))) (cbrt.f64 #s(literal 2 binary64))))) #s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (/ (cbrt (- (neg g) (sqrt (* (- g h) (+ h g))))) (cbrt (* a 2)))) (cbrt.f64 (/.f64 (neg.f64 g) a))) (+.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 (*.f64 (-.f64 g h) (+.f64 h g))) (neg.f64 g)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 1/3 binary64)) (cbrt.f64 #s(approx (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 h h)) (*.f64 a g))))) #s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (/ (cbrt (- (neg g) (sqrt (* (- g h) (+ h g))))) (cbrt (* a 2)))) (*.f64 (*.f64 (cbrt.f64 #s(literal 2 binary64)) (cbrt.f64 (/.f64 g a))) (cbrt.f64 #s(literal -1/2 binary64)))) #s(approx (+ (cbrt (* (/ 1 (* 2 a)) (+ (neg g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1 (* 2 a)) (- (neg g) (sqrt (- (* g g) (* h h))))))) (-.f64 (cbrt.f64 (*.f64 (*.f64 (/.f64 #s(literal -1/4 binary64) g) h) (/.f64 h a))) (*.f64 (neg.f64 (cbrt.f64 #s(literal 2 binary64))) (exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 g a) #s(literal -1/2 binary64))) #s(literal 1/3 binary64)))))))
((*.f64 #s(literal 2 binary64) (cos.f64 (+.f64 (/.f64 (*.f64 #s(literal 2 binary64) (PI.f64)) #s(literal 3 binary64)) (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal 3 binary64))))))
((-.f64 (+.f64 (cos.f64 (/.f64 (+.f64 (acos.f64 (/.f64 (neg.f64 g) h)) (*.f64 (PI.f64) #s(literal 2 binary64))) #s(literal -3 binary64))) (*.f64 (cos.f64 (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal 3 binary64))) (cos.f64 (*.f64 (PI.f64) #s(literal 2/3 binary64))))) (*.f64 (sin.f64 (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal 3 binary64))) (sin.f64 (*.f64 (PI.f64) #s(literal 2/3 binary64))))) (*.f64 #s(literal 2 binary64) (cos.f64 #s(approx (+ (/ (* 2 (PI)) 3) (/ (acos (/ (neg g) h)) 3)) (*.f64 (-.f64 (*.f64 #s(literal -2 binary64) (PI.f64)) (acos.f64 (/.f64 (neg.f64 g) h))) #s(literal -1/3 binary64))))) (*.f64 (cos.f64 (/.f64 (+.f64 (acos.f64 (/.f64 (neg.f64 g) h)) (*.f64 (PI.f64) #s(literal 2 binary64))) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (cos.f64 (/.f64 (-.f64 (*.f64 (PI.f64) #s(literal 6 binary64)) (*.f64 #s(literal -3 binary64) (acos.f64 (/.f64 (neg.f64 g) h)))) #s(literal 9 binary64)))) (*.f64 #s(literal 2 binary64) (sin.f64 (+.f64 (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal 3 binary64)) (+.f64 (*.f64 (PI.f64) #s(literal 2/3 binary64)) (/.f64 (PI.f64) #s(literal 2 binary64)))))))
((-.f64 #s(approx (+ (cos (/ (+ (acos (/ (neg g) h)) (* (PI) 2)) -3)) (* (cos (/ (acos (/ (neg g) h)) 3)) (cos (* (PI) 2/3)))) (+.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal -1/3 binary64)))) (cos.f64 (*.f64 (-.f64 (*.f64 #s(literal -2 binary64) (PI.f64)) (acos.f64 (/.f64 (neg.f64 g) h))) #s(literal -1/3 binary64))))) (*.f64 (sin.f64 (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal 3 binary64))) (sin.f64 (*.f64 (PI.f64) #s(literal 2/3 binary64))))) (*.f64 #s(literal 2 binary64) (sin.f64 #s(approx (+ (/ (acos (/ (neg g) h)) 3) (+ (* (PI) 2/3) (/ (PI) 2))) (-.f64 (*.f64 #s(literal 7/6 binary64) (PI.f64)) (*.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal -1/3 binary64)))))) (*.f64 (cos.f64 (/.f64 (+.f64 (+.f64 (acos.f64 (/.f64 (neg.f64 g) h)) (PI.f64)) (PI.f64)) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (sin.f64 (+.f64 (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal -3 binary64)) (+.f64 (*.f64 #s(literal -2/3 binary64) (PI.f64)) (/.f64 (PI.f64) #s(literal 2 binary64))))) #s(literal 2 binary64)) (-.f64 (+.f64 (cos.f64 (/.f64 (+.f64 (acos.f64 (/.f64 (neg.f64 g) h)) (*.f64 (PI.f64) #s(literal 2 binary64))) #s(literal -3 binary64))) (*.f64 (cos.f64 (/.f64 (-.f64 (PI.f64) (acos.f64 (/.f64 g h))) #s(literal 3 binary64))) (cos.f64 (*.f64 (PI.f64) #s(literal 2/3 binary64))))) (*.f64 (sin.f64 (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal 3 binary64))) (sin.f64 (*.f64 (PI.f64) #s(literal 2/3 binary64))))))
((*.f64 (sin.f64 #s(approx (+ (/ (acos (/ (neg g) h)) -3) (+ (* -2/3 (PI)) (/ (PI) 2))) (-.f64 (*.f64 #s(literal -1/6 binary64) (PI.f64)) (*.f64 #s(literal 1/3 binary64) (acos.f64 (/.f64 (neg.f64 g) h)))))) #s(literal 2 binary64)) (-.f64 #s(approx (+ (cos (/ (+ (acos (/ (neg g) h)) (* (PI) 2)) -3)) (* (cos (/ (acos (/ (neg g) h)) 3)) (cos (* (PI) 2/3)))) (+.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal -1/3 binary64)))) (cos.f64 (*.f64 (-.f64 (*.f64 #s(literal -2 binary64) (PI.f64)) (acos.f64 (/.f64 (neg.f64 g) h))) #s(literal -1/3 binary64))))) (*.f64 (sin.f64 (/.f64 (acos.f64 (/.f64 (neg.f64 g) h)) #s(literal 3 binary64))) (sin.f64 (*.f64 (*.f64 #s(literal 2/3 binary64) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64)))))))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (-.f64 (+.f64 (fabs.f64 p) (fabs.f64 r)) (sqrt.f64 (+.f64 (pow.f64 (-.f64 p r) #s(literal 2 binary64)) (*.f64 #s(literal 4 binary64) (pow.f64 q #s(literal 2 binary64))))))))
(#s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (neg.f64 q)) #s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) q) #s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 #s(literal 1/2 binary64) r)) #s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (-.f64 (*.f64 (/.f64 (+.f64 (+.f64 (fabs.f64 r) p) (fabs.f64 p)) r) #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) r)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) #s(approx (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2))))) (*.f64 (+.f64 (*.f64 (/.f64 #s(literal -2 binary64) r) (/.f64 (*.f64 q q) r)) (-.f64 (/.f64 (+.f64 (+.f64 (fabs.f64 r) p) (fabs.f64 p)) r) #s(literal 1 binary64))) r))))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) #s(approx (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2))))) #s(approx (* (+ (* (/ -2 r) (/ (* q q) r)) (- (/ (+ (+ (fabs r) p) (fabs p)) r) 1)) r) (/.f64 (-.f64 (*.f64 (+.f64 (+.f64 p (-.f64 (fabs.f64 r) r)) (fabs.f64 p)) r) (*.f64 (*.f64 q q) #s(literal 2 binary64))) r)))) #s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 #s(literal -1/2 binary64) p)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (-.f64 (+.f64 (fabs.f64 p) (fabs.f64 r)) #s(approx (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))) (*.f64 #s(literal 2 binary64) q)))) #s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (-.f64 (+.f64 (fabs.f64 r) (fabs.f64 p)) (sqrt.f64 (-.f64 (*.f64 p p) (*.f64 #s(literal -4 binary64) (*.f64 q q))))) #s(literal 1/2 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) #s(approx (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2))))) (*.f64 (-.f64 (/.f64 (+.f64 (+.f64 (fabs.f64 p) p) (fabs.f64 r)) r) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) r) q) (/.f64 q r)))) r))))
((*.f64 #s(literal 1/2 binary64) #s(approx (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2))))) #s(approx (* (+ (* (/ -2 r) (/ (* q q) r)) (- (/ (+ (+ (fabs r) p) (fabs p)) r) 1)) r) (/.f64 (-.f64 (*.f64 (+.f64 (+.f64 p (-.f64 (fabs.f64 r) r)) (fabs.f64 p)) r) (*.f64 (*.f64 q q) #s(literal 2 binary64))) r)))) #s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 #s(approx (- (* (/ (+ (+ (fabs r) p) (fabs p)) r) 1/2) 1/2) #s(literal -1/2 binary64)) r)) #s(approx (* (/ 1 2) (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (-.f64 (*.f64 (+.f64 (+.f64 (fabs.f64 p) p) (fabs.f64 r)) (/.f64 #s(literal 1/2 binary64) r)) #s(literal 1/2 binary64)) r)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) #s(approx (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2))))) (*.f64 #s(approx (+ (* (/ -2 r) (/ (* q q) r)) (- (/ (+ (+ (fabs r) p) (fabs p)) r) 1)) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) r) q) (/.f64 q r))) r))) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) #s(approx (- (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2))))) (*.f64 (/.f64 (+.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (+.f64 (fabs.f64 p) p) (fabs.f64 r)) r) #s(literal 2 binary64)) #s(literal 1 binary64)) r) (*.f64 (-.f64 (/.f64 (+.f64 (+.f64 (fabs.f64 p) p) (fabs.f64 r)) r) #s(literal -1 binary64)) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) r) q) q))) (*.f64 (-.f64 (/.f64 (+.f64 (+.f64 (fabs.f64 p) p) (fabs.f64 r)) r) #s(literal -1 binary64)) r)) r))))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (+.f64 (+.f64 (fabs.f64 p) (fabs.f64 r)) (sqrt.f64 (+.f64 (pow.f64 (-.f64 p r) #s(literal 2 binary64)) (*.f64 #s(literal 4 binary64) (pow.f64 q #s(literal 2 binary64))))))))
((*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (+.f64 (+.f64 (fabs.f64 p) (fabs.f64 r)) #s(approx (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 p r)) r)))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) q) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (+.f64 (+.f64 (fabs.f64 p) (fabs.f64 r)) #s(approx (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))) r))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (*.f64 (+.f64 (/.f64 (-.f64 (fabs.f64 r) (-.f64 p (fabs.f64 p))) r) #s(literal 1 binary64)) #s(literal 1/2 binary64)) r)) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 r r) (*.f64 #s(literal -4 binary64) (*.f64 q q)))) (+.f64 (fabs.f64 r) (fabs.f64 p))) #s(literal 1/2 binary64))))
(#s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) #s(approx (* (* (+ (/ (- (fabs r) (- p (fabs p))) r) 1) 1/2) r) (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 (+.f64 r (fabs.f64 p)) (fabs.f64 r)) p)))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 #s(literal -1/2 binary64) p)) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) #s(approx (* (* (+ (/ (- (fabs r) (- p (fabs p))) r) 1) 1/2) r) (*.f64 (+.f64 (fabs.f64 p) (-.f64 (fabs.f64 r) p)) #s(literal 1/2 binary64)))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (+.f64 #s(approx (sqrt (- (* r r) (* -4 (* q q)))) (*.f64 q #s(literal 2 binary64))) (+.f64 (fabs.f64 r) (fabs.f64 p))) #s(literal 1/2 binary64))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (+.f64 (+.f64 (fabs.f64 r) (fabs.f64 p)) (sqrt.f64 (-.f64 (*.f64 p p) (*.f64 #s(literal -4 binary64) (*.f64 q q))))) #s(literal 1/2 binary64))))
(#s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 (-.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (fabs.f64 r) (-.f64 p (fabs.f64 p))) r)) (*.f64 (/.f64 q r) (/.f64 q r)))) r)) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) (*.f64 #s(approx (+ (sqrt (- (* r r) (* -4 (* q q)))) (+ (fabs r) (fabs p))) r) #s(literal 1/2 binary64))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) #s(approx (* (* (+ (/ (- (fabs r) (- p (fabs p))) r) 1) 1/2) r) (*.f64 #s(approx (+ (fabs p) (- (fabs r) p)) (+.f64 (fabs.f64 r) (fabs.f64 p))) #s(literal 1/2 binary64)))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) #s(approx (* (+ (sqrt (- (* r r) (* -4 (* q q)))) (+ (fabs r) (fabs p))) 1/2) (+.f64 (/.f64 (*.f64 q q) r) (*.f64 (+.f64 (+.f64 r (fabs.f64 p)) (fabs.f64 r)) #s(literal 1/2 binary64))))) #s(approx (* (/ 1 2) (+ (+ (fabs p) (fabs r)) (sqrt (+ (pow (- p r) 2) (* 4 (pow q 2)))))) #s(approx (* (+ (sqrt (- (* r r) (* -4 (* q q)))) (+ (fabs r) (fabs p))) 1/2) (*.f64 (+.f64 (+.f64 (*.f64 (/.f64 (+.f64 (fabs.f64 r) (fabs.f64 p)) r) #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) (*.f64 (/.f64 q r) (/.f64 q r))) r))))
