(sqrt.f64 (-.f64 (*.f64 z0 z0) (*.f64 z1 (*.f64 z2 #s(literal 4 binary64))))) , 2433
(+.f64 (+.f64 z0 z1) (*.f64 #s(literal 2 binary64) z2)) , 2440
(*.f64 (-.f64 z0 z1) #s(literal -1/2 binary64)) , 2442
(*.f64 (/.f64 z0 z1) (/.f64 z0 z1)) , 2446
(pow.f64 (+.f64 z0 z1) #s(literal 3 binary64)) , 2462
(/.f64 z0 (+.f64 z1 z0)) , 2464
(-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal -1 binary64)) , 2465
(sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z4 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z5 (floor.f32 z3)) #s(literal 2 binary32))))) , 2478
(pow.f64 z0 #s(literal 3/2 binary64)) , 2486
(*.f64 (-.f64 (*.f64 z0 z1) (*.f64 z2 z3)) (-.f64 (*.f64 z4 z5) (*.f64 z6 z7))) , 2501
(-.f64 (exp.f64 z0) #s(literal -1 binary64)) , 2502
(-.f64 z0 #s(literal -2 binary64)) , 2504
(pow.f64 z0 #s(literal 1 binary64)) , 2523
(*.f64 #s(literal -3 binary64) z0) , 2535
(exp.f64 (/.f64 (-.f64 (+.f64 z0 z1) z2) z3)) , 2537
(*.f32 (*.f32 z0 z0) z1) , 2538
(/.f64 z0 (tan.f64 z1)) , 2539
(+.f64 (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 7 binary64)) #s(literal 1/2 binary64)) , 2544
(+.f64 (pow.f64 (sin.f64 z0) #s(literal 2 binary64)) (pow.f64 (sin.f64 z1) #s(literal 2 binary64))) , 2548
(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) z0))) , 2553
(*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) (*.f32 z1 z1)) , 2558
(-.f64 (pow.f64 (-.f64 z0 z1) #s(literal 2 binary64)) (*.f64 z0 z1)) , 2561
(sin.f64 (-.f64 z0 z1)) , 2583
(cos.f64 (+.f64 z0 z1)) , 2590
(/.f32 z0 (-.f32 #s(literal 1 binary32) z0)) , 2598
(pow.f64 z0 #s(literal -2 binary64)) , 2604
(-.f64 (sqrt.f64 (-.f64 z0 #s(literal -1 binary64))) (sqrt.f64 z0)) , 2616
(/.f64 (pow.f64 z0 #s(literal 3 binary64)) z1) , 2627
(pow.f64 (neg.f64 z0) #s(literal 3 binary64)) , 2629
(/.f64 (tan.f64 z0) z1) , 2629
(*.f64 #s(literal 841/108 binary64) z0) , 2658
(*.f64 (*.f64 z0 z1) #s(literal -12 binary64)) , 2660
(/.f64 (sin.f64 z0) #s(literal 16 binary64)) , 2663
(-.f32 z0 #s(literal -1 binary32)) , 2683
(*.f64 #s(literal -1/4 binary64) z0) , 2694
(-.f64 (*.f64 z0 z0) z1) , 2714
(-.f64 (*.f64 z0 z0) (*.f64 z1 (*.f64 z2 #s(literal 3 binary64)))) , 2721
(pow.f64 (-.f64 z0 (*.f64 #s(literal -2 binary64) z1)) #s(literal 2 binary64)) , 2736
(<.f32 (z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 z1 (floor.f32 z2)) #s(literal 2 binary32)) (pow.f32 (*.f32 z3 (floor.f32 z4)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z5 (floor.f32 z2)) #s(literal 2 binary32)) (pow.f32 (*.f32 z6 (floor.f32 z4)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 z6 z1) (*.f32 z5 z3)) (floor.f32 z4)) (floor.f32 z2)))) (floor.f32 z7)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z6) z6)))) (floor.f32 z7)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z6) z6))))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z1) (*.f32 z5 z3)) (*.f32 (floor.f32 z2) (floor.f32 z4)))))) #s(literal 1 binary32)) , 2738
(z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 z1 (floor.f32 z2)) #s(literal 2 binary32)) (pow.f32 (*.f32 z3 (floor.f32 z4)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z5 (floor.f32 z2)) #s(literal 2 binary32)) (pow.f32 (*.f32 z6 (floor.f32 z4)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 z6 z1) (*.f32 z5 z3)) (floor.f32 z4)) (floor.f32 z2)))) (floor.f32 z7)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z6) z6)))) (floor.f32 z7)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z4) #s(literal 2 binary32)) z6) z6))))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z1) (*.f32 z5 z3)) (*.f32 (floor.f32 z2) (floor.f32 z4)))))) , 2740
(neg.f64 (sin.f64 z0)) , 2754
(*.f64 (*.f64 z0 z1) #s(literal 4 binary64)) , 2755
(*.f64 (-.f64 z0 z1) (+.f64 z1 z0)) , 2756
(-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) , 2763
(pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) , 2763
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 2763
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 2763
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 2763
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64)) , 2763
(pow.f64 (-.f64 (*.f64 #s(literal 5 binary64) z0) #s(literal 11/5 binary64)) #s(literal 2 binary64)) , 2775
(+.f64 (*.f64 #s(literal 2 binary64) z0) z1) , 2792
(pow.f32 (-.f32 #s(literal 1 binary32) z0) #s(literal 2 binary32)) , 2793
(exp.f32 (*.f32 (log.f32 (*.f32 z0 (floor.f32 z1))) #s(literal 2 binary32))) , 2807
(+.f64 #s(literal 3 binary64) z0) , 2813
(*.f64 z0 (atan2.f64 z1 z2)) , 2837
(*.f32 (*.f32 z0 #s(literal 2 binary32)) (PI.f32)) , 2838
(/.f64 (+.f64 z0 z1) (-.f64 (+.f64 z0 z1) (*.f64 #s(literal -2 binary64) z2))) , 2843
(*.f64 z0 (*.f64 #s(literal 4 binary64) z1)) , 2850
(/.f64 (/.f64 z0 z1) z2) , 2856
(pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 z0 (PI.f64)))) #s(literal 2 binary64)) , 2881
(*.f64 (fabs.f64 z0) #s(literal 3275911/10000000 binary64)) , 2893
(/.f32 #s(literal -2 binary32) z0) , 2901
(/.f64 (sin.f64 z0) z1) , 2910
(*.f64 z0 (-.f64 z1 z2)) , 2915
(*.f64 z0 #s(literal -2 binary64)) , 2926
(-.f64 (*.f64 z0 z0) (*.f64 z1 z2)) , 2934
(-.f32 (*.f32 z0 z0) #s(literal 1 binary32)) , 2935
(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 z0 #s(literal 3 binary64)))) , 2945
(/.f64 (-.f64 (+.f64 z0 z1) z2) z3) , 2947
(log.f64 (sqrt.f64 (+.f64 (*.f64 z0 z0) (*.f64 z1 z1)))) , 2970
(*.f64 (*.f64 z0 z0) #s(literal -2 binary64)) , 2975
(/.f64 (+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 z0 #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) (-.f64 (*.f64 z0 #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) , 2996
(*.f64 z0 (*.f64 z1 z1)) , 3012
(*.f64 z0 (*.f64 z1 #s(literal 3 binary64))) , 3021
(asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 z0 z0) #s(literal 5 binary64))) (-.f64 (*.f64 z0 z0) #s(literal 1 binary64)))) , 3026
(-.f64 (*.f64 z0 z0) (*.f64 (*.f64 z1 #s(literal 4 binary64)) z2)) , 3036
(sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 z0 z1))) , 3053
(/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))))) , 3069
(pow.f32 z0 #s(literal 3 binary32)) , 3080
(*.f64 (PI.f64) (/.f64 z0 #s(literal 180 binary64))) , 3105
(+.f64 (/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 z0 #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) #s(literal -1453152027/1000000000 binary64)) , 3130
(*.f64 (-.f64 z0 #s(literal -1 binary64)) z0) , 3135
(*.f64 #s(literal 0 binary64) z0) , 3141
(sin.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 #s(literal -2 binary32) z0)))) , 3161
(fabs.f32 (*.f32 z0 (floor.f32 z1))) , 3192
(*.f64 (*.f64 (*.f64 (*.f64 (*.f64 z0 z0) (*.f64 z0 z0)) (*.f64 z0 z0)) (*.f64 z0 z0)) (*.f64 z0 z0)) , 3201
(sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 z0 #s(literal 3 binary64)) z1))) , 3205
(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 z0 #s(literal 3 binary64)) z1)) , 3210
(*.f32 (*.f32 (-.f32 #s(literal 1 binary32) z0) z1) z0) , 3221
(/.f64 #s(literal 1 binary64) (pow.f64 z0 #s(literal 5 binary64))) , 3223
(*.f64 z0 (+.f64 z1 z2)) , 3241
(/.f64 #s(literal 1 binary64) (*.f64 z0 z1)) , 3256
(*.f32 (z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3))))) (floor.f32 z7)) (floor.f32 z7) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3)))))) (z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3))))) (floor.f32 z7)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6)))) (floor.f32 z7)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3))))))) , 3277
(fmax.f32 #s(literal 1 binary32) (*.f32 (z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3))))) (floor.f32 z7)) (floor.f32 z7) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3)))))) (z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3))))) (floor.f32 z7)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6)))) (floor.f32 z7)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3)))))))) , 3277
(/.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 z1 z1)) , 3283
(-.f64 (+.f64 #s(literal 2 binary64) (+.f64 z0 z1)) (*.f64 #s(literal -2 binary64) z2)) , 3306
(/.f64 (/.f64 z0 z1) z1) , 3316
(/.f64 #s(literal 2/3 binary64) z0) , 3320
(-.f64 z0 #s(literal 11/40 binary64)) , 3325
(+.f64 (*.f64 z0 (+.f64 z0 z1)) (*.f64 z1 z1)) , 3350
(/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) z0))) #s(literal 2 binary64)) (*.f64 z1 z1)) , 3359
(*.f32 (log.f32 (*.f32 z0 (floor.f32 z1))) #s(literal 2 binary32)) , 3369
(-.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) z0) (-.f64 (pow.f64 z0 #s(literal -1 binary64)) #s(literal -1 binary64)))) , 3391
(/.f64 #s(literal 1061405429/1000000000 binary64) (-.f64 (*.f64 z0 #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64))) , 3400
(/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 z0)) #s(literal 1 binary64))) , 3402
(-.f64 (*.f64 (*.f64 z0 z1) z0) z2) , 3416
(sqrt.f64 (-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 3 binary64) z1) z2))) , 3429
(-.f64 z0 (*.f64 z1 z2)) , 3466
(-.f64 (*.f64 #s(literal 5 binary64) z0) #s(literal 11/5 binary64)) , 3472
(*.f64 #s(literal -4 binary64) (*.f64 z0 z0)) , 3495
(pow.f64 (/.f64 z0 z1) #s(literal 3 binary64)) , 3499
(*.f32 (-.f32 #s(literal 1 binary32) z0) z1) , 3514
(*.f64 (*.f64 z0 z1) z1) , 3521
(asin.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 2 binary64)))) , 3521
(fabs.f32 (*.f32 (floor.f32 z0) (floor.f32 z1))) , 3544
(sqrt.f64 (-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 4 binary64) z1) z2))) , 3555
(fabs.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3))) , 3561
(cos.f32 (*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 #s(literal -2 binary32) z0)))) , 3578
(/.f64 (sin.f64 z0) (cos.f64 z0)) , 3648
(-.f64 z0 #s(literal 11/20 binary64)) , 3661
(/.f32 #s(literal 1 binary32) z0) , 3706
(asin.f64 (-.f64 #s(literal 1 binary64) z0)) , 3713
(*.f32 (-.f32 (*.f32 #s(literal 2 binary32) z0) #s(literal -1/2 binary32)) (PI.f32)) , 3739
(*.f64 z0 (+.f64 z0 z1)) , 3756
(*.f64 z0 (/.f64 z1 z2)) , 3764
(*.f64 z0 (sin.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) , 3790
(pow.f64 (*.f64 z0 (sin.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) , 3790
(*.f64 z0 #s(literal 1/2 binary64)) , 3798
(*.f64 (-.f64 z0 z1) z0) , 3801
(/.f64 (/.f64 #s(literal 2 binary64) z0) (-.f64 (pow.f64 z0 #s(literal -1 binary64)) #s(literal -1 binary64))) , 3823
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 3 binary64)) , 3862
(/.f64 #s(literal 7713234287776531/10000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 3 binary64))) , 3862
(sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 2 binary64))) , 3896
(-.f64 #s(literal 1 binary64) (/.f64 z0 z1)) , 3915
(pow.f64 #s(literal 1/2 binary64) z0) , 3916
(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 z0 z0) #s(literal 5 binary64))) (-.f64 (*.f64 z0 z0) #s(literal 1 binary64))) , 3917
(*.f64 z0 (cos.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) , 3940
(pow.f64 (*.f64 z0 (cos.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) , 3940
(pow.f32 z0 #s(literal 4 binary32)) , 3941
(pow.f64 (exp.f64 z0) z0) , 3955
(neg.f64 (+.f64 z0 z1)) , 3968
(+.f32 (*.f32 z0 #s(literal 2 binary32)) #s(literal 1/2 binary32)) , 3990
(*.f32 (+.f32 (*.f32 z0 #s(literal 2 binary32)) #s(literal 1/2 binary32)) (PI.f32)) , 3990
(*.f64 z0 (-.f64 (*.f64 z1 z2) (*.f64 z3 z4))) , 3991
(*.f64 #s(literal 2 binary64) (*.f64 z0 z0)) , 4030
(>=.f64 z0 #s(literal 0 binary64)) , 4037
(sin.f64 (*.f64 #s(literal 1/2 binary64) z0)) , 4045
(/.f64 #s(literal 1 binary64) (pow.f64 z0 #s(literal 3 binary64))) , 4052
(*.f64 (fabs.f64 z0) (fabs.f64 z0)) , 4098
(/.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 2 binary64)) , 4102
(*.f64 (+.f64 z0 z1) z1) , 4118
(sqrt.f64 (*.f64 z0 z1)) , 4214
(-.f64 #s(literal 1 binary64) (*.f64 (*.f64 z0 z0) #s(literal 5 binary64))) , 4217
(*.f64 (/.f64 z0 z1) z0) , 4232
(/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64)))) #s(literal 2 binary64)) (*.f64 z1 z1)) , 4236
(-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 3 binary64) z1) z2)) , 4242
(cos.f64 (*.f64 #s(literal -1/2 binary64) z0)) , 4248
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 4 binary64)) , 4262
(/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 4 binary64))) , 4262
(cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 z0 (PI.f64)))) , 4275
(*.f64 #s(literal -1/180 binary64) (*.f64 z0 (PI.f64))) , 4286
(-.f64 (pow.f64 z0 #s(literal -1 binary64)) #s(literal -1 binary64)) , 4321
(*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) z0) , 4326
(*.f64 z0 (+.f64 z1 z0)) , 4343
(*.f64 (*.f64 z0 z0) #s(literal 5 binary64)) , 4347
(<.f32 (z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z3) z6)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z1) z5))))) (floor.f32 z7)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6))))) (floor.f32 z7)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z3) z6)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z1) z5)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6))))))) #s(literal 1 binary32)) , 4357
(-.f64 (+.f64 z0 z1) z2) , 4363
(*.f64 z0 (cos.f64 z1)) , 4368
(*.f64 (*.f64 z0 #s(literal 4 binary64)) z1) , 4383
(+.f64 (exp.f64 (neg.f64 z0)) #s(literal 1 binary64)) , 4388
(*.f64 z0 (sin.f64 z1)) , 4409
(/.f64 (*.f64 z0 z0) (*.f64 z1 z1)) , 4422
(pow.f64 (log.f64 z0) #s(literal 2 binary64)) , 4427
(/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 7 binary64))) , 4435
(+.f64 z0 #s(literal 1 binary64)) , 4450
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 5 binary64)) , 4455
(/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 5 binary64))) , 4455
(*.f32 z0 (PI.f32)) , 4472
(*.f64 (cos.f64 (-.f64 z0 z1)) (cos.f64 z2)) , 4512
(*.f64 z0 (neg.f64 z1)) , 4548
(-.f64 (+.f64 z0 z1) (*.f64 #s(literal -2 binary64) z2)) , 4572
(*.f64 (-.f64 z0 z1) z1) , 4596
(*.f64 #s(literal 1/6 binary64) z0) , 4621
(+.f64 (pow.f64 z0 #s(literal 3 binary64)) (pow.f64 z1 #s(literal 3 binary64))) , 4648
(-.f64 (+.f64 #s(literal 2 binary64) z0) (*.f64 #s(literal -2 binary64) z1)) , 4657
(*.f64 (+.f64 z0 z1) z0) , 4659
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 6 binary64)) , 4660
(/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 6 binary64))) , 4660
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 8 binary64)) , 4660
(/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 8 binary64))) , 4660
(-.f64 #s(literal 1 binary64) (*.f64 z0 z0)) , 4675
(*.f64 (pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64))) #s(literal 2 binary64)) (*.f64 z1 z1)) , 4795
(neg.f64 (-.f64 z0 z1)) , 4816
(-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 4 binary64) z1) z2)) , 4831
(>.f32 (/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z4 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z5 (floor.f32 z3)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 z5 z0) (*.f32 z4 z2)) (floor.f32 z3)) (floor.f32 z1)))) (floor.f32 z6)) , 4835
(sqrt.f64 (+.f64 #s(literal 1 binary64) z0)) , 4855
(-.f64 (*.f64 (pow.f64 z0 #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 z1 #s(literal 4 binary64))) , 4872
(log.f32 (*.f32 z0 (floor.f32 z1))) , 4875
(*.f64 (*.f64 z0 z1) z0) , 4942
(/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z0))) , 4960
(/.f64 z0 (pow.f64 z1 #s(literal 3 binary64))) , 5001
(*.f64 (*.f64 z0 z0) (pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z1 (PI.f64)))) #s(literal 2 binary64))) , 5019
(-.f32 (*.f32 #s(literal 2 binary32) z0) #s(literal -1/2 binary32)) , 5045
(sin.f64 (*.f64 (PI.f64) z0)) , 5048
(*.f64 (*.f64 z0 z0) (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z1 (PI.f64)))) #s(literal 2 binary64))) , 5152
(*.f64 (+.f64 (/.f64 #s(literal 63/20 binary64) z0) #s(literal 10 binary64)) z0) , 5279
(*.f64 (pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) z0))) #s(literal 2 binary64)) (*.f64 z1 z1)) , 5333
(+.f64 (/.f64 #s(literal 63/20 binary64) z0) #s(literal 10 binary64)) , 5337
(-.f64 (*.f64 z0 z0) (*.f64 z1 (*.f64 z2 #s(literal 4 binary64)))) , 5358
(/.f64 #s(literal 63/20 binary64) z0) , 5453
(sin.f64 (/.f64 (-.f64 z0 z1) #s(literal 2 binary64))) , 5493
(/.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64)))) #s(literal 2 binary64)) (*.f64 z1 z1)) , 5517
(*.f64 (pow.f64 z0 #s(literal 4 binary64)) #s(literal 9 binary64)) , 5565
(*.f32 (neg.f32 z0) (floor.f32 z1)) , 5596
(*.f64 (*.f64 #s(literal 3 binary64) z0) z1) , 5599
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) , 5709
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 5709
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 5709
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64)) , 5709
(log.f64 (neg.f64 z0)) , 5759
(/.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z4 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z5 (floor.f32 z3)) #s(literal 2 binary32)))) (fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 z5 z0) (*.f32 z4 z2)) (floor.f32 z3)) (floor.f32 z1)))) , 5800
(pow.f32 (*.f32 (floor.f32 z0) z1) #s(literal 2 binary32)) , 5873
(*.f64 z0 (*.f64 z1 #s(literal 4 binary64))) , 5894
(/.f64 z0 (-.f64 z1 z2)) , 5936
(*.f64 (+.f64 z0 z1) (-.f64 z1 z0)) , 5943
(*.f64 (*.f64 z0 z0) (*.f64 z1 z1)) , 6003
(/.f64 z0 #s(literal 2 binary64)) , 6017
(+.f64 z0 (*.f64 z1 z2)) , 6066
(*.f64 (*.f64 (*.f64 (*.f64 z0 z0) (*.f64 z0 z0)) (*.f64 z0 z0)) (*.f64 z0 z0)) , 6089
(-.f64 (*.f64 z0 z0) #s(literal -1 binary64)) , 6211
(cos.f64 (*.f64 (/.f64 z0 #s(literal 180 binary64)) (PI.f64))) , 6236
(+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) , 6281
(+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 6281
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 6281
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 6281
(+.f64 (*.f64 z0 (-.f64 z0 z1)) (*.f64 z1 z1)) , 6349
(*.f64 (pow.f64 z0 #s(literal 3 binary64)) z1) , 6364
(*.f64 (/.f64 z0 z1) z2) , 6364
(+.f64 #s(literal 2 binary64) (+.f64 z0 z1)) , 6383
(sin.f64 (*.f64 (/.f64 z0 #s(literal 180 binary64)) (PI.f64))) , 6704
(*.f64 (*.f64 #s(literal 3 binary64) z0) z0) , 6712
(/.f64 (-.f64 z0 z1) #s(literal 2 binary64)) , 6727
(z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z3) z6)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z1) z5))))) (floor.f32 z7)) (floor.f32 z7) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z3) z6)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z1) z5)))))) , 6757
(/.f64 #s(literal 1/2 binary64) z0) , 6793
(pow.f64 z0 #s(literal 8 binary64)) , 6798
(*.f32 (*.f32 (*.f32 z0 (floor.f32 z1)) z2) (floor.f32 z3)) , 6860
(sqrt.f64 (/.f64 #s(literal 1 binary64) z0)) , 6902
(-.f64 (*.f64 #s(literal 3275911/10000000 binary64) z0) #s(literal -1 binary64)) , 6918
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 7 binary64)) , 6979
(sqrt.f64 (+.f64 (*.f64 z0 z0) (*.f64 z1 z1))) , 7030
(z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z3) z6)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z1) z5))))) (floor.f32 z7)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6))))) (floor.f32 z7)) (/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z3) z6)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z1) z5)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z1) z2) (*.f32 (floor.f32 z1) z2)) (*.f32 (*.f32 (floor.f32 z3) z4) (*.f32 (floor.f32 z3) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z1) z5) (*.f32 (floor.f32 z1) z5)) (*.f32 (*.f32 (floor.f32 z3) z6) (*.f32 (floor.f32 z3) z6))))))) , 7075
(*.f64 (+.f64 z0 z1) z2) , 7093
(/.f64 (-.f64 z0 z1) z2) , 7099
(*.f64 z0 (-.f64 z0 z1)) , 7108
(/.f64 z0 (*.f64 z1 z1)) , 7192
(-.f64 (*.f64 z0 z0) #s(literal 1 binary64)) , 7254
(*.f64 #s(literal 3275911/10000000 binary64) z0) , 7267
(*.f32 (PI.f32) (-.f32 #s(literal 1/2 binary32) (*.f32 #s(literal -2 binary32) z0))) , 7279
(+.f64 (*.f64 z0 z0) #s(literal 1 binary64)) , 7360
(pow.f64 z0 #s(literal 2 binary64)) , 7400
(-.f64 z0 #s(literal 1/2 binary64)) , 7503
(*.f32 (*.f32 z0 (floor.f32 z1)) z2) , 7557
(*.f64 #s(literal -2 binary64) (*.f64 z0 z0)) , 7588
(*.f64 #s(literal -10 binary64) z0) , 7592
(-.f32 #s(literal 1/2 binary32) (*.f32 #s(literal -2 binary32) z0)) , 7691
(*.f64 (*.f64 z0 z1) z2) , 7718
(z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3))))) (floor.f32 z7)) (floor.f32 z7) (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3)))))) , 7737
(pow.f64 (+.f64 z0 z1) #s(literal 2 binary64)) , 7777
(*.f64 (sin.f64 z0) (sin.f64 z1)) , 7822
(/.f64 #s(literal 2 binary64) z0) , 7828
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 7893
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 7893
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 7893
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64)) , 7893
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) , 7954
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 7954
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 7954
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64)) , 7954
(*.f32 (PI.f32) z0) , 8096
(/.f64 #s(literal 1 binary64) (fabs.f64 z0)) , 8166
(*.f32 z0 #s(literal 2 binary32)) , 8300
(+.f64 (*.f64 z0 z1) z2) , 8311
(*.f64 (cos.f64 z0) (cos.f64 z1)) , 8328
(*.f64 z0 #s(literal 3 binary64)) , 8388
(fabs.f32 (*.f32 (*.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) (floor.f32 z4)) (floor.f32 z5))) , 8443
(*.f32 (*.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) (floor.f32 z4)) (floor.f32 z5)) , 8444
(*.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) (floor.f32 z4)) , 8488
(*.f32 #s(literal -2 binary32) z0) , 8543
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 8570
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 8570
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) , 8570
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 8570
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 8574
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 8574
(fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) , 8574
(fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 57/10 binary64))) , 8574
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 8574
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64))) , 8574
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 57/10 binary64))) (-.f64 #s(literal 26/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64))) , 8574
(fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) , 8574
(z0 (>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3))))) (floor.f32 z7)) (/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6)))) (floor.f32 z7)) (*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z2) z2) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z4) z4)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z1) #s(literal 2 binary32)) z5) z5) (*.f32 (*.f32 (pow.f32 (floor.f32 z3) #s(literal 2 binary32)) z6) z6))))) (fabs.f32 (*.f32 (-.f32 (*.f32 z6 z2) (*.f32 z5 z4)) (*.f32 (floor.f32 z1) (floor.f32 z3)))))) , 8584
(/.f64 (*.f64 z0 z1) z2) , 8647
(*.f64 (-.f64 (*.f64 z0 z1) (*.f64 z2 z3)) z4) , 8666
(*.f32 #s(literal 2 binary32) z0) , 8736
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) , 8782
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 8782
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 8782
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) , 8782
(*.f64 (*.f64 #s(literal 4 binary64) z0) z1) , 8809
(-.f64 (pow.f64 z0 #s(literal 3 binary64)) (pow.f64 z1 #s(literal 3 binary64))) , 8843
(/.f32 (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z3)) (*.f32 (*.f32 (floor.f32 z2) z4) (*.f32 (floor.f32 z0) z5)))) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z4) (*.f32 (floor.f32 z2) z4))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z5) (*.f32 (floor.f32 z0) z5)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3)))))) , 8887
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 8986
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 8986
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 8990
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 8990
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) , 8990
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) , 8990
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 8990
(neg.f64 (log.f64 z0)) , 9101
(*.f64 (*.f64 (*.f64 z0 z0) (*.f64 z0 z0)) (*.f64 z0 z0)) , 9101
(+.f64 (*.f64 z0 z1) (*.f64 z2 z3)) , 9104
(+.f64 #s(literal 2 binary64) z0) , 9159
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9194
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9194
(fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9198
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9198
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) , 9198
(fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) , 9198
(fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9198
(*.f64 #s(literal 5 binary64) z0) , 9310
(neg.f64 (neg.f64 z0)) , 9336
(*.f64 (cos.f64 z0) (sin.f64 z1)) , 9394
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9402
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9402
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 9402
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9402
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9406
(fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 9406
(fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) , 9406
(fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9406
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9406
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9406
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9406
(*.f64 (atan2.f64 z0 z1) z2) , 9441
(pow.f64 (/.f64 z0 z1) #s(literal 2 binary64)) , 9603
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64) , 9610
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) , 9610
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) , 9610
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9610
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 57/10 binary64)) , 9614
(-.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(+.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 27/2 binary64)) , 9614
(neg.f64 (+.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 27/2 binary64))) , 9614
(fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 21/2 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 13/2 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) , 9614
(-.f64 (*.f64 z0 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) , 9614
(fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/5 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) , 9614
(fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 29/5 binary64))) , 9614
(fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) , 9614
(+.f64 (*.f64 z0 #s(literal 8 binary64)) (*.f64 z1 #s(literal 10 binary64))) , 9614
(-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z0 #s(literal 8 binary64)) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64)))))) , 9614
(fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) , 9614
(fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) , 9614
(fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64)))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) , 9614
(-.f64 #s(literal 11/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/2 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z2 #s(literal 8 binary64)) (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 5 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 15/2 binary64) (+.f64 (*.f64 z2 #s(literal 8 binary64)) (*.f64 z0 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 31/5 binary64))) (neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 67/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64)))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 15/2 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (-.f64 #s(literal 11/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 13/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 34/5 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 13/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 34/5 binary64))) (-.f64 #s(literal 57/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 13/2 binary64))) , 9614
(+.f64 #s(literal 43/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 36/5 binary64)) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 36/5 binary64))) , 9614
(-.f64 #s(literal 53/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 13/2 binary64))) (neg.f64 (+.f64 #s(literal 43/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 36/5 binary64))) (-.f64 #s(literal 53/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 #s(literal 13/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(+.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) , 9614
(+.f64 (+.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 z1 #s(literal 98503/10000 binary64))) , 9614
(+.f64 #s(literal 397829/50000 binary64) (*.f64 z0 #s(literal 98503/10000 binary64))) , 9614
(-.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 z1 #s(literal 98503/10000 binary64)))) , 9614
(fmax.f64 (+.f64 (+.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 z1 #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 z1 #s(literal 98503/10000 binary64))))) , 9614
(+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) (*.f64 z1 #s(literal 122859/12500 binary64))) , 9614
(-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) (*.f64 z1 #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64)) , 9614
(fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 z1 #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 z1 #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) (*.f64 z2 #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) , 9614
(+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) , 9614
(-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 z1 #s(literal 122859/12500 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 z1 #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 z1 #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) (*.f64 z2 #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 z2 #s(literal 122859/12500 binary64)))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 39/10 binary64)) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 z1 #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 z1 #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) (*.f64 z2 #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 z2 #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 39/10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (+.f64 (+.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) #s(literal 543983/100000 binary64)) (*.f64 z1 #s(literal 98503/10000 binary64))) (-.f64 (*.f64 z0 #s(literal 8619/5000 binary64)) (+.f64 #s(literal 397829/50000 binary64) (*.f64 z1 #s(literal 98503/10000 binary64))))) (-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) (*.f64 z2 #s(literal 122859/12500 binary64))) #s(literal 374413/50000 binary64))) (-.f64 (+.f64 (*.f64 z0 #s(literal 184289/100000 binary64)) #s(literal 95953/20000 binary64)) (*.f64 z2 #s(literal 122859/12500 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 39/10 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(-.f64 #s(literal 29/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) (-.f64 #s(literal 29/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 9614
(-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 34/5 binary64)) (-.f64 #s(literal 57/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (-.f64 #s(literal 13/10 binary64) (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))))) (-.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) , 9614
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 9614
(-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(-.f64 #s(literal 27/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))) , 9614
(neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) , 9614
(fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))) , 9614
(fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) , 9614
(+.f64 #s(literal 93/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))) , 9614
(+.f64 #s(literal 69/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z1 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z1 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z1 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z1 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) , 9614
(fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) , 9614
(neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 16/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 7 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64)) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) , 9614
(-.f64 #s(literal 2081/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 3 binary64)) , 9614
(-.f64 #s(literal 563/250 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 2423/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 4 binary64)) , 9614
(-.f64 #s(literal 1297/500 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9/2 binary64)) , 9614
(-.f64 #s(literal 553/200 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 367/125 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 14/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 27/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))))) (neg.f64 (fmin.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))))) (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 93/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmax.f64 (neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) (-.f64 (*.f64 z0 #s(literal 30 binary64)) (+.f64 #s(literal 69/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/5 binary64)) (neg.f64 (+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (+.f64 #s(literal 16/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 #s(literal 7 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 9 binary64)))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3 binary64) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 #s(literal 371/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 271/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 713/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 221/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64))) (-.f64 #s(literal 211/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 613/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (*.f64 z1 #s(literal 10 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1397/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 196/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64)) (-.f64 #s(literal 1739/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 191/100 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5/2 binary64)) (-.f64 #s(literal 2081/1000 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 563/250 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 #s(literal 2423/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 4 binary64)) (-.f64 #s(literal 1297/500 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9/2 binary64)) (-.f64 #s(literal 553/200 binary64) (*.f64 z0 #s(literal 10 binary64))))) (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64)) (-.f64 #s(literal 367/125 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 3107/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 3107/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 11/2 binary64))) , 9614
(-.f64 #s(literal 1639/500 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 1639/500 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 6 binary64))) , 9614
(-.f64 #s(literal 3449/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (-.f64 #s(literal 3449/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 13/2 binary64))) , 9614
(+.f64 #s(literal 46/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(+.f64 #s(literal 13/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (+.f64 #s(literal 46/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 13/20 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 87/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(+.f64 #s(literal 479/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (+.f64 #s(literal 87/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 479/1000 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 41/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(+.f64 #s(literal 77/250 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (+.f64 #s(literal 41/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 77/250 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 77/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(+.f64 #s(literal 137/1000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (+.f64 #s(literal 77/10 binary64) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 137/1000 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(-.f64 #s(literal 339999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (+.f64 #s(literal 36/5 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 #s(literal 339999/10000000 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 9614
(fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 37/5 binary64))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 37/5 binary64))) (-.f64 #s(literal 13/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) , 9614
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9614
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 37/5 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 9614
(+.f64 #s(literal 71/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 71/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 13/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (+.f64 #s(literal 6 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 8/5 binary64)) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 8/5 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 8/5 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) , 9614
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) , 9614
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 27/5 binary64)) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/5 binary64))) , 9614
(-.f64 #s(literal 43/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 27/5 binary64))) (-.f64 #s(literal 43/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 13/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64)) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)))))))) , 9614
(fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64))))))) , 9614
(fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) , 9614
(+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64)) , 9614
(neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/5 binary64)) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 18/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 1/2 binary64))) , 9614
(+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64)) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 12/5 binary64))) , 9614
(-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64)) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 67/20 binary64))) , 9614
(-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64)) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 43/10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 22/5 binary64)) , 9614
(+.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64)) , 9614
(neg.f64 (+.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) , 9614
(pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 9614
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 9614
(+.f64 #s(literal 7 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 11/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 9614
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 9614
(neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 9614
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)) , 9614
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64))) , 9614
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) , 9614
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 9614
(neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) , 9614
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 7 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 23/10 binary64)) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) , 9614
(-.f64 #s(literal 23/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 16/5 binary64)) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) , 9614
(-.f64 #s(literal 29/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 9614
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 9614
(neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 9614
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 9614
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1 binary64)) , 9615
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9646
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 9659
(*.f64 (log.f64 z0) z1) , 9698
(-.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64))) , 9710
(*.f64 #s(literal -4 binary64) z0) , 9736
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) , 9838
(*.f64 (-.f64 z0 z1) z2) , 9973
(*.f64 (+.f64 z0 z1) (-.f64 z0 z1)) , 10109
(log.f64 (/.f64 #s(literal -1 binary64) z0)) , 10285
(pow.f64 z0 #s(literal -1 binary64)) , 10336
(sqrt.f64 (-.f64 z0 #s(literal -1 binary64))) , 10385
(/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5))))) (floor.f32 z6)) , 10415
(*.f64 (sin.f64 z0) z1) , 10429
(cos.f64 (-.f64 z0 z1)) , 10476
(*.f64 z0 #s(literal 2 binary64)) , 10484
(*.f64 (sin.f64 z0) (cos.f64 z1)) , 10492
(sqrt.f64 (/.f64 z0 z1)) , 10516
(*.f64 #s(literal 10 binary64) z0) , 10595
(/.f64 (*.f64 z0 z0) z1) , 10663
(+.f64 (+.f64 z0 z1) z2) , 10732
(pow.f64 (-.f64 z0 z1) #s(literal 2 binary64)) , 10826
(+.f64 (pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 10855
(*.f64 (cos.f64 z0) z1) , 10912
(pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64))) #s(literal 2 binary64)) , 10937
(-.f64 z0 (*.f64 #s(literal -2 binary64) z1)) , 10966
(exp.f64 (neg.f64 z0)) , 11222
(pow.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) , 11246
(pow.f64 (cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) z0))) #s(literal 2 binary64)) , 11462
(pow.f64 (*.f64 z0 z1) #s(literal 3 binary64)) , 11647
(sin.f64 (*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64))) , 12231
(cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) z0))) , 12388
(pow.f64 (cos.f64 z0) #s(literal 2 binary64)) , 12449
(*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) z0)) , 12592
(pow.f64 z0 #s(literal 5 binary64)) , 12634
(*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64)) , 12687
(*.f64 z0 #s(literal 4 binary64)) , 12795
(*.f64 (neg.f64 z0) z0) , 12811
(pow.f64 (cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64)))) #s(literal 2 binary64)) , 12861
(/.f64 #s(literal -1 binary64) z0) , 13126
(*.f64 #s(literal -1/2 binary64) z0) , 13283
(*.f64 (/.f64 z0 #s(literal 180 binary64)) (PI.f64)) , 13318
(/.f64 (neg.f64 z0) z1) , 13441
(fmax.f32 (+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z4 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z5 (floor.f32 z3)) #s(literal 2 binary32)))) , 13531
(*.f64 (*.f64 z0 z0) (*.f64 z0 z0)) , 13575
(cos.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64)))) , 13710
(*.f64 (neg.f64 z0) z1) , 13923
(+.f64 #s(literal 1 binary64) z0) , 14917
(-.f64 (*.f64 z0 #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)) , 15045
(-.f64 z0 #s(literal 1 binary64)) , 15219
(*.f64 z0 #s(literal 3275911/10000000 binary64)) , 15488
(pow.f64 (sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64)))) #s(literal 2 binary64)) , 15744
(*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))))) (fabs.f32 (*.f32 (-.f32 (*.f32 z5 z1) (*.f32 z4 z3)) (*.f32 (floor.f32 z0) (floor.f32 z2))))) , 16013
(sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))))) , 16033
(/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5)))) , 16036
(*.f64 #s(literal 4 binary64) z0) , 16260
(/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5)))) (floor.f32 z6)) , 16721
(sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5)))) , 16745
(/.f64 z0 #s(literal 180 binary64)) , 16853
(+.f64 (*.f64 z0 z0) (*.f64 z1 z1)) , 17244
(*.f64 #s(literal 1/2 binary64) z0) , 17535
(sin.f64 (*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64)))) , 17930
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 18396
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 18396
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 18812
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 18812
(fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 18812
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 18812
(fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) , 18812
(-.f64 (*.f64 z0 #s(literal 10 binary64))) , 19004
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) , 19004
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) , 19004
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 19004
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 19004
(-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 19228
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) , 19228
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 19228
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 19228
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 19228
(-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) , 19228
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) , 19228
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 19228
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 19228
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 19228
(pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 19228
(+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 19228
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 19228
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 19228
(+.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 19228
(-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(+.f64 #s(literal 61/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 19228
(*.f64 z0 #s(literal 8 binary64)) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/5 binary64)) , 19228
(neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 19228
(+.f64 #s(literal 23/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 19228
(-.f64 #s(literal 67/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(+.f64 #s(literal 27/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 34/5 binary64)) , 19228
(-.f64 #s(literal 57/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) , 19228
(*.f64 z0 #s(literal 8619/5000 binary64)) , 19228
(*.f64 z0 #s(literal 98503/10000 binary64)) , 19228
(*.f64 z0 #s(literal 184289/100000 binary64)) , 19228
(*.f64 z0 #s(literal 122859/12500 binary64)) , 19228
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64)) , 19228
(+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(+.f64 #s(literal 36/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64)) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 3/2 binary64)) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 5 binary64)) , 19228
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 37/5 binary64)) , 19228
(+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(-.f64 #s(literal 2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) , 19228
(+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19228
(neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 19228
(*.f64 (*.f64 z0 z0) z1) , 19271
(-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 19676
(>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z5)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z0) z4))))) (floor.f32 z6)) , 20122
(pow.f64 (sin.f64 z0) #s(literal 2 binary64)) , 20182
(/.f64 #s(literal 1 binary64) z0) , 21363
(-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) , 21556
(pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) , 21556
(pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 22057
(+.f64 #s(literal 11/4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 22078
(*.f64 #s(literal 3 binary64) z0) , 23407
(sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5))))) , 23791
(-.f32 #s(literal 1 binary32) z0) , 24351
(>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))) (fabs.f32 (*.f32 (-.f32 (*.f32 z5 z1) (*.f32 z4 z3)) (*.f32 (floor.f32 z0) (floor.f32 z2))))) (floor.f32 z6)) , 24441
(-.f64 (*.f64 z0 z1) (*.f64 z2 z3)) , 24492
(*.f64 z0 #s(literal 5 binary64)) , 25027
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 97/20 binary64)) , 25095
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) , 25095
(+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 25330
(pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 25330
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) , 25509
(pow.f64 (*.f64 z0 z1) #s(literal 2 binary64)) , 26286
(pow.f64 z0 #s(literal 6 binary64)) , 26393
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/20 binary64)) , 27398
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) , 27398
(neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 28218
(/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z5)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z0) z4))))) , 28632
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64)) , 28842
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 5/2 binary64)) , 28842
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) , 28842
(neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 28842
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 15/2 binary64)) , 28842
(pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 28842
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/10 binary64)) , 28842
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)) , 28842
(+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64))) , 28842
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) , 28842
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) , 28842
(-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 28842
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 28842
(-.f64 #s(literal 24/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 28842
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 28842
(*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64))) , 31699
(+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) , 32066
(-.f64 z0 #s(literal -1 binary64)) , 34336
(/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))) (fabs.f32 (*.f32 (-.f32 (*.f32 z5 z1) (*.f32 z4 z3)) (*.f32 (floor.f32 z0) (floor.f32 z2))))) , 35369
(-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) , 36132
(fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 37624
(*.f64 #s(literal -2 binary64) z0) , 37660
(*.f64 z0 #s(literal 10 binary64)) , 38232
(-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) , 38456
(+.f64 #s(literal 17/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(-.f64 #s(literal 13/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) , 38456
(-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64))) , 38456
(neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) , 38456
(+.f64 #s(literal 13/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(+.f64 #s(literal 37/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 38456
(neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 38456
(*.f64 z0 (PI.f64)) , 38977
(-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z3)) (*.f32 (*.f32 (floor.f32 z2) z4) (*.f32 (floor.f32 z0) z5))) , 39768
(fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z3)) (*.f32 (*.f32 (floor.f32 z2) z4) (*.f32 (floor.f32 z0) z5)))) , 39768
(*.f64 (PI.f64) z0) , 41025
(*.f64 z0 #s(literal 30 binary64)) , 43435
(*.f64 #s(literal 2 binary64) z0) , 44654
(-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 48070
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) , 48070
(*.f32 z0 z0) , 51064
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) , 54351
(+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64))) , 57060
(fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))) , 57111
(-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 57684
(neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 57684
(fabs.f32 (*.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) (*.f32 (floor.f32 z4) (floor.f32 z5)))) , 62025
(*.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) (*.f32 (floor.f32 z4) (floor.f32 z5))) , 62073
(*.f32 (floor.f32 z0) (floor.f32 z1)) , 65843
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) , 67298
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) , 67298
(+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 67298
(+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) , 67298
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64)) , 67300
(fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))) , 69837
(-.f64 #s(literal 1 binary64) z0) , 69887
(pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) , 73433
(-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) , 74243
(*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z3)) , 82326
(pow.f64 z0 #s(literal 4 binary64)) , 89622
(*.f32 z0 (floor.f32 z1)) , 98496
(pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 99754
(+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 99901
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) , 105754
(-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 105754
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 105754
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 105754
(pow.f64 z0 #s(literal 3 binary64)) , 107218
(pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 115368
(+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) , 126016
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) , 134596
(+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) , 152173
(+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 153824
(+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) , 240351
(*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) , 262918
(neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 291586
(+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 310814
(*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) , 318963
(*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) , 319121
(pow.f32 (floor.f32 z0) #s(literal 2 binary32)) , 325216
(*.f64 z0 z0) , 592942
(*.f32 (floor.f32 z0) z1) , 707483
(*.f64 z0 #s(literal 10 binary64)) , 3846420