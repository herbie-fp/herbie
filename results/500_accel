(*.f64 z0 #s(literal 10 binary64)) , 6505
(*.f64 z0 z0) , 2469
(*.f32 (floor.f32 z0) z1) , 1360
(+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 528
(neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 496
(*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) , 456
(+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) , 400
(-.f64 #s(literal 1 binary64) z0) , 365
(*.f32 z0 (floor.f32 z1)) , 348
(*.f64 #s(literal 2 binary64) z0) , 336
(pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) , 297
(pow.f32 (floor.f32 z0) #s(literal 2 binary32)) , 297
(*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) , 293
(*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) , 293
(+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 256
(pow.f32 (*.f32 (floor.f32 z0) z1) #s(literal 2 binary32)) , 230
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) , 224
(-.f64 z0 #s(literal -1 binary64)) , 217
(+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) , 212
(pow.f64 z0 #s(literal 4 binary64)) , 207
(*.f32 z0 z0) , 193
(pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 192
(/.f64 #s(literal 1 binary64) z0) , 192
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 176
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 176
(-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 176
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) , 176
(pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 163
(+.f64 #s(literal 63/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 163
(*.f64 z0 #s(literal 30 binary64)) , 154
(+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) , 144
(-.f32 #s(literal 1 binary32) z0) , 132
(-.f64 z0 #s(literal 1 binary64)) , 129
(+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) , 128
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) , 128
(*.f64 #s(literal 1/2 binary64) z0) , 126
(*.f64 (PI.f64) z0) , 122
(pow.f64 z0 #s(literal 3 binary64)) , 121
(*.f64 #s(literal 3 binary64) z0) , 120
(-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) , 117
(/.f64 z0 #s(literal 180 binary64)) , 114
(neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 112
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64)) , 112
(+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 112
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) , 112
(+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) , 110
(*.f64 (*.f64 z0 z0) z1) , 109
(+.f64 #s(literal 1 binary64) z0) , 106
(-.f32 (pow.f32 (*.f32 (floor.f32 z0) z1) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 z2) z3) #s(literal 2 binary32))) , 102
(/.f64 (neg.f64 z0) z1) , 101
(-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) , 100
(*.f32 (floor.f32 z0) (floor.f32 z1)) , 98
(*.f64 #s(literal 4 binary64) z0) , 97
(-.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 96
(+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64))) , 96
(*.f64 z0 #s(literal 2 binary64)) , 94
(+.f64 z0 #s(literal 1 binary64)) , 92
(*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z3)) , 91
(+.f64 (*.f64 z0 z0) (*.f64 z1 z1)) , 91
(*.f64 (neg.f64 z0) z1) , 90
(fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))) , 84
(-.f64 (*.f64 z0 z1) (*.f64 z2 z3)) , 84
(+.f64 z0 z0) , 82
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) , 80
(-.f64 #s(literal 5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 80
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) , 80
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) , 78
(*.f64 z0 #s(literal 3 binary64)) , 76
(/.f64 (*.f64 z0 z1) z2) , 75
(*.f64 (/.f64 z0 #s(literal 180 binary64)) (PI.f64)) , 73
(/.f64 (*.f64 z0 z0) z1) , 72
(*.f64 #s(literal -2 binary64) z0) , 72
(*.f64 (*.f64 #s(literal 4 binary64) z0) z1) , 71
(*.f64 z0-scale z0-scale) , 70
(fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))) , 69
(fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 64
(neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 64
(+.f64 #s(literal 37/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(+.f64 #s(literal 13/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(neg.f64 (fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)))) , 64
(fmin.f64 (-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64))) , 64
(-.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 29/5 binary64)) , 64
(-.f64 #s(literal 13/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(-.f64 #s(literal 31/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(+.f64 #s(literal 17/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) , 64
(+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 64
(/.f64 (-.f64 z0 z1) #s(literal 2 binary64)) , 63
(*.f64 (-.f64 z0 z1) z2) , 63
(*.f64 #s(literal -1/2 binary64) z0) , 61
(*.f64 z0 #s(literal 5 binary64)) , 60
(*.f64 (*.f64 z0 z1) z2) , 60
(*.f64 (/.f64 z0 z1) z2) , 58
(pow.f64 z0 #s(literal 2 binary64)) , 56
(*.f64 (cos.f64 z0) (cos.f64 z1)) , 56
(-.f64 (*.f64 z0 z0) #s(literal 1 binary64)) , 55
(/.f64 #s(literal 1/2 binary64) z0) , 54
(sqrt.f64 (+.f64 (*.f64 z0 z0) (*.f64 z1 z1))) , 53
(*.f64 z0 #s(literal 4 binary64)) , 53
(fabs.f32 (*.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) (*.f32 (floor.f32 z4) (floor.f32 z5)))) , 52
(*.f32 (-.f32 (*.f32 z0 z1) (*.f32 z2 z3)) (*.f32 (floor.f32 z4) (floor.f32 z5))) , 52
(pow.f64 (sin.f64 z0) #s(literal 2 binary64)) , 52
(fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 z0) z1) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 z2) z3) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 z0) z4) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 z2) z5) #s(literal 2 binary32)))) , 51
(sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5))))) , 51
(sin.f64 (/.f64 (-.f64 z0 z1) #s(literal 2 binary64))) , 51
(-.f64 #s(literal 1 binary64) (*.f64 z0 z0)) , 50
(exp.f64 (neg.f64 z0)) , 50
(/.f64 z0 #s(literal 2 binary64)) , 50
(/.f64 z0 (*.f64 z1 z1)) , 50
(*.f64 (neg.f64 z0) z0) , 49
(sin.f64 (*.f64 z0 #s(literal 30 binary64))) , 48
(*.f64 z0 #s(literal 3275911/10000000 binary64)) , 48
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) (-.f64 #s(literal 24/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 48
(-.f64 #s(literal 24/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 48
(pow.f64 (+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 48
(+.f64 #s(literal 131/20 binary64) (*.f64 z0 #s(literal 10 binary64))) , 48
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) (-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 48
(-.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 48
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 24/5 binary64)) , 48
(pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 48
(+.f64 #s(literal 11/4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 48
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) , 48
(+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64))) , 48
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)) , 48
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/10 binary64)) , 48
(pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 48
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 15/2 binary64)) , 48
(neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 48
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 5/2 binary64)) , 48
(neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 48
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64)) , 48
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) , 48
(*.f64 #s(literal -2 binary64) (*.f64 z0 z0)) , 47
(-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 4 binary64) z1) z2)) , 47
(*.f64 (cos.f64 z0) (sin.f64 z1)) , 45
(fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z3)) (*.f32 (*.f32 (floor.f32 z2) z4) (*.f32 (floor.f32 z0) z5)))) , 44
(-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z3)) (*.f32 (*.f32 (floor.f32 z2) z4) (*.f32 (floor.f32 z0) z5))) , 44
(-.f64 (*.f64 z0 #s(literal 3275911/10000000 binary64)) #s(literal -1 binary64)) , 44
(-.f64 z0 #s(literal 11/20 binary64)) , 44
(*.f32 (PI.f32) z0) , 44
(*.f64 (/.f64 z0 z1) z0) , 44
(+.f64 (+.f64 z0 z1) z2) , 43
(/.f64 #s(literal 2 binary64) z0) , 43
(/.f64 z0 (-.f64 z1 z2)) , 42
(/.f64 #s(literal 1 binary64) (fabs.f64 z0)) , 41
(sqrt.f64 (-.f64 z0 #s(literal -1 binary64))) , 41
(cos.f64 (-.f64 z0 z1)) , 41
(*.f64 (cos.f64 z0) z1) , 40
(cos.f64 (*.f64 (/.f64 z0 #s(literal 180 binary64)) (PI.f64))) , 40
(*.f64 (sin.f64 z0) (sin.f64 z1)) , 40
(*.f64 #s(literal 1/6 binary64) z0) , 39
(sqrt.f64 (-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 4 binary64) z1) z2))) , 38
(*.f64 z0 (PI.f64)) , 38
(pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) #s(literal 2 binary64)) , 37
(-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 11/5 binary64)) , 37
(sqrt.f64 (/.f64 #s(literal 1 binary64) z0)) , 37
(*.f64 (atan2.f64 z0 z1) z2) , 37
(*.f64 (PI.f64) (/.f64 z0 #s(literal 180 binary64))) , 37
(*.f64 (sin.f64 z0) z1) , 37
(+.f64 (*.f64 z0 z0) #s(literal 1 binary64)) , 37
(*.f32 (*.f32 (floor.f32 z0) (floor.f32 z1)) (-.f32 (*.f32 z2 z3) (*.f32 z4 z5))) , 36
(*.f64 (pow.f64 z0 #s(literal 4 binary64)) #s(literal 9 binary64)) , 36
(*.f64 (sin.f64 (*.f64 z0 #s(literal 30 binary64))) (cos.f64 (*.f64 z1 #s(literal 30 binary64)))) , 36
(cos.f64 (*.f64 z0 #s(literal 30 binary64))) , 36
(*.f64 (+.f64 z0 z1) z2) , 36
(pow.f64 z0 #s(literal 6 binary64)) , 36
(*.f64 (log.f64 z0) z1) , 36
(*.f64 z0-scale z1-scale) , 36
(*.f64 z0 (sin.f64 z1)) , 36
(*.f64 (-.f64 (*.f64 z0 z1) (*.f64 z2 z3)) z4) , 35
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 97/20 binary64)) #s(literal 2 binary64)) , 35
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 97/20 binary64)) , 35
(*.f64 #s(literal -1/4 binary64) z0) , 35
(*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64)) , 35
(*.f64 (*.f64 z0 z0) (*.f64 z0 z0)) , 35
(*.f64 (*.f64 z0 z0) z0) , 34
(fmax.f32 (+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z4 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z5 (floor.f32 z3)) #s(literal 2 binary32)))) , 33
(*.f64 (*.f64 #s(literal 3 binary64) z0) z0) , 33
(*.f32 #s(literal 2 binary32) z0) , 33
(pow.f64 (log.f64 z0) #s(literal 2 binary64)) , 33
(sin.f64 (*.f64 (/.f64 z0 #s(literal 180 binary64)) (PI.f64))) , 33
(/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))) (fabs.f32 (*.f32 (-.f32 (*.f32 z5 z1) (*.f32 z4 z3)) (*.f32 (floor.f32 z0) (floor.f32 z2))))) , 32
(-.f64 (*.f64 (pow.f64 z0 #s(literal 4 binary64)) #s(literal 9 binary64)) (pow.f64 z1 #s(literal 4 binary64))) , 32
(neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 32
(+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) , 32
(-.f64 #s(literal 2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/20 binary64)) #s(literal 2 binary64)) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/20 binary64)) , 32
(+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 37/5 binary64)) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 5 binary64)) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 3/2 binary64)) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64)) , 32
(+.f64 #s(literal 36/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(-.f64 #s(literal 1/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(+.f64 #s(literal 999999/10000000 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/10 binary64)) , 32
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 33/10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 32
(*.f64 z0 #s(literal 122859/12500 binary64)) , 32
(*.f64 z0 #s(literal 184289/100000 binary64)) , 32
(*.f64 z0 #s(literal 98503/10000 binary64)) , 32
(*.f64 z0 #s(literal 8619/5000 binary64)) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/10 binary64)) , 32
(-.f64 #s(literal 57/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 34/5 binary64)) , 32
(+.f64 #s(literal 27/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(-.f64 #s(literal 67/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(neg.f64 (+.f64 #s(literal 23/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 32
(+.f64 #s(literal 23/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(neg.f64 (+.f64 #s(literal 5/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 32
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 31/5 binary64)) , 32
(*.f64 z0 #s(literal 8 binary64)) , 32
(neg.f64 (+.f64 #s(literal 61/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 32
(+.f64 #s(literal 61/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(-.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 33/2 binary64)) (+.f64 #s(literal 41/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 32
(+.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) , 32
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 32
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 32
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 32
(+.f64 (pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 32
(pow.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 32
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 32
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 32
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 32
(fmax.f64 (neg.f64 (+.f64 #s(literal 3 binary64) (*.f64 z0 #s(literal 10 binary64)))) (*.f64 z0 #s(literal 10 binary64))) , 32
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 32
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 32
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 32
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 32
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) #s(literal 2 binary64)) , 32
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 32
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 32
(fmax.f64 (fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 32
(fmax.f64 (-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) , 32
(-.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 32
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 32
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 32
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 32
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) #s(literal 2 binary64)) , 32
(fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 32
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 32
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 32
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 32
(-.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64))) , 32
(fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 32
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 32
(sqrt.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 32
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 32
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) , 32
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 32
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 32
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 32
(*.f32 (-.f32 #s(literal 1 binary32) z0) z1) , 32
(log.f64 (sqrt.f64 (+.f64 (*.f64 z0 z0) (*.f64 z1 z1)))) , 32
(*.f64 (sin.f64 z0) (cos.f64 z1)) , 31
(-.f64 z0 #s(literal 11/40 binary64)) , 31
(*.f64 (*.f64 #s(literal 1/180 binary64) (PI.f64)) z0) , 31
(*.f64 (+.f64 z0 z1) (-.f64 z0 z1)) , 31
(pow.f64 (*.f64 z0 (cos.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) , 31
(*.f64 z0 (cos.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) , 31
(/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z5)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z0) z4))))) , 30
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 28/5 binary64)) #s(literal 2 binary64)) , 30
(*.f64 z0 (-.f64 z1 z2)) , 30
(-.f64 z0 #s(literal 1/2 binary64)) , 29
(pow.f64 (/.f64 z0 z1) #s(literal 2 binary64)) , 29
(*.f64 z0 #s(literal 1/2 binary64)) , 29
(/.f64 (-.f64 z0 z1) z2) , 29
(-.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) , 28
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 7 binary64)) , 28
(sqrt.f64 (+.f64 z0 #s(literal 1 binary64))) , 28
(*.f32 z0 (PI.f32)) , 28
(>=.f64 z0 #s(literal 0 binary64)) , 28
(/.f64 #s(literal -1 binary64) z0) , 28
(*.f64 (/.f64 z0 z1) (/.f64 z0 z1)) , 28
(*.f64 (*.f64 z0 z0) #s(literal 5 binary64)) , 27
(/.f32 #s(literal 1 binary32) z0) , 27
(pow.f64 z0 #s(literal 5 binary64)) , 27
(*.f64 (*.f64 #s(literal 3 binary64) z0) z1) , 27
(/.f64 (/.f64 z0 z1) z1) , 27
(/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 z0) z1) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 z2) z3) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 z0) z4) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 z2) z5) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 z0) (floor.f32 z2)) (-.f32 (*.f32 z4 z3) (*.f32 z5 z1)))) , 26
(-.f64 (*.f64 z0 z0) (*.f64 z1 (*.f64 z2 #s(literal 3 binary64)))) , 26
(*.f64 z0 (*.f64 z1 #s(literal 3 binary64))) , 26
(-.f64 #s(literal 1 binary64) (*.f64 (*.f64 z0 z0) #s(literal 5 binary64))) , 26
(sqrt.f64 (/.f64 z0 z1)) , 26
(+.f64 (*.f64 z0 z1) z2) , 26
(-.f64 z0 #s(literal 1/3 binary64)) , 26
(*.f32 (*.f32 (-.f32 #s(literal 1 binary32) z0) z1) z0) , 26
(asin.f64 (-.f64 #s(literal 1 binary64) z0)) , 26
(-.f64 (*.f64 z0 z0) (*.f64 z1 (*.f64 z2 #s(literal 4 binary64)))) , 26
(*.f64 z0 (*.f64 z1 #s(literal 4 binary64))) , 26
(sin.f64 (*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64))) , 26
(-.f64 #s(literal 1 binary64) (/.f64 z0 z1)) , 26
(-.f64 (sqrt.f64 (+.f64 z0 #s(literal 1 binary64))) (sqrt.f64 z0)) , 25
(+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) z0)) , 25
(log.f64 (neg.f64 z0)) , 25
(/.f32 #s(literal 1 binary32) (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))))) , 24
(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 z0 z0) #s(literal 5 binary64))) (-.f64 (*.f64 z0 z0) #s(literal 1 binary64))) , 24
(*.f64 (fabs.f64 z0) (fabs.f64 z0)) , 24
(*.f64 (-.f64 z0 #s(literal -1 binary64)) z0) , 24
(*.f64 #s(literal 1 binary64) (cos.f64 z0)) , 24
(*.f32 #s(literal 1/4 binary32) z0) , 23
(asin.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 z0 z0) #s(literal 5 binary64))) (-.f64 (*.f64 z0 z0) #s(literal 1 binary64)))) , 23
(*.f64 (-.f64 #s(literal 1 binary64) z0) z1) , 23
(/.f32 z0 (-.f32 #s(literal 1 binary32) z0)) , 23
(+.f32 (-.f32 #s(literal 1 binary32) z0) (*.f32 z0 z1)) , 23
(*.f64 z0 (/.f64 z1 z2)) , 23
(pow.f64 (*.f64 z0 z1) #s(literal 2 binary64)) , 23
(*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) z0)) , 23
(pow.f64 (*.f64 z0 (sin.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) #s(literal 2 binary64)) , 23
(*.f64 z0 (sin.f64 (*.f64 (/.f64 z1 #s(literal 180 binary64)) (PI.f64)))) , 23
(-.f64 (pow.f64 z0 #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) z1) z2)) , 22
(-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 3 binary64) z1) z2)) , 22
(/.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 2 binary64)) , 22
(/.f64 z0 (neg.f64 z1)) , 22
(*.f64 (*.f64 z0 #s(literal 4 binary64)) z1) , 22
(pow.f64 (sin.f64 (*.f64 (*.f64 (PI.f64) z0) #s(literal 1/180 binary64))) #s(literal 2 binary64)) , 22
(*.f64 (sqrt.f64 #s(literal 2 binary64)) z0) , 22
(-.f32 (*.f32 z0 z0) #s(literal 1 binary32)) , 21
(*.f64 #s(literal -1/6 binary64) z0) , 21
(-.f64 (*.f64 z0 z0) (*.f64 z1 z2)) , 21
(*.f64 #s(literal 2 binary64) (*.f64 z0 z0)) , 21
(cos.f64 (/.f64 z0 #s(literal 2 binary64))) , 21
(acos.f64 (/.f64 (neg.f64 z0) z1)) , 20
(sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))))) , 20
(/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5)))) , 20
(>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))) (fabs.f32 (*.f32 (-.f32 (*.f32 z5 z1) (*.f32 z4 z3)) (*.f32 (floor.f32 z0) (floor.f32 z2))))) (floor.f32 z6)) , 20
(>.f32 (/.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z0) z1)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z2) z3))) (+.f32 (*.f32 (*.f32 (floor.f32 z0) z4) (*.f32 (floor.f32 z0) z4)) (*.f32 (*.f32 (floor.f32 z2) z5) (*.f32 (floor.f32 z2) z5)))) (fabs.f32 (-.f32 (*.f32 (*.f32 (floor.f32 z0) z1) (*.f32 (floor.f32 z2) z5)) (*.f32 (*.f32 (floor.f32 z2) z3) (*.f32 (floor.f32 z0) z4))))) (floor.f32 z6)) , 20
(/.f64 (tan.f64 z0) z1) , 20
(pow.f64 (-.f64 z0 #s(literal 11/40 binary64)) #s(literal 2 binary64)) , 20
(sqrt.f32 (/.f32 z0 (-.f32 #s(literal 1 binary32) z0))) , 20
(*.f32 (*.f32 #s(literal 2 binary32) (PI.f32)) z0) , 20
(*.f32 (*.f32 z0 #s(literal 2 binary32)) (PI.f32)) , 20
(*.f32 z0 #s(literal 2 binary32)) , 20
(sqrt.f64 (*.f64 z0 z1)) , 20
(-.f64 (*.f64 z0 z0) (*.f64 z1 z1)) , 20
(-.f64 (/.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) , 20
(*.f64 (*.f64 z0 z1) #s(literal 4 binary64)) , 20
(cos.f64 (*.f64 #s(literal -1/180 binary64) (*.f64 (PI.f64) z0))) , 20
(log.f64 (-.f64 z0 #s(literal -1 binary64))) , 19
(sqrt.f64 (-.f64 (*.f64 z0 z0) (*.f64 (*.f64 #s(literal 3 binary64) z1) z2))) , 19
(*.f64 z0 #s(literal 27 binary64)) , 19
(*.f64 (*.f64 (cos.f64 z0) (cos.f64 z1)) (sin.f64 (/.f64 (-.f64 z2 z3) #s(literal 2 binary64)))) , 19
(*.f64 #s(literal 0 binary64) (sin.f64 z0)) , 19
(+.f64 (sqrt.f64 z0) (sqrt.f64 (-.f64 z0 #s(literal -1 binary64)))) , 19
(+.f64 (+.f64 z0 z1) (*.f64 #s(literal 2 binary64) z2)) , 19
(+.f64 (*.f64 #s(literal 2 binary64) z0) z1) , 19
(sin.f64 (-.f64 z0 z1)) , 19
(-.f64 z0 (*.f64 z1 z2)) , 19
(*.f64 (-.f64 z0 #s(literal 1 binary64)) z1) , 19
(*.f64 (*.f64 z0 z0) #s(literal 2 binary64)) , 19
(-.f64 (*.f64 #s(literal 1/6 binary64) z0) #s(literal -1/2 binary64)) , 19
(*.f64 (*.f64 z0 z0) #s(literal 1/2 binary64)) , 19
(*.f64 z0 (/.f64 z0 z1)) , 19
(>.f32 (/.f32 (fmax.f32 (-.f32 (pow.f32 (*.f32 (floor.f32 z0) z1) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 z2) z3) #s(literal 2 binary32))) (-.f32 (pow.f32 (*.f32 (floor.f32 z0) z4) #s(literal 2 binary32)) (pow.f32 (*.f32 (floor.f32 z2) z5) #s(literal 2 binary32)))) (*.f32 (*.f32 (floor.f32 z0) (floor.f32 z2)) (-.f32 (*.f32 z4 z3) (*.f32 z5 z1)))) (floor.f32 z6)) , 18
(*.f32 (sqrt.f32 (/.f32 #s(literal 1 binary32) (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5))))) (fabs.f32 (*.f32 (-.f32 (*.f32 z5 z1) (*.f32 z4 z3)) (*.f32 (floor.f32 z0) (floor.f32 z2))))) , 18
(*.f64 (*.f64 z0 #s(literal 27 binary64)) z1) , 18
(sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 2 binary64))) , 18
(*.f64 z0 (-.f64 (*.f64 z1 z2) (*.f64 z3 z4))) , 18
(*.f64 (sqrt.f64 z0) z1) , 18
(/.f64 (-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) z0) z0) (*.f64 #s(literal 2 binary64) z1)) z0) (+.f64 (*.f64 z0 z0) #s(literal 1 binary64))) , 18
(-.f64 (+.f64 (*.f64 (*.f64 #s(literal 3 binary64) z0) z0) (*.f64 #s(literal 2 binary64) z1)) z0) , 18
(+.f64 (*.f64 (*.f64 #s(literal 3 binary64) z0) z0) (*.f64 #s(literal 2 binary64) z1)) , 18
(pow.f64 z0 #s(literal 8 binary64)) , 18
(*.f64 (*.f64 z0 z0) #s(literal 1/6 binary64)) , 18
(*.f64 (neg.f64 z0) (/.f64 z1 z2)) , 18
(*.f64 (*.f64 z0 z1) z0) , 18
(*.f64 #s(literal 1/180 binary64) (*.f64 z0 (PI.f64))) , 18
(cos.f64 (+.f64 z0 z1)) , 18
(pow.f64 (tan.f64 z0) #s(literal 2 binary64)) , 18
(sin.f64 (/.f64 z0 #s(literal 2 binary64))) , 18
(/.f32 (sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5)))) (floor.f32 z6)) , 17
(sqrt.f32 (fmax.f32 (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z1) z1) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z3) z3)) (+.f32 (*.f32 (*.f32 (pow.f32 (floor.f32 z0) #s(literal 2 binary32)) z4) z4) (*.f32 (*.f32 (pow.f32 (floor.f32 z2) #s(literal 2 binary32)) z5) z5)))) , 17
(-.f64 (sin.f64 z0) (/.f64 (sin.f64 z1) #s(literal 16 binary64))) , 17
(/.f64 (sin.f64 z0) #s(literal 16 binary64)) , 17
(log.f64 (/.f64 z0 z1)) , 17
(/.f64 z0 (-.f64 z0 #s(literal -1 binary64))) , 17
(+.f32 #s(literal 1 binary32) z0) , 17
(*.f32 #s(literal 314159265359/50000000000 binary32) z0) , 17
(sqrt.f64 (-.f64 (*.f64 z0 z0) (*.f64 z1 z2))) , 17
(sin.f64 (*.f64 (PI.f64) (/.f64 z0 #s(literal 180 binary64)))) , 17
(sqrt.f32 (fmax.f32 (+.f32 (pow.f32 (*.f32 z0 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z2 (floor.f32 z3)) #s(literal 2 binary32))) (+.f32 (pow.f32 (*.f32 z4 (floor.f32 z1)) #s(literal 2 binary32)) (pow.f32 (*.f32 z5 (floor.f32 z3)) #s(literal 2 binary32))))) , 16
(*.f32 (*.f32 (*.f32 z0 (floor.f32 z1)) z2) (floor.f32 z3)) , 16
(*.f32 (*.f32 z0 (floor.f32 z1)) z2) , 16
(-.f32 (*.f32 #s(literal 1/4 binary32) z0) #s(literal -1/3 binary32)) , 16
(sqrt.f64 (-.f64 (*.f64 z0 z0) (*.f64 z1 (*.f64 z2 #s(literal 3 binary64))))) , 16
(*.f64 (*.f64 (*.f64 (cos.f64 z0) (cos.f64 z1)) (sin.f64 (/.f64 (-.f64 z2 z3) #s(literal 2 binary64)))) (sin.f64 (/.f64 (-.f64 z2 z3) #s(literal 2 binary64)))) , 16
(pow.f64 (sin.f64 (/.f64 (-.f64 z0 z1) #s(literal 2 binary64))) #s(literal 2 binary64)) , 16
(/.f64 #s(literal 3764081837873279/25000000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 8 binary64))) , 16
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 8 binary64)) , 16
(/.f64 #s(literal 2496092394504893/250000000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 7 binary64))) , 16
(/.f64 #s(literal -3464277381643003/25000000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 6 binary64))) , 16
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 6 binary64)) , 16
(/.f64 #s(literal 2501468655737381/200000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 5 binary64))) , 16
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 5 binary64)) , 16
(/.f64 #s(literal -883075145810703/5000000000000 binary64) (+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 4 binary64))) , 16
(+.f64 (-.f64 (-.f64 #s(literal 1 binary64) z0) #s(literal 1 binary64)) #s(literal 4 binary64)) , 16
(/.f64 (PI.f64) (sin.f64 (*.f64 (PI.f64) z0))) , 16
(sin.f64 (*.f64 (PI.f64) z0)) , 16
(-.f64 (sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 1/2 binary64)) , 16
(sqrt.f64 (+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 16
(+.f64 (+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 11/4 binary64) (*.f64 z2 #s(literal 10 binary64))) #s(literal 2 binary64))) , 16
(+.f64 (pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 63/20 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 16
(pow.f64 (-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) #s(literal 2 binary64)) , 16
(-.f64 (*.f64 z0 #s(literal 5 binary64)) #s(literal 61/20 binary64)) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 16
(neg.f64 (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (+.f64 #s(literal 11/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 37/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 13/2 binary64)) (+.f64 #s(literal 13/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) (-.f64 #s(literal 29/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 16
(-.f64 #s(literal 29/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 16
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 16/5 binary64))) , 16
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 16/5 binary64)) , 16
(fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7 binary64)) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 16
(neg.f64 (+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 16
(+.f64 #s(literal 19/5 binary64) (*.f64 z0 #s(literal 10 binary64))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) (-.f64 #s(literal 23/10 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 16
(-.f64 #s(literal 23/10 binary64) (*.f64 z0 #s(literal 10 binary64))) , 16
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 31/10 binary64))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 39/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 9 binary64)) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7 binary64))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 23/10 binary64))) , 16
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 23/10 binary64)) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 7 binary64))) (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 7 binary64))) , 16
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) (neg.f64 (+.f64 #s(literal 17/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 9 binary64))) , 16
(neg.f64 (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))))) , 16
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)))) , 16
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 16
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 16
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)))) , 16
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64))) , 16
(pow.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 7/2 binary64)) #s(literal 2 binary64)) , 16
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 5 binary64))) , 16
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 16
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 16
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64)))) , 16
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 2 binary64))) , 16
(pow.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 2 binary64)) , 16
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64)))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) (neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(neg.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 3/2 binary64))) , 16
(fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 16
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 16
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 16
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 16
(pow.f64 (+.f64 #s(literal 11/2 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 16
(+.f64 #s(literal 11/2 binary64) (*.f64 z0 #s(literal 10 binary64))) , 16
(fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64)))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(neg.f64 (+.f64 #s(literal 7 binary64) (*.f64 z0 #s(literal 10 binary64)))) , 16
(+.f64 #s(literal 7 binary64) (*.f64 z0 #s(literal 10 binary64))) , 16
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 4 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 16
(fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) (-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64))) , 16
(-.f64 (sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) #s(literal 3/2 binary64)) , 16
(sqrt.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64)))) , 16
(+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z1 #s(literal 10 binary64))) #s(literal 2 binary64))) , 16
(pow.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))) #s(literal 2 binary64)) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (neg.f64 (+.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/2 binary64)))) , 16
(neg.f64 (+.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64))) , 16
(+.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 21/2 binary64)) , 16
(fmax.f64 (fmax.f64 (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 15/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 6 binary64))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 22/5 binary64))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 22/5 binary64))) , 16
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 22/5 binary64)) , 16
(fmax.f64 (fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))) , 16
(fmax.f64 (neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) (+.f64 #s(literal 3 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 16
(neg.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64))))))) , 16
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 43/10 binary64))) (-.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 43/10 binary64))) , 16
(-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 43/10 binary64)) , 16
(fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmin.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 11/2 binary64)) (neg.f64 (+.f64 #s(literal 9 binary64) (*.f64 z0 #s(literal 10 binary64))))) (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 21/5 binary64))) (-.f64 #s(literal 33/10 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 17/5 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 18/5 binary64) (*.f64 z2 #s(literal 10 binary64))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 81/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 89/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 143/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 159/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 26/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 6 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 17/4 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 101/20 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 33/10 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 41/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 7/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 11/5 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (+.f64 #s(literal 9/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 5/4 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 1/2 binary64))) (neg.f64 (+.f64 #s(literal 3/10 binary64) (*.f64 z0 #s(literal 10 binary64))))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 12/5 binary64))) (-.f64 #s(literal 8/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z1 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z1 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z2 #s(literal 10 binary64)))) (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z0 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z2 #s(literal 10 binary64)))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) (neg.f64 (+.f64 #s(literal 7/2 binary64) (*.f64 z1 #s(literal 10 binary64))))) , 16
(fmax.f64 (fmax.f64 (fmax.f64 (fmax.f64 (-.f64 (*.f64 z0 #s(literal 10 binary64)) #s(literal 41/10 binary64)) (-.f64 #s(literal 17/5 binary64) (*.f64 z0 #s(literal 10 binary64)))) (+.f64 #s(literal 5/2 binary64) (*.f64 z1 #s(literal 10 binary64)))) (-.f64 (*.f64 z2 #s(literal 10 binary64)) #s(literal 67/20 binary64))) (-.f64 #s(literal 51/20 binary64) (*.f64 z2 #s(literal 10 binary64)))) , 16
