((-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)))
((expm1.f64 (*.f64 x a)) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))) #s(literal 1 binary64)))
(#s(approx (- (exp (* x a)) 1) (*.f64 a x)) #s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (/.f64 x a)) a) a))) #s(literal 1 binary64)))
(#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x)) #s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a) x)) #s(approx (- (exp (* a x)) 1) (fma.f64 x a (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x))) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) a) x) a #s(literal 1 binary64))) #s(literal 1 binary64)))
((/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64))))
((*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x)) #s(approx (/ (exp x) (- (exp x) 1)) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))
((/.f64 (exp.f64 x) (expm1.f64 x)) #s(approx (/ (exp x) (- (exp x) 1)) #s(approx (- (/ 1 x) -1/2) #s(literal 1/2 binary64))) #s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (- (/ 1 x) -1/2)) (*.f64 #s(literal 1/12 binary64) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (- (/ 1 x) -1/2) #s(literal 1/2 binary64)))) (/.f64 (exp.f64 x) (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))))
(#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/720 binary64) (fma.f64 #s(literal 1/12 binary64) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))) (*.f64 #s(approx (/ (exp x) (- (exp (+ x x)) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal -31/30240 binary64) (*.f64 x x) #s(literal 7/720 binary64)) (*.f64 x x) #s(literal -1/12 binary64)) x (/.f64 #s(literal 1/2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (+.f64 (sinh.f64 x) (cosh.f64 x)) (expm1.f64 x)))
((/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (/.f64 (neg.f64 c) (*.f64 b b)) b (/.f64 b a)))) (/.f64 (+.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a)))
((+.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (neg (+ (* (/ (neg c) (* b b)) b) (/ b a))) (/.f64 c b))) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(approx (* (+ (* (/ (/ (* c a) b) b) -4) 1) b) (*.f64 #s(literal -4 binary64) (*.f64 a (/.f64 c b)))) b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))
((/.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (neg.f64 b))) #s(approx (/ (+ (sqrt (+ (* -4 (* c a)) (* b b))) (neg b)) (* 2 a)) (/.f64 (neg.f64 c) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (neg (+ (* (/ (neg c) (* b b)) b) (/ b a))) (/.f64 (-.f64 (/.f64 (*.f64 c a) b) b) a))) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (sqrt (+ (* -4 (* c a)) (* b b))) (neg b)) (* 2 a)) (/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)))
((/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a)))
((-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(approx (+ (* (/ c b) a) (neg b)) (-.f64 (/.f64 (*.f64 a c) b) b)) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b))) (/.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)))
(#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 b a) #s(literal -1 binary64) (/.f64 c b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(approx (+ (* (/ c b) a) (neg b)) (*.f64 (-.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 1 binary64)) b)) a)) (-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(approx (/ (sqrt (+ (* -4 (* a c)) (* b b))) (* 2 a)) (*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 b)))) (/.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (*.f64 a (*.f64 #s(literal 2 binary64) a)))))
((/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a))
((/.f64 (-.f64 (neg.f64 b_2) (*.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))) (/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (*.f64 a a)) (/.f64 (-.f64 (pow.f64 (neg.f64 b_2) #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) #s(literal 3/2 binary64))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)))
((/.f64 (-.f64 (neg.f64 b_2) (pow.f64 (pow.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))) (/.f64 #s(approx (- (* (neg b_2) a) (* a (sqrt (+ (* (neg a) c) (* b_2 b_2))))) (*.f64 b_2 (-.f64 (neg.f64 a) a))) (*.f64 a a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)) (/.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) a))
((/.f64 (/.f64 #s(approx (- (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (*.f64 a c)) (+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(approx (+ (* (/ 1/2 b_2) (/ c b_2)) (/ -2 a)) (/.f64 #s(literal -2 binary64) a)) b_2)) (/.f64 #s(approx (- (neg b_2) (* (pow (+ (* (neg a) c) (* b_2 b_2)) 1/4) (pow (+ (* (neg a) c) (* b_2 b_2)) 1/4))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 a c) b_2))) a) (/.f64 (/.f64 (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))))) a) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))))))
((/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a))
((+.f64 (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a) (/.f64 (neg.f64 b_2) a)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b_2))) (/.f64 (/.f64 (-.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) a))
((/.f64 (fma.f64 (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2)) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (neg b_2)) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b_2))) (/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a) (/.f64 (/.f64 #s(approx (- (+ (* (neg a) c) (* b_2 b_2)) (* b_2 b_2)) (*.f64 (neg.f64 a) c)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 b_2))) a))
((/.f64 (/.f64 (fma.f64 (neg.f64 b_2) a (*.f64 (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))) a)) a) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(approx (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a)) (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64))) (neg.f64 b_2))) (+.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a)) (/.f64 (fma.f64 (neg.f64 b_2) a (*.f64 (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))) a)) (*.f64 a a)))
((-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))
(#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))))
(#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))))
((/.f64 (-.f64 x (-.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (+.f64 (*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))))
((-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (sqrt.f64 x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (*.f64 x x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)) #s(literal -1/2 binary64))) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (sqrt.f64 (*.f64 x (-.f64 x #s(literal -1 binary64))))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (- (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt x)) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (neg (sqrt (/ 1 x)))))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (*.f64 #s(literal 3/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x))) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) #s(approx (sqrt (* x (- x -1))) x)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x))) #s(literal 1/2 binary64))) #s(approx (/ (- (sqrt (- x -1)) (sqrt x)) (sqrt (* x (- x -1)))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))))
(#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (- (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt x)) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (neg (sqrt (/ 1 x)))))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (/.f64 #s(literal 3/4 binary64) (sqrt.f64 x)) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x))) (/.f64 (-.f64 #s(approx (sqrt (- x -1)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(approx (sqrt (* x (- x -1))) x)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (- (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (sqrt x)) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (neg (sqrt (/ 1 x)))))) (* x x)) (/.f64 #s(approx (* -1/2 (- (/ (* 3/4 (sqrt (/ 1 x))) x) (sqrt (/ 1 x)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) x)) #s(literal 1/2 binary64))) (/.f64 (-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) (sqrt.f64 #s(approx (* x (- x -1)) (fma.f64 x x x)))))
((-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)))
((/.f64 (-.f64 x (-.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal -1 binary64)) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)))
(#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)) (/.f64 (*.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) x) #s(literal -1 binary64)) (*.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) x) (fma.f64 x x x))))
((/.f64 #s(approx (* (+ (- x -1) x) -1) (*.f64 #s(literal -2 binary64) x)) (*.f64 (+.f64 (-.f64 x #s(literal -1 binary64)) x) (fma.f64 x x x))))
((+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))
(#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x)) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) #s(approx (/ 1 (- x 1)) #s(literal -1 binary64))) (+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (-.f64 x #s(literal -1 binary64)))) (-.f64 x #s(literal -1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (-.f64 x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))))
(#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) x) (*.f64 x x))) (+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) #s(literal -1 binary64))) (+.f64 (/.f64 #s(approx (/ (- x (* 2 (- x -1))) (- x -1)) (-.f64 x #s(literal 2 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (*.f64 x x)) x)) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))))
(#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) x) x) x)) (+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) #s(approx (/ 1 (- x 1)) #s(literal -1 binary64))) #s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(approx (- (/ 2 (* x x)) -2) #s(literal 2 binary64)) x) (*.f64 x x))) (+.f64 (/.f64 (/.f64 #s(approx (- x (* 2 (- x -1))) (-.f64 #s(literal -2 binary64) x)) (-.f64 x #s(literal -1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (/.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 x #s(literal -1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal -1 binary64))) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))
((-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x)))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x)) #s(literal 1/3 binary64))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (cbrt.f64 x)) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1/3 binary64))) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal 1/6 binary64)) (pow.f64 x #s(literal 1/6 binary64)))) (-.f64 (cbrt.f64 (exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)))) (cbrt.f64 x)))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal -1 binary64) x)) (cbrt.f64 (neg.f64 x))) #s(literal 1/3 binary64))) (-.f64 #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) #s(literal 1/3 binary64))) (fma.f64 (pow.f64 x #s(literal 1/6 binary64)) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))) (cbrt.f64 (-.f64 x #s(literal -1 binary64)))) (/.f64 (-.f64 (-.f64 x #s(literal -1 binary64)) x) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (-.f64 x #s(literal -1 binary64))) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (-.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))))
(#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 (cbrt.f64 (/.f64 #s(literal 1 binary64) x)) (cbrt.f64 x)) #s(literal 1/3 binary64))) #s(approx (+ (* (pow x 1/6) (neg (pow x 1/6))) (cbrt (- x -1))) (*.f64 #s(literal 0 binary64) x)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (cbrt.f64 x)) #s(literal 1/3 binary64)) (cbrt.f64 x))) (fma.f64 (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (pow.f64 (-.f64 x #s(literal -1 binary64)) #s(literal 1/6 binary64)) (*.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 1/6 binary64)))) (neg.f64 (pow.f64 x #s(literal 1/6 binary64))))))
((-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)))
(#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 #s(literal -1/2 binary64) N) (*.f64 N N))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) (*.f64 N N))) (log.f64 (/.f64 (-.f64 N #s(literal -1 binary64)) N)))
((log1p.f64 (pow.f64 N #s(literal -1 binary64))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 N (*.f64 N N))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(approx (+ (/ -1/4 N) 1/3) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)) #s(approx (- (log (+ N 1)) (log N)) (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) N) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1/2 binary64) N) (*.f64 N N)))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) N) (neg.f64 N)) (*.f64 N N))))
((log1p.f64 (/.f64 #s(literal 1 binary64) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (/.f64 (-.f64 N #s(literal 1/2 binary64)) N) N)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (* (/ (- (/ (+ 1/3 (/ -1/4 N)) N) 1/2) N) N) (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64))) (neg.f64 N)) (*.f64 N N))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (/ (- (/ (+ 1/3 (/ -1/4 N)) N) 1/2) N) N) (neg N)) (fma.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) N N)) (*.f64 N N))) (-.f64 (log1p.f64 (pow.f64 N #s(literal -3 binary64))) (log1p.f64 (-.f64 (pow.f64 N #s(literal -2 binary64)) (pow.f64 N #s(literal -1 binary64))))))
((+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))
(#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x)) #s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x)) (+.f64 #s(approx (- (exp x) 2) #s(literal -1 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))
(#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x x (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64))))) (+.f64 #s(approx (- (exp x) 2) #s(literal -1 binary64)) #s(approx (exp (neg x)) #s(literal 1 binary64))) (+.f64 #s(approx (- (exp x) 2) #s(literal -1 binary64)) #s(approx (exp (neg x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (*.f64 (*.f64 x x) (neg.f64 x)) (neg.f64 x)) #s(literal 1/12 binary64) (*.f64 x x))))
(#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) x x) x)) (+.f64 #s(approx (- (exp x) 2) #s(literal -1 binary64)) #s(approx (exp (neg x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/6 x) 1/2) (*.f64 #s(literal -1/6 binary64) x)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))) (+.f64 #s(approx (- (exp x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(approx (exp (neg x)) #s(literal 1 binary64))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 x (*.f64 x (*.f64 #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 x x))) #s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (neg.f64 x) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))) (*.f64 x x))))
((-.f64 (exp.f64 x) #s(literal 1 binary64)))
((expm1.f64 x) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) #s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))
(#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x (*.f64 #s(literal 1 binary64) x))) (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) #s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (*.f64 #s(literal 1 binary64) x))))
(#s(approx (- (exp x) 1) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)) #s(approx (- (exp x) 1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))
((-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64)))
(#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64))) #s(literal 1 binary64)))
(#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n)))
((-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x))))
(#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x)) #s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)) #s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)))
(#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2/945 binary64)) (/.f64 #s(literal -1/45 binary64) (*.f64 x x))) (pow.f64 x #s(literal 5 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) x) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64)))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2 binary64)) #s(literal 1/9 binary64)) (*.f64 (*.f64 x x) #s(literal 1/135 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (fma.f64 x #s(literal 1/3 binary64) (*.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) x))))
(#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)) (/.f64 x (-.f64 (*.f64 (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(approx (* (- (pow (* 1/45 (* x x)) 2) 1/9) x) (*.f64 #s(literal -1/9 binary64) x)) (-.f64 (*.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 1/3 binary64)))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) #s(approx (- (+ (pow (* 1/45 (* x x)) 2) 1/9) (* (* x x) 1/135)) #s(literal 1/9 binary64)))) #s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 #s(approx (- (+ (/ 1/3 (pow x 4)) 2/945) (/ -1/45 (* x x))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 5 binary64))))) #s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 (-.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 #s(literal 1/3 binary64) x (*.f64 #s(literal -1/45 binary64) (pow.f64 x #s(literal 3 binary64)))))))
((/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x))))
(#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64)) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))) (/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x))))
(#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x)) (/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x)))
((/.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (log1p.f64 x)))
((/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))
((/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))
((*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 x (cos.f64 x))) (*.f64 x x)) x) (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 x x) x)) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)) x))
((*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/720 binary64) x) x #s(literal -1/24 binary64)) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) x) (*.f64 x x)) (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 x x) (*.f64 x x))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (*.f64 x x))))
((/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (*.f64 (*.f64 (+.f64 b a) #s(literal 1/2 binary64)) (fma.f64 (*.f64 b a) b (*.f64 (*.f64 b a) a))) (*.f64 (*.f64 (*.f64 b a) a) b))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 #s(approx (- (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (* (* (+ b a) 1/2) (+ (* (* b a) b) (* (* b a) a))) (* (* (* b a) a) b))) #s(literal 0 binary64)) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 (/.f64 a b) #s(literal 1 binary64)) a)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 1/2 binary64)) (pow.f64 (+.f64 b a) #s(literal 1/2 binary64))) b) a)))
(#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) a) (/.f64 b a)) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 b a)) (sqrt.f64 (+.f64 b a))) b) a)))
((log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))
(#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)) #s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)))
(#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps))))
((sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))))
((sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))))
(#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (-.f64 x #s(literal -2 binary64)))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 #s(approx (/ (+ (* (+ (* 7/192 x) 3/16) x) 1/2) (sqrt 2)) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) x)) x (sqrt.f64 #s(literal 2 binary64)))))
(#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 (-.f64 #s(approx (exp x) (-.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(approx (+ (* 1/6 x) 1/2) (*.f64 #s(literal 1/6 binary64) x)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/.f64 (-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x) (sqrt.f64 #s(literal 2 binary64))))))
((-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))
(#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (+.f64 (-.f64 (neg.f64 (log1p.f64 x)) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n)) (log.f64 x)) (neg.f64 n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (exp.f64 (/.f64 (log1p.f64 x) n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))
(#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (+.f64 (/.f64 (-.f64 (neg.f64 (log1p.f64 x)) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n)) (neg.f64 n)) (/.f64 (log.f64 x) (neg.f64 n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 (/.f64 #s(literal 1 binary64) n) x))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 (-.f64 (/.f64 (/.f64 (neg.f64 (log.f64 x)) n) x) (/.f64 #s(literal 1 binary64) x)) (neg.f64 n)))) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n)))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (-.f64 (neg.f64 (log1p.f64 x)) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))))) n)) (neg.f64 n) (*.f64 (neg.f64 n) (log.f64 x))) (*.f64 (neg.f64 n) (neg.f64 n)))))
(#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (*.f64 (neg.f64 n) (+.f64 (-.f64 (neg.f64 (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1/6 binary64) n))) n)) (log.f64 x))) n) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 #s(literal 1 binary64) (*.f64 n x)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (exp (/ (log x) n)) (* n x)) (/.f64 (-.f64 (/.f64 (log.f64 x) (neg.f64 n)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (+ (* (- (neg (log (+ 1 x))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 3) (pow (log x) 3)) n) 1/6) (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2)))) n)) (neg n)) (* (neg n) (log x))) (* (neg n) (neg n))) (/.f64 (fma.f64 (neg.f64 (log.f64 x)) n (*.f64 (fma.f64 (/.f64 #s(literal -1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64))) n)) (*.f64 n n)))))
((-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))
((*.f64 (*.f64 (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) #s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) eps (cos.f64 x)) eps)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (-.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 x)) (-.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 x))) (*.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (-.f64 (*.f64 (sin.f64 eps) (cos.f64 x)) (sin.f64 x)))))))
((*.f64 (*.f64 (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (cos.f64 (*.f64 x #s(literal -1 binary64))) (cos.f64 (/.f64 eps #s(literal -2 binary64)))) (*.f64 (sin.f64 (*.f64 x #s(literal -1 binary64))) (sin.f64 (/.f64 eps #s(literal -2 binary64)))))) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) #s(literal 1 binary64)) eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 x eps)) x #s(literal 1 binary64))) eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) eps) (*.f64 x eps)) #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 (*.f64 #s(approx (sin (/ (+ 0 eps) 2)) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))))
((*.f64 (*.f64 (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (cos.f64 (*.f64 x #s(literal -1 binary64))) (cos.f64 (/.f64 eps #s(literal -2 binary64)))) #s(approx (* (sin (* x -1)) (sin (/ eps -2))) (*.f64 (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 #s(literal 1/48 binary64) eps) eps #s(literal -1/2 binary64))) eps)))) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) #s(approx (+ (* (* -1/2 (+ x eps)) x) 1) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))) eps)) #s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) eps) -1/2) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps))) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) eps) -1/2) (cos x)) #s(approx (+ (* (* -1/2 (+ x eps)) x) 1) (*.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64)) (*.f64 x x)))) eps)) #s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps)))
((-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))
(#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)) #s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) (-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (-.f64 (cos.f64 (+.f64 x eps)) (sin.f64 (+.f64 (/.f64 (PI.f64) #s(literal 2 binary64)) x))) (fma.f64 (/.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (*.f64 (cos.f64 (/.f64 (+.f64 (+.f64 eps x) x) #s(literal 2 binary64))) (cos.f64 (/.f64 (-.f64 (+.f64 eps x) x) #s(literal 2 binary64))))) (/.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))
((*.f64 (*.f64 (sin.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal 2 binary64))) (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(approx (+ (* (/ (cos (+ eps x)) 2) (/ (cos (+ eps x)) (* (cos (/ (+ (+ eps x) x) 2)) (cos (/ (- (+ eps x) x) 2))))) (/ (* (neg (cos x)) (cos x)) (+ (cos x) (cos (+ eps x))))) #s(literal 0 binary64)) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) eps) eps) #s(literal 1 binary64)) eps) x)))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) eps) (sin.f64 x)) eps)) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))) eps)))
((*.f64 (*.f64 (fma.f64 (sin.f64 (*.f64 x #s(literal 1 binary64))) (cos.f64 (/.f64 eps #s(literal -2 binary64))) (*.f64 (cos.f64 (*.f64 x #s(literal 1 binary64))) (sin.f64 (/.f64 eps #s(literal 2 binary64))))) (sin.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 2 binary64)))) #s(literal -2 binary64)) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps) (* (* (- (* (* 1/6 eps) eps) 1) eps) x)) (*.f64 (neg.f64 eps) x)))) #s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 #s(literal -1/2 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal 1 binary64))) #s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) eps) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))) #s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)))
((-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))
(#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (cos.f64 x))) (cos.f64 x)) eps eps)) (-.f64 (tan.f64 (+.f64 (+.f64 (PI.f64) x) eps)) (tan.f64 x)) (-.f64 (tan.f64 (+.f64 (+.f64 (+.f64 (PI.f64) x) (PI.f64)) eps)) (tan.f64 x)) (-.f64 (tan.f64 (+.f64 x eps)) #s(approx (tan x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))) (/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x)))
(#s(approx (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))) #s(approx (- (tan (+ x eps)) (tan x)) #s(approx (+ (* (/ (+ (* (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (sin x)) (/ (pow (sin x) 2) (cos x))) (cos x)) eps) eps) (fma.f64 (*.f64 eps eps) x eps))) #s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (+ (* (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (sin x)) (/ (pow (sin x) 2) (cos x))) (cos x)) (*.f64 (fma.f64 (fma.f64 (+.f64 eps (fma.f64 #s(literal 2/3 binary64) x (*.f64 eps #s(literal 1/3 binary64)))) x #s(literal 1 binary64)) x eps) x)) eps eps)) #s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (+ (* (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (sin x)) (/ (pow (sin x) 2) (cos x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 5/6 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) x #s(literal 1 binary64)) x eps) x)) (cos.f64 x)) eps eps)) (-.f64 (tan.f64 (+.f64 (+.f64 (+.f64 (+.f64 (PI.f64) x) (PI.f64)) (PI.f64)) eps)) (tan.f64 x)))
(#s(approx (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/.f64 (sin.f64 eps) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))) #s(approx (- (tan (+ x eps)) (tan x)) #s(approx (+ (* (/ (+ (* (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (sin x)) (/ (pow (sin x) 2) (cos x))) (cos x)) eps) eps) #s(approx (+ (* (* eps eps) x) eps) (*.f64 (*.f64 eps eps) x)))) #s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (-.f64 #s(approx (/ (+ (* (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) eps) eps) (sin x)) (/ (pow (sin x) 2) (cos x))) (cos x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps (fma.f64 #s(literal 2/3 binary64) x eps)) x #s(literal 1 binary64)) x eps) x)) #s(literal -1 binary64)) eps)) (-.f64 (tan.f64 (+.f64 #s(approx (+ (+ (+ (PI) x) (PI)) (PI)) (fma.f64 (PI.f64) #s(literal 3 binary64) x)) eps)) (tan.f64 x)) #s(approx (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (*.f64 (/.f64 (sin.f64 eps) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 x eps) x)))) #s(literal 2 binary64))))
((/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)))
((/.f64 (sin.f64 (/.f64 x #s(literal 2 binary64))) (cos.f64 (/.f64 x #s(literal 2 binary64)))) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (-.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) (sin.f64 x))))
(#s(approx (/ (- 1 (cos x)) (sin x)) (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) (-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (sin.f64 x))))
((/.f64 (sin.f64 x) (-.f64 (cos.f64 x) #s(literal -1 binary64))) #s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x x)) x (*.f64 #s(literal 1/2 binary64) x))) #s(approx (/ (- 1 (cos x)) (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/240 binary64) #s(literal 1/24 binary64)) x) x) x (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))) (/.f64 (-.f64 (sin.f64 x) (*.f64 (cos.f64 x) (sin.f64 x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))
((-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N)))
((atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))
((atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (fma.f64 (-.f64 (/.f64 (*.f64 N N) (+.f64 #s(literal -1 binary64) N)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) N))) N #s(literal 1 binary64))) (atan2.f64 (/.f64 (-.f64 (*.f64 N N) (*.f64 (+.f64 #s(literal -1 binary64) N) (+.f64 #s(literal -1 binary64) N))) (+.f64 N (+.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))
((atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) (-.f64 (+.f64 #s(literal 1 binary64) (*.f64 N N)) (neg.f64 N))) (atan2.f64 #s(approx (- (- N -1) N) #s(literal 1 binary64)) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))) #s(approx (atan2 (- (- N -1) N) (+ (* (- (/ (* N N) (+ -1 N)) (/ 1 (+ -1 N))) N) 1)) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (*.f64 (/.f64 N (-.f64 #s(literal 1 binary64) N)) N)) N #s(literal 1 binary64)))) (atan2.f64 (*.f64 (+.f64 (+.f64 #s(literal -1 binary64) N) N) (/.f64 (-.f64 (-.f64 N #s(literal -1 binary64)) N) (+.f64 (+.f64 #s(literal -1 binary64) N) N))) (fma.f64 (-.f64 (/.f64 (*.f64 N N) (+.f64 #s(literal -1 binary64) N)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) N))) N #s(literal 1 binary64))) #s(approx (atan2 (- (- N -1) N) (+ (* (- (/ (* N N) (+ -1 N)) (/ 1 (+ -1 N))) N) 1)) (atan2.f64 #s(literal 1 binary64) (-.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (-.f64 N #s(literal 1 binary64))) (-.f64 (/.f64 N (-.f64 N #s(literal 1 binary64))) #s(literal 1 binary64))))))
((/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))
(#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64)))) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64)) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64))) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -27/2800 binary64) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 1/2 binary64)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))
(#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))) #s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) (/.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))
(#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal -1/2 binary64)))) (/.f64 (*.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (*.f64 (fma.f64 (-.f64 eps (sin.f64 eps)) eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (fma.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))
